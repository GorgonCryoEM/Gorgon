PROJECT(Gorgon)

MARK_AS_ADVANCED(FORCE CMAKE_BACKWARDS_COMPATIBILITY)
MARK_AS_ADVANCED(CLEAR CMAKE_VERBOSE_MAKEFILE)
OPTION(CMAKE_VERBOSE_MAKEFILE "if all commands will be echoed to the console during the make" ON)
OPTION(ENABLE_PYTHON "enable boost python support" ON)

OPTION(ENABLE_FFTW2 "enable fftw 2 support" OFF)
OPTION(ENABLE_FFTW3 "enable fftw 3 support" ON)
OPTION(ENABLE_CUDA_FFT "enable cuda fftw support" OFF)
OPTION(ENABLE_FFTW_PLAN_CACHING "enable fftw caching" ON)
OPTION(ENABLE_NATIVE_FFT "enable native fft support" OFF)
OPTION(ENABLE_ACML_FFT "enable AMD Core Math Library fft support" OFF)
MARK_AS_ADVANCED(ENABLE_ACML_FFT)
OPTION(ENABLE_DJBFFT "enable djbfft support" OFF)
MARK_AS_ADVANCED(ENABLE_DJBFFT)


SET(GORGON_INSTALL_PREFIX $ENV{HOME}/Gorgon CACHE PATH "installation prefix")
SET(CMAKE_INSTALL_PREFIX ${GORGON_INSTALL_PREFIX} CACHE INTERNAL "installation prefix")
MARK_AS_ADVANCED(CLEAR GORGON_INSTALL_PREFIX)

SET(LIBRARY_OUTPUT_PATH ${GORGON_INSTALL_PREFIX}/lib CACHE PATH "output directory for building all libraries.")

IF(CMAKE_COMPILER_IS_GNUCXX)
    #SET(EMAN_CXX_FLAGS "-Wall -Werror" CACHE INTERNAL "EMAN CXX FLAGS")
    IF (ENABLE_DEBUG)
    	SET(EMAN_CXX_FLAGS "-g -Wall -W -Wconversion -Wcast-qual -Wwrite-strings" CACHE INTERNAL "EMAN CXX FLAGS")
	SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -g")
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -g")
    ELSE (ENABLE_DEBUG)
    	SET(EMAN_CXX_FLAGS "-Wall" CACHE INTERNAL "EMAN CXX FLAGS")
    ENDIF (ENABLE_DEBUG)
    SET(PLATFORMLIB "/usr/lib64" CACHE INTERNAL "lib64")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

SET(CMAKE_C_COMPILER ${CMAKE_CXX_COMPILER})
SET(CMAKE_ORIG_FLAGS ${CMAKE_CXX_FLAGS})
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${EMAN_CXX_FLAGS} ${OPT_FLAGS}")

MARK_AS_ADVANCED(CMAKE_C_FLAGS)
MARK_AS_ADVANCED(CMAKE_CXX_FLAGS)

INCLUDE(${CMAKE_ROOT}/Modules/CheckIncludeFiles.cmake)
INCLUDE(${CMAKE_ROOT}/Modules/CheckFunctionExists.cmake)
INCLUDE(${CMAKE_ROOT}/Modules/CheckTypeSize.cmake)

SET(INCLUDE_DIRS 
	${GORGON_SOURCE_DIR}
	${GORGON_SOURCE_DIR}/ExternalLibraries
	$ENV{HOME}/include 
	/usr/local/include
	/usr/local/cuda/include
	/usr/include 
	/sw/include
	/usr/X11R6/include
	${GLUT_INCLUDE_PATH}
	${GLU_INCLUDE_PATH}
	${GL_INCLUDE_PATH}
	)

SET(LIB_DIRS 
	$ENV{GORGONDIR}/lib 
	$ENV{HOME}/lib 
	${PLATFORMLIB} 
	/usr/local/lib
	/usr/local/cuda/lib
	/usr/lib64 
	/usr/lib 
	/sw/lib
	)

MACRO(CHECK_REQUIRED_LIB2 upper lower header lower2 header2)
    FIND_PATH(${upper}_INCLUDE_PATH ${header} $ENV{${upper}DIR}/include ${INCLUDE_DIRS})
    IF(${upper}_INCLUDE_PATH)
    ELSE (${upper}_INCLUDE_PATH)
		FIND_PATH(${upper}_INCLUDE_PATH ${header2} $ENV{${upper}DIR}/include ${INCLUDE_DIRS})
    ENDIF(${upper}_INCLUDE_PATH)
    
    IF(${upper}_INCLUDE_PATH)
		FIND_LIBRARY(${upper}_LIBRARY NAMES ${lower} ${lower2} PATHS $ENV{${upper}DIR}/lib ${LIB_DIRS})		
		IF(${upper}_LIBRARY)
		ELSE(${upper}_LIBRARY)
			MESSAGE(SEND_ERROR "ERROR: ${upper} not found. please install ${upper} first!")
		ENDIF(${upper}_LIBRARY)
    ELSE(${upper}_INCLUDE_PATH)
		MESSAGE(SEND_ERROR "ERROR: ${upper} not found. please install ${upper} first!")
    ENDIF(${upper}_INCLUDE_PATH)
ENDMACRO(CHECK_REQUIRED_LIB2)

MACRO(CHECK_REQUIRED_LIB upper lower header)
    CHECK_REQUIRED_LIB2(${upper} ${lower} ${header} "" "")
ENDMACRO(CHECK_REQUIRED_LIB)

CHECK_REQUIRED_LIB(GL GL GL/gl.h)
CHECK_REQUIRED_LIB(GLU GLU GL/glu.h)
CHECK_REQUIRED_LIB(GLUT glut GL/glut.h)
CHECK_REQUIRED_LIB(GLUT glext GL/glext.h)

INCLUDE_DIRECTORIES(. ${GORGON_SOURCE_DIR}
					${GORGON_SOURCE_DIR}/ExternalLibraries
					${GSL_INCLUDE_PATH} 
					${GSL_INCLUDE_PATH}/gsl 
					${INCLUDE_DIRS}	   
			) 

MACRO(CHECK_OPTIONAL_LIB upper lower header)
    FIND_PATH(${upper}_INCLUDE_PATH ${header} $ENV{${upper}DIR}/include ${INCLUDE_DIRS}) 
    
    IF(${upper}_INCLUDE_PATH)
        FIND_LIBRARY(${upper}_LIBRARY NAMES ${lower} PATHS $ENV{${upper}DIR}/lib ${LIB_DIRS})
		
        IF(${upper}_LIBRARY)
			ADD_DEFINITIONS(-DEM_${upper})
			INCLUDE_DIRECTORIES(${${upper}_INCLUDE_PATH})
        ELSE(${upper}_LIBRARY)    
			#MESSAGE("WARNING: ${upper} not found, ENABLE_${upper} is set back to OFF")
			OPTION(ENABLE_${upper} "if enable ${upper} support" OFF)
        ENDIF(${upper}_LIBRARY)
		
    ELSE(${upper}_INCLUDE_PATH)
		#MESSAGE("WARNING: ${upper} not found, ENABLE_${upper} is set back to OFF")
        OPTION(ENABLE_${upper} "if enable ${upper} support" OFF)
    ENDIF(${upper}_INCLUDE_PATH)
ENDMACRO(CHECK_OPTIONAL_LIB)

MACRO(CHECK_PYTHON)
	SET(PYTHON_FOUND FALSE)
	
	FOREACH(PYVER ${ARGV})
		IF(NOT PYTHON_FOUND)			
			FIND_PATH(PYTHON_INCLUDE_PATH Python.h
				$ENV{PYTHON_ROOT}/include/python${PYVER}
				/usr/local/include/python${PYVER}
				/usr/include/python${PYVER})
			
			FIND_LIBRARY(PYTHON_LIBRARY NAMES python${PYVER} PATHS
				$ENV{PYTHON_ROOT}/lib/python${PYVER}/config
				/usr/local/lib/python${PYVER}/config
				/usr/lib/python${PYVER}/config
				/usr/lib64/python${PYVER}/config
				$ENV{PYTHON_ROOT}/lib /usr/local/lib /usr/lib)
			
			IF(PYTHON_INCLUDE_PATH)
				IF(PYTHON_LIBRARY)
					SET(PYTHON_FOUND TRUE)
				ENDIF(PYTHON_LIBRARY)
			ENDIF(PYTHON_INCLUDE_PATH)
			
		ENDIF(NOT PYTHON_FOUND)
    ENDFOREACH(PYVER)
ENDMACRO(CHECK_PYTHON)
				   
IF(ENABLE_PYTHON)
	
   	CHECK_PYTHON($ENV{PYTHON_VERSION} 2.5 2.4 2.3 2.2)
    
    IF(PYTHON_INCLUDE_PATH)
		CHECK_OPTIONAL_LIB(BOOST boost_python boost/python.hpp)
		IF(BOOST_LIBRARY)
		ELSE(BOOST_LIBRARY)
	    	CHECK_OPTIONAL_LIB(BOOST boost_python-gcc boost/python.hpp)
		ENDIF(BOOST_LIBRARY)
		IF(BOOST_INCLUDE_PATH AND BOOST_LIBRARY)
		    SUBDIRS(Gorgon/src_cpp)
		ENDIF(BOOST_INCLUDE_PATH AND BOOST_LIBRARY)
	    ELSE(PYTHON_INCLUDE_PATH)
		MESSAGE("WARNING: Python.h not found, ENABLE_PYTHON is set back to OFF")
		OPTION(ENABLE_PYTHON "if enable boost python support" OFF)
    ENDIF(PYTHON_INCLUDE_PATH)
    
ENDIF(ENABLE_PYTHON)

IF(ENABLE_FFTW2)
    OPTION(ENABLE_NFFT "enable nfft support" OFF)
    OPTION(ENABLE_FFTW3 "enable fftw 3 support" OFF) 
    OPTION(ENABLE_CUDA_FFT "enable cuda fftw support" OFF)
    OPTION(ENABLE_NATIVE_FFT "enable native fft support" OFF)
    OPTION(ENABLE_ACML_FFT "enable AMD Core Math Library fft support" OFF)

	IF (WIN32)
		CHECK_REQUIRED_LIB2(FFTW2 FFTW2dll sfftw.h fftw fftw.h)
		CHECK_REQUIRED_LIB2(RFFTW2 RFFTW2dll srfftw.h rfftw rfftw.hx)
	ELSE (WIN32)
		CHECK_REQUIRED_LIB2(FFTW2 sfftw sfftw.h fftw fftw.h)
		CHECK_REQUIRED_LIB2(RFFTW2 srfftw srfftw.h rfftw rfftw.hx)
	ENDIF (WIN32)

	ADD_DEFINITIONS(-DFFTW2)
    SET(FFTW_LIBRARIES ${RFFTW2_LIBRARY} ${FFTW2_LIBRARY})
    SET(FFTW_INCLUDE_PATH ${FFTW2_INCLUDE_PATH})
    
    IF(ENABLE_NFFT)
    	CHECK_REQUIRED_LIB(FFTW2D fftw fftw.h)
    	CHECK_REQUIRED_LIB(NFFT nfft nfft.h)
    	ADD_DEFINITIONS(-DNFFT)
		INCLUDE_DIRECTORIES(${NFFT_INCLUDE_PATH}) 
    ENDIF(ENABLE_NFFT)
    SET(FFT_LIBRARIES ${FFTW_LIBRARIES})
ENDIF(ENABLE_FFTW2)

IF(ENABLE_FFTW3)
    OPTION(ENABLE_NFFT2 "enable nfft2 support" OFF)
    OPTION(ENABLE_FFTW2 "enable fftw 2 support" OFF) 
    OPTION(ENABLE_CUDA_FFT "enable cuda fftw support" OFF)
    OPTION(ENABLE_NATIVE_FFT "enable native fft support" OFF)
    OPTION(ENABLE_ACML_FFT "enable AMD Core Math Library fft support" OFF)
    
    CHECK_REQUIRED_LIB(FFTW3 fftw3f fftw3.h)
    ADD_DEFINITIONS(-DFFTW3)
    SET(FFTW_LIBRARIES ${FFTW3_LIBRARY})
    SET(FFTW_INCLUDE_PATH ${FFTW3_INCLUDE_PATH})
    
    IF(ENABLE_NFFT2)
    	CHECK_REQUIRED_LIB(FFTW3D fftw3 fftw3.h)
    	CHECK_REQUIRED_LIB(NFFT2 nfft nfft.h)
    	ADD_DEFINITIONS(-DNFFT2)
		INCLUDE_DIRECTORIES(${NFFT2_INCLUDE_PATH}) 
    ENDIF(ENABLE_NFFT2)
    SET(FFT_LIBRARIES ${FFTW_LIBRARIES})
ENDIF(ENABLE_FFTW3)

IF(ENABLE_FFTW_PLAN_CACHING)
	ADD_DEFINITIONS(-DFFTW_PLAN_CACHING)
ENDIF(ENABLE_FFTW_PLAN_CACHING)

IF(ENABLE_ACML_FFT)
	OPTION(ENABLE_FFTW2 "enable fftw 2 support" OFF) 
	OPTION(ENABLE_FFTW3 "enable fftw 3 support" OFF)
	OPTION(ENABLE_NATIVE_FFT "enable native fft support" OFF)
	
	CHECK_REQUIRED_LIB(ACML acml acml.h)
	FIND_LIBRARY(G2C_LIBRARY NAMES g2c PATHS
		/usr/lib64
		/usr/lib
		/usr/local/lib
		$ENV{HOME}/lib )
	ADD_DEFINITIONS(-DACML)
	SET(ACML_LIBRARIES ${ACML_LIBRARY})
    SET(ACML_INCLUDE_PATH ${ACML_INCLUDE_PATH})
    SET(FFT_LIBRARIES ${ACML_LIBRARIES})
ENDIF(ENABLE_ACML_FFT)
	
IF(ENABLE_NATIVE_FFT)
	ADD_DEFINITIONS(-DNATIVE_FFT)
	OPTION(ENABLE_FFTW2 "enable fftw 2 support" OFF)
	OPTION(ENABLE_FFTW3 "enable fftw 3 support" OFF)
	OPTION(ENABLE_ACML_FFT "enable AMD Core Math Library fft support" OFF)
ENDIF(ENABLE_NATIVE_FFT)

IF(ENABLE_DJBFFT)
	OPTION(ENABLE_NFFT2 "enable nfft2 support" OFF)
	CHECK_REQUIRED_LIB(DJBFFT fftc4.h fftr4.h)
	ADD_DEFINITIONS(-DDJBFFT)
	SET(DJBFFT_LIBRARIES ${DJBFFT_LIBRARY})
	SET(DJBFFT_INCLUDE_PATH ${DJBFFT_INCLUDE_PATH})
	SET(FFT_LIBRARIES ${DJBFFT_LIBRARIES})
ENDIF(ENABLE_DJBFFT)



IF (ENABLE_CUDA)
	INCLUDE(${CMAKE_SOURCE_DIR}/libEM/cuda/FindCUDA.cmake)
	CUDA_INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/libEM)
	CUDA_INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/libEM/sparx)
	INCLUDE_DIRECTORIES(${CUDA_TOOLKIT_INCLUDE})
	ADD_DEFINITIONS(-DEMAN2_USING_CUDA)
#	ADD_DEFINITIONS(-DEMAN2_USING_CUDA_MALLOC)
	subdirs(libEM/cuda)
	subdirs(libEM/sparx/cuda)
ENDIF (ENABLE_CUDA)

IF (ENABLE_CUDA_FFT)
	OPTION(ENABLE_FFTW2 "enable fftw 2 support" OFF)
	OPTION(ENABLE_FFTW3 "enable fftw 3 support" OFF)
	OPTION(ENABLE_ACML_FFT "enable AMD Core Math Library fft support" OFF)
	OPTION(ENABLE_NATIVE_FFT "enable native fft support" OFF)
	OPTION(ENABLE_NFFT2 "enable nfft2 support" OFF)
	ADD_DEFINITIONS(-DCUDA_FFT)
ENDIF(ENABLE_CUDA_FFT)


#SET(LIB_GORGON_SOURCE
#	Foundation/Foundation.cpp
#)

#ADD_LIBRARY(GORGON SHARED ${LIB_GORGON_SOURCE})
#TARGET_LINK_LIBRARIES(GORGON ${GL_LIBRARY} ${GLU_LIBRARY} ${GLUT_LIBRARY} m)

#INSTALL_TARGETS(/lib GORGON)


INCLUDE_DIRECTORIES( ${GORGON_SOURCE_DIR} ./ExternalLibraries ${BOOST_INCLUDE_PATH} ${PYTHON_INCLUDE_PATH} ${INCLUDE_DIRS} 
					${FFTW_INCLUDE_PATH}
					${DJBFFT_INCLUDE_PATH} 
					${ACML_INCLUDE_PATH}
) 



SET(LIB_GORGON_SOURCE
	Gorgon/src_cpp/LibPyGorgon.cpp
)


ADD_LIBRARY(pyGORGON SHARED Gorgon/src_cpp/LibPyGorgon.cpp)
TARGET_LINK_LIBRARIES(pyGORGON 
						${GL_LIBRARY} 
						${GLU_LIBRARY} 
						${GLUT_LIBRARY} 
						${BOOST_LIBRARY} 
						${PYTHON_LIBRARY}
						${FFT_LIBRARIES}
						m)

#ADD_EXECUTABLE(test test.cpp)
#TARGET_LINK_LIBRARIES(test GORGON)
#INSTALL_TARGETS($/ test)

INSTALL_TARGETS(/lib pyGORGON)
#INSTALL_FILES(/include "^.+\\.h$")



