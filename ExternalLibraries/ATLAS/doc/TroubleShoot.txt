********************************* CONFIG **************************************
If your "make config" fails, you probably need to point config at your
ANSI C compiler.  Simply type:
  make config CC=<ANSI C Compiler>
If you need to throw a flag to cause your compiler to assume ANSI C, include
this as well.  For instance, on an old HP systems I would:
   make config CC="cc -Aa"

******************************** INSTALL **************************************
Most problems occur during installation.  If you have built the library as
recommended in README.install, a complete log of the installation process
will have been kept in ATLAS/bin/<arch>/INSTALL_LOG (note that <arch> will
be replaced by the architecture name you selected during install, for instance
Linux_PII).  If an error occurred which prevented installation from completing,
this directory should contain a file ERROR.LOG, which provides some
information, and perhaps points to another log file where more details are
available.  Typical problems would be invalid compilers, compile flags, out of
disk space, etc.

The user should examine the indicated log files for error messages.  If install
does not point the user at a specific log file, do an ls -l, and examine
the newest file aside from ERROR.LOG & SUMMARY.LOG.

Under Unix, you may want to do
   fgrep -i error *
in your INSTALL_LOG directory to ensure there were no install errors.

If you are able to correct the problem (or it was a one-time thing, for instance
filesystem problems), you can restart the install.  To restart where you
left off, first edit your Make.<arch> file, and comment out ARCHDEF and MMDEF
macros (this will prevent ATLAS from overwriting your intermediate results
with the architectural defaults again), and then issue
   make install arch=<arch>
and the ATLAS install will continue where it left off before.  If you wish
to restart the install from scratch, the easiest method is to do a
   make killall arch=<arch>
followed by the above install (and possibly configure) command.  If you
restart from scratch, make sure that ARCHDEF and MMDEF are *not* commented
out, or ATLAS will not use architectural defaults.

If you are unable to diagnose the problem from these hints, the user should
check the ATLAS errata file at
   http://math-atlas.sourceforge.net/errata.html
This file contains info about any known bugs and their fixes, compiler errors
that effect ATLAS, etc.

If the problem is inadequate performance, the file
   ATLAS/bin/<arch>/INSTALL_LOG/SUMMARY.LOG
should be examined in detail.  Make sure that ATLAS detected the correct
level 1 cache size, number of registers, etc.

If after these steps you are unable to fix the problem, you can submit a
support request as discussed here:
   http://math-atlas.sourceforge.net/faq.html#help

Include a thorough description of your system, what problem you are
encountering, what you were doing when it happened, etc.  All questions and
bug reports should minimally include the Make.<arch> file you were using, and
the contents of your INSTALL_LOG directory.  If ATLAS's install detected the
error, and was not killed, it will have created a file containing all this
information in ATLAS/error_<arch>.tgz.  If it has not, you can create it
from your ATLAS/ directory with:
   make error_report arch=<arch>

MAKE SURE TO ATTATCH THIS ERROR REPORT WHEN REPORTING PROBLEMS!!!

******************************  LINKING  **************************************
If you have missing symbols on link make sure you are linking in all of the
libraries you need.  For instance, a code calling the Fortran77 interface
to the BLAS would need:
   -L$(MY_HOME)/ATLAS/lib/$(MY_ARCH)/ -lf77blas -latlas

The full LAPACK library created by merging ATLAS and netlib LAPACK requires
both C and Fortran77 interfaces, and thus that link line would be:
   -L$(MY_HOME)/ATLAS/lib/$(MY_ARCH)/ -llapack -lf77blas -lcblas -latlas

REMEMBER: Order *is* important, so -latlas -lcblas will *not* work.
