(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    569659,      12194]
NotebookOptionsPosition[    559519,      11873]
NotebookOutlinePosition[    559928,      11891]
CellTagsIndexPosition[    559885,      11888]
WindowFrame->Normal
ContainsDynamic->False*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Grayscale Skeletonization", "Title"],

Cell["Connectivity Functions, and Skeletonization", "Subtitle"],

Cell[TextData[StyleBox["Initializations",
 FontWeight->"Bold"]], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "rootPath", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "rootPath", " ", "=", " ", 
   "\"\<C:\\\\_WashU\\\\ssa1\\\\source\\\\GrayscaleSkeleton\\\\\>\""}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.398387709633*^9, 3.398387725028*^9}, {3.398387818031*^9,
   3.398387818158*^9}, {3.3984405071139064`*^9, 3.3984405113014064`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "gaussianRadius", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaussianRadius", " ", "=", " ", "4"}], ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getProteinSlice",
  FontWeight->"Bold"],
 "\nGets a slice from the protein data set"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getProteinSlice", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getProteinSlice", "[", "i_", "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"vol", ",", " ", "maxVal", ",", "minVal"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vol", " ", ":=", " ", 
       RowBox[{"Get", "[", 
        RowBox[{
        "rootPath", " ", "<>", " ", "\"\<data\\\\proteinVolume.nb\>\""}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"maxVal", " ", "=", " ", 
       RowBox[{"Max", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{
         "vol", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], "]"}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"minVal", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{
         "vol", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], "]"}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"Map", "[", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Round", "[", 
           FractionBox[
            RowBox[{
             RowBox[{"(", 
              RowBox[{"#", "-", "minVal"}], ")"}], " ", "*", "255.0"}], 
            RowBox[{"maxVal", "-", "minVal"}]], "]"}], "&"}], ",", " ", 
         RowBox[{
         "vol", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], ",", 
         " ", "1"}], "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getVolume",
  FontWeight->"Bold"],
 "\nGets a slice from the protein data set"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getVolume", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getVolume", "[", 
    RowBox[{
    "fileName_", ",", " ", "xRange_", ",", " ", "yRange_", ",", " ", 
     "zRange_"}], "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"vol", ",", " ", "maxVal", ",", "minVal"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vol", " ", ":=", " ", 
       RowBox[{"Get", "[", 
        RowBox[{
        "rootPath", " ", "<>", " ", "\"\<data\\\\\>\"", " ", "<>", " ", 
         "fileName"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"maxVal", " ", "=", " ", 
       RowBox[{"Max", "[", 
        RowBox[{"Flatten", "[", "vol", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"minVal", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{"Flatten", "[", "vol", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"Take", "[", 
        RowBox[{
         RowBox[{"Map", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Round", "[", 
             FractionBox[
              RowBox[{
               RowBox[{"(", 
                RowBox[{"#", "-", "minVal"}], ")"}], " ", "*", "255.0"}], 
              RowBox[{"maxVal", "-", "minVal"}]], "]"}], "&"}], ",", " ", 
           "vol", ",", " ", "1"}], "]"}], ",", " ", "xRange", ",", " ", 
         "yRange", ",", " ", "zRange"}], "]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getImage",
  FontWeight->"Bold"],
 "\nGets a slice from a grayscale image"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getImage", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getImage", "[", "imgName_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "picture", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"picture", "=", 
       RowBox[{"Import", "[", 
        RowBox[{
        "rootPath", " ", "<>", " ", "\"\<\\\\data\\\\\>\"", " ", "<>", " ", 
         "imgName"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"picture", "\[LeftDoubleBracket]", 
        RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getInput",
  FontWeight->"Bold"],
 "\nGets the input \n\t1: Protein Sliced at 32\n\t2: Protein Sliced at 20\n\t\
3: Random.gif\n\t4: Blobs.gif\n\t5: Dragon.gif\n\t6: Letters.gif\n\t7: \
Rings.gif\n\t8: XWithGraySpots.gif\n\t9: Vessel\nAlso defines sliceSize which \
is a hash map of the pixels that span the image... The rest of the pixels \
make up a blank boundary which simplifies the calculations."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getInput", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getInput", "[", "i_", "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", " ", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"inputImage", ",", " ", "sliceSize"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Switch", "[", 
       RowBox[{"i", ",", "\[IndentingNewLine]", "1", ",", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Protein32.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "2", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Protein40.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "3", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Random.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "4", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Blobs.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "5", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Dragon.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "6", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Letters.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "7", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Rings.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "8", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<XWithGraySpots.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "9", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<vessel_1.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "10", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Basin.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "11", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Basin2.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "12", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<BinaryText.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "13", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<BinaryMan.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "14", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Question.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "101", ",", " ", 
        RowBox[{"inputImage", " ", "=", "  ", 
         RowBox[{
         "getImage", "[", "\"\<Protein32-surfaceRemoved.gif\>\"", "]"}]}], 
        ",", "\[IndentingNewLine]", "102", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<Protein40-surfaceRemoved.gif\>\"", "]"}]}], 
        ",", "\[IndentingNewLine]", "103", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<Random-surfaceRemoved.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "104", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Blobs-surfaceRemoved.gif\>\"", "]"}]}],
         ",", "\[IndentingNewLine]", "105", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<Dragon-surfaceRemoved.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "106", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<Letters-surfaceRemoved.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "107", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Rings-surfaceRemoved.gif\>\"", "]"}]}],
         ",", "\[IndentingNewLine]", "108", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<XWithGraySpots-surfaceRemoved.gif\>\"", 
          "]"}]}], ",", "\[IndentingNewLine]", "109", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<vessel_1-surfaceRemoved.gif\>\"", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"1", ",", "1"}], "]"}], " ", "=", " ", "1"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"2", ",", "1"}], "]"}], " ", "=", " ", "1"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"1", ",", "2"}], "]"}], " ", "=", " ", 
       RowBox[{
        RowBox[{"Dimensions", "[", "inputImage", "]"}], 
        "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"2", ",", "2"}], "]"}], " ", "=", " ", 
       RowBox[{
        RowBox[{"Dimensions", "[", "inputImage", "]"}], 
        "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"inputImage", " ", "=", " ", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"x", " ", ">=", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"1", ",", "1"}], "]"}]}], " ", ")"}], "&&", 
            RowBox[{"(", " ", 
             RowBox[{"x", " ", "<=", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"1", ",", "2"}], "]"}]}], " ", ")"}], " ", "&&", " ", 
            RowBox[{"(", 
             RowBox[{"y", " ", ">=", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"2", ",", "1"}], "]"}]}], ")"}], " ", "&&", " ", 
            RowBox[{"(", 
             RowBox[{"y", " ", "<=", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"2", ",", "2"}], "]"}]}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"inputImage", "\[LeftDoubleBracket]", 
            RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], ",", 
           "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"x", ",", " ", 
           RowBox[{"1", "-", "gaussianRadius"}], ",", " ", 
           RowBox[{
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}], "+", "gaussianRadius"}]}], "}"}],
          ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"y", ",", " ", 
           RowBox[{"1", "-", "gaussianRadius"}], ",", " ", 
           RowBox[{
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}], "+", "gaussianRadius"}]}], 
          "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]",
       
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"1", ",", "1"}], "]"}], " ", "=", " ", 
       RowBox[{"gaussianRadius", "+", "1"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"2", ",", "1"}], "]"}], " ", "=", " ", 
       RowBox[{"gaussianRadius", "+", "1"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"1", ",", "2"}], "]"}], " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Dimensions", "[", "inputImage", "]"}], 
         "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
        "gaussianRadius"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"2", ",", "2"}], "]"}], " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Dimensions", "[", "inputImage", "]"}], 
         "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "-", 
        "gaussianRadius"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"inputImage", ",", " ", "sliceSize"}], "}"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.399300820164509*^9, 3.399300848289689*^9}, {
  3.3993015453566504`*^9, 3.3993015523098197`*^9}, {3.399317356035963*^9, 
  3.3993173605828667`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "slice", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", "sliceSize", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"inputs", "=", 
   RowBox[{"getInput", "[", "1", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"slice", "=", 
   RowBox[{"inputs", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{"sliceSize", "=", 
   RowBox[{"inputs", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
   ";"}], "\n", 
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"GraphicsRow", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListContourPlot", "[", 
       RowBox[{"slice", ",", 
        RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
        RowBox[{"Contours", "\[Rule]", "10"}]}], "]"}], ",", 
      RowBox[{"ListDensityPlot", "[", 
       RowBox[{"slice", ",", 
        RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
        RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], "}"}], 
    "]"}], ",", 
   RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
  "]"}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", "inputs", "]"}], ";"}]}], "Input",
 CellChangeTimes->{
  3.39930001179996*^9, {3.3993008660554276`*^9, 3.3993008661960535`*^9}, {
   3.3993015585286093`*^9, 3.399301558637985*^9}, 3.3993022786738434`*^9, {
   3.3993035366506443`*^9, 3.3993035850728292`*^9}, {3.3993114115760436`*^9, 
   3.399311411638544*^9}, 3.3993116924997163`*^9}],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[GraphicsComplexBox[CompressedData["
1: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
OJqMm8c4WYyDw7gW9DtPP9H080q/jfS7Rj9I9DvCc/48V8tzbDw34vNPsE9+
/Yh1fs+PcVgCcx6J4zazT7RDxahU3+9FNs7ZT0+/7YZfve2G1fS3z5we/I+4
4H9+55tetfzn1t9eT+98x+DfUcQJf/jzLh78jzjhl5T/7PpKeszw33MjbniZ
f9F0rdcXMY54T/J9wsZNev1FVfl7hXHGU3rW8Gv/bS01fvuf67/9SzZ+sXHV
dtp8z/0H/23c1ZX7PMDygwfPQz6/lsrH8tU9v997B/irD7b7N+R5/f6es6Qp
/d7Vw3+NdMU1n3rlNZ+y8ZbZoT15Du9opPJrP3PP9Sc85+93H/gE4019XvZ5
aqcu3XMuH/fbTLdx3r587181O7af/ufHBv9O2LjwQO77VOOmft+2Pkf7Hfa9
N/V+bbnPxzZdL+/z0eT8lRtPfuXGvzvI8xfxXOx7l8/3MZ00fF3/XN9yPfv8
wXuV57PlXKYz285SHhB3bfB75P2ltF7+s/HzdnrY4WvnDl+75SzledtZPt/e
E/QBy++357Yj9aO57Vze/9FHzvn9dvTvbXneD9LrX9t2vXyf89vOF5cVLOK6
lMXjOfZ7ulo+tp3zz++mvQcOS5R9vrUbnZzTtrPUd3vvPSnvF247y3vbdX7z
4Oo732Tvqyff/4sd5+x6H9fvp+Gvnjs03crHbp7f6v2V286SbzfXfX7R2r0D
KVfvU77Ivt+u1ruOs9i9bWexf7vOeX3Y08/vOJfP57ZtZ0mbWu72tN5FvRe9
43qJ17Zdl+9j71ft3MqOc1lc5nad8/K1r+Up6r2Ujx1nybep9UPt3GMivnr5
tf4Uz3VQX+X7Qvd2flf/btzT5xTxEeW5H+n3DX/eGXu7rfX6Eyf0+9GfptmN
8G8nz+UcsT8n99KnXzk0vKtaX/fUvml7d4t+/2vXNJ+VR+2nvl3189Yl3wX7
+vvW1Q7u6nvf0Pq4n740rDZ3bnj5lPdQkfs/Se9/c0Xza726TduzT/T0+Wh7
N2PjR+UDfW9XVtUeJmnn/rmWvvGTH/2VhT9J6f9Ufucfz/uFWnrlKwb/xrfT
j5f/anLf+0X79oZhc/TKrreH5d+/pe3Rl/X6RSsXNfm8Vf28X6qnMttf7Kld
qqd/+tzwX0fTRvrvrxv8OzOlR5b/GvLcnr2n9boh9/1d/bzFhrd3Ynea3h7K
79tUexjtl7R3wfL89L6faOvzbXp7VT6367T8XNTWz7fv0dH61lA7l/T9bWm5
SN5eyPvT+6xs+33lOTXdDlt7Yem5wwLZ0/RGaz+a2k/a0fZrW9MdfV5Hmu7o
+2pq/p38c96xk36u/Hck6Wd2tD/WTJPDF7zazb/vSlfKc+NI0678/mpTfv/r
9fpr1b7d0nX7L+VV25OPHGraxfPr6Xvr6HsM+y9pL9344cG/7qGmPf19Df19
0X6Uv/8bPbU7Zl9s3iXsvTwH7c+8A/Z+xdax9PdctKt2YFvb3910dlnwIrV+
m7yn3fTqYfP2qo7+3l39+7brdh/Jt6u/o63vYU/tVEfbFbNDTbdL0g/Tcnl9
2H95nmq/36Hl/DFW7nc03dfn3NL2Luy95NtHebbnpOVnMey52Xe5r/2+g/z9
feJA+7vaTv6+vofz9LmfdyjP8d09fZ6Hev+upof6+zt6/yPv31r7YP1Q+R7H
3j5IuTrW+2xrCv2XTujvUH39hNqBpP34E/Ic3qLtxVtO6POL9kTeU9IU/lh9
ncPaR+tPgX08a7q1g9Y/sfGz9YcQJ9jvb/2F6NdLGv34/Hp+jvF2zt4PRXxA
fm/Xt8Gav4Du43a7/gT08G//l38x/Lcg9f10+52L8v7vCZbrd/X6xfSvXxv8
W7bfa+t62s86Y9FZytFZXk+z6wu9/mN2/X663z+++dLW/YIPPv8bk+/eP0uv
38/vP2C7v1x/4N9PyuW+f1553WUHzpLa71mS3/Nue+82r2b18ZFaD3ZzfUzb
0/lHyv1vhj74feV9nx6/99d/bfjvkfK5m3u4335+/YDtevu9X3nU+37qZf+y
pO3WPvIf+Pd92b8MLvwI9EE/UezkktsZ08tuyt8f4H72+8+W9CX2fFa0fQi2
5yXfbzk9f/DWPt/czfXB8/r3t5w7+B/PT9KznU+/8Lr7XHjd2XL/lyP/+4LL
3/El6FaeTsTzt+9jXJavK/T+1b08v803PCbeR/l17nO28y/+yA0X/cgNZ/v7
mC3/LTuLHT07PbM1/KR9v39ZjB8aLOmBlh/9Pl8MvbSTf4zriwN/H/L9D1wv
f/d3g6VeHOT5x2paf/T6M2xex+af6q5Lu1/P9YFdNF3qfw/5tbxcZZ8felne
b8P1g/Ly5Wv/y+B/lB9Jg8984r894In/puXtzN08/0Gw1G/og/L0z2d94Atn
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
r4n318T72sT7snXlmtavpvcTc93sRlOfZw26nWe2c8x16Pq9HtR0LpPb4/1K
vQuWemZs9sLO+Wz6dZK29HvZ9XYe2r5PC9fb+LiZhtMB3zxsuy7jvOC3Dpft
/j24rLdHsS/1at1PYHzdcJjz0dg/K/t3gsvE1jM+p+9nL/bFleX63vv59YP6
br+vfA6fDl3W9XD9oL2R+mH7AA9wv0MtF01nex6yzhLXy7rPobO8x+C8fG2h
fG2hPG2h/Ng+WLUrb7NzW3XXrR3Kr9d6+rIoBznr9zgRLOuhUV7KpK/ve3bL
r5O0re9nU9MWdNs/ac+/7bo8n46zPL9Onv92sK13f9vO/e/luq1/PDvKz6/p
9Xl5sfsd6L6qKD8vbb79Jc236/v7Ulwv683Ib/Prl0R5kn7dpvYXD/Lrrb9y
1abar9Dz+VG7/6H2UzZlfvo3Dl0v39NZwWX/4T8O8/w+zt9Cf6eF/ra2C7cG
S2r+GPT3XxL9ZtuHmF+v7dWnt9APaWH8Hu2MzCdFeRW7siXrS/+tgeu1ni1t
Oct9o1xKOdvycpfnt32JVt+28r9/sY3r7fyi1ceO6/K8g6UcJeQ3/wpRPst1
x6cGy369KI+d4cD8/sEfOnPYkgbvlvXc/Fxgn9Gg/ImdjvJpz9NY7PSWtOeV
gzy/lc/1KK+y/2pL5pe+FdcPp3cf95fBZbV5Ce5X2HxtlGcpZ1r/LzjMr18A
jx15fhlfhi7jy2AZXx45Sz4r722tj1VnqX/B+bjL9qOCB+W7LNdfa+k8Xt11
mccLlnm8OvI3df4uyr+dU5ByEf0yKRcN5N/U66I+yHVhd+X9BUu/187xbuJ+
+txe09J1k7Drsq4SLP3TFvJ31I5HfcnPXdj6TkvrZcfzy/uJ8zBPluFxfv9L
eV5G9zk+IMq79DOCpZ8R5VneU7C8p2B5Ty2xr5+x8tvO98n7uULbF9mS8e7T
D10vx7tHweXvmQ8ux7v3OszvN3bk9yu/5ydCL7eBXBMs7eORszz3YFkHjXWN
fPza0XWmYEnr+T7OpVquX4l50W9AH9Nxw7et/sS4U+YtgmXeoo78ZheiPJod
Hnb3X/zH0Y+QeYpgaS9bzvl8bsdT6be0Pc11W89pa7vQyXU/v67lwc+T6eef
CC7zX57y/IPyJfsD2rIP/26et9L3e5G+z8sOXS9/z+ODZb4nuCxfZwaX7eW/
BpfTH38bXCbXBpf28IVHzmKXgvPylGA/E+xnkv5VL+apZN9xcLme+M3gv/7F
rz74k+2Y9/qtcgNNcDld8b+CJdXxy7f1PNs74jyalJuwO2V79dzgsn06LVj6
U23cX+fXL4j3L+NZLc9zcZ20N8H/MCzfLwyW/TvBYheDJbX2NsqDjLuDy3xf
GbzPp9+x9/QnxTmdJ975sl+4cze43Mb+8EPc/0j7YZ106eDpXv+voZf75f9H
8NvvPZzxCb5xuF3pJbhfcaT1rKPP78h16Y8GS//oKM8/6I9KOY91ArE7to4f
6xjSHgXL9Ta+TrpfMtZJyssvreXX94PL+vFjMe9Zbu/5hWCZLwyW+cRg2deO
841mhy/Q8ve2luvl1+wGSzvbdpb2r53fz9Z3nhIs7WeSdcmd+PtN5w9alFcE
v+uFww1mwWVzdEtweXznmwmfd6jzjsFlvbdyfBHPax5h3drOv2j9vyOuL//+
4WDphwaXz+NFuP+gfNnvNbbnIfb2yK+X81JHef6xY88v/cXQpb8YLOXw2Fny
xbqW1NdgSbU8DJ5rud/hZ2PdTPa71HC9zYPGOeTyubxEP28+zj3L/FqwzK8F
l9VtsuFcvodfCpb+SrCkNn6P8ir2M0l/43dbfr3sI2whv84nf832MbRdFzsQ
LO1rx1n6iwn30/RaLR+vDz23j7pu+H3kH5RPOXcT5U/6GcGyTz24tMvfU3v/
mThnIc+L5y60PP9plD85d5d0fjLOUcj8ZLDMT/IcxrHfr0z/JfSy2/V+XP8K
ntM49n1yUs+OXZf9yMf59baOvL6dj++LKL/STtu5m1inlf5hDdc35L1ebPtQ
6q7L9wmWfRN15Ld5SDvH1XC9nP+7IvhvhuPJ7zaQvy326fnbOC8b5bMsJ4/V
7/fmtuvSnrRxvT7H87e9XTRdyndylvocLPvbEu53JJ/zsGA7lyXXqf16BMrX
hdvp28PllufFOZz73/GI7Tc8OljOZfGczrE8jwcHSz9Nv/9X4nqxH8Fle3YN
7jcoX/JetsUePObY9XL88ZBgmT8PlnHDcX4/Wz+7Zzttlv0ts4c76VFlfyz4
ybouaixpQ/dXav2/pO66zDfVcX0zlWbj1duyH3ar4brszwzO10uUp5v5/Qqw
z49HeSt/3/u3Uzms/N9tvz47x+r5tf94k5WvTq7bfo1r9Bzwa5LrMk+ScL3a
t9egPN26LXbxeTj3Ze3h26K8lO3Mt7Z1P3FcL/uJg2U/Mc+RHYs9+ILuK3vC
seuynzhY9hMf5/nHTug86ra2z6FL+xws/esTyK/r6KfrPrQnxD4PGZ/UnGV8
EpyNT+1c3XXgQXnaKO3ajvYXG65LfzFY+ovB0l9s4H4dPfcRLOXaWPshDf39
f9/x/Pm4wJ5/Qn7zn7aj+7+SXy/7vxLy6/uc2dH9m+GvQvZvBsv+zWDZvxn8
wXJe8ji/fwqWecxg6QcFl83QW4Kz9z3g/DyI7YsNvzCyThwsqe0P0fe9VM/1
K4Pz+eiujkcbzjIeDZbxaCO/n40732b2peO6jQuMZX08OO8X2vlTfb6376A+
d1Ffu6ivXdTXLupnF/Wzi/ppv+eE2u8dbe9Cl/YwWOwZ8+v692nBUl67+fpX
0c3Xv/wcq+0DMrZ9EV2d/wg/QLK/pYb85sfAztPXXZd5nuDy+9xdR37rr3R1
nbXhury/Rp7/i2T4axnU143//H28vsb7ln5IsJTbLvoHXfQPuugf2P21Pb8g
WOpNF/2DLvoHXfQP7Pto/+IhXfQPuugfdNE/6KJ/EOcuxP53cY4j9pXL+Kjr
LM/V7reB63U+4WZ7vxXo2h/5oyhPZXJd1/1u2PWyb76G/Da/2cV8fw/z/T3M
9/d0XrrhfLXu48jvb/MU+v1mEvQjHbfEOW8ZT3QxnulhPGP7BHU8/UmUr7d0
MZ7pYTzTw3jGvo+OR+6I8iXj+i7GNz2MbzT/K8DFsf8e8yNguozjjvPrx/Tc
0L3jnJfcJ87VyHmd4LKdfnovL2927ufWdeSvSHk5jPIl455gsS89tQ+xb1vK
aQX3q0k5uW9wmaTgstz8uu7z/Bz2efp+6ODyPZ3U8nVFDdc3dLxk557qrotd
r+fXp5TrD9rG/cz/qfLt8A9V7OXnLG093nVdL3km/Bwk/bxnwp9Con+FI53H
DS7XHbeCZV63p+v8kX94XOWi/xH8reGy6B/g/oP6UPYTfz7Ynrf8riO/vuxP
PfIozz8o/1Ju7f2HLv0bXG/jrct6mH+K8m3noqW9jHOr0l4Gi73DOcYxPVfy
ZtjTb1h5jXNt8n03kF/L9636+W+rQNf+9ye1fr4Gfv/G6n7u/5JsfGe62r/b
e7qOWXdd1jHr+fVWPo3Nn5zxtfAvNiiP5fjmen3+997L9bF93XcU/s1kXiH8
fYj/oJ7Wo33k1/L8b/AH0tf3+Wn4+RiU9x8bHmC/Pcq/7C/pyd9tfnVwffn3
hcM8/9gR/Cgc6bn/nvS/v4Lr+8Fl//sq6NYe3KDvp3qU69Z/uEft5XdDl3LJ
6+Pcq/Q345y0nVs1lvnNODebn1vb9XNrxmK/Ks7SD6w62z5w46w8FShP5jfA
2lf3+7yds1+3m5+3dL8xZu+Cpb9r9Smul34M8g/KZzmP+7PBMk+lz+twD5+3
n18/YLtertvX+bzgsj2+lz6fp+3jfgcyb/HEYJmHDj9x0h8Nlv5olH8pt8FS
bvX733yQf56vbwZLf9LOXR/69fL3wzz/oLzbuel8fWEX6wlRvqXc7GK9QMvb
3x/h/mta3ndhb/dgb/dgb82uaPm8xfwKbECv5uXCz8mZXnO/MPJ9q9Dr8vtf
oc/30zXoak+vtc+vuy7rb3Vcb/1Nqx+dXPd4NlFuZX5NP/+Z8HeU6P9oz3+P
2L3Qxe7hevOX8S79/Ut7uN++63K97i++KVjGE1Gepb+/q+sW+/g8PQ/zjSjf
Zbl4T/jVyj//EJ9/qPssd7XfcOjXS78hWOzsYX4/mw++Zxf7OcyPyFF+/aA/
IPZmD/1d0zfcT418/3XoFbUPVn43oFel3/RrweLfLspnmVwULPXUPq+K+2l/
9WnB5e/6YfNjXMP1DZn3elRwuY5wrz3tx9f9epkXDpbPbziX/b1XBct6bSP/
vNTJuUjeT5A05fpgvF6W/zP2dBy/7Xruj3Qvrx8F6seAs/pQoD5YPVjay/OP
afn88SiPMv4ILpMJfR7fOMjzXwkelF+xp1o+H3uY6za+NH+oHwtd+qtHuH5d
7UyURxnP7WF8H+e+y3Hrv0f5LPcNvDPKn8xL7OXt/1icQ5N2IMqjtANR3mQc
EGz++mTdp4b76fj+vfZ967l+abD0i6F7PDL1I3VWnHOR/RHB5XjtozgH4/ty
9nL/wq5r+Xzpnu9DyXRbx77a7EdyPZ9f3Pd1tCz/7eBC28G37bn/1Pz76Pe4
aU/XP0KXfLje6umt6tesFnZd2rM9XG/nyfTv7j9G+zk3BovdO3TO5z/28/Lq
339D/x7lMe/n637pFwTLc43yJ/VvP5+fdr9zcY5Ofnew5G+4n9p8PUL164Lz
9Yd9rD/sY/1hH+sPUb5s37us97ddl/X+Nq63fSnmV6qT677+YPvsk+sy37Wd
X38t2MYFD4ryJPvOgmVfmo3DdpFf7VZ1P/efZc/7tL38eisHD9J+8RdCt9+R
3/8Av+8g1yeC8/4qyl+B8ldE+RF7GecepX9h/fo4tyvj+GBZR45zlzL/jnOY
d4EH9knsx77uC49zcWI3g2VfeLCcF286y367Ju5v66P72Pd7kMpjJr8S+3bz
8x4H8Hdh99v25yMpdOufXmvnnreR3/ytRXkR+xgs41rlmT3k3/f3IetxoZf9
khcH5/77DuC/7yBP7fveErr0y3DdmI6PrtHyeUPouX07gH07yM9J27jtY8Fy
XSMv1zZ+GJTrbP9REeVH9l/xnNyB9Ld+pOHXi1/XYFmfaeB+dm7JykPTddkP
Eiz7QZp5/v4m7qf7hS+x8rEF3fan2/Nouy6/o43rkz+fbD3P/afrvsbn6+97
fkJ+86+ifDt0K29+7iy4rI8vDpZ+GuzS6Wgn/1M5ys5D2vt/Na63+1QjzfVD
HwdJeuh6bs/iXLWUywOd/zF7ZeVU97990uxqHXpT+/Vm3xquy/dv5NffBbZz
gDdG+ZLneODnNO166R83kX9L5wPj3JX0wzT/1+IcoKwDbSF/W+2rvq/xFnQ7
/2/zLLHvV+xSwvUWZ8DsBvwFW/v3xejXyzzTQd4e2u89DeMEs29fCXtXfo9X
2rg4rpdxMfIP2rHs3Jr1e159kLeng+tlvnw/z2926gZLoVv5tOd1yQHyH3p5
k+v1Od5j5fMQ1x+5Llz366Q+1f0+dk7cWK5vYpzf9HG+jKcbuH5T6y3PfR7m
53Ztn/cXm8i/peXoUMvvpuvyfjZxfUv7d3r917ag2/45K78t6B3XhW1fKvbl
2rqMrxfFvHIWP+JarPMM+ntl/ToKLuvXT+g8yr0xTzim4/BesMxnHvo8WH7/
U8ex5fuZi3Fu9rxP38Pn6fnQXwuW+Y/DvD7Y9VeCixiHiL+Afdw/7KiUW+jW
Tj7/MPc/XUQ5zst1w/sB+XjV+gFNHZ/p772kAV3Lz7VaHmpN16W9bubXr2w6
S3kPLm9/d7Cc19xylvFNK7+fr+fEuli5j+fOWJcTu3gof//lWPeQdryX5x/T
eeEbozyK/T8Ufzfvw/XD8jhc974tyqP49Q4u171ffAh/nbYvfTe/n9nrO6O8
il3DvOBLrX4g/6C8ij1F+X31oc/b5Z+n44SP6Pu9Afp/GodIudtHfrWT95jd
pN7wdl5+r9m3o3z/5IBl/3vTWfYHBcv99Nzw/FF+znqg2znr/PqWzrPZ+95y
XfqHwdI/3EJ+i09qccdb0Du5bvPhM9iXYHwt9mXZOv/ekc5bxrqxzFv28utt
3fZpWEf74SMZP9wV15fNwxuR3/0PY91i4kjtVqx7iN3azfObPX1SsOzTt30h
uH5Q/rJzPeYf/Sw757GH++9jHtvG20f5vGAR5fMHli9bR/9YsKTm3+JIxyfN
/PozNvPrLw2W+ZdgsdNbzqWZuXorv993t/L7uT8M7GPqmz3r5vqYrju/VL/v
9aG/IvPHqXxTcPn9Xh4s/Y5Yl5Xfu5tffwPY+3/HmJe172fxbI51/srqs+0T
azrL/spgmZ/edC7TK4Pz/onti9hylnMawXIeNDiPg4d9hTPK1+7k+uB9yDl2
3Zd07y7y276W49z/bxH7LsQ+6T6mi2OfhoxLsE/p2bt5/olgscvQLX7G8/V5
vGDPdflewbn/whO6n7npLO1EsLQPm85y3jJYzlsGZ+9jwNn7GHD2PsZiH648
d/09Mzu5Png/Ut7tnAr0wfuRfpuV/y7y93Rezvaphy77S3rO2fO3/BPBmT0b
i/gl9v0y+zXQ8/pxQsevVh8sPk3TWc7HBOf1QT/vys08/zc28+u9PuD5F3j+
Bfa9zyj7fGq8H6nPwTLuO5HvE7fvc9pOnn/w/mR/QbDMQ+o+4Jtxve3zfFqw
tGcn8n2nRbxfKcd2vfkrNt32W9jv63n+fF/Didze+fvZc5b+TLDcX+ev7jHW
8dlNJ/R3Wn06R+dbgyXd0nKo93/EpuvST9vMr78LPOjPyPr5CT2fsuW6nE/Z
yu/3MfB0K79fAbZzcl/U32fzTX69zZdGeZL6oM/3pdu4fkff+wktFzuuy/Pa
ya+3feDv0vL9LujWXt6inz/TRX7dp/iNKC9lcuUJ3/eb3w/XF3G9XGfjAa3P
1+wi/56Xh8weD/TMHg9Y+idW3+39BMt16m/j2cFlMnGO9lc2cX1L988Ey/6Z
c+AnRfVLg6U/A33Q35Xxt37fast16d8ES/+mlef38X2UJ2lPz8n98xdRnqTf
Gyz9Xvv+2/n1Y1qenhIsz9V+D6638nfBObBfUd7y59315y3rvnG9rPsif6Ht
VS/Kn8wfnKN2oYvrezqut+t1fbRquvbnLwsu9TPt++/m97N9ROta3i7bg67+
jb4bLP2WKF/Szll9NHtzUu1XsKTqL/KeKG9lclNweb/X6fs4fwv52+o3Nsqb
+I0Nln5isPiNPUftfMvvJ/v7Wrh/R/qdX454oeU0woeCy/HI72n5OtFG/iTx
lu6O+KJlt+fmYLEDUd7L+9wRLOPl4PJ5vQj29W+CpV5E+ZdxXLCM487xc7j5
99VzYn8V5b1M7Xl6/+qk2rGdPL/1p27S8nrQhW77bq389XLd9g3/aZRX6QdZ
edzF9XsoP1u6PnvSWdZvo7xJfTmp9dzs1cm8fSuifEl9Dy6TBfv9LVzf0XNn
wWWSguXcWZQP2f8fLMOkYNlnZM/P/AIEl+lBsNRvy6/nYJ8SXCb1YHkOll/P
Wf9asIzbo3zIuC9Y7Kpdb+cCTdfycHAyb3/9edk+9pN5e1pEeZHxyUk/N5Dn
382fh/nV+i7sy9Xx/uTcWLDMCwVLvynel+wHCpb9QCfhX+BcTROuT369vR8p
z3if78f7uOEk1l/O9fch47h4/na9PX+xJ/H8pT9iz3cH97N4mvE+7PtJverm
15tfoZ+P3yvvxe4HNj8ALwiWfkz8nkwvoFv5ekFwnh96AX2si++n44HLztXz
RBE/snwOXZ0PO+MsKee/v6vr6IuyX+BfNL7Bu8/yfYAW79H2CVq8R3muER9S
xjcR/1HKfcR/lPkVm59a9HiOFt+x/D7T9n2WdP+CfR+N33i1tu+XLGm8Op0/
fvojZf/5ou3rW5J4Yhfv6bylxnN8fcR7lPM+Ee9Rxhe2j0q/z+/39Pss6/Pp
6fc5W8+j7co53cctS5y8k7updMPXPDs99a2PfepbX7eb/uh3f27wfzk9+qzr
B/930/EfDx3WL0tc6Vt3NQ732al0o//13fTbnx06uD9b/dzvqX/95fSR4WVL
e+pPfzmVtznaS9eXNz47vW74MU/ZS48rP/hsjx9t8RIfWDoE3vN4ieU0+1f3
8niJK+YvcdnX7aRene3+LCS1+IQRr9DiDco4XuMLvkjHC6dpPL8/NXuo+e/Q
c2o3r4i9mdJ94quav2Hzryuy/+Xn9FzA9Sta7i0e3Eo67ZrqLU95yW66b/NX
r7319BUff8i5hRVdj7DytZKueuLSPR/5h900/9eP//qr3rqShrmaX91Nt6U/
/NHnfGZF5kV+Qucv5lZ8vGvfv/z7z+p+vLevaPwwiw++ouNWm+9d8X14Ur5W
tN3Q/aWvifiQ8twjPqR87griZqy6PzhJjSNen9Snnvzu+qrWp56co/3HVZ/f
ke+3Kn5a/qon+5B+YzX9TnvYkPdkH9I/rPr8p9TfVRn3PELXEx+9Ku3Mrq43
XrEqcRR/cVf8UHx4Vdqly3d13UDjQf6uvt+zVsUfxbvVPv38qqxD/O2u/P23
9VyL7d/t2++1fZb6e96j+8wujviI0l+P+IhSnhAfcSLiI0r7FvERpT+g93uz
njPeW/P1BhkHrPl6hIwD1tJttXe98MO/10s3lHEJ1+R8+wd6GodwLb35Vct/
fucXehovW/eV2/zylMbbm7NzKXpOoqXP6/lr8lweq8/rXWvy92fo8/qnNZ3P
Nf+mmv/Ttj61pv799vUc6prYhxftp0eW5071+gsO/Prye1m8ifMsHmLEx8vL
n8ZTe7P195R/hvHnIt6c2A/zK6H77l8e8eYkfze/30vsXPu696/ke/Gcqup7
eq7q1evp+PL33PHAV/XS67578c1nn7meHlbagZ78/Vj3TfetP7aePlPahV66
/kUnH3znn61L+s1eeurQ8HxpPb3spYN/995NP1z+W0+fvW3w78G76X3vHfyr
rfu5mPL9XLKerhj+O9pNZz5g8O9319MXPj/4N6gvZbz3D6/ruEzPH318Xcdl
uv74Mo2X93v7Ol+w7vEFpT2N+IKyLyziC8q+sYgXVzZf3133eHHlMeor1n1f
Sfl6HxTxBWXf4rralY6mG2pX1N/GP25o/Yj4cFI/Ij6ctA86/jvN9q3b/laN
V3dH0vZhQ+8T8eFkfiziw8lzgf5x6PfZQf6IHyflOOLHSf8i4seJ3evm+oUR
P07Ks8U/1HMhf2N+GjbEHvyk2YMN9Xdh9mBD7MHFZg82tD3raXu2oe2Z9pc2
N3x9XdqzDW3PetqebWh71tP2bMPjT8nviviEdq7f4k+V/aHHRXxC8fca8QnF
z9QG7GnEJ5Tz2hEfzq63eDSmS71Vv5+nW3zBtvulkHKhfk9PUz8El5j/Fo1X
d3NHU42PN5PEjm3r/U7Y/vyKxK3/9SRx7P+t4v6m5L1WpB/1zpR+Zdh9emwl
XfOpV17zqZuT9NOuqqSX/8LQ4WNKZ/zVLT/yV7dUxF79F8R3W4n4blJfIr5b
mT4r4ruV+X8b+a9D/r9H/q9H/tK/4ETEcyv9C25EPLehu8lnPD7iuZXhXl4Q
8dzkfex4PDYZp2n5f7bGB/z8jsdjk/fbza9vdPPrfzHit8nv6+L3dfH7uvh9
Xf99nbtOG/wf1I9hPKf7VtLQu+bzZnsSz6lXSRPf7f/Yd1MvzXznRT/9nRdV
Upk8sZfKbH9dSWW2y3vpgz82vLAi9u1lPemf3K8i/ZM39qR/0q2IPRy0z2X/
5AUV6ccP7H3pN+v6iuyfuLuXPlv69Yn4i3KuKOIvyvgj4i+W8ayfEfEXZR9G
BfWpgvpUQX2qoD5VUJ8qsM8V3w9qfppsfdP68eav1/qVUs/Uz+5p5jdG6+cl
Gm/u5ramGj9utaOp+WXQ+vpsPcd2vfoNvl7PuX1b/SB/u5peNWz/7pfSA8p/
VWn/Hpqk/etWU6P8l9KznzX8V01XDv+dl9JDh//eWE13/v+Df09O6Zb/NfxX
TZ3hv99M6TcvH/z7flX6ra/V+E1z+nvfbn5jq+nLw+PZHzC/sVVZr/14kn7v
H2n8vS9rfKZP6PM4Pfz6lePLWfVTt1uV8zgd9VN3eVXe94XqF+wGfT5XRTy2
spz/WcRjk8+JeGzl9fffya/f2Mmvf0zEY5P2YcfPaZf17wPan3qhnpO5fUf7
NdU0dGd7x+kRT21o9Z76sIinVta/bsRTK+vfxRFPTfpn3fx5vKmbP4+/7ubP
47auP4/ye/yy7cuvSn379331c1+VfP+0r37uq1JfP7ivfu6r8jlv3Zf+yuD7
luORV+6ncjnmJ6qoX1XUryrqVxX1q4r6VUX9qnq9snpmcc4slXbH/HvXfL+H
6bZ/Jh9HR3y0TfWXbH78HqX+lM2Pn/jva7kfP/O3aOdYpH/T1rTm/hntXIv0
09s+jpR62NG0pvWwo2lN62FH05rWw46mNa2HHU1rWg87mtbKXkh68n4a9p5f
9Hf6e0/s6zpZTcaRX9dzUXfU1B/7firDwr9Tn+f77VxQTf2z7+t8S03scLEv
5eSHah4fvZxf/qeax0e/suxI6z55O9+WaugP19AfrqE/XEN5UL8ce9pP2VM/
HKeb3bD4eBYPRPVLLC6d+ZmJtPydt0Yq8/ER70z6oRY3xzjimUm5i/hl8veW
69JvbWlqett1mc9oa2rXt/16madou18bmT/r+Dmp8jYXantwof6uV5vfeI1H
9wH1o/4B3Ud7l64n3FUXe/OFPbU3dWlvL7X2tq77H629rUt7W7P2ti725sHW
3ta1H7CfXvzTw55CPX160L175ef207B7d/+/qGu/YV/7DfU0Pkyu3dd+Rl37
GfvaL6mrP64DLZ919cd1oOWxjvmEOuYT6t7vlbTh/V7bhyf9Ujv/2ND17Jqm
em62VtdU/Q79hcUdtHKy6eVG2h+Lu9LQ59fStKHlvaVpI73/NQ8e/G9r2khX
DDvEj29r2kgXlhObbU0bqZze/Ie2pg2pH5/X+a8PWdwtW2/V7/ck8yeg369r
/gTU7+2s+dfQ+/2Q+ddoqP+V/fSScsLC7r/v9xf/K/upnL56eMSTE79NEU9O
ym8D820NvJ8m3k/EH5O06f7xbF+3+cezfd3yHi1+ocUV03Jv8cX6EZ/Mrsuv
j1TmrTfzeFtXR/wxmadv+bmHS7S9kLQp483ZtqbNNBgkDEYKbU319/2pxeFo
pnI48R9tTZviD+8nOpo2ZXz7cx1N9f5v6mja9Hh0Mu8U8eikHxPxxcQ+NP3c
rLSX+rv93GET72cT72cT72fT43nZc5P76PNPm25Xrd7IfELD43VJGvG88rhb
Fg/L4gJt+v57STc1rlfL43uV3+t8i+ui+2xv0P72DRZnpqPppvsLkdTOEez5
95dxVZzTk3bl0J+HxZ+S1OKVab/yxi2Pmyqp7nOwuKlf1N9l/hxXzI7U3a6U
192tdu3uLWlP2w1Nt8Qu/0lDU+3nLGm9Wtry82GSajytzU1Ntzy+maT2/dr+
/aTeWtwVi7uj7dE9+v0tPm9f41R9dF/jg+j9zjzw72PnQez7SLus5euMiN9l
LO20+e+y917zclB+rsUzuq6l54Hrmra0H6FxVt/U0vPAdU1b7g/T6rX5w5TU
6nXD67nsC4h4R2a37JywxXHLziVdZP5pWn5u0/oN5d/Ps3MU+h6usfgFLd9X
Ls+rhedl/Yqq9zMsHo71K8TOq3+JXtvjl0ja9vglkrY9noSkbY8nIWnb40lI
2vZ4EpK2dT+snfeK+EpWLxm3xvw72PeXddnk/SB57nHOVfzmHUr9/XJb/eZp
vKNfb6vfPI2HdN+2+1eS9rDt/pXsedg+/6zf9aAj/z4WL0bSjseLkbTj8WIk
1X7YksX/QLyhKyPekKQdjxcjacfjxUja8Xgxktq5Xdtv0vF6IWkH9YhxgnQf
wllJyvfjLN5JUv/ZHY9DIOscev/z9VzO23Re8KF6Dqdr50DNHnbUj9uhjtNt
3sL8vdk8o5XXiAst4/GU1+fHm1533eIvWdx3i79kcd8t7px8f/VT/go9T9gz
vzhqF+4V8XLkfUY8EkvN/3SZVpL7n7b72zlBSZOfU5N1SJ13f7md04t4HOXP
f4nFzzF/Wsn7O7Kunry/I/Y5eX/H5lnFXqj/zL+zfY3W30m6PtnScxuWv+35
5f1qemvyv1tq8QIstXgBlsr8/KHvq5R1Mz1X9a7k9lx+t8ZXuErHnYfbPo6Q
ccW2jzuk/2zxHKzfvu39Sqm35ndY7ejMdv77ztjG+9T7vV5/74MjPoeUs4jP
UaaXb7s9sM8XO33knyf7Xo7dD435ay/Hx2/Ydn/tpb382ra2M3WdL7B9zra+
Z/PWDZ/HNn8WNm8t5a7pfpqu1t9b/oxX6/2q+v0HemnWX6n7B1+5rfsSdH/h
DXr/LyT3fy/10+rrttSPP1d/vX9u78P821q8keD8fe/4PIvMH0S8BBnPRbwE
sRM7qO87ag+0f/T4nXxc9mDdt3OZloetHR+nib3Webrv6fO83ObhU/55Vt7P
0O/zgaRx+/Tz79J6damuc335SNKn7uj64ZGkOzu6fqjP6ydtn7Cei3mK3q+u
507qtm/42J+XxQ+QebaIHyDzauFPXlLNv6f25M22zmbzZDse/8TW3cQOWn9o
R/sB9TRcxqn/3Y72A6x/ZOvEDV83Fj+9DbnvH+r3eU1D7Z7Fd2hIufzSjrdT
Yo92cnt6/U5uT786eL/lvyNJv6PriHceabqTzi3nuY403UnPGS4g/9mRpvq8
rz7y3y/P8djXXWS+Us/JvV+f748f+7qN1H99H983//d2jk9/3+u1vL/eyl/4
l5f3aOts4Q9e6pWdQ6nqOm7X44HJOq6tu9c8f/k9n6L9iQ27X83vJ+tUdV23
6uo6VV3Xrbq6TlXXdauurlPVdd2qm84fTixUGrKf6ie7aW64LepZjSTTE930
rZ2zv7kzGF/8xhsf+BtvfFxX9kt9pSFx/57X9Xbfvo/0E+y8fdfPXUqq/uaf
fKSprnOdr/2t83Ud65tqX5+j+m0WX0bv/yG1Tzv6fP7oSNJH6Pe5UtufCV1H
fvKxprbPQd/vXlfGyQ871lTXye4d5+4sXoDMt0e8AJmPj3gBUk+6vs9C9uHZ
+9zwfRXyvDZ8X4W8Z133e1HX12HFnnZ9HVbW7fVc4HOrao+7Hi+uXK++suvx
4t5fdtjtXKf2p27v6rxEPQ2Lx3Ne09V5iXoqu5vX277Ounzup7s6L1GX9fTv
dXXfnM5jvb6buoPicfZzGmlYPB44+D6yj07ntT6l8SX+9VDTbnrCsGB+7lDT
brrzdfVvPf/pR5J+zeJLaP0dfP6J3//31nt7R5Le2E3ff8OFX/j42UeS/kk3
XffGv3z513/ySNLf0/zf0vzf0uf9WS0Pn9XncaOWrxv1975Ty9c79fm/VsvX
a7u6r/FY/VB05Rz9zrGkH+rK/MuZx5K+TuvzPx9r2tVx8LGmsc+p/Lyf0XXS
09a1fdR10eeua/vY0/ZR97k82/yf276Jnu+TkH0TPV+nl3V78ztg6/Y9X6eX
dXvdt7Ok7fWZdu5I15EO7FySxTfs+TqL7QMq55uOalp/bB+Qzdur//2/q2n9
6/n4suwH3bfn48ty/eDsno8vZXzS8/Fl2Z+63M6x2/n2Xt4vND8Ktp/tIvO/
Hv7ey+XPyw417en+oENNe+n5w3//cSjp83tpbvhvMH4s0yfp7/vYoT/P5z13
8O/6Q0krg98z/PeGQ0l/qufjH3t/Zb/tseo34LE9fc9H/r5LO/NTR5r2tFwc
efkY1KJBVTqS9Fm99F+GFfh/Hkl6Ti8tbr/hJ+4Y2MMyfYTue3nZkaT30ef5
Qj0H/EJ93svHmkZ8AulfhL92sV/2+9U/9hfVX//91nX+Tv1evH1d9wnZvlTb
h6Tl5csbGn+up/PIFZ1Xtn1huq+h39N56IrOS/fUz3NV57t6sn5xS1XGDXfa
87Z1LfOfb/7pehg/6e95ga2bWPmxdRPEE7B9a+av3c51ml/hgS77xsJfu6TB
kn/f88tz3PfnKd/f5sdUv1v3W96t8Tw+ofGiP9FL/98dDzy+/JmHkv6b7kN9
3KHuF+ul711889mv2zqU9C9tX6qtr+nv/6aW52/q9zO/HZ/V7/NhHe9/WL/P
O3Q8+w7dZ/yaQ017qTwO+l+PJP0/vVQWw+0jST/YE7v/kCNJr9H7fV/t7f8t
6+xC7biqOG6MhGhjTI1pNDEYSm1tG0pD83XuJTlzPubMzDkzh8aQQEILFS95
aPTBqpRIDN4ELNIiodW011CJcknFIrRcG4gvphJqG/tgEQMVxT7cBouobSKE
khC8d9bvvxezfVrsM2c+9vfaa6392zfVvsTl4P2n6D+naJ+7aZ9vKS56M3GO
abO9Lk2b7fWg89rr+XMijcbTlHPhtxB/m9Kut7J+FPeC8XKb+Ohavziv3ewF
zmtvcEfVnsTRFe9vIV2Xy8MurR2k4fl1Ob+K7HD/CfEz+L4p9g9MKX/an0fc
6xL2Py1J6afOb7f8Or/d7Hj4k5an8APhCO5O4Qdm6LPaN+C8dZtfnLdu6yf8
RY+mrJ9y1k8p6yf8e+tS0ycW2rfJNNlUB5QVyNT0jy0FMjW/2ZoCCTfnCu39
MfHS4YDtptxeor3fz/f/EO7USu2LGIb2Y3HrQ2TKPM/5sV9NmeeHJj/j5wVY
O/TzLWw/ctT+ZuCdX8PfeD01ff4fbc65jXj/p6m/byH/K956Gt5neqNLG4dd
mt7pss7mPuLpL3HfHbSnWcVFx3zzrJl+Sv4m7QuAK/l+ir4KV/JnvE8cPb1v
Ng/vs31xBeO/+ovOp+A8iNUF80cazps3mYbz5k2m4Xxw0yvScD646R3O0zeZ
Bj656Tval6P1nLh26EsP0s/mmH/2c13+x0fYx/BLnfvOvLA1CfPGm9gjarlC
nE/pN87jNhnxuBPncdt+bOdx235s53FL2n5W53HbfJkHfrrFmeWBn17n7xDz
waEB62nG/xbfs5z6WS6uXxHKqy7HWeyFaldHGO+POC9e+W2ul0h/jfI/q3bI
eHxJ/9/e/L/sSWcGpkd1WlY+p1Vf2BfFbT7P/rx3BvCF2/AUB/CF2/AUtW8l
Ce+zeQf70nHnq9dS3DXxqd/xczd0fy1fI/1axIs+PQicQpPiaomLybidFoE3
3tBX33TeubgSNr84P9rq3/nRDfv0Qe3jYr7bk9FudtBPiGv+8Q7WBeLIEYew
XnFJrRCnZPEC2JeOEnf/yi4b/w9kxPXLz5VhL2kz/4gv3Gb+cT64vlf8ZpPy
U2q+zZr61jcjHvIq7evIw/stP7Tnbf/PJWuU72Hty9sexkX7LvFFs3D+q+nD
8KzXtNjvk3EeW4v9PhnnsbXY76O4DMU5ZJwPsJN1nvOxrf06H9var/Ow9X1W
DrTfq84rFr+4juO8u0M8J/W9l/2+f86a49VM1mw3lyNe8B/hbj7knFezozjn
1dpxjnQ+tXjCjfKfi8r/wyyyp+XN8eEg9bpHcVZ5iE8wfS9nPp4IfNymfykP
5zeb/wde7N92BT3I5oFdQQ+y+Yb92/flzEcJMo/8TXnkb8rxl8hvEvF3Nzp/
1+y8zt81f1du66UHM2Ru8V1rM2Qe6knlY/68DO5pHuKzJBWfJWnjsnN4rV9E
/N05Tzf7C/Wzgvr5vnjKrTDO2bjJfPq+nkecztvi1U4Gfq31c/ylp/PIH5YH
P7X+b+WG3/Tn6KnDhLiGPPhHTWodloZ1mfUfP7fCugPz5KsaV/wcC+NQDJA5
HIoBMmc9PUCiN00PkAv/rw27mcn/5MlTi2FBo8zkH/LkFx87PDxxV2byhTy5
sLgtZmlm8nhu58f9PUPmoR9p3HtscSB5IkOil39H8Xc5/mTki3lzvJyjPo8U
zbiwz4kTHHMbo/ag9Azr9VL8WMXpif/qPFjTv+FvDFkHr8XfvbZoztcHnVes
7zK7JOvUhwvmIdYlB9Ru09Cubdzyc3Pq4vk1+viWIujB1q7Re6bEL5QfnfbS
Y51y+yCs0y0+Dz1tSRH4XspvPX/8Bb3yAPk5xzy/oJfV8/JznLPz2YL1eYYs
WJ9nSPK/IUMW0XjA988SP3gH+Tvi9az4FpWnfW/Mg3Vp5bIj+MkVd2d+POcF
23kmzgtWuxGftbYn/l71v5P+GvF9z/u5jbX8wM9t1HWrz37gl1p99pGqT9k5
VZ9+jpfVYxrsJlaPfq6X1SPrjOnCzrv9d4osktGiI+diiixM/znD/sYzRXKs
dtykyIL+P6D/F/T/Af2/oP8P6P8F/X9A/y/o9wOk5tFBGKet3w+QxN08mhF/
UyS3LU4EmzOTL6ufS68rgh5gUuvuPKzDf9LQB4fNOM/1zu81O4/zVi1ewHmr
Fi/A/Y8rzk28TuLcvjsMcVs2HsjOJN6+eJ4Rb1XnK23UukTjxZDzPHrM/7IT
+DmbtR91gv3fE8NkftHPurKPhHd6DTvl40PO9+Scz9GQ8z055/ML8qOlwa9m
+ksa/Gj1/HZvisQusRQ7xVL+/0/+fwi/2TnsSS3yKx71cl+XaZ1W3zeifYx8
nabyqLN9k3XM0WFYd6h+6/tOcf96Pd95q/Yc561aO2Gdsdv5qvX9x53fa+OU
81QVt2D1p7jOYYhDtXgH5/Faf3Yer/n5nMdrfsCIv6tzyx/phbTp2T3kEP2w
h+T9fXiqF4boZdhljw2xZ8uuPTS97Nk+0u1Qyq/pZSl62jDwOnUOdlMfGTbn
j+vDsH9Gfs/6f8+gTxUj42+snCSeTvxPxfmOrN9/MEn8nfNorX6dR2v17zxa
ax/OR7V+LT5tNzzfOOuU53AEZ53y/LT75eSnM3sAfr9NirvohzgMaz/yaziv
1uK1nFer61Z+sr9GfNRVzqu1fI+i/jKK+gfXtW5/yPmo9l6lJ0K6fu+fqI/3
nFdbXz8Z8WpfH0Xzo/Nq6/+fcV6t8SecV1ubz26OGMe6jGuU/8UukvJ/uovE
T97Hb34B3uxH2X96jPy/1wvfb/nqhfyZHb5Pf3U+rcmo/K9G5X9iFOyGJp0X
bP0jKt9lzj+1+nD+qflPnT9r87bzZ+v4mLHzZ43nUTbL986yWb5fLpvle7Sk
XDuUs/iviksqWS8Qp9IRD5b+sIr3zROXMsX9c4r7IQ5lmriUJSXxsj1kSbxs
D1kSL9tDloEXaP2hbNbXMvF7nX9q6y761/6SfSDyC5aB92yS718hfbhsjlep
ylPzRRnpu+K/ah9FSTzdJHYh8TXZB3CV9D7Goxcp33OMR38tm+PP2TKKR6K+
CurrjZJ+0EGW9IMOku+fon7m1d664XutXqifafF9iRu6xP2z3D9bRvML/M8N
xJk8T/u9RpzLtRJ7LXEtr6h9RXzRVc4Xbeq7ZaTf6vvT8P2N8e5s2RzvbpTN
8W7G+bUmuX8Z9bfU+aNWr+I1Mn7dDe/vDPW3pwr7M82uqvt3hfvN/tU2+9c3
4GXuZb/x3or9MonJfRX2+MTkPRX+5Q6S99+p/cV831XiHhfeX/vtf9PBf1+Z
fXm6g7++ot8R9/btin7XRVb0uy6yCnFktj6CT/g6/T/ne07SXm6r6Fc9pHil
2j8M73Se8XmqYh3C+Hw7vM3UeaDWHz3d1Dcr1vspsiKuDr/OVyri6PAT3lpF
82EVzYeU5xz7HN7m+hvYy+arpv13jv8vJU5/usIv1A68zBqv9Ew78DLr5cNk
O/Ayze+YBD7n74gPFp/T/I5J4HPadyXh+2yfVYKs4PvAx5hWfXfYb6367rDf
WvXdYb91hZ7XQVboeR1kZfbahfHE9u9Wti/y3i77I2kPl2kPlyv0QOIqf8X1
fYzfl0ifJX22isYH1Uc/lLfVG+P1DdWf/JpV8FOKt2l6OvaKt+L+OWZfwC70
1jHxHRH/8nvOv7T4EOdf2rybIMe2jhonyDHtmnjm28e0j6T5/PNJeL75DZPw
fNNjO0j+H/zzY/TgDlJ8xE7In5V7J+TP5jHFNY9tnPlEFwkPdJ643KlxiMvV
95teSX1tG1NP4oPw/COKYxmHOCiT4xD3Ih6m/N4mxWt0/qWN986/tPdpPzLv
20R9nhyHfSPiV2pfifiV2l+i69p/ous23iSBT2n5dJ6l/d6Jrju/sjFefjhu
jo8nVf6KuyR9oxfya/nshfyKFyqepfga4kHqfLxG+rqnrR6cT9mMT+P6jej6
THT9SDe6vxvdH12f8ev2Hc6vtHJxfmVtF3pSPNwHrB5uUXprmO+VtnlRPNEd
yeK27fOf0nmX7HsrPf3TxbDPH3ja5l2d/6BzgZOQln3f0knz/+LUKt7qI52w
r9Wud5rXF9J1/m7R/7vR/7vJ2tqwKR6+5kndr3Wl7id+LtX3iDvs8Vn2e46/
rR/ldxD0Q6XN/6b3Z9H3KS2edNlMB/6/6zcqN9NjK+NcLh8kn18M0L11c1Lj
Re4aJP+qeZjw9p5Ff7sP/txLipckLfvPqgdsXlpFPMHGLRaXsInxf/8W9GN4
hU9vMXvc8pT7tpJfnacG32dB/7TnbeN5Wj/AGyn6PG9bsv/Kk1/87XPEuYmH
M0dcrPaRrVa8+Xb8kwnrr+1mN2snrL+2B33Q9L7tSf/wJ9/d+qMkeeLKuouH
vsT1NdIHdyT31yC7NrKVvLvwGS9PtZHa394Odsxaz9gpqXM41X5kVySdtCmf
Fu0uau8LsuYpbEA+38FuOUG/1TkZE2GdYfNKJ8wzNYdhcoL7u8bdWk0//bi3
d9mp6vjjrS3TZ9fBZfp6C/tMn+e1eF4/tGd7jrdfK99RM31PmfwPY4tAyA==

       "], {{
         {RGBColor[0.293416, 0.0574044, 0.529412], EdgeForm[None], 
          GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxMnXWc1cX3/+/evbvssrvcu5duLOzuRFoaMVAsBBG7EylBWhCkS1DCTkRR
JCWkU8ACE1tQQWx/r+f3vPbx+f3xepz3OWd6zsx7Zt7znjmoy+0dbksmEon6
9RKJXNHWQo6ArKQgkVhXLpFYL5ys5wOivwsFen5PdJVQXs+rRdcIhQUhgy8q
CNlaoUJBhLFBqKzn90W3CaV63iS6WcjoeWO54LMFIdsiVNLz1nLhp2JByODT
BREefooLIh7SWlXP20V3CEfreY/oXuGYgqA/C5/WTSQerZFIDCpJJI6S/Kdy
4e4TyYdIPlDyKgWRRsI6tiD8/SKcqOf9or8JM6skEp1rR1wnFYSMMjquINz+
Kpyg533lws/xBSGDP1LPP5aLuLsUBE9aThP+lOwv4fSCoH8L5+g5IeQIZxSE
7B/hLD3/K/qfcGZByODPLggZfk4V/igX4Z6v55SQJzQS8oVywrkOOyk0tox6
bloQ9Uo9N7EM/pSCsAXCbWY9dX5BQdQHttOyIOqeumplSj23NqX+25hS521N
qefmDo+w2lmGLVxYEDZE/bRwPMTR3np0HazHFhaoTq9TnTZUnW5Rfd1dO+TX
Cke43Lu67LGXRalE4h7hXuHmgqhXbP9W55myHOA8kPZuBWFb2MhNBWEf+Lne
MmzhroKoG+rqjoKoV+rwOseJ/zstw90tjpP4brdN4Oc2xw8/0PFTZt0dD/Z1
Y0HYHOl4xOVOWvu7PuD7FESdUca9XK/Uc29TdDc4PMLq57LGf1/7o57vdp6w
tYctw909lmGz9wvnCQ2Eey3D1ga7Xqm3p5038vqMKeU0yPnD3QVVE4nDhM56
nqI6PVd1+m9xIjHUNkGdD3F48Em5HVo75JNc37SzJ1xn1M/EgggP3TTLKMvJ
dotdTHU94WeKZfBPKA0NlIb/lIbp9keZPWlKPTzrfFC3z5liC7Ncx9jUbFPy
P7MgbA7d83ZLGb8qPCA8KLziMoV/yvFgdzNM8f+C/VEPL5pS9i8L99l/w4Lo
A/JdN7kF0S9ULp9I7CxMJHYJC9UG7nZ7uF8vhWOEY4X7hKPNP2DZcUI/4XTh
DOFh4TTz/S07U7hXOMr+bxTqCHWFm4V6wkHCTZbBXy/UFGoJNwi17ae7ZfAD
hbOFc4RHHM9ZQl/hVKfjOeEaobPwrHC1+ectu1b4QBghPCZsFx4VhgsDHB5x
9BROFE4SHhJOMN9HOMXx9bL+ZKG3KboHXU7HCz1M8X+L832wcJtwiHCocI9w
pMtrpnC50EmYLLQXLhRmWXaF8LRwpXCVMNsy+GcsI8+ThHb2P0FoI7QVhgnn
Cw2FiZa1cxkga+SyaSw0cbk0Mj9DuMzpe0roaP5J4VLztztPhwm3Oq/k8w7L
6gt3CYcLRwh3Wga/x/knr4Ncz+cKQ4TzhAbCVKGDcJEwxWUD/4RlFwvThUuc
pmmWwX/oOh+ZE23sfLePjywbJXwiPC6MFl7NCbvEBl8WrhO6Ca+YonvHeSBP
bzv/5HVtTrQN2sqLQhehq/Caw8PG57mMsIWXrCeOtywjrDl2Sxt63ZR282ZO
2BP+Fwp354QdvZcTdok9LsmJNkybXmQ97fLdnGjP2Ok7avN3CncJS+0W3cqc
aAOEtdj+CGt5Ttg0bWKV46FNLHN46FZbRrtcYbeEtcYyyuWNnOgLyMNc5wl+
vsuPMt3quh8qbBEGm9/p+hkjfCqMFcYJuyyD/8yy8cLmnLAn/G/MiXZOX7Ij
J+wbe99kGe625UQ7oU287/jhX8iJ/oO6/C4nbAtb+96UdvCDKe3jq5xoh7Tj
3abY7Iac6L9Ix7qcsBH6zvWm6L7MifaJ/8+dD9rxF6bofnQ8tMufTGk/3+ZE
eyB93+REm4H/2vHDf5wT9v6480fbol94wO8J2kbPghgjMm7oqvfE0cIxwkih
k3CF8IPev+8JDfX8oNBYaCI8IDQy38OypsLjwpXCVcIrwkNCT+FV017Cy/aD
7kWHRdgvmaJ7Qbjfutfsr7f9EE8z6xs6HX2EFkJLu7vAfF/LWgnDhEuES4Wh
wsXmezq85o6nuf3fIJwgnCg8JlzucrnRspOEbsKxwnFCd+F4+7neMvhHHWdH
YY7TR3rfFPoJ/YXXVQcPuU7mCD3MT5LuOscz1XGQrimOA/4Jy0jXax5f4H+l
xvSDhSHlYp4HHSqsEAZZ967wiDBAWC4MtG6p0N+6eU7jI8Ia2cJOjcdu0vPE
wrAb0ldN46h7q8t+ixKJ6nq+T89f6vl155V6eEN42Hmeaxn8ZOeP/IwXrhW6
CGOFa4TOwijbI7Y1zjLcTbBb0jFGuNp+RtsG4Ye77C8TRphSl4OFDsJFwjeu
G9L7rSlp/Nr2h26F04GNr3VaiX+lZcSZ0LhrjfX/CasLg8+VfL3oBiGnfOjX
CcnyQdH9I7wnrBL+NcV/qnz422j9aOd1tctonOMY5zQtsc0NdxwTXFfrTbGp
3YXRJl9zPGMc1lL7o5wWCkMKo60sL4x+gfwvLoy2RBzLCqNtoFtkt+jedRjo
vq6jMZ7s4QzZQ7qaIH6z5HnlI0+bhLeFAcJA4a3CsDX4+ZYNEvY5DuL/RVjg
NO63bIn9tRXaFYbNtjGP/wtd3wOsb++w21uHLdJPtC4MG21t/785bMrmgCn5
+92UMvjDlHL6yXkgT39ahu38bVuhDv+yDP7Hwmhj+PmhMPoF+O8Lo83A/+q8
kv+9Lpd3DPKGLe9xnOi+Kwz7xf8qt/thXtOBPup1nJHCKK8NPWb+CqG2UEfo
JNQyf6VldYVLWKMRqgkdhepCDeEh1jiEc4XLhZr2f6nd4m6sefxdZn+46y00
YG2jXMxhlrlP6unwzhPG/X/+LhaqOB3tWW9ibUl4gDUU1lSE+4UzzD9o2dnC
vcJprM0IPSwj3e2EUod1n/X4v7JeIlGppsYdFWQrjqcS4VdROoTj9dzBssqE
J1nd2lFWF1lGWse47Mj/49aRj9Gml7hu2ghtXVetzQ+3rJ3762ZCc/fjLYSW
Qi+XUwPXeSv7p0+/wO54rzTyu3+I/eGunN8ZvCuYU1L2vCuYW0LR8T5o6rj7
uK4aCn1NGwnTlPcewm3kU/TM2mE7E8uFPWFf412H2MgEU3STrMf9KJcpZYRd
Xmj+YcfTWOhn2qRcvK+aOH0jXE7YxWOm+L9HONV138PzA8ribvGnWEe6qc8T
hLdsH9j1IueT+N+2DNt8x+WO/c63DH6BZZTTJtc39bzFdkA7YK3xDeHNcrFW
Oto61uTmOf4/TInzT1PiOWB/84wHnVbCw+5pB0tcRpTNRpcp6WBNFzvDpta5
vCintZaNcNgPONzFzjdhvV4u2g/t47VyUXaU60LnlTJ6VbjLurl2S5rm2C3+
/3I+KL+/TSmzf0wJj3XVl4SXy8U664vm91j2SrlY033VadlrGfwG2d5TVcJP
idrv/BqJRKZC+L9duMM4UTjJ4cHf6bSfbJt40TZxu3UnWffK/+e2p+JpXTvs
d6vrlr6KtdtFLr9/nSd41nMXu35Yq2W8xViMtVtk8PtddtTnPpc7/K8uR/j3
HQ/taZsp7Wm7KW1uhylp+8XlNMf5OcH5Z97MekBTz6OYlzMnH2lZM+EC4R8l
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
ENt4d+Fg0+tta+8I821fC4UF9rNcWOY6myu8brvE7duuzzesw6beFZba5pYI
iytEmxvhcuxp/RLb8QLH3cNuF9kWFzkdTYWhtkXawDzhTbcZ4n/L+o3CBuEC
zdNGC49XDHtcL6yzPULX2r5XCivctt5yuC3kZ4z9txLGCWMrhu0uc95aWoa7
vg6DMvpVY9f9NSIdQ5wW4q4iXCF0EqoKV5qvbNnlwh8l0a5o03+VRLuizdUT
ugnXEX5JtGHa7pAi9VvCBcK+kmhj6FhQbeYy+7ck2jDt8iDXM2H9VxJ6dH+W
RDzE/U9JuKXt/l0SlHTsLwkbIo7fSqKvgT9QEv0FfHXhauEqoYZwjflqlpHn
isJlQkehkvMNX9f56yrUMe0i1Da9FpvTuOlxzcWezlWfL/5S4RIh6/Dgawqd
HXct+4O/wO1+qNDcdIjQzHQwbdyUvqDQfQ19TIEp/UcltzHaZV3hWqEz8yP3
BbTjg4SuQhehnP0Rf57jJs4St3P6iXzr0RUVR/9Cf1belHRUdtjEXdHx0wcc
LFzn+A4Vrhe6CTWFq9yf1TClP6glXG1drvNM/5dyuuAPcRiEW93+6GNqC9fY
/2FCd8dXzXr6p3rON+VS1TLKpY7LCf9Zp51+sdSUvjBjSj/KelJLoUVJrG20
8Hua9a1W1rHWcolwcUmstbW2jnWcS61jPnm85/TMaZnzM49nbtnY837mt8d5
PaBbjTgDgrUH5sPHeK5f2WsJl5fEWlFHx8Fa12XmK1kPT7/OPHi7+2nm/cyN
NxeFDVGHFYT2toNi2wJ1z/pge6FdSawXXmi+vGVtS2KNiXxfVBLrTNAOJbHe
1MF+Cu22TUmsR7ZxGSVd542LYz7d3OOhj4qijrGRnUVRl9j42cXxnuxVHO9R
1k9ZB+Vdynof62e8C1nTZD11hCnrmrz/tljH+5y10Xdtr6w7zLKtsdbwtG3u
aeuwF9YvnrJN4XambWumdf2cFsLlfbnV8Q13/Btsc4TBehhtnXW6NbZjZNNd
Frz/B7htIGMcwLucNVPWSgfb32q7ZW2XNd1hLgPWOwdZj45xw0qX1wC7hR9q
t6SD9vOs89/XZcM6bh9T1lbfL4q2RB+ztSgo/cG2omh76HYURTunvW4vCoru
86LoF2jTHxRFv4C7D4uinuF3FUWfRX3nuCwY+3xaFP0Luo+Log1jH58VRXjo
+A+TvoA4+A+zfnHwU6pr7FE9eMY3212O30jWuW7YUlZtrXfdWOPp7byyltnL
lLWuJXLftG7Y4J9FMW7j+a+iGOfB/10U40X4f4piHAn/b1GMHeH/K4qxIHzC
+YP/pChsnLz96fkBawf/5sc6wRLhP9OlzDE1l2gttBFGsjYktBDGCW2Z9wu9
hFOF04SxdovuIeFk4RRhtNDKYU0Q2gsXCiOEZkJzYbzDQ/eYZcQ30W47CJNM
L2IuLzS1f9bFipgXCl2ZyzEfyov1uxKhgvCL3qU5tVQPebE2hywtXM5ci3lV
XqzNpc0fXlnhCTX0/KBwonCS0CUvZMRxneOpzTy2nuxA7+xURm3csjpCd6Gu
UE+43jL4Gyw7SHhUaOL8PCycKZwlHMI/hwXq14VDC4P+IBxWGPRHoX5h0J+E
wwuD7imIf9pY02GN54jCkO0VjtLzz6K/FMR/6b+K7hOOLAw9Ov69Rra/IP61
/k30QEH8e40Mvp/TeHZe/EeXdnwDxJ8rnCf0t/4coadtAVvpbXs5XegrnOE8
97EMnv/rKjjcRxwG4Q4TGru8BgkNhPOFgY4TfrBlDYWhQiP7GWIZ/I0u+4OF
m0wPEW42PVQ4VvV/aq2wO9a0nhWey4t1r2fMM/ce4PjvkPuWlUPHvPwR6362
v+fzYq3xFeHVvFgPfUF4MS/WQ583v8+yl/Ji/fJl+9lvGTxrbbQZ2tMalzXx
zXEebnF4XW2nL5h2c9jdbI8vmXZ3uN1tm6yP3Cnc5bhvcJm95vIijtcdz63O
z43WzbXstrxYX7mdssmLNZjbzLMuPM55YJ14rHnWgseYJ4zDhPpOy5HCUY7z
UOsI9wjrbrPbwx3H4dbdZX9HCw8IJ+RFe75HOIZ6Fu62Hv5ey44T7heOt5/7
LIOvqHquXiv6D9Zd6I/oz1j3pf+iv2TNCBvFHlnTGWh+o2XYI2tb2Ch2vcky
+C2W0TdgO11cl1stI74djmdUXqw9Qx/PizVoKP3uR6aU6TankfRxLgV9AO3/
YD1/WxB9Decs0NZ/Fw7S8zcFofusIM5ses66xfxTJ+wqiDOqOJtqQUGcq8UZ
YJwjQJ9Cf7OoIM7k4syqP+xvqfsX/CwUSuRuq+j77msWOY62VWWXtTVWcL+z
0Lo/HQbyYvndUhD+FzuewdZz7hXnYL1dEOdwcV7XWwVxVhd8X71vK9aI7y13
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
c5hQX7hVOFg4RKhXpPqT/guhVlH4x19dPX9WPnS1i0L2qXCb/R0qHFQU/r4s
H/0HP6LmCLdbf5jbcKmQdb9QUajkviBrvrX9JYU6RREPcd9M+ohHuF6oKdQS
bhLqWncjfsx3t762cIMpulscBnnuJtRwWJ2FykIV92WVzHcVqgnVhetM8XOt
3VYVuphWcx9N2nPdf//nn3LPUl7+Vj7+EWoURb9MXVUvir4bnndhoVC+NN4f
BeYvsayItBaFP+qmWlHUPf7/FRYLS4Qcyd8VXSb8Z9lSobf8nyycIvQSTjLP
z9Do8UP/W85xX+o4i0mH3hX1q8U9HLxX/la+/snEu+ffTOSTd85fmdDxXkKP
jvfVn5nQtXXZpErj3ZIn5Lvvz3fcHR1nift7aAW/BzK2Ifr9tPnLrYcfJpwv
NCyNPY6MD+gTH7WskTDXdoNN3a98TVG++rt9dBduKB/vxdsYEwmL5O4e4V5h
sel9wp3y16NOuKHNdROuF1ZK19NlvEx4UOghrBAesm663RLfe3ZL/Sy3W9wt
JX3CA8LTcner0zRbuMU8bW6WZbSTGcJM4TnbMXb9qdv9DLdP3D5tGXm90W17
psN63v6w8RnW38S7XXzj0hi7zLTsZuFFtwHayizLbvG44zqXC31TV/NLXH7k
bX5p9Ed3CvNKoz+iX3m7NPoOdHNKow3Tvt+yHt1rpdHO0b1ZGm0b/9jyI8IA
4Q3XMzraQX/r3rV+oPC6w8YmXnC+yc8y6wcJa4ThHt+8Uhp9B/3QO077XcJ7
0g0VhgkLLLtbeNd1iB0stAx7Wil3Q+xnhTDY/CqH8ajwcmn0O8T3kssY/lXH
T/5X2y3pW+70EtZw2zt1llsUOuI523ttGV+f6/21tJOSdOw9Zo9xhXRQ9hwX
p2M/Mrry6dhPzb7qwnTso4YvSocMd+l0+GPfc0E69lfj7r0Kseef/fwVJV8t
ukYoTYduFfts00HRZdIRBrpy6dijTVi/Cy8Lr7BPWHhReMl++F+AfwTK9mEP
dhzI+Efga+EJYVqF2J890O4OOAzCXW9/7K3eLUy1ny+FycKUCrHnGj37wb8Q
Jlm3X3jBafrKbvH/jeOcLuSlYx86+9H/FF4VXqsQ8w3+heWfVuYV/NPJv53M
c/iXlv9nmbdcY57xCvtFr/D4if9T+U+Vecl19v+s/XXxeIW9nezzfN7xXOcx
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
2zmv1YT2ptVdLl/637Im2agb6godZ9eyjxj/UNy1lpscnzfaNBtu/xJacbC0
dc2yIWP8SJlxrzD3sraQ/F/J/hNaZoPip3k23P4jXJANirvGev7d9kJZc1cx
YZ0j+c+Mt4QGet4nul84Pxv0N+FUPX/HXEvo5DI+hHFoNurzW6FhNtweEM7T
86+lEVajbMiIm7KnbLg3mDqAcjcy9Q8lTWfL/d7SSNO52UgXYR2TDVv4vDTq
mTLgbtvDJP+QMZNwop53l4ad0e+zH449d/TX7LWC59sg8zfmaow5VvsbI2MC
9lGx34r655twn9L4xljffnjHbC0fe/p4p7Inj714vBPYm0UcjImQsfeKdy/7
/HDHuxEZ+wZ45xEGuv6lMa7lXdSvNOa38H1LY47KHHdwaYyJz3OaTrGO/m6Z
vz0y7lhUPvYiPOLwGJMOsT/GC4NKY8xNWIyNWG8g/0Ot5/v9w46TdAwsjfE9
fgY4PPi7XX7MX+8xZa5wrynziTqqiy2iW7G3bND3qTs9bxPdLhycDbpDOCQb
9APyXz7ut+Ze63rZ8Ief2tlo04R7gp6/Ko36PkbvrBPqxF3Qx0v+ZWnoDs1G
eNhH/WzYCP3FmQ6b+7TXOs/93Ob7uOx5b7GPkHpl3wDzRuamjCOxEfbQ8X6D
4o73Hvs02bvJHoIT7Ic9Bcebv89lw3yRb/mM0RnD8o2auQfziQdN8XO/3aJj
3IqdYqPHKS9flEY+T07HN06+OdEuaRPc/8z8j7vAuQM8Pxvf+/lmXi4blO/k
e0pjPx/7/n4sjf2g7PX7yXSm64P9B+ydLMiGP76lF2aDskeDfoe9HXzz56xk
9hAQH30S3/jR8b8lewjQ0d+xb4B9B/Rx+HvT9UQ87LX8oTT2rT5lW2EfCd/V
2Tt7pXBV+bCJYdZtsr0Osp0NtW6H/ZEH9sVeYf+8M9gbyl5O9tVeI3QuH3sx
O9ndR04L+zrZq3u13X1sGf75l5R8kLfy2SgP9qoUZYOy54J+kP2a7A2hP2Mv
Jvs06RPZw8H7mz7yBfP77Zb9IL+ZopsuG19RLdo5/eNsh8V+luM8Ptjr+kTH
/hjWFWhPvzpO0tFGYbSvE+2AdwvjCNYmeFewPsG+jzVuB7SNdDb207BHpjgb
eWKPTIVs7LFAx16TY52Okmzo0VFPhwn1XXaHC0e4rKFHCl2Eo4SjhWstg+9q
2THl4x02x/Z0nWXExziF/o7+ifUO7P2/whiv9Lduo/XYB+nj/nXuXT8lG+8u
3m3Ex/3o3A9Pun4ujPvhSQsUHXngfnTuTidu7nQnLNLC/fHw7P9o6zECaSc8
dJlslB/jiSv8/jzUtnioy4j9I23sHz3tmHvd0XEfPHGflY12Sz1Ttwn3lawV
cR8898OzPgSl/bO2RHkkHA/hEdZp2Xif087OyEb7p91jQ5QNd9Gfng09Osad
yLiL/sxsuCUdzM2QETd7dlo7D0NcBoyPdrqdseeaPceMNRkDPm7K2I09Qa3s
n35tYmnsm/7KlD3RvPvZk81+7dH2R1vl3TLEbX6z+wDemVtM0U2yzWFfk02x
uymm2Npux8Oe6K9N2VfOWJN94ezRZh8S40jG0ez7ucj8Y5Yxnh3qfDNmZH9Q
B7sbZhn8SLulLHa5bIjjG8fJPn3qh/39T9pGp5n/1nr4z5wuyoVxej/b/XHp
2EfA3pmT0rH/hvfE8emQsUeG+xorCZX9r0JF850tqyJcyXl8QjY37oREVlXo
JKSFjP91yNo/9zgWCIXCCKGx0ES4wm4Ja7jQyLp7hCOFo4T7hKOFY4RHhYZ2
d7dwhN1d7LDL58adkIcIh+bGnYs1hJq+LwLZYcKdQn3hcN8hcZh5/tOo4Dxw
Z2N1++/i/FXLjbsqiacoN+53rGZ3l1pW7H8+ShxWR8vg73KcpHuo0EA4X3jM
5dFU6CucKpwmDBDOEs4WegsnC6cIvYSTzN/rcqKM7nc5HSs8Ipxp//2E04Uz
cuMezXKuj/6W4Y5/B+8S7hYedvz46eM4SdMwp5c6eMDxHCc8JJwgnJgbd222
FFrlxj2aLcyPs6y1MNJ5bSaMMm0u9BCOd1jcw3mB/Q8RznN59XQ85P9x+8Pd
QJfTOcJg4Vz7GWQZPHeHHpwb9sE9pQeZ5+7SeuafTMadatyxNiMZd6px1xn2
tVB0kTAkGfeccUfWoGTcGcadaUMt476st3xHF/dxzfMdXfDv+F4u7sh623ru
BJtviu4N3wHGfV9vmuJ/gf1xl9cwx8OdXcOTcf8W93E9kow7Bbm7rH8y7gWE
H2E993eNTMa9X9wD9phl8I86PMLql4z7C/HfNxl373EP4WDnlfw/bBnuBibj
jjTKYoDjh5+ejHvmKNOlybjnjDvNliTjvjT4xcm4Iw3++WTcAcZ9d7SzRda/
mIw7EblH8eVk3GvIPYovWQb/imXcbUhbXOx4uKu1jlA3N+5rrSXUdrtc4nRx
v2tN626yW2ziBrvF/6sOm3sUX3AaSdNzybirj3S/noz7F7mncU4y7miEn2vZ
zbahe5znha5P+NccNn6eScZ9kNwN+HQy7lGDfyoZtoldPms9cc9Mhp1yr9os
U+5bm22Kf+7XzRPybffbJduRjPYA/SAZbWBbMnT5mTjznrPud9ZSP10lzrMo
lHyhZIvYM5UJ/QL2TmWCovvVe4zYT/S79yq9lI4zEIf4TMTymQhjsbDPbtmj
9Fs69jmxj2m/ZfAHLCOsdQ6Dsxh/8R4m4lvpcxgH+GxFzlh8+P87YxF+mWWc
JXlwRbUt4ZaKsWbDnXOsy5SdS8g5hcvttuwszP6OY5XPhRzkswx7O47Vlg32
GZAD7G6NZeSfcyo5T5NzK8vu/+CcZ+7/mGh+vfOHO8655LzLx32u4mifs7jR
YZSdwQnlbM4fvU+LfWGbLeNszqJMlPeSdITNObScV7vF+lGODxln4BZnwu1S
vhNmgr4r/OSw2Rf2s/eBUQd7vW8MnjtMOKO67P4TKOdTczYqZ6SW3ZEywXne
6TLAz7fp2DfGfrHvTNnP9b0p+9r2OH7i2+7yKDuHFVp2P8k4x/eD/VEurD/u
KoyznUa5L+R+S96HP4r+lIz3yV7Rn5Mxllkp+l4y3rGfiX6ejPc6/ce7yRg3
LBNdnox3PzJ4xjjIViRjPEQYq5IxttggujEZY6g1omuTMc5anQyecQeydckY
Z6xPhh/GHcjgGZ8RHn4YSxEPaaUv2yS6ORljnA9FP0rGWAf6cTLGRLR7dPR5
W0XfT0bfB6UvoF8kjYTFOOPTZOSfsddO0V3J6COJZ0syxiPIcEe/iYxwGfd8
kgw/jIOIH/5C90nlPKagXL9IxjjgK9HdyXjffy36TTLe/8jgGQMh+zYZY5Tv
RL9PxpgFGTzjhn2i+5MxrkH/QzLGN1DqmzEC9fxLMsY0xP9lMsYNyH5NxjgJ
u9iTjLEFMsJlTETYvyVjbAQ9kIxxKvT3ZIxroX8kY6wH/TMZ4yDoX8kYB0H/
Tsa4BvpPMsY30H+TMR6C/peMcRU04bEVNCc3xljQpNDGNFdoa5oS2pnyPmCM
SJ6w9UnJuD+Ve2KnUDfJuEt2qil3yXKGxO3CHak40+I28/MtuzMVZ0ncJNyc
inMuoLek4jyIG63j7ImuwnWpOI/gWqFLKs4wuEi4OBXnO3Sxu2mWXZKKMwg6
2890yy5NxbkIHeyf8y+6Cden4lwNaPdUnGFxsnBKKs6SOMl8H8tOTcUZFicI
JwoTKuk9VTPkLzu9hNvTevzzX31boV0qzr24wfl8v57eX/LbJhPneXS3bpLd
tk/FuQ7QC1NxvsOFzgNnWHQULvO4/AjhSKFlKu785gLJFqm4Cxy+VSpkOULT
VNwFzp3kzVJBuau8SSru7UZ3QSruKcf/eam4q5u7u4/W86f0cULzVPjD3TGp
kHGH+WyVybhK4WeY6Bs14+7681Nxzzd3hjdIRXjwDVMh4/5wzpO4WrgmFedM
XGX+Ocuo1xnO9+WpOKOik3BFKs6ouNJ+ZlsGP9Nucdc4FfeRk89GqYgTHts8
TKifChuFHp6Kec/hLl/OqjjedX+UsCs3yoJ/+4+z7h7XA/oPcmNOyxxuY27M
2ZiLfGgZc52Pc2Oew3zlI8vgP7GMuc6G3Jiz4X9dbszZmJ8tyo35MPO89Zbh
brFlzI+X5sbcjznZEsvgF+bGPBn/O3Jjjk1at+XGXI759FO5MUdlznqo80Pa
ufOe+TBzes7fZ87PnH52bszb4bc7DMKdnxtzaebWW3NjzsYcd3NuzMGYky3I
jTkwadrkckL3vt2Spi12i/9llHtuzAvfcdj4X24Z886xbg/Y/hi3B/hxlrVO
xTkW2DH2Pt6yNqk4V6KZdaOtx/8E62nPnHFCe8D2Oa8Cm8bGOe/hWNsE51uc
Z939dotupNshcXC+BW0AexzmMOBX58Ycm3n/qtyY58OvsYy5+MrcmPcy719r
GfbxnmX4WeHywN2k3OjfGe8Pd5y0Cc63aOI0jbCsiW3/Y9sj7eND2+m9tnHy
X0X91xrG7+mw/Z250TbIJ/3BF7nxvmKO9JrfW9A5fm9BX/d7CzrX7y3oG35/
PyFMS8a7CxlzX95XzJ+ZT/OuYs7MXJl3Gnp0jB2QMbdmXYN5MvMqxhPI4HnX
EcbbHkNMdXyMcZi3M59mXNZL6J2MMRfzW+bBjKV6WseYrK91q+y2j8ciUxzu
Ovtj/s3YhzkzawaM25ifMz9ebz38RsuYQzOGGmQ/mywb5PHBKy5fxgsvm2cc
8ZL5ccm4H51718ck41527nUfa4qO8Sj3jnNvOePTB8wvt4y7zR9PxliYe7nH
O7w2Li/e/9wJP9r6Fq4zZMzzJ9gtd61PNGU8wdiKuShzWcZNzG+Zv+4zZQ7N
WIz1F+a4jNGmm//RMtZjGEO96Dz/ZBlz3++cDvzssYx58Arnifrb73hYY/jN
lHn8AVPC/cVpJH17HQbpXu16pu55T9BWaANbXbfYEGPSybYDxjd1hXqpGBsd
6ncPY4I61jGOqC7USMWYoLZ1jHWqWcfY6hD7Z/x0kHCw35GVaZepuKvyYLu7
1rKqqRhz1bOfLpYRLu/YSvbfzfHXTMX4CForFWOd75S/73NjTPRtbvC8F78S
3Z0b/ShjjaT7QfqAL3NjjFPL+WFc9U1u+GeshL+vc2PskxLyUjF+Qoa7Ng4v
NxXvWsIjPt7V9En0U4wBC4XyqRjnFZhnzFTO/Ce2Y+x0pyltgrkOa2Gse31o
ynoY6x/DrWNeMsr+d9kfbegL2zd2zfrIo/bzpWWMnT+1W9ri524/+PnMMviP
HCdxjM+N8Trj9AmmjNPbugwoI8a1RUJxKsa55c0zTsx3ntu7LOEZB1UQ0qkY
V1V0fTNmypqf6Hh4TzDOKrGfTvaXScXYClqaijFWqf0zJxzm/PMPMf8E829w
2R1dZXd2QbnP5kq9O0qFrHA5e9qEtHCFkLGu7G4Y7orpZD26iy3j/pSrHEbF
TNwDwf0Q3AvRMRPrFKxPXGZKHNwPgZ77IrgTgrsiuCOCuyKQwV/t8Cpl4o4d
4uG+luPFf6l33VfCKZlYj2Ad4tRMUNYhjtbzp6Kf8U7U807WPISjMkHRHafn
L9IR1snsvUtHWCeyV49vMMKxev48He5OyoQMd6dnYs2CtZwTMpEW/ByTiTjx
c7Cet4vuSMfZN+Sjcibu6+DeDu4D+b87Zorjzpmye3co64aZWGtjXa1xJtbp
/hAaZUIGX3YfEvcjNcmEnrss2zo87jW6MBNrhawFcr8N99ykhXaZuAsiLxN3
3pRYx/0b3MPBnTOdnV7GF60cD/cgcScJd5Nwdw33i3DvCPeNsGewhlAzE3eQ
kD903E3C/SXkmftLuOMEvuxeJfLPXuHq9n+t46yaibtBEo6P+0KwkbL7Q6Do
2Gtczf672B98PeF9lcc2oa6et6aDr6PnLeng+d+maSbOjuNfB86N41w4/tGh
rCn70ZZxdhz/tDSxnzGWcXbiKIeBf+4v4Y4WypE7ZQ51OdWSbhNrfum4rwkZ
d7Jw1wvlTblwT0uzuiE/PxNrrNjBWMfDGYz8N9I2E3XIvlLcYS/8g3JaJmyT
PeunmucflbOEszPx/8mZ5sc5PM575N+UM6zjXhnuHyIP/FvSxvH1c9i4G29/
6B51/JTXCJcZZcRdQoc4/w0ysY5Mfs7NxLow69CE9aPXLEkrbZd2danbOnfr
cDcQ9+OU3XkFLbvDqo5tlrPYPpS/j9Kx1su9NPRDB2Wi/mmH9TOh/1g4JBPt
8oN0nOUGxf8Rev4kHf0FZfGT1zKvdTzUFXcS1XSazstEPsgb9yUd7Dyfk4m1
V/JJWe/x+it1sNfrsty7dJD9dHHY8NzTxT1C3BlUdmcY8XH3V3XznayH7+hy
Krv3rIr9c4cYd4lx1xl3ieWab+K2C9/ceu494/62TIX/3ecG5SyrLTU0Vq8R
uj7p+Gee/+P7mvI/Pffm8Y8r/9dyj1wl89wnV9E8d93xvyv/rZbdLVd211xd
63qnY48UcXR0/Pi/3v74b/UKx8M/vtxpx/+3/JvbIx3fy08QHjI9UXgwHd/X
0XGmBufdcAYY78dzzfdKx3d34r7SYZfdlVfNcXB3Hf8Y8/9uT4eNn2st45/d
a5wW3JXdmUc+uT+R8844U437HE82z32LJ5nn/kTONeMcNe5w5DyysjtLoZw9
xp2m/KtcdscplH+Ry+5ARXebZfy7/LDr53SXB/sIOKvjduuJg3wg+9pjhYdd
NpwvQnlxVgj3qh7mOMruqiy7uxLKP8Rl95ie6TDOcflyv+Tp1vVwGZTdiXqa
dWV3rFIW3OF4tv33dnic5Xaj4yEd3BF5nMvrXpcZ/lfYP/H3sb+zK/zvnlTO
exvovpA2+rrLq+wuzdtd9rNd39TtLNcr/NOWUbeclXClbYTzF662O84xwXax
/RnWo+PcE9oYbYszUThjjvPqpliGH85Z4aw6zpbjbJXGdld2hyv8UPvjTBHO
bLjC6eDcFNoebbGD3/l892vv9zzjAL4dlfO44QK3e/hLM/H9ibHaE047YV3k
MPiueLEp3wanOx7ivsQy/PPfc9r/D5fdgVd2J14F6xaqL6lfL9L/QDrO0aB9
fltT/aTPd33JtkWdv2ibg+fMkrtc/5xXco/r/y3L4JfYtrA7zqq43v45TwU7
pq1wvgX9Dn3Sy44H3Ruuf9rcq3ZLm3vNlDbH2T29KvzvDtLeFf53L2sf298A
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
nG/erv5Hmpn/jHd4zIcm2Mz8aaLN+zlexHUfxxe/ss5jZDSvK4e2rKXzbKL9
ekbYlAi5vFxYkIgyhM5PhOzOFea4jK8XrktEHZgtzEpE/YDOdNnjbp7L+zK7
Jx43CTcmQhbmmTfQ/25IRN2aY38H+B/hHUr+ClOFw4RpNlOHp9uMXF4rrEqE
vEKvSYSMXmce8nh1ItoC6scKm3vb7spE1I2V5lH3aEsWJ6JdmOHwjnRaMVNv
FzrvqMeLbO5gd5iRj0eFRxIxV56SCNml/B8WHnJ5Pyg8kAh5vVe4JxF1YLVw
RyLqB/T2RMjTLcLNLuebnb/I2q3mIcdrhTXCcOEu4c5E1I019vcM4W7zkP11
dnO67a5PRD1Zbx516DaHMdhxwTzC8cUv5Ptx4bFEyOIG4YlE1LH7hfsSUece
sHmc7ZJHyDry+HQi6hj0qUTIOPTJRNTp+5xH7PFOdZ6e53AIm3qw0WFfaHeY
z3J+k9dDPW+ol/tPhxT1JK83Cj1StXKxT8ZeVi4Xe3XsyzFXZi+cvfGmuThD
w55Y41yc0eGMDHNV/nGWoTQX+1jsX5Xk4kwPe1w1c+EfYaRy8Q97Zbmwy15Z
MhdnfXBTnIvzPZjLc8Fnb43zVoTD/hvnrdiTY3++QS7O+nCup34uzvFgLsrF
mRj8Yh7FGSzOWxXmgsLj/Bb+4Rd5xHkg3DPfYt+O/cAmuUgr6Scv+Ye9Rrk4
b0ReNMxF+Jhr5yIvcV+Ziz0/9hurc7H3Sf5mc7E/ihk9joyZ8roeoYxl0OPI
eJfxL7odHy/8T9fjY+ah4/IJ84bbHeOmEz1futlzBeZLzIdON3994X+6HeEN
st28fsebzEOf5gaHcY7jktc5CmXMXkNpeaI60slcgfV+9gCqcpFu9oczudh/
Jc3pXPzDzLmSQy3jnKmhvaP9G+0xH+O7vD5T5oV5HaZ5nab3Ou9G2S68MbaL
e/bjOZvFeSj28DkvxTmy70w5S/W9KefIOnvOjYywLoUcp7wmwb8ir1Mgo0mv
UxTZ3N3/cDMoF2VMmbMGiqwjy/1ykV/IRU/7Tb3p73/k2cBc5BF5NsD/MJ/g
f/h7ov2mvrJuxb47Zx1OdV2nHpxkPvXvZFPq+im5kFFkfLD/YT7N7qhPp+dC
ppFx1qKo59S/YebDG24+7cEZptSVEaa0GSNNcd9XqHD60TN6q2W0l/OAPGId
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
fdOTSuL+KndGq2vHW6fcmzzZfHiDSuIeKXdDT7RdzJtk91eVxRn6vtB3ILkT
uZMwXDid+MrO3bLTTN+17R7/apmeINRxPOC1Ei4WLhJamuL3ziURDv7WtLuB
Ql3HFfffK5zHG4b9nPkDhAZON/lyvPODO7X1nBe4n+C7ndwxHW/KHdBLTLmH
OrEk7oJiLyv0F/oJPUviPgz7S328t7RU6G1K2fYtiTu38NI2Y5f6V99xoQ40
cBlSJ+s5fchLHecfclTXeYYM1XZeEo+rHQbxWmFzL4d/pfOMMrzG+bLS9qpt
7u+8J633O+/vd7l2K4k7vdzx7WrK3d8uptyT7uE8WOK8v8ZhdPc/3HcsiXvR
yHEnYYHNBzuvCf8QlwHm1iVxt5m7zm1K4u4x5u6lqlfCTKGjMFWYInQSLrW5
izBdmCZ0NoXXVZhhXg9htv06XVglXCMMFa4WlgtDTJcJpworzBtmuyuF00zh
dXO8CONg4SxhjNDKdLRwkDBKOFOoENoJxwvlpscJJUIbobWQND1GqBQ6CO2F
aqeHtGZNSWtLh0MYNWyXMKqcX7hPO78wZ+wO8ylO69LSaH8bug6dIfN1wrX2
a5IwUThcvEmuH4e6LlF+RwpThMmUaUp9uXCecIT/4eZQmS8w7zD7gfujS+Ku
O/fp25bEfXvK/ij/w99jS+JOPrxjLCO4Oa4k6je8w+TvhQ6DvLtQuMD5erFw
kXCocI5wtnCIKWV2mDDWvCOEc4VxpNcU3lHC+cJ5zuPJzpejHQ68tsIlDu9Y
YbzNlPEEm493Xk5wOV/kuFJOU+wv/WGjkigPxsi0ibS1jJWhTWlz1IY3aqT5
RCr0CDQRbZwKfQDQRr5X35r8SMVd/4aiDVJx1x9aPxU6A7Db0Hfy2wptbB4o
DPC98Tb2C7snmMc9/mPthjAHmcd+e23RWqnQNVAnFWZ0D9RNhZm77EcLR/lO
O/RI340/xrx/XK7IDvf1D0+FmTv32D0iFXfvofC4l3+g6AGp0F9QLxXhoc+A
tGJGR0CLVOQb9/n3T4WZ+/y42995RLr7p0IfAOEf4vziXz+7GSOMFmoKPYUe
qbiXD+3u9Pcyj7v4nYVOvuffVejivOgj9PZ9ftx1S8W9/y52Q9/C+QXGDVnz
cc8ZB9zwj3qGXoNHba+m41LpMDumQtfAcS4zdA8cb3NLYZwwVjjI9ByhlXCu
eeTN2cJZwsGpqN/wDrTds513ZzlfiG8t5w26Cdo5PHQidBDap0JPQUebazsP
ernM+jpf6jm/Madcx6jT6Gto6fiiv6GV08HYvFLmGiUxFq4QLS+J8XtVSfCY
V2RKon9mjA+Fx7yC/h4ec1bGMrsIxe7D6NO4bMx4i/FFP41BxtWKuXGiJMZn
8Ipsl3FcoSk8xunEizgxRideZSUxJyYc6jnjRPp5xj6MF6GMcZjXNi6JdoG5
L21Ak5KYA0PhMRfCLv088yQo6WH+UCqaKok5A2FiZi5U5DgyNyp23JlLJZ1u
5hslJWEGnZ0X6N44yOXPXs3xbo/xm3EA4wjG98e4jWcecLTbdcb+rd2WM66n
/6CvYN5A3w+P8TT9DX0F8wfcYe9B5zXlgH6OQyyPjMHxAzfo7DjY8jvJdYLx
HH3J464nzGfoV+hzGMcTDn3aapXn7IYxJqWcGPP1sAz1cNoow17mITeM73pb
tnqbV+o86Gp5YtzGWJC5FPlE2MyXGAcTFvMZxkaYmc8wNsLMfIN4YWZORnzb
uCzxm3EZ53TYO2EuUeq+h3qS8xiFccNPyou9RJsLr6ZiDMFY4Gd9710avC36
3ld0H+GXVFB4f6difMO45pVUuGNM8VIqxhmMU15PRXiMU15OBR/e86kY9zDe
eTEVdhmnvJYKu8RjM22laE3hn1T0zYT3byr6Zvrt32iDRPen7iN3pWF+IRX+
EcYS2sRUxOW5VIRZJmxPhR/4+2sq/GghbEsF3U/YkYr+nvC2puIfefFXKtLN
OOuPVIznCPvPVPzD/GMq8nVP4YdU0D1KQ4HCOY3im7Z8rjDHbTp0ttvxy8yj
b7lSuMJtHpQ00RddZV4nu5uVij5ygjA+FX3zJGFiKvrPiebRN14sXJSKPha7
l6Si/7zEPPrypQ6D/nuZzX0d/mKDfKXcFpm+6vyuaVl7S991RGszhkkFpVwX
2i6yQ194ubDAbf1Cm/s4jEXuBxaZR384X5iXin5vnvOrh/2Aty4VcoyM35kK
OUZ+70pFWWK+OxXljZlzc7z9mX/zE0r94X3vK2vGWTrO3nGeI/++N5Q9T87i
cJ6DMxqcpeNMBvY4W8eZDMycreHcBmdGOKPDOQ/cbPf5Enics+MsBWc3OO+D
f/A419PZbjhbwJkMzkxwFod9WfbkOdPD2QvOp3Cmp5fXDjjv0828Eq8l5N/M
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
vSd98KgTvC+HG+oQdnl7jroEhYeu0qT1QB7qtp/5POud/YV+wvrKeH/6d2Gd
6W/CncKf5t0j/CP8LdwrbLf5PuFfmx+ur7Joqjzn3Wr78atwt939Jdwv7LCb
B4VEVTxU8UBlUHh32S5hM/+ppfl+zRoxr8vx/jnvxpepjRa2CI8LvwrbhE3C
P8Lfwn3C98J3wiO2+4uwxvHaxhvvMv8l/ClsFP4Qfi+L9zcu9/rdk+bDe8zh
EPYG2/1NeMKUeKy231uFO0y3CNcKXwtfCZ8Iuyu9uwmf6nuPqjB/pu89q8L8
ub6bV4X5C33vVRXml/RdUzQnfKnvvauC942+9xPdV/hO3/uLtqiK8PapCnvf
6/uAquD9qO+DRA8UfqgMCu9+peEH590L+l+tf1nhxspwj98rKiN+xPd64dvK
CH9lZcQV3iqnlTheYwrvarsj3TfYP9zf7nz6Rbi5MuJHvG4yJexbhJ/Mu812
fxZuNf3JfpFu8uIBpeFHp+ch4WfhJ2Gd8IXwubBe+NLmO4WvbF5r/mfIjOmn
wjLhZeElYanpi8JcywHyuNp2PxEus6zAu8p2XxCuNH1euMN2PxZuN/1IuFp4
VXhFaFoe+xOs1zYxZd1lp/LYs4G3S3ns/bBXs7MpvDmOF/LbyOs4rM2Qpvqi
9YTlDoe0TXd+PSisEF5zPIhjXdmtI+xeV21zY/Wx+jfbflMvZ5lS5+a5Xm2w
30m5KxbScte8bvj7rPCvsF14TthhM/HAblF55BGP2+xw3hB+7fIIu5ZoTdZR
XO//ct7Bh/eM/aZd6KgwmzcO+5QP6SY9D1oufnSZJMojPMqW8AtZj3JZEccl
psT98rIIm7bkLuFry9D8smg7NrrM8QN/F9sd8VpYFm0W7u8ti7bqW2GR+fDu
8b9vhAUOB3/v9j/C+7gy2pJdhY8qgzYTPqwMuotwvdrn35tEnZ4uvFgZ32OF
h9wen2P6gOtTK7lrWRX17OCqMFNHD6kK80nCDfgtnG13tPGDZb6JNkM4RbjZ
5iHCLTbPlL2XK6M9O8vu6E9Gug+g/1ksvCe8KywU3hHeFpYI75t3ZWWk8wPh
ClN4Jzt84ke7QDpo72Y4TNJ/ZmX0T4Q3S3jFcRpVGX0evDGOF/3eaFN4Q+XX
rU7PqcJtNp8m3G5zf2GlsELoZ3q1MEC4xjx0OPO+FG9PbVEZtVEfukz/Rwrr
hXVCX7tbXhW6oLHL21PTZX5BeF7oYz5uRwt3C3cJZwp32q9R/of5qsqQFfIO
fdFLHQ/0P/N+Hm+gnS57q4U7hGGmpG24sMa8EY7jWuEMU3joT15pv060jFwn
nCBcK6yqCl3WhMMbfYPMh9fd/3gHbKDtkl/d/I+4LrJcIBOXWy7eEmYLr7os
T6yMfot+5iT3JZiXVkadIf3L3RfRJy8zhfem0FBhNhAG2Q/6uoHCdZXRnw+r
jPEEff4A/6PfO8V9Ev3Vye7PCHuw/2E+ze7ucNwbK5xGVZGmpqJNqiIddURr
V0V6oLWE1/Rdtyp4yDv1e2fhdX3Xqwoe+YIf+ItM445xA3LP2IF+nfqzU1WE
94a+61eFe+oP/sHbXBl5AI/8JY7kS2P3P/Qlpzod9OFDKqNvJv3DK2NMyXjw
jMoYa2Lu6rpKPe7h8kAeu5tSp3u6POCNcHuA+3mVESfiu8BlTlnNN4U3pzLy
iPy7zHbJm7mm8IY6vsS1l+WA8Lo5fOLXpzLGOoxZOlWGzNEO9a2MsQ68/i5z
xjj9TOH1tjv87Wh3yGl7x5v4dnEe0M51MB/e6c4zZKud7ZLuzrZLPBq6D2df
ZVfhxPI469HA/9iHOUB9wwjhDPqrOmon6oS5jXCBcL6wv/nDhRampwv7CsOE
04S+Ht8wjriwLMZDjHH2s13sXVQWYyZ4/cpi3IOb/h4HYN7H/p0q9LF/jB32
9r+hwvHCJcLFwnGm+N1NmCZcKvQQZpTFOKW76TSniXgxnjrW7ojvXvZ7iLC7
cLJwktDWfNztIQw2r7ntniLsaTrY+YXfjNGqNJbY2ii+ieM6px+7jO2ucL4w
hltufxk3LHbYi93Pk98ry2KcNaAsxg3znE+4W+a4M9Zk/LircKIwyHm2zDzy
hfHu/Y77VY7HYMeFsHsKM513A8tiPDHffjEWYSwzpSzmToxHJpsyBplqv+9z
+ax3mieUxbiHsfMJ9gN/J9kd45Tx5q933Bc5vInm4/505wH5tZvzCLsfKo9/
ttz2Lgt5YYzZ1WkmXl1MiTtnzdizZ/9/gPf22Pc7xv/Y++UcWDeha0WcQZvs
PW3OWPUQunt+vMx7gH29/8c+JHvpK7yv2M98eL0rYs+S/ck+tot5oO0SD/bn
ObvAmQXOdvV0eLXtvldFnDvpKHSoiPMm0PYVcSalk3n1HDbxqmtKmLXsB/6W
2127ijiL1tnu69gu4ZWZz55ltdNNvhzl/GC/n3NXXex+F5cxsjO2nvxqEnv+
nB1gn36V48ueOmclumusfZbqyaHlETZ7rnOd7+zdzre/88wj7MvNO1huxnhf
tJNlEZnq7HLG3NH/kKP2lkVkrYP/YW7nf8hsB8W5U72IK2ld6PDaO76znH+U
4WKXzSLbY92EswWcOzjJaaUsB7k8V7hs5jr95ClnPjgPwn4s50WmuWwW29/j
zJ/ucphlN21tl/MsbUyRac6rIdPIJufimyhNjcvifDy0UVmsT+ylPGteHusR
e5eHmfWJfcrDzLyhqeeRzB+g9OfMW6DMEZkDQ+lnmD838/ySNY99y8Mv5is7
ew7K/Lmh+x/mK/xr6nkUZdnK859DbGY+dKjNzM0OpL8qj/nb/qItymM+xz/M
tO8Puo2j/Xq4LOaorMWQ1j3LY41mv/KIH3O+g8rD330lh53rxnyStRz8xl4L
/e9aN+alzDlblocb5pnEFzPrRvi9R3msH0F3L4/54m7ue/GP85Scl2TNgDyo
7/RwJuMM+8tZjZGO00jzCGOUefjLGceT7J4+vIfnupzb4HxWM/fzJ3ge3s28
erbb3XPa7uZxloE1M85UtXJ9GuX0E1/OfjIf5rwX50FqORzMY5Q3XRrHf+bG
uzp81oaQhZ1dNmc4/cgEZ0NPtcxxPnWI826w07a3+UNdTsPsprntnuKyPMVu
nlHb/4L6gNYKs6Is+mzGLzXKoo/HzB0S+mn6cM71p0WryuJ8P7SyLO5g4L68
LM6C/yX8WRr3M2rYb+5nZEUzZXFvoJZozbK4n8E//OX+QO2y4HFvobos3HDH
ALu5srjTAIXHHRfGE8SPex2Vjjv3GOqK1imL+yQ7U2fK4j4J7Sxm7rTwr2lZ
3J9oIFq/LO5INCwLM3ca8IM4cc+GPGCMw10Z+lHGC9yfqFcW4XEPZ3f3sdyx
wD943F/BbrOyuMcCJR7csSF82hru9DCWam6/GHsxLvutNMaCjBm5JwRlrMd5
RMaU+zlP27s95qwi484WzqOObrO5X4S7vZ2nHeyGPDvO5U2ZMa7d32V8vHnl
lovWLqd25nGHCf/2ctoY69CH0V4yru3jMqZf6eS86OG0UcZdzKvjtHZ1Xnc1
jzLoVRZjq5z9ID2N7Hdv510/h1ffdnu4XPubR3nTrw6wHAwwj7fHeLuJdXzO
Z3Buhf3ssrT8FnoJIzMapwn3CGcK99m8TPgiE3tQT8teVjQjXJ2JsxSc3Xg2
E/tP7DuNsB93C2eY3iWcKzwuPCYM9787hTHCg8IDwijhfoc92v8wj7O7R4Xn
M7EHxv7Yi5nYW2Lf7MlM7Kuxr7UxE5S9qacysT8H75VM7GOx7/R0JvbP4L2Q
CT/wd0Mm3LFX9mom9p9w81Im9vMIb1Mm9vlw/3Im/IP3TCbyAN5zmYgj+TLW
cX9EOMf0YeFs04eECzIRb8K/MBPpwXy+/z0hnCzcJtwqnCjcItwsDBZuN2+B
8J7wrjBPeEd4W5gjvClsFuabD+9y4X27ucx23xLmmuLmFOEOhzFEWG3zUGGN
zacKa20eKNwo3CCcJqwz73SX+XphmCm8AbZ7vdDf9Dqhn+m1wklON2ke5HTf
JJznvEG2TvA/wu5rd6uE1zJxXoGyXJGJsz5fOc27ea/yg0zsfbKHidxz3oiz
SMgiZ4wwI9f82+F4cy7tL6fjH5tJ33abKWfOQnF+ijLmzBNntcgjzrH94fKH
D2+t/YOH7Bdn46wTdQBKPKhPhM9ZsLtMCa+P03qN8Ivq6RGihwtb9X2U6JH4
re/jRI8VvtN3K9GWws/psHsYcdJ3W9E2wu/poK2F39JBjxF6O5yVQi9T8nVL
OsIh7G36PjoTYf+aDndHW1ZIN2e7FmYi39+3PPHvN5cbZ9E4z/VGJs6ccfYH
eW3mvWLkmDNn8JBT9qQ5h4K8QuEhy9iF93om/EAOCG9370V/mIn9b8qeOoEs
EMZHmTiDCO+TTJxNZF/640xQeMgd7QR7+MgflH1+2iooZ9+QZc7bcVaONoB/
yAR59o1lcZXT+q3z9VvzqBM/2T1yzdk+zvTd7nz61bL+s+1RJ7bYHvVkq83U
m20232Z3mK9zvMjrxZlIM/mxNBPt/WfCVaafkiaVYx/3GWlhoDBAKHUf0lNI
mfagrxAGCScIhUIXobNQZXf9hRpCP6Ev8qj+abIwifNe5sNrLvO5wjjOk9ku
8eC9Tc6j0bcVydzVYRQL3WxOCt1t3kv2zrNfewvn29xCuFi4iHcFZe8k4UTh
AJnHC5cI+wgX2M2+woU272d3mEucbsLLON3kUbX9Iy9aOn0Thf3tN2EfIkwV
pghHNVBdE4amY2/gF+Fn73lAf/L6+9/CX16z/1z4jLVduRvUVDKr7zby6zJh
rtBWmGdza/+bk4t18W+Er72X8JXwpdf4/3EY15j/lfcGCOdT70Vg9wvvLXzh
eBxjv2cLR5vOysW6/LcOjz2AbcJW7wn8avNt/relKvZefhR+qIq9n59sXu90
/+l9A+gf3jeA/u59gO8cHvsG39t8g/373nsPvznsNXaH+VaHT75/rzI4OBNt
ZU19n2z5qC2cIgwWpmZifMB4ZHImxhOMUy7NxPgA3vRMjCcYg0wzhTcjE/0T
vKfSMbZKCxupJ6KVmSjzw2U+THgyHXx4xPFI2vp05NlR6TCTj0enwzzF8SJO
kxwvxiaz3LbSLi5yvactXp6JMR1jviWZaO9oF650G0BbeIUpvNmZaIvxa6b9
Iz0TMjEuZEw00WFivigTYzLGNxdnYhyG+ZJMjKswj7c7zJQB6SP9tZzflAFl
dkw60km5taF/SodsHSR6YDpkFnpAOuSgZTp4yOz+oi3SIROt0sFDdvcT3Tcd
so477O3Qd0fRDkIdYYjLHnnHD9zUTUd9hVcgdEqHm4TbPMzbZb+9aLt01CHC
2Yc4uT2YkAtZPpY+OB2yDCVtyPtx6eBRL/Hj+HTUTyg86gcycmg66gn0kHTI
O/Rg8sXh0K4dqbZigtqKvdLRXuydjm/qNvHCTD3BHXlE3SCPyfcf8DsTdeNH
wsyE+ad0jCMw8z73V8KXiXi3G/pFIt7n/to83u7+VvgmEW93f2PeMtv9PBFv
cn8gvJ+It83fE97129EvCS8m4g3v983jffGXzZtvu+8k4q3xV8xbar8/E64y
/TQR735/JHwo/JaI9xd5R/HXRFDeV/w9EW9YwvszEe9c8t7jH4mg8LYm4l1G
3mnkvfbnhGf9PjZvLvIe5iKHQ9p4q/xjh32l4/IJ79CZfuw3tDNyly6MN7NJ
9wvCtkTEi/Am+9/ziXhH/TvnL29o466qMN7ShlYWxtvd5aJlhfEGeIHojkS8
d16q71RhvLldIposjDe5cVejMN7qrigM97w3vl34x+94w4fHm+L4928i3ggn
HPzlbXDygPTwFniiMMLmbfDCwjDzvnhRYZh5b/5t4a1EvEkPfTMRb9G/Yx5v
ur8mvJqIN+3fEF5PxLv02N2ciPfpN5s303zc8J55cWGEx/vipBUzb9j/KPyQ
iLfood8n4k36752/0x0mssXb7ZT9FoPy5z3PXxJBecOTuO/sNxUpQ95P5b1W
0rCL32ZEZnf1+4qkr5nfV0ROeQ+SdyApZ9zxvivyxTuOvOGJfPMOK2/DIgfw
4VGveM+Vd1yRRezy/iT1BLvEgzrBu5KEQf3jvVjM1F3efMU8yfL1nOWXtyd5
Z3KCZfwZoUEi3p7nXfqfCuLt60Mt37xPiRvkfg+/30i95e1G0ky7QBwJj3pA
Wnm7knoA5Y1K6gMUv6j3u/vtR8qBt2x5w/bvRLzdy1u+lD/5zduVlD1vWza2
THcvjHd3iTf5UW0Z5b3enpZv3pLs7XrS2zzku695yD3vARPez4koZ950RUZ4
45Z3X/9KRFxoL5Aj3mSF91Mi7PJ+LLIGPcR1rJ/DSDkuPSyXxJf3imkveV+W
cqWe86YsZmSRPEAOkHHSynu/yDqUPEJ2iVdL1zHeJO7sugflrWPqNO8Qt3Pd
6Gp71GfeJIZH/eZNYswFdoeZekZ+k9ecJdnuMeXNrhvUiRsTkV/kwXvqO3ZT
v7Gr8I6+m4nuwthE33uK7iFUZGJuz3z3g3T8212okYn1AnjvpsMP3H9Mnyba
nDkNfbXovoxp0vEPf79gLJAJ3if0e5lw8yX9fyZ4jMP6O4zDPIZjfHeEx3CM
7w7yWIexz4GmjGVaeuw10f3lFI8TW5lOct851bz9PR662P3opeYd6TEW4R3l
MRzmoz0Ow8w8e47NhztexPWzdKR7n0zM4+fa3qfp+Eea39L3zqI7CUmhu9BN
KHd+M+//Nh3pIa1fpyOdBwjfpOMf5pf0XU+0rlBmd6wTpISeQg/hz3SsQ7DW
UGp+T4O1BNYXS2yXeBQ7Ll2FV+S2gWh94VV9N8yE+TV9N8qE+TnGi6I1hWfT
QXPC84zdM8F7Mx1pbSpsTgdtIjyTDrvVwqZ0UNY9X2D8lwn3r+u7cSbCeyMd
7jC/nI54kf4X05EHuPkqHflE2b6dDrkmr29yPaAOsNZymcuGvGGdjjU8ZJw1
RNYOkddxNu/uf2e7zFi3HWl/R9lMOKNtpvxZW7zA5c3a4nlOM+u2Z1g+LjCv
qf2Dt5ftso7b3JR4UM/OysQ6bjNTwnvCeyOs09+WiPET45Q7EjF+Ymx1l8cF
tDE3uA2g/bvVdulH1yeibaUtX2dKO7rWlPHXY9ZbwB5C9+q4A8L9kdsdDmGv
TsT4jLDX2B3mxk73cMviPJdBI/873XLAeivrjsdnYs2UddaOmZgjsXZynP9R
Zh38j3lVu0ysc+Gmvf9h7pSJedQSyzjyztyrSybWXJhvdTa9wnK/1Lzutsva
fDdTeMgX7Q1tB20W7QfzLeaKrLHSflEPWEdmPXU/85EJ5pQDbS/rtLKemjGF
R50ZbPfINGvBrA03dD6xplvb/7CH7A+1PerDqTZTP06zuYHdYc45XuT1Peon
/nWfwd1J1qxY8+KsIvNA5uIvVsU8HDP3A/sL/VhD4q4FdzKq4+7gAPOmcF/C
PO4y9vJZRe4fnsA5QSGRi/ORnYQC047eO+FMYTevN/WweZLDeU6Yyr0Oh3EZ
9yu4kyHM5o6H8IYwy/R1YRp3ObifIczh7oftzbU7zNyT7O241nD6+rKWwz0N
hzGf+xs2L+Duh80VttuHNS/uvVTH/ctxptzvHGvK/U7uoV0hLKmO+5cDnXfc
UbvSvI7mLxYurI67mtzR5B7nIOfj+9yhEd1NaMgZUGGYUF84TTg1F/dYTheG
+X4L9DTh4uq4F8qd0UuETTYXO+85Z3p+ddwX5Y7p2dWxDsge1zlOB2buo3Zx
WY7xPRburV7g+OL+IodDGsZXx91XwrvUZUJZThCeNW+iyxlzkeNCGNNlftVl
OdNl+5rXJntaVk6R+Q7aJOFWYZuwVRjsf7c5/euEtcIQYbXdkDfrzTtTuE+4
VzhDuFu4Sxgh3GPzSPPvcR7fafen2u81wlBTwmCth/ul3DFjvfU64dp0rLGu
Eq5Jx5rXrcIt6VjHvFm4KR1rnNAb07HWCb2BNYTqWDNlnZX1Y+6ucVd+uONL
nI7NhW4b1iVZ673eYfd1+IRd3/lC3E92PpF/Jwq3CDcLfYRVwjVCP+E64Vrb
/dV5Td1opnB2yUV+/2Yed5WvsnyfZTn6352n6uhLuBdNfUKWdxVmuGwp79GW
Ke5A9xeud9gDhBtsHijcaHMP4WphudBTWGHzIKfjJocJf5nDhi6tjnvVSx3X
XsJKuz/B7gjjJOcN+dLXeUC+jHIckZvezifc93bZrkzHHbKhlrtGSudw19vP
q2ONmzXv7fpunwt9Qv/qu0MuzF9Wx1o26+g7qqO9hMf9TNpH6g13OKlL1LOF
wgfV0U5wR5d6Tr3/qjrW3PHrILvDzdfVsW4Fj3ufk+3vAfYP97WpY8JgoZbp
ybm4P0ydp83g/u551dEWcpd0iv1q7n+0i9w/pl2gbasj90PsbwvHER53cGkj
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
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
mXA=
             "],
             VertexColors->None]}]}, 
         {RGBColor[
          0.3733767373440788, 0.19643452764465352`, 0.6418064894281543], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJwtlndsVXUUx3+2lE0H3Pve7bu8vmoiIEsUYrQMEQerBmONMcYQtomJjAKG
ZaIoQwpijCgd9NUORhmKgBAgBYxUaUGQZTT6hxgQagFbhhiE+Dmc88cv97zz
zvj+zvzdP2nGi9NTnHN3Oamc0mznnk04928n5xpznUuGzv2X4dxu6GXQhdDD
Ys4dQOZOZ+f2wl8F/zb87b5zOzjT2jr3Fd+V3ZVe7zm3kTO0jXND0C0x3SvI
HEJmAzIN2Ck3O0eQbYLeg3znwLmWuHO1HZwrgr8F/uVUtbuZU8uZFio+wbYc
+79gf0kX7MAr47+98EuwMzvHucUdnauJODcRmz+3c64OmY+RuYPMLvCsAs8b
2PSw00QsasE5GXofNodj8yK8d6EXwW9Cvg75ecgPR+ZpzgBknuJbkVB6aag4
BIPc6aqn9/oC3SJ0p6D7PNj6gS2vo/qZFFNfp8E5B5xBe+e2If+lr/KHsLMJ
O49h5zq6l9C9je4g/h+BzYo056bDHwN/DPzOfHsEGsN6sJSin5rp3NfQS6Bn
ga0BvZu+3j2K33b4/QN6HvddwDlPPVwD11lOUbpzg9FbgP5D6Gah1xX9Mfj9
3tP8yR37wM/0ld8AhtZAcZ5Fr9YwpETJC74KuGMrtsfzXzH2S/j/W+iUTM3P
GsvRZr7LsF9DDfwkMc9VPBnYvo6dU9xxFHijxHEemGdD94Pe00nrbnBMa6+a
73pOSrrmYZvFdhZ2xoF1JjhTwVZk2Nbic1eoMfeQDdF5lXs1wj8pOYY/G/4K
+FfSNB597O5HwVhh+CvxeRMcjV20TpfGtFb38H+xp7X9Hd8TUtNttIe2W09J
be60HBWAsTDQmrlDvk5wmttpzIpDjVtvZAegMxEMJ/m/MK4y0kMrzNcNbDRw
zmOnke8POUpPBdc5q/lmbOSiv7Wt1tSbgdbVDny9Z/2VT6x6SryIVR26mfw3
ktj2gpeMK3869GjOWuhpMe0T6ZG38ZMJvZ+8RPA1ANzlYE4i+zmnAzkN4D/q
a23/SU7Ho7MQ+XWh1pPUUguyv+Er2UF78aD1oMRgtK9xEL0L2aorPZdvMdyO
ndVWVxeQD7jvRu6bgZ2F6OxDfis2DvLfoLbaBz2s9g5hbwIyechcBsOvYHgL
DM3QV6NK+9g71117qkXubnW+3NOaFr+n4J/hvAT/NN8Hc5WWO/0d1XvVwL+V
0Lo9Jjm02lvEXcoDrVvpjw/sLvPhl1m+irE3xWb4WuhJ1vsyd1fb7F2HbJXN
yXt9YDar8F8HjoFgmBOoP+HLTC0OVP4KPi9i5740tVFv/Ep0a6Kq+wkyn3Ja
wdaVuyQTmvcs5PsH2r8SJy+isZJ54IUaK9kVl33dF4ehr0NvgS7Czj8285vJ
xeKEzu16ZG74WreXsvU/4af7ilVwSm7TY5rfw2CssHrLwO++mPZpiaczV3pf
6vFoXGV87D+MrXXY+QaZDbbjmuH9bnshyvcRfieR2Y/Nj2yfevD7wy+TWMXU
n/iSfLZ4mtNSmY2cE+11F020ezUSmwrOFnp5t6+zW2ZCN759+V2apvv2eKh4
pL+rra9lVjWY/c3ILrd6lnlT7+nM+QteIqKxveVr/0sMW8Fyw/rrhUBnkPTO
TF9nn8y9amyssfw2oReP6J7eGWruhS9z9DPbX7PQK7CZOSPQepVabfG1D6UH
ZU5n5WrNjyYOudJvzPNeyGTZfJMd1T+he0p6aIT1Tk9f56DISAyO2Kwbgt4r
lrthMstt5uRjZxynCjuZgdal1KT4bMpRv4uwPYQ79CaP59GNRLQmL0GHEX2T
9PM1H5KLJLxKy9dI7NzN0d1UCB2x3TQHeiynspPmdmxc5eWdNcV2Vnqgu1z2
+I+h7lrZswn0HrCYpCT0DoJf/DyXrb5OYXOCvSWqIvoGkvePvGW6xfQ9I9hb
fcUv9ZsV0Rp+B5msmM1b7v663b0Memqob4AgoXcQ/LIbB/q6H+UdkWe9nAf/
Zav5anj59gYrR3eo9aDMgydtFwxH/jXrneMR3WGyv+Td8YT5vRbo20LeFQ75
ruZ3cqgzTuabvInG2+6IJfRNI3Xyoad7V/ZgNvy5FjfZeyvtDSb7qjyuOyvD
17eO7PQD/N/TdlwZevPN5ijkx9qOk5l3zGZmQ1RnqNDdfMUqOM9gY5Pta9mf
K2xXyt64ZnvkcWQLrK8L4c+1mXAQn8/Y3nk/1H18760Lv6+94eVt2D1b4zM0
1PxJ7v4HL23VcA==
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwtlllsVVUUhncvtFilt1V651ETAcusaCgiFaMS29AqQiEGpRIjGA2GqSUM
6ouxg0XUxIjF3tKWllAQA4lixIKMxoIUW2N8EDQqgxSV0RjH73edhz9nnb3X
XsO/11rn3Lzg+ZmLfc65djAYhIPO/RR3rjPHuS3gs7Bzm5LOtYAjyAUB5/wg
K9u5UvBkwrl+zoSvc+6bIc4NxJy7XOjcJXAe+SC2dqL/NLa2gtWyhZ0MWIU8
P+Xcvohzk4c6twYsCzm3GLyNvV6wn/M7OP+UF89E3st5nwHuQH4x7VwQPwHw
AvIKbIWx2XqDc22gAlvvE+MOUI5chU4Y3RCYj9xL7D1gm2IfYro16FWH7Ew3
PrrwNRHfK8G/nLtAbgPgH2R/1Lm1+NtD7B+D31jPDxg34igHG1OwfzfIRp6O
7gFi3A8eRH4L/Q5wD+RfGkT8+M2A3FzLfxe2LoOuHOOwAM5GwV0RyEcuwX9z
ynwrhluwWxqx/KtALzl2EOdmcDxtd+Mjp6y43VExcQ0mrkFgEnJewHJUbkOR
y/AzCj9FoBS5Cr32oN217vwLbLaj2waOIReAzcTk85Mr+JL3Lex1ghPILeTW
FLLclOMI1r5Gv8HTb0Gvh7W/8p37G5SRy0MRy0U5pfF9nti3wcV2cDpiNaTa
WQ0qiHEcsY4F5cij2VuKzm7O/gHmcnYFeS0Hc5Az+Pscf3/mm8/bWXuYvQow
IW612oGtzUmr2RL07wPTwFRwlFxOwclJ0BOyu04jpxJ258mEcSxuE8hl2B2L
3TGgFPkunjN5PgLuRL6RWPZGjQtxOAafE/A9HoxG3orPr9DxFXBnYBfvr3OP
68FO5OHsdXvnxWklNmuwXQ1mI98PH+9EjAv1XHnS7lh3OwO5Hp3tXr3/km21
MYzYbwpajaj3xJG4UQ9mIlbTquXmiOWiHlVvKqd6zvjg5VHuuwGksPNz3OpZ
dygunwGLPE4T7J+L26yQjnq1xONaPTuN/PrJbxa5bQCfIPtZywN7kH8njjae
PXnOvQyG47uOGGrBrZoF2GiEq1fBjpj1hmpUtakeSZLDWXg4AxIRq231kHpH
Nb4AbEBeSq0sAb9i5xxrH9K/u0Er8R8P2izRTKkinrMRq0/xrd70pWw2qZ6v
RW0maRZdRQ6xt8yr15XgChwejlut/88Xepeilrs4EHfPgWc9Ds+AQ8R0EJxG
DmJvesRsyWYZHCz1+k8z9iT79dirA9+mrFf78dGXtp7dB7qwtRXsjdksGEmt
jAjbTJDvOlDrxXAhYDNbs1rfEPWaalC1p56T7kfY3p22M8VgDXIRXN4GFhHH
j8TxA1gYtV5Uz6pXK7xZeMjrf9XHNfRqo3bXuvNXsPdB2u5Gd1SL7pKA1bJq
Wr4b0KmPWQyqjSz4cCGrkWWgz/ueqWb3cX4gYLNf51eztxLUgFXgAPsXA5av
vlGN2N3jzS/NlOWarV79y+abhdaz6tU3kDfwPJy2XlZPqzbfY217zGpU3Pcj
98XsDtbz7E7bbJSPMeTf5PWz7le9/hoxrYtbzy9Ef2PauBXHuuvvOfNdyu78
KvEVcJd9zOJMrnG/jvXGqN3BWc4fKbT61vdsMvpryXsNKE4YF7PBLI+TBtZG
hqzXlbNml2ayZrFm2Jyg2dDZSuRjSfvH0L/FUeTLrPs154ilGhzG94mY9ZZi
mEBOYc1lYsmA1ph9g/Tt2RSzb6MfO3lJ+0aqVq9Hzk1azT5ATp96/xvi7CL+
LoTMl3xWYn8S9puwvTHbctMM1+xWjnPZnxy3vXezbTae4v1k3GakfGtma1Yr
hmHw+FLKvk2aAaM5X+idlw/NDv0ziFvlp38L9bB6V/8YWSmbSZpFDrmTtfZC
+1fQP8N47IXixkUzGMd7MG6y4nuC93u9fXGmb5PuQNzrGzWP/amevnQe431K
3M5q7Qo6F0NWG6qRsewHvH3loH+vx+F+Xtr+wf4DMjZ7yw==
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwt1Gto11Ucx/HjdNZsus226f5/dfZAu4ArsnygLoQgzHvaoyjIaxHkZYQu
VwqWUq62Lki6u1MLR5bBTMg08ZKXbfVgPglqFiaWLdOZJojQ68f5PXjz/Xx/
55zv5ZzzO/ctWbVwZU4IYSFycXpMCLdKQtg3NIQb7Cn+M+NCeG10CKuHgV3A
/yIbQl1xCH8PDmEru4//h+/Xjd82b0xZCJf4033fOD6EDaikHyoIYZv5H+Mj
dPo2IMYO+iD9NWrTuJ9a3yXeRfHOsHv4r7Lz2LlYRc8y9jC9gJ5Kz2Er+G+J
c0DOTmyhv5F3vprWYS3KykPYdU8ITxq/mdErrqN2hFrEqBZjHZrpTeIeNf9l
4y9hBR4ZLo+xQnMKEujePGtGhdCOyfSRsXLRFda2ytmCJlyUt16P+9X1Jd6h
9+j3qv0+br+X2fv99D/40NhX2Tj+Lv0BppaGMFTsXJTQF8x/k92Fn+6yB76/
Qc9ma9j1aMXnxraJ1Y6d6Nb7HfuyRT99avwFtfRmvZ23dkDtrfq4yvbxWzGf
noc5qL3bnJJYd1LrCbV3qOWkGo+hckgIP8pzgr6GfvovdNFnjOWYX2zdcy7e
SHYQv0WOiWJPwExsl6NU7b8bu4Ar5n0mR6M4p9V/Cs304ELrzb9jbr8+q8QJ
/PPWXLam2poiY338Qj1u1OsGjKS/zQ/hnDgN4uSIs5ft5Z9je9Jaz7K9/OPO
7090WLPY+mN0kZjD5cjH/Visn4xvj9Ft9KNsGX+T+aXylaA4E2PU+37Q+Cvq
62Tr+Dvdp4b03n3PtvGHIZ/ucB4T2Tz+EfGmi3NHnGXsYX6juqep80Hnupxt
4P9nfrk6X3TvLlt3k3+zJP7ryf99IM1fJ8Zu5PgHbon1Pl1h/IG0p6fZSWPi
WYxK711xaTyXRcamsI9jEt1o/gi528Xocp8OscP5L+AavUOOYvU9Pz6e49vp
P9qUjWc6zZxmNTThibTHvc7gqPHvsJ2eMiT+40v5a6zdnI3/+yI1zFbDLKzG
ldx43pfsQY04RZl49k/xB7EBM+lq+/Oze3PGvTmNfqy138uycV+TvVxBV8n1
mzVLxZmht/fYX8vj25Ipj//36+k702Kva+z5eqxJ39DapFexbotTT2/Nxnsx
I31X2srjHUnew4a0z0+K49tYNTq+x8kbPDd98yaXxPuW3LF70//ph3Hx3JOz
vpG+oQNsj+/d+Dd9p5NeTyJPn91jY9/JvhfIf8heVWbiGSTv4cr0vW0aHd/G
CXo4nPw/6MWzzrRHjG4xunA2fQeXZOJdTe7n8nTP/geejwFR
             "],
             VertexColors->None]}]}, 
         {RGBColor[
          0.45333747468815755`, 0.335464655289307, 0.7542009788563087], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
TMhZGrL1jq4hb7R39z8/GprJ
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
jy5GxlEfb9Xw/+ozt4c=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwtk1tszFEQxkerF9WL2m3tzXYbpNu4xLWLNoiKaqtpFQnxoOpFJG0jLdVu
mwgeBEGIxO5W6WUrG8SLiFLXtIngQRNCEF0PpcSutHhwK7+T83/4Mt+cmTMz
Z2ZOdnVdZW2MiKwAcWBJhojDIWIHZvg2Dr1WkfMgJ1lkXpZIMzxqF/lhFjFh
H0VG0M+BAZdIP/DDJ0wRCWDrhd8EJ+DRWJE+Yiy3ifwhXjXyNrqHfJvJ9554
lcg89AjIzhT5HC/iQn5BX0ocL/GbQT7cnSZyhbgP4Q+AH+6ZKDLVKTLfIpKQ
RM3IdPQq4hYSYzVYDO8gl5W4H9E/gFHOQuTq4KwN1CSIlE4XuQh3gBGHto/h
Z0evI99xcAz0Us81aolOww+smiTylrsRuD1L91D1bT8IThZ5xbu/g8FUauLu
S/gabP+ocxwUwRvxyyXXDGCl1nTyu+GH8H1DzNfgCPxwikgZ/rHo3dwph68H
P9EvYe8B3aAPvyHOdsBXwo8i36EvQwaQflBgzKUFPkyMJngqZ170UupaRy9N
9LQGWeLU8z6o5svbfXY9+zu8u4F314MASKQXG/BfiP8CMBceT4wy/HroYxB0
gQD9/ortCT6PwTf4ryQ9Hxv2YXpvydSz2sPdQfgz8BfkJNJberMV2xZQAQ/H
6XelUP8t3pFv029U+9hm7InPrHdzl0W/T72pFl6cpOuthOfDyy26dqexC2r+
n8gzQk2p8DB8CJjg1+N1HU3UMAu+N0PXVEIvCsF2am2n/mL4DWynsJ0EjYZ/
P7k6ydUBHsHvkj8X3zLQz90L3HXDk216Tmo2acYbq2z6f6k/tdOYs/rPeca+
L8rQf/ue6j0xgqAT/CZuK7Mz0YswO1mAbHHpWQwYNYxZ9Fye0rMX2J+Dy/AD
9PEM/D7+4+zBWfhpUIT/HPxng1Jjb9Q/vWrcCZn1n23AvtvouQ9Z79T/wM7+
edjntVb9J/Zh24TcCCqMucy06t1X+x6jdhv/VtU77CHs7cgW9P+yVLfm
             "],
             VertexColors->None]}]}, 
         {RGBColor[
          0.5332982120322364, 0.47449478293396063`, 0.8665954682844631], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
odmZ
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwtlntM1WUYx99EELk64ZzDuXA4KkrSWpY2KzUVJrM0l8bKyzTF3BRDEcRC
09Ysq42aLSa5SUmWYjmnVtY0AmzTtWm61l3tLmhOpEyc1qrPd8/7x3fneX/v
c3+fyxlSsXLWin7OuR2gPziZD0LOLR/o3BiwJurczoRz72c79x7IKXCuJMz3
dOcOgkLuvog4NyvLuSxQC/+OhPEeAA/GnCsLOLcr2blLoCToXDo2Rgxwbjio
h383/B9km43F3H0NTzjVue+578vFL3QkgavQa7hPwb/yVON5DN5ir68IVHAe
mW+69W0h5yLOhd7e+rhzdXnOrUpz7h2whViKiekasfSBa/DmcP8lsW8Hr2Pz
MD4eAs3QN+BtJd4kYm3LdO5+fFkJTuJLE7gNP6f7eBeCJuhavnVDnwfxoOVA
vnSnOJeJ3oeJ/yz6zoBn0X0GG6fBRuhP8K+kwPsGnkNXVcByORr5QcjPRv6H
LNOxjrt58MwFa6FfIp5i/GtItZytI7bZ5GA8sU8AG5Dfi/yH5P5gtuWiOmxv
K3s/I/9XyHKhmmghB23IfAy255pv7fCPzTAfy9C9DBtLwRToRnyoxpeuZMtB
iHOccz4IQm8GVdDnko3nJDLHke3Gt0L03YAehv6KdDu/AP8S+H+F9zeQge+H
IlZ7n/EeXcj/gUwvOAfdAP+ymPHKRiG6hoRNl3SeipsNnWVzEvE0hS0WxTSK
OFdjYzi5KQRreLsacCvv9zgoRndhwN5ab34L8lvDljvlcDDyc5H/McveSLlT
TamWlMONyC5Cxy/JFtNV5FsiFsvGTIv9Ij4u9v5WK+8J6639YBd3LXlWy/K/
SvoTdrcPzORudNzeWm8+g/dsDVpvbQP/wP87vlwAf0NHsV+OzZ3Y6gIBzqt8
PajnY5zXh+1OPHXoXo6NSrAaegN4y/ujHivFVka+9ab68QjylcS3DHRCT4f/
PvingmnQb+NHO9jEMBoHWvl2wteDdIbRdz5mvdMFKtC908ejedBJrTaDbaAD
LIhZT6gX5kPXw7sNvOvf73LUZoxmSw/0A+jbELTcSKd8K8KHEXHzsYf7C+it
oxd2g+vEsDlis0AzIQW+gXl2dxYM5i12+XkxFaRxfsO/r2q2LGI5US6mQD+K
n6UxmxXqly3wL8KvFb7+fsL+CT+f1ZOfK/6QzWp9SwvYm+otB0KX8TsJRJBd
AobB+zwym8BQ6Bz8vR1/R4HB0H/yPdP7rxhVu5fxqynLango5498v2nm94N/
EPnKBjdBv4jvewI2mzSjatFVjt4aXw8dmqe59rZ643nwTvTzQf2p2aGaUC1o
hqi2NFM0S1Rj8+Gf7OepZObhT07UfJOPYXwYgy+9Kdajh+Ft9f48kWKx3omu
MXGLOY5sadRyoxxVk5OlIZvlmumzoA+gcz+YCd3H7xU/D7UjxnGeg70Fvp++
LbAZrtn9DfRKdFd6/erHdOyOzLPaUI6ley366kNmox1/LwbMV/ncgu7j4OIA
q9mHoOuCVruKT7tRM1WzVDvyWMh6QLV/FDzC93F+/mm+jMfG076+5fMVfHwm
YrNGNdmIrx1+f2sfv8q53c8bfXuFc5ufL/pWh76v/L7WftnCfaf/v6Cd/jLn
wwmLXTIzmB1JBTbLNNNyuOuMWG+oRxrQ19/vd+0s1dYZ/D8dsxqbDCYGrfe1
01XL/3H+N2g1/Rr2Pk3YLtNOezPPZpJqTzU4krvvsNfg+zGWbzlVLlUz5dip
8ftV87wc+m6/bzSjp0Vtxu7z/dQEfcT/f5HNeziv8/tYNTmW85MJ2+3az3dx
rvf7Xjw3Q3f4+OXTU9zv8f5LZ4/2i94f3/am2G47RjxH47bj5uDfBL8/9cb3
InvK/x9TP0zi3Ov7V99OoOuon3+qqUvIXg+YbtlohP+OqM0azZxmeLf6epPM
wqjNJN1rJ/4Pvf2FDA==
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwtlEtIlFEUx0/imK9xqJxxHr6HlFYucjQrTWrG2gRpGaHlc2WBUaTOBGEm
1UaIgjJQSytaleSmtJokMoWShIgMtEXSiCVoiyBLqX6Xexd/zv9897zvuV9W
w8mK5igR8QML2OUQiU8TiQNu+HyMyLRH5H2yyJtokUnkR/TZVJEFu0gb50nY
zaAfc4uMZIgMg3p4iVVk2SWSAl9KFOnk+xL6H/wmsX8LhuEnYrRfIXar2NW5
dYwAcZOowwqy4IvYleNv4ex+gsgh+AGQmy7idYp8jhPZi8xBH8CmjDgBsNvk
/07tEXCJPiL08A0ey1kI2yCwqvqxy+esLVOkFRTAN9tERol7i7h94DU8HK/9
5sgfxCfRrWNscekaVV3R6I3U6SfOb85XwE/QlSRymDgh4pwmTiuyEj3APBqZ
xwIXUYf0ozdk6BmquS2CJnLZ+B7PeRzwgjqLju+iVje11mfqXO2c1ah7AZXw
Oex6maU3RSQb7AHdsSJj+A0xiw7m8gD5Cv0LuY6SuxpETI9tTl23qrUCvpPa
j5PnCghz1xFsm1SPxFgmxhJ4Z/amivvzkjsblMCz14tsRUahrwOF8B8xeu42
tV/MyOfRdzBBvpdm5svIcfRqejpHTzn4BJFV6P+IsaL2hNiniPnXoXsIU38h
9X916X7UfpeaGoodetdVbdXwGr4dceg61e6VwXP55nfoPay363tSd1MAv8NM
16jHRewCddfIVfSpZP1u1Ft5aGabR+4BzvtBH5hP0DvVTU8d9Dbm1Pt1F/sB
0A9e4L8D31KXzqNiB+Ct+M4Sr9a8s8vIGfR25CfkNLgI77Tqt7ZGrYPM6pdd
v7ubag5m34uQ3ejXyd9C/DOgx9TkU/cNL4YfROaj+9zaX/lsN292hLjXiHsV
hMy95GG/CfuNYAP8A+9zhhlOsHfjYAG08O0ZPd6m12302YN8it6PXQXn5WA/
6GJPnWpmxIoAj5l3OvmKzD34kGmpesZj5q3sy9DzHkzWe652u9fkGmK3atGb
eTMdyEfoZ8l1D+RT1yg1hODnPdpWnV+AP7HpXp+bf9dju+67D9sbYIpaw/j2
wv8DlOnL9A==
             "],
             VertexColors->None]}]}, 
         {RGBColor[
          0.6001692950216655, 0.5859672455500483, 0.9103273735153843], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJwtU01IlFEUPZiajjrGNH7zzYzjJJKlFFFGfyhTZkrRoqRNNjZgU9CfSoFF
EBUULoMgdxVS0LZfCEwoW7QQolUb20TgxkyCiEaEOod7F4933333nXfvuec2
D430D5cBKHKt4lrbBGwJgaoIMJIEYlngdQ0wnQYm48CecqAsA3QEwMtKYCkF
DKwDJqLAXdrnuMbqgBbGDDCmsBropn2H9inaBeI8Z/zFemAD8TdxFYmfSQAl
xrRWAScCe6+3e2lHaLfQ7qUdpb2R9iHu93k+T/sM9/08F2kvEf8384xXAMus
4zPrWU/8fv5Zw7u5qL277G+fsb7jzLmLOd+i7whxHtBf4tuV0N620pcPLIfr
zPMdzyvM80sjUO08XKP/hftn+c8r5rC73Ov22ueZS8h6S+R2ijEPPWZraLyL
8/fE+ciVqwZ66G+mP0Z/u+oLrMad9B3zHpWIUdlo9Q7yvst5O8yYs6G9vcLa
t3vt9Wk7yy6w7q9Zq72C+1HvRR/9H3jeVmf9H06aBvRPQ4P9tUD8lqTxM8N8
ZzOWs3p7M239HeV9u+vne8LiFHOB+PNZ04m0E0ubfvqY/2bvbxv3IedNGBOe
wyJrmmkyDv/xfjxjmpHuZhwzn7K+qq6O0PgSVyf5zz3X3pOE9Uz9igTWS/VR
HLQ5D2+554izoxaoTZuGxNsNxne6TtYENg96K+xBr105LoSWp7Q57r3LE+9b
0jD/xE2v4lO6exoYZk/KeiD+f3Lv9PnK8X6f6/BR3DQk/fwKTVv6q5fxk967
H002Y6pFM5Tzt8JbTBmmZvqxz7W01u2a0ZwdCKwXmstR5/lqwmZAvImbKa/l
b2D9UMwn5vXGMQ+GpkVhauZ2ZWzu1OfTjn+J+5jPozS17HMnbd722ZxOGnf6
S/Mx53r7DyXCnSo=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
             "],
             VertexColors->None], 
            PolygonBox[{{7907, 6381, 2809, 6424, 7906}, {6893, 8255, 8254, 
             6895, 3734}, {6438, 7916, 2916, 6441, 6437}, {6350, 6393, 2853, 
             7888, 6349}, {6923, 8277, 8276, 6927, 3803}, {6396, 6438, 6437, 
             7915, 2853}, {5641, 7389, 7388, 5648, 1715}, {8309, 6924, 3803, 
             6964, 8308}, {8367, 7006, 3949, 7040, 8366}, {7701, 6195, 2568, 
             6191, 7700}, {6210, 7720, 7719, 6217, 2578}, {7751, 6212, 2578, 
             6249, 7750}, {6745, 8117, 8116, 6751, 3389}, {7627, 6046, 6045, 
             6081, 2367}, {5971, 6008, 2300, 7602, 5970}, {6228, 7734, 7733, 
             6193, 2568}, {6510, 7956, 7955, 6512, 2997}, {6379, 7880, 7879, 
             6385, 2809}, {7421, 5642, 1715, 5683, 7420}, {7480, 5714, 5713, 
             5746, 1899}, {5786, 7498, 1899, 5750, 5785}, {7616, 6057, 6056, 
             6052, 2300}, {5799, 7503, 7502, 5759, 1949}, {5397, 7173, 7172, 
             5366, 1300}, {6685, 6724, 3378, 8097, 6684}, {5724, 7461, 7460, 
             5696, 1827}, {5308, 7118, 1082, 5283, 5307}, {5300, 7112, 7111, 
             5279, 1081}, {7440, 5703, 1832, 5701, 7439}, {6122, 6115, 2367, 
             7643, 6121}, {7468, 5734, 1892, 5732, 7467}, {5727, 7462, 1827, 
             5697, 5726}, {5924, 5917, 2086, 7559, 5923}, {8153, 6748, 3389, 
             6788, 8152}, {6444, 6483, 6482, 7941, 2916}, {8281, 6894, 3734, 
             6930, 8280}, {7977, 6511, 2997, 6550, 7976}, {7153, 5369, 1300, 
             5364, 7152}, {5731, 5729, 5728, 7465, 1891}, {5733, 7468, 7467, 
             5702, 1832}, {8026, 6588, 3126, 6625, 8025}, {7461, 5725, 1887, 
             5722, 7460}, {7005, 8341, 8340, 7007, 3949}, {6587, 8001, 8000, 
             6589, 3126}, {8166, 6802, 6801, 6799, 3446}, {7536, 5838, 5837, 
             5880, 2086}},
             VertexColors->None]}]}, 
         {RGBColor[
          0.6589589392356153, 0.6804258454093693, 0.9116675963288834], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFlmlslVUQho8ItOXSgtK7fbe3t4AiGiJUpGI0CCpucUFAC1i2QokIFrCC
iEAb0KAYg4AgioDggmwhkUZBMC4JChpr5Y9BXFCMsroBIWzGZ3zH+OPkzDdn
zpx35rwz5+tYPWlgbYsQwn7GhYyaVAh9S0O4rU0Im8tCqM+EMLFdCLcyD2CM
Q96EfhbyBOQbsiE0JEIYlYeM/lgUwr1FIQxOhrCFtZ35IfRjfhKbamz6Is9F
Ho08D5sqxm5s9jAfYG1iQQj7OL9dOoTyWAg/MFfmQnisbQjfom/P91XopyEv
TQnn4+xrxf4IP9+jL8bmamweAONzZcIZgSvH+B0/Razvxa4HNmPjIdxSEsKh
ViF8yXrHMuH/Goxjs/KZw6YVI4XNOvT3oN8H/iPFIZznjOaW4E4Jk+Ex34Vp
+e+JzwXgP8O5j8Sks7gsjg4ey4/4eZ/xFH7qfN30vYlpHWctAsMO1j9ymwgs
ncBcBZ6V2HyOTR55+wtdJ/Btbq2YquOKa41hAUNXMPxSLNyGeQ7YTqCfUxjC
tcR9hO8XiP065KPIS5D3JpRfy0MVPmfi8zL8n+LcM+hXF+gO38rqHhcyPsuX
/BD6TeibkMcjT0lKfh08tzueGOe8hLwVuSKpmC3eAUlxyPizAQw1nvPjyLsY
h5FnkPNKcl1HzvvhYzt+T5K3N9DXo9+Afhb+mz3GYvzV42cYPveznsS+F/ZN
SfHPuLcD3TDse4HnZvZmnTNVzHvRX4+fCvJzkO/FRcrBxSnlYVlaOAzD/egq
OKMPGHpj+55zII79XeDvlicsHZLC8yC6/nzXoK/EfqOf9TH65Yz1ecqr5dfy
Mxv/cz32Z/HxCXtbgGFnWvdtud2OfllS3DiHz2pw7wFzI7r5SdkPwrYbowbM
47jbmV4Lbazesf8G+57IS5A7U0f3Mccyit04eE1cPDwV6QzzPxnsLSPd6W/M
Q8vEpUGcudp7wlnw/83owrnvYpOPTWGRaqU8Uq7m4Ht5ifjWHYytc8I5AbkP
YwpyW7BMdZzTkzrD/I/IqH9Z74qwPV+qu747oTuw/FeyXpQR5y9h3wr0I/J1
zw2R8t8HfWlS+mxSdiYfjsQDy8NofI7x/vZ2TLis1rf4bDVdyzl3ev8cQtwj
nRtW54/G/q/7Ot9jvJ6e0v0uY17FdwPyWuT1zu3/zrAzLU8feG0uTKr2rNZG
MW/NijszyUM941fsz2P7RYl6RXdw1fr9DsG2kVjW5Im/g1PCmSLeP9i7sa1q
67WUMIwzLjtvrUeezqhPto7EA+OAxdToWL/jzAL2TOPc4cyXZvV22JrVzQnG
Mc457metKlPuLG89PDeWX7v/U6WSjce7ve8Y1y7KiG/jWV+QUt5+Bts7JTrX
3rcx/nYYd8oz4k8XfJ5zTibSekvsHTlDLP29dq5Ii4vGQ6uJ4Rnlzd6WNTn1
ipS9F96fjXf9vM/Y+QfiwtBQpjfV4nqZPKz0Gre6H+zce5U5ht2uQuVmi+fR
eskIr5Em9k3Oqh8uSilmi9f48qHH/u/9JHRHUUbxWCyz4+rpxhl7J4f6mz7M
e4z1GusxbzoPJxHH5TlhmJ8QV4wnxehqWZsaU699IlK/tV7yir9Bxvd651Iz
nGz2t/5oqfJuOX8xqffM+pW9CRXeQ7ZZvXtPviChd854a/3yGY/LeF2eE7cH
ouvtNW5cftr5vA1/nb3PTEqoF5iNcbDK/2FOg7GJcRCcMbC3LxGfj5Xq7u3e
rS8WOGduZO88939HVndp92j1dKVzoxcxLc0qnzPAWBDpf+ZQXPVgfOjC+kj/
LzrhNW333ZTR22/vvnEq7v220XuF9Y6b0roDy7+9A43e2z9NiB/GjefBU+X/
couxfzitM+xfZm1Cb6v1ubneA603nI0rz19F+rez/yJ7rxL+Zs3GR9ZzfhLd
T/4/sAL7P3Pibdes+qP1RsvrulLl9kBaubA8WF8Zk1O9/wO2oHyH
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwtln1MlWUYxp85C+IEZJ1zXs457zkcShiGNS2xD5f0YYP+C7fmYDbNvrZA
GAaDPrA0zWXLEgTRraZNl+dYy8xKUltCH1AtabXK8I8KJk4qtGyKH63ftfv8
ce293ud9nvu5n/vjet6iZY0LG6Y457aBqWC959w6MJjt3JQrnGuIOHd1oXPN
AedawOG4c2m+p8Cn8EdAKuzccJZzUdYsYm4va8qvdK4VVCWcu7fAuQWgEp4C
O+G7c5w7Ab4LOnc05tzPYAj+PjgGHwZ74fux/7JnvnyF/euSrIk6V53nXC5o
x1YtNmvAs/A54Fb4LeBm+AyexTyng1L4fPzrwr8zAfPxWsbu4dvdoAjew14b
wbfslcWeQeb+yng58+eAEPPCvIdAEB7An96o+TKQ69wp37kS4lEMJuAVrD+X
sNgphtnwAOtyQJY4835i3o8gB14Vcm4mvAxUwl9grIIYLCW+D4Fa9vqQM3wA
aqJm6xTfJ+Jmcw8x+4LYfQ7eDdrZFAOdXWe8xHgAuwWXEW8SPoadTux0gOPw
86zJYu/LwSR8J+drY00r2AHfBZ6BPw3egh/B5gVQErB8XsRGGlspcEF+YmOQ
uQNgH/ybmI2Jfw1P6Wye5bYD/B0zH7T36ZjVjnKk3KiGJuOWA8X+HPxRcDRs
tacarILfyNgNoBL+Jj62YKcZbIfHGJ/LeLnWwBuJxULOWg0a4K8yNhN/ysAG
eG/GZ/m6H/4cz3ewU5fvXH2+2fqPtZd8s7mLNeWqoWzroTB8rmdnqwW/832I
93pqazuoIk6fEad+UAmfFrczyPer4IOcu5+z9oEB+BLGSxlflqmHbt6bwZOg
C0zDv0X4t4l67AJ5vD/Ae2eeja2IWUwUi6aY9YZqUrU4PVNL4/h30rOaSnKu
ecTldlAIfxysha8Bj/mWW9Wcak05zvYshopdlme9op5UL6pnFuNjSdx8V01v
xsYBbH0MuuEniMFtGf/l8zjv85J2Fo21xW0P2W6FnyFu26LWe6tBN2NBz2Kt
HKgXpCnSEvWEtEWaI62RxsxgfQ89+i/1uw/M4n0l72PwUvThwYRpjLRlMXx9
yGKgs78EX87cOtDE/L3gNOvbo+aLfDrAt4pC0xvtIW1QjpVbaUQt30YippXS
ozWM3ZmJj3KsWD/MXst8i7lycR+8yrecnMWnPNbPCpgP7xWaRkgb9mR6MUT8
gknrSflyMKPP8ukQdtLYSYGD8E3gE/gh0Omb9jdGLDbSL2lnZ8TOqvWj7P8X
sfkTjCSsl6Rh0i71VBH7fpTRR2n28qhpjrSmPmra/wO5+D5od0A6YZoiLdEd
MZt5OyKWC+VEvg1h94hvPkpbwxHTZmmsaklnkO+qqRae3Ty7QLNvvvazpi9h
Pq/zTQPU+y/6poXSMGmXNPEpxrbwrQe0ZbhsypbGzuv+iNje8uGPAutZ9eo4
fANz6pj7BHgFfk3E7gTF8iYwxrl/A2unmh6PkPuznmmDNEJ3QQnrikN2J6wA
HfCNoMk3bdjKXlsSphHSIt0pukukSdpbNatalQ8XpaGZ+EqzZatR2uebzWzy
9Xqmn5SzVYwt5dsS8HzIYikftLdiehjfjwfNd51BtaSYKpaqKeVWmi4tV46l
xbpTdJdIk3WX7Iank3anvIHfX4KT1H46y3KlmCqWylkZ84bx7xdwPTyXWA4z
PjtgPZDP+7GExVZjSd0hYAEoBPOJ72rsrwJ3wFd69k+jf5l2z3qlH9t9UeuZ
OM8C8Db1NwFGmdMP+sAIqMHma0m7C3QnNDG22bN/B/1D6O7Unam7UnfoP/gX
jZot2VRvK8aKrXr8rojVlGpJ/xzKjWpItaMcTcasZhRv3eHyVTFRLOSzzlbN
We6P2xkHQF/YYqmY6q5RD6r3dOdI60czZ5Hm/w9lnYV8
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwtk1tIlFEQgKfQ1VXLiFy3f1vXilTIDJHSBxUqr1HgjbRaTdZWipa0LLUy
2zbs9hJo2p3QIEmLiiiMkqLwpUAlKkEfelAIRTOIKI2i7+ech4+Z+c+c+ed2
Vnpqig4uFJEcCIay5SJN8DVcxOkSKUVvR1oMkb4IkY3Iy9hHbCI1kBgikuYU
qUPvXybyHPpg0CHSEiTyzy6SQIx4mI4RiSPuyAqRiSiReouIlXufsfOJ+R6f
dzAACfyrN1ZkN3EORIqcRPZgW1wqRzOvYvASL5/71cSbpAAPMg/7JvIYshH2
6rMn5NkcTSxohIFQkWhiTJDXOBjoG4jnJ6dMfDOgHL2SGueRP2AKvZbvc+hx
xHWBndhL+M8a9LN838S5B78q9BYoxO5FjvGtG1mA/QrfK9zpgGb0eHoRbObF
WQOM4GeQXxD9rqfmoxCuZzCG/AUfFotk05NR9F3k30yv68KIgdyJXcdZGH0b
xS8ZeRj7Ot9bOffj9xp5DfsC/8rin1ugGt1LnsmGmrs56zT0ef5bhX8e/rng
M3VinODsEz4fIYAeWCRy3qb6YNa+mZhdxEtyqHzMHFLQVzPTM07VV7OXTmqv
CFV5XLSpO+dsKicr/sXcK4IIXc9b/F9AiJW9wecNeg8Mgo9vw3y7F612byZG
7Umi3kM3MdqI1QoV6L5ItXszcN+s06X2sIR6HqM/Ajd6OrVtJycHsQ0o0vu/
CvmdOc7CX2b50KJm9oUYDcSzGmp+lZwH9KybkHuwT9HHcvJzww70THp6CVmL
XQNX9azG8e/H/yVM6rcT4Lyb817O7yBPY98glw5oh63k2EN+IdwxuONmT6OQ
Fuxpcsqg/nT4Zs6anj4jxxQ96wrkU5fq03o9r3KH6lkScffpPfEi12En0usC
/aY6sdeiZ+Pvx7+au9vQs8CDHYt0geFQO/wA/xzTH/abMwxVdqbeiVtOdZZG
fWW6RyXI1BjVJ6/exQ676tkw9S2wqTn8od4h7Lt21S+zR8f1Oykw3wQcgts6
z1T8Y/F3gV33zOzTEP0oJNcZQ/VsKTHmyOs3/CS3Tqva0SnO2/ALd6h9Nd9G
qd4dv6HeSRfkoedCFszS7/+JxsYG
             "],
             VertexColors->None]}]}, 
         {RGBColor[0.717748583449565, 0.7748844452686904, 0.9130078191423825],
           EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJw1lX1M1WUUx0/KO4jLuPf+Lpd7ubiVNkGbTv7Ikt6XWyzSmKHNzLWloOGM
llvlhCyNYjEg/MPNzEoEdJM1wGbSCqdrTp2bWAZmTZlvWG3moJWuz9k5/XH2
e+653+ec73PO9zlP0araxa9NEpHvsclYMiSSUyDyUqrI21GRF7CObJHafJEr
hSJvThH5MU/kVkzkeIrIKfwPJ0UqckX28t2If81UkathkTGsKEOkJt/2694n
+T+JxcDUByLvJUTqskS62fsW/mr8JyMiXdj8THKQfxF5q3NEboMXfs+Az33w
LHaeg6xTikTWpon8AqaXmDeJuTEukkqcSjh0gTkMfi6Y39KNVxI7DL4N/Dfg
y4h9DzaP+Nfwf4t/Av9luM+DXwtnXM3/D2HrwRTAd7qfJRffOPg5+L8E+wb+
1fh7yL8Nu4uzfAGHeudwAvwrfi6t31i+1XAD+yqwV9nbiu8ymAHq1s06DC4F
zDDxerEHiXmWM55nvYD1BfYN0ZsG+nIv/O+Hzwj+QfaG2LuIvS30ZD1WTQ06
wDSA2Zdltfg13WpTSrwwthzf3Xw3kaOKdcB6e9z8WeR6nZjniLk7abyV81L+
P0D8XemWpzRuuRaAuQ6PZ8E/TR0WU4c99O4r+B6NGeeFYDezZyf4JnId4/fk
TOO4JzCeYeo2kbAeXcB3Efsry3S0NzAtbSHXc17/3/Fd8j6qpr6Lm662gnne
tap6GQlMM9rbWwnr7xNgP4DP5/AZilvdteY1YNZhPWAOJoyHckgnXrnXpJ5v
uddEdXcxZH2PEaecmH+wbiXGJ9hN4szkeycwbTeErRZah4yI6Vg1XEuMrcQa
o27Z4M+63lSnVwI746Ng32f/Z+ztzzNNaG1vJCyHxq/l/zrXQBc9+bfQdPUI
e7d470LE+5vfQ5y3Ag7FWBMcdsChBw4l8F9GzHe85n3ESePMObmG/Thu+Epy
LvMZovfsUGB37ST4RNL0UALHGtbTqVVj2OquNd9Krl3kmplmXKYFxucM/la9
//hP4esi7lViDrL+we+yxpsVs5j/BIZTTGnYeqD1vwTP61gdMZvhuNZ7GhBj
rudS7olC41/GvnfZ/yncGom/1OeVzp47IZs/nezr9jul5zvhmh9lX2/Y7pjW
76eQ1XAF+V/GjmfYPTjg91c1XuazqBZ8i59XsV/HDa+zOc25ac+3ed9V75Go
6WEDe9s91wj+qVHT6j7inPa78Bj/z/D7qPpNi5mGdX48HtgMOQOvcz7z28Ae
8vO2k3MH1plu/e/NNw08gG+iwOqsGl9YaDrPJl6G3tVMq/2fcav/APjtHmcd
MY74W3Mjam+Azsks8M1+Fz5kfdDng2rkaMh00hGxs+m5PiJe1f9awtfoc7gB
7ErX1eakvUk6w3WezfazhwPTgWpA36tVScPouzeeZ3Voxfeia0x1N+ba3l9g
GtV+rSRnp/dL34H+uHHIY93uc3WYvVOiNn/aOPttn/njrIexJvikEvt63Oq2
Im710lotj9nbqTq8BnaJv1Nzid8Grpn4R/AX+/yfEzPeynkgZL3UPs4Hv9fx
I+CfSlpe7flpP+95eE5zTRaG7A3W97eEvbv9vutMyoraXNoU2IzQ+ZBkPcnf
o76IvVv6ZvWBbfMZOIr/Z9fDEr5d/hYci9p7qRrQvtV7ryvB7Pf7WBWxMyt/
1d1sn7Faj8yY1UTf8NF8W4ci9p7pW6Y1nuXn7Wdd5HNsDXme8Xn7H6FOWAE=

             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
Cn0PUe9QD/0PRSbEJQ==
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwtlF9I01EUx0/RprNpZe5f23TZQ1H5B6OVPfgSmT6UU5IIdYEJwQr3YkVR
2iyQoJkVZGT0UJYaPQSRo6ygJkUJ0ioJRa2wKOwfpGD0x/r8uPfhwznnnsv3
nHvu/f2W1oYr6ueKSBGYIG4XCXpFepJEOvAfQYL4pUPkBQzCWovIskwRn1Nk
FH8jNpt4lVsk7BOphzz87AUi/azfJ38vReQLNk4c84h02kQKzCIT2F5iPzXK
qLUVwhCivhmNcrQCkII/nEaDLurASviK1vL5IsXk/y4R+QMzEGVfNvtLYDMc
Je+ml+voVlCnHJrxL1Hjk1P1aPT1Df8nfRZgHcR2sOEPWVQfH9E+g7bFrXqy
o5OPznfOsQVr86o+PG5Vr9anejrP+eKccy/7+rDtHjWnJH2mXLea2WNyF8l1
QDP+CvY/IxfLIJ4nchP7lHiEOv3cQxzeQwP9ZWZxTmbSBIehi7nMsH+K/T/g
Ff4AGrn0+Q/9WWPmuvcYejXoVEMLzLGoeAe0JYt0e1Wum1kcZybHoBG/gVmV
cr49cCCVnuihBP8y+yvZvw0CEEWjjtw0fU0Z9wYhq8g7dCb1zB2svc1U+j2s
3WDtmlPV+o2eXd9DOvYXcRO6XfotPiRuxP9A7XXM0Q+T+q4m2L8I7YUwitY0
ulfxn+geSumrE/8s8z4FrRBmNquZy13We42emWUR++7gF1PrJHO7wts5gd1E
fJtaFmomQwzfSl0rGma0TJAFO/m4TpPP0d9FNbbNp3obo6811Fis+0yHN6yN
G2/QpXJj7H+t7zCBHSXOJ1ep79pMf3ku9eYj6O6mRkC//+3QyloUqvBD5PYb
74y+cjjnOew+4nbOUsgc14Mfqri3Q6yl4Ffim7AHjZg6I/Q2DGn4edTfgPYg
Zy/j7J+xhcSz6CbQfQ4P9Ps39IMwgF6PV9WqI9+i33sEu8uj9Me5uynuK9Wl
avURd2AvGN+r/qcE8SP6LR7B1hAPZah5GTO6pb+d/wl2uhU=
             "],
             VertexColors->None]}]}, 
         {RGBColor[
          0.7751206343402226, 0.8511629602543721, 0.9084356550079491], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJwtlVtsVVUQhicVqKdUTAln73326emhECOFlJSLAUTBJ0xN0IAhQIkmQNES
UPRB1GiwhAYwQKDR8IBGH2hEehFsaZtU8YFIJGARopZaWqCtQikYpfESMA1+
k5mHlTV77X/9a9bMP7OK121Z/mqOiDQzHmA8kRQpLhQ5PFakY5LIN4yaMSJF
RSJPRiIFeSL3JotsSBpmMC3yC5gdYI6EIu8xRh+ED3w3+BHw11Iib2ZFtuaL
VMK9k70l40SeAnsoI3IQ/CUwG8FsAbOSteZA5GquyDOxyGnW5zwk0g9nEty/
cL7D3mo/63swhfj07ASReZy5EFwCTAfYVeydC+fTYL/ws0rgzisWuY0Ppfhf
y97ih0XehqcT/HbOWsr8Y8r8uQrfROx/4LwMdhY8JfhWBn4vuLtg+sAUgPkb
zBgwLfwbjz9T+b+T9VvjRW6wtox/tazfgGMUn15LiHTxv5FRCs8s5lz2vAT+
RGxcynOHuE0NzOcOzuqP7KwLzA18D2NXwPcZvGe4Yws8tYwReHr4n5eyXMyF
s919vg93L7mYCWc+a2vBNIBfz/xI1uzd2Ot8vTNtmlA9nMVu87zvw68Kzq0j
JtvgH/EYboR/Wtpiex8/c+CZBk8N/nzOdxP+vIDP7e7z7/BUY0/BTrJ+OzC7
JzI9qf/HWKsC08tZnybtDur/1+C/ZSwinl8ytzIWJOweu93/ZtZOZ2x9AvZ1
uLLwn8Q+m7G9Q6xty9j6nsDupvdSPba6JtuYV4MZyDXN/uc6Ue28FdvddyVN
66pz9bc7MJ+1DsbGVgubmMtj0/ZB1mdrbvJt7bBrXrl/cv5dxKCeWLxBHBaH
pmnVc1vKtK46Vx3Nz5qWBuEpc73lYL+SNf6v4Pk1Mj0fjSwfmoty5kqv8ZPY
1yOrtSH8F+zXE1bfJzJWd4+xFnqt3QwsLhqT4cByqblbHFnvUE6ty5WR4T8i
PlsLLXcDYFs8tlrH52Kr5dWh6UO18VtgudG86J36Y7vXdvheLLKY7IfzA8YM
OPeCXeKabCImz3lMtLfN997VwN5Gv/vjcN70c1eAL0tZDW4IrU9pnKfwvw6e
P+EZjaz2tO40BrP9Xne0PzGaNF8pq3+t/dKU1bZyluPbRO8h6leX177W33rX
6nBk/U7jr3kT14b2m5mx1e9kfO70PtPHvhXeY7VvXXLNaO953/uP6mip99gD
2B96f6gnJhc9blXYe7CnY9eE1lM0/u2TrOa13rV/rHEftOZ6vHb2aQ9nHIdz
BrN4vXeBfxf8QvT8MfMffH+H/Tz20ayt67zMMT/D1xea3jYXWl7Vt+Ws13sd
FcWWD81FDv8H8e8HfEsQk9bY+NWXgqz5U4W92X2bnrbepH1pR2R1pfrJja0O
Nc6LkvbOqU4+iY1XOdPYf3l+da7Mmq1v0SmviyP4fN5jqNqs9prVd+PlwPLe
GNh99C7XQutBGsPzsWlRdah5W+D6GeB+Q35HrZtD3rdXxRZfjZu+LePSVhdt
selDtaHvTK+/NVdCq2eNbR085/wtfjSwN0bfF30PK7xva+/P97dAz7+XNh+6
Q+un2kv13Rv09+hKZO+N9uolkfUUrf3/AVy0Rwg=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJw1lGtIU2EYxx9G7qQrY5G1nVJn80MrMtkM07xQHwSLhDKz9EuFl0rJDIrI
EMWuBF0IgpZQUVQsZ+rUQQRFEEWmUZSWqDMko+hLN6Ig6Hd43z78+f+f85z3
/1z2nqXtbNi01yYiuSAOvEkSCS0SWWYXuYB+DSZdIvdSRH4miEyhYyAfpPPM
C4rQTnKPU0X2mSINoA4EZvMsWeTUApGToBvkxIuM4dlDjW5wGZ1BLQO2gRcz
RP4sFLGjp/F9iP8D8Bn9ixpNnLmizwThw8QZ1DpP7XMgC/17lkgLdd3Uc4Ek
sHimyLt5zIJ3DETRbdSKzKcP0AXKORMzRAbwvYbvVXAC7aNWBO9M7V0J9xBv
hDvhMNiKXs28h+BXxC9BM7qVZ276z6b/ePr3wy7iufSUCFLpq5m6TvQS+qr3
sDuwHJ02R+QZuSC5S+A+KGB/gu9+/BuBgY7Sk4GudItUgDJQ4xApwWfK2k0i
+8RvA3Etc2biuQIUo33MO43vpPYe5fkHdIRzBu/bQT/agUc6+yhgH9e5KKtg
L/FxZrnDTGFmuw0fI67nfDW4yGyd+NWhR+AJuJEa4/Aw8R7qnwY36KGIeDc6
5FKelk8r+gC+m8ndJTfGeyG4lLia+uupvw7k/e+JXp/Tawm9foKziYO867H2
DAp1T1vgJvAX3Uu+zMrzbq+ecxBO8agdj7PLg+w3zlT7fg9nkQuAj3q31u9d
qn//I6b67XfQf5vuvwXeTvwW7of7wAT6G7kBU9W26g3p3teSL9TfVBW8hngE
jOozCfQ0bPmxi1r6rwEdej8/2IcP/YU764W/Ez8iH2bGDnBLz12OVy4eOWCl
vptO+s7HOw/sAl0O9V3Z9B3zm+obGyL3FYR5VkU8iD5L/0v1na2Az3jUd38U
PKVeNFn9B9yEA7AfbNM565614/2E/fWZ6s79A3cVqSs=
             "],
             VertexColors->None]}]}, 
         {RGBColor[
          0.8279177249602544, 0.8687693831478538, 0.8847826057233704], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJwtlW9MlXUUx89I+XMDXMV97vM814cLK3GlKVsmBqtessFcf2eu1tBKb8kQ
16u21toKbOnsH7Q5c9VKs6FAQKM01qvoD/YGonZZSL6qaXOLFUhp0ud0zovf
fuee+/2d/+f71D7R+eDeIhEZ5VzH6Y9E7sqJbCgXeSgWmUJurBD5MSNyU61I
R5nIN+j28t8m9FfQz3A60X8ViExwLpSIXK0S+Ssrkl4p0oPuMOdj9J/yLlcj
kqrEXiLSgn4d+jmwP/Hm+xUcMFvAbAUzvVqkGMxwschHxHYHvm8ltruRb0Du
vF5kFf5fwNb2UpET6LbGFvMI8jbkJfAlgdlSO//wNs9/n6BfQF7iDCAPgRnh
zBFPRK4vhSL3pkSOYqOEeL7GZis2dqVFLpLXHNgKcFn8ziOPe+7txDKLfA65
Fj8vY/8icRZhYyi23LPEvAhmDW+7waxBP0QMr1VTI/x+ht82MI2cHjCH0A+j
H0Wfx34hML/l2F7kvw3YX0sN8/ioWSWyErkVuYCvx8GPef33g+3DzgB2KrF9
Y8bq1gHmvOde4N2/NZbjMj25XGN9vEaMzcg/YHMP2Hre7Ab/FDHUkcMpYihF
nvZ4FtSO97QLP69yhDnpAntzbPU/GVpMGs80/08lNmOPhdYDrf9sldlSO22J
zdn/M8bdnVgND4HPY+fFlNfPazgSWu20bj8HVjutm87Xr7HN2H7iqUMeJp57
wLbxphn8DLns4b996CcztgMam+7Bost/gL9TceR7CzaOg58H38P/RzjFYLq5
RxPLvYA86/vSyz2WGCbC5zV+H0OeKbP7eJnt1nRi+Gfx9abHtpo7qTbse8zj
88zlxmK7302b3MDbJp+f+tj2QXchxd1GzH3EXKiy3dPaXkJ/JLY5b8J+NjT7
2ivdGe3XUXyOhVbnq5HVTusWU8/vvJ7V3Jd9p3Tuen32ini3nFhe89hpANNO
DLeDP+CxtcbGL8otpcS1z2f428j2X3e/A3ubsPMMNk9nrI5aQ+WVs75fut9/
e8xag77E6vA6mO1Z25HBjPVG+7IrZ1ygMavP9VnzWxtbX7WnuitvO8/UZ4x3
VNbY1znPtAbGa8pp4+R4gZy/oFZnkM/7TJ5GPue7fF9snKV8dVvW4tPYHkBX
iIyHlYOfc05THhrxHi1zP+n7+HTauEl3tgX9Ma/hRGy90b4oHy9V2S7fT5wN
HucJ/LQ4r+4MbQd0xg6gb0J/iR69E9t8qN+FwHZP9+7L0PLUHHtDmw+djQ8j
s6s2lSPLMrZ3FbyTxHj4N92J0OZBOaMkMt6YRHeK37+njDPGfXeSrHGQ5qtc
ozun83MltlqoPh/anmj8J7G3mZjXlxs3HPS5PRgYfyl3vRHYPOksKc9FaauP
8midz4nO6RafVeXF953/G9H9WW3foEbuR/x7MRhZ/7R32xL7riivai0HIqvn
FNhJz3E5tJxV7ufudz7cEdmu6p7qrjf5Piqvr/D5bMd2s/PwKxpnzr41D6Mb
8G/Q5sh4SuulnJ333B8NLW6NeTi275PuThH9+sU5ZDAwW2rnLbCf+zxrDzf6
d7krsu+c+j0TGk4x+u067Hv3Qdrsqk2tZWXO6rk7sjpqDZUvJ5wP/wMNnEPl

             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
3rFqne5Md6Wa9z9f/fUd
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwtlFlI1VEQxgdz3yLwqve6oxWlpaUVVBDUgyC4UFChhKm4bz0GLZItBmoQ
ZUhFRRHUDa+ooWVm9mCUWWGaXUstjSztoeXBTAv7Hc55+Pi+OTNnzpyZ//lH
5VburHARkRTgBkqsIgWg0kdkWYRIMbo2WKQsXKQUnEdXeYvcgy9gN4Bu9APW
wiJFWm0i3v4iz+FQ7NP4m/A78NvhGuzpMBEX9E0vDoS/Ymdzjh/n+YJctN1H
2xvRJegcq/aVk9MtRMTJGXFwGfYEPBog0u8qMgx/xC4m53igSIgnsXARdgz7
95vcp+BobA/YSU1vgS96LT6vIJHDxB8C702OZPQZdD2oBQUeIkdY+4KeAv7s
2UtcFBwClqNP4o9EO8AAKOe+r1lrQq+HS02eQngddh13WUntkUvJBddi24jd
BM6Rr5EYa5CeRQ59S6anZ4P1XB6DTjOHabgnXM+n3syrK1jPaogcbeRoBU5Q
SU1JcIKpvwF/Irob3Afu+PtYe4juoc596FvU3Ih+BDZQYx+zTmUeU3AStp2Y
POJzQbapvTdQ71d7svFPk6MLLlf3UTHmrHbWstCZ4AQQ1v4x09/0Y1bN3cw5
hTzBxAaBDHSsh75Xs9nTG6bvOAum0J/BkJlBNb3IVT0Emeht9KcD3YZuR48p
xh4N1N+R+naa0WOc8QkuV9+WOg89CSq49xO+pV6Qonrgx5wsvINQSgF/qdnC
4/rF95VPjMOX+6B/govE/2DtO7is8rA3DX0HXxxxg3Aq9lbqyTK17oG3YOfR
6xh6Eg3CwCAzeGbT71C9vX4zlyL2vyHPEFgALeR1whmsp4Mm9d2ztsAeJ5ih
1nzqn0dXUf91dLy7yBX4KHYLed3wuYK75r0r+5Kpv82mfcet+s2pd1aDnuFt
DVD3ErQLWOQe37jPPDk96GMrZ8TDf7DHybFg03dKJteYyskd09FpwNP8A1JZ
t5P/NtiF3uynv5VF0/O5AP3ddHDWJJgAndTQwbmxxNezrw4koOfoQTV13QCr
0ImsH0OvYH8JZxaD1eZ9NuNbY/bshh3Y2eTeQe7toNC8zxTWX5HjJXhq8r5U
fTe1HoRfROhZjOA/gH/YqufygX5LFHfh3KtmBu705x39GQF+pmfXLHpOajZF
Fj2//wwl39M=
             "],
             VertexColors->None]}]}, 
         {RGBColor[
          0.8807148155802862, 0.8863758060413355, 0.8611295564387917], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
S93A9vZvj9aMcszyay669YhUp/8DOyHrug==
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwtlllsVVUUhjfQSns7qfT23nN7es+5KBgBNYpMgoKi0SCCUcMLiAoFpC0Y
jCSYaDRhECwUBYU3B7AFwVJkUEoMvKkYBQVaKFAGA0EgAVpGgVK/33Ue/uy1
p7XXXsO/d2bSWy/N7Oqc+xFkgU1J55aknXsv5tz74MHQuZ9Tzo0qdK4GnA2c
m0V/ToFzO0FFmXPHSpw7CqYj38d8tefc+Tzn6sFBxrYlnBuW69zb4OVS5xag
s6zIuTRo5LyVnLcCbENOZ5xrD+0snekznmL8IHvzsKcUeSjIj9nYPub30z9P
vy/ntdMfwvlVyA+Aqz7j2NYHXEEuwr4pntmmNVPp76U/I9+5BrAdWz8Hn4FG
MIi5trTp7gcG0L9Iv0+ejTWzphibe4Am5PnM90RnBsxD/ob7P8R4TQ5+BCPi
zt3ifjfBcORdzC9lPivXfLSasW7o6gpWIVeipwM9m7FtFliKvBg0cHYbaEHP
bdABDoZ213z25mXszsPQvZ4z1oGhyHn4IAu9iWznJoJF3GUD/qsHC5GHovsy
7SXwmGexLURXQcZiPNgzn/SL/HcLnYdAC7iZMF0b2FufNp39ObeKfZXgEeSZ
tANoHwUzkKdxvxue+V4xuIl9OYx3BzeQa9DxJrqmgSVJW3sP+dcexaswMJuq
onx7Tv5kbw14FnkCe1LY7oHxyKMZL2a8B3geOcuzHFIsFVP5/jj+ORa3GMhW
7dFa2ewYv46fr4HOYudeR+fT7B8JXkMup11A+y75OBK0suYqa6+AI8itJVYz
qpUjyLmc36QcBjnIr3CfrbT9udvsfPNFE37Y75tPFNtW6Qotxlq7ybNc0J5l
6M0nDuNyLOdOsKeKsUpwHPlfz3wuX88Ei7F1BmdXgWrkLZxzmDseApuRx7C2
ybO1fcE4+kc9s03nPcmekL0BGIH8oW85rNz9AHkN7TzauaAubr7SHq2Vz6rB
RuRNMfNZB3bewP5V1EJzrtXaQM6bHsVnI/0m1l+I2Z678cGp0LhF9dPAfAPz
38eME+Qr5aByTz47zdwO1jQytx3cyf4TodWm/HWK+Z/ERTFbM4T+4/SHgcHI
d7H+ZGhnqWbHwWeLQuOyADjWlbHOB52cOZn+ROSn0DUnZrWgHFVuqia6qK7w
SytwyJNYO5w9T4A3kCvwd4tntS8OUC0oZorV/zUBNiNvjRlnd0uaDTq7K3K2
8oq2O8hKm27lrHJVZxQp30O7u3JGvr3DM+6Uj8uYbwuNi7MLjWu+xtav4sY5
u2i/JLZfgF+Rz5aZDTr7DHJnwjhC3HAbvEjtruVOa8BY5Frae6N6HlBg3LGP
vXuTxiHfovdP9O4Ba33jzpaI68ShY9i7Hh3rwAvIJ6mxbhG/7eZBW562N0Zv
yzLkLsRrFPsOcJfmQnt7xDHiFr1BjrkNKbur3re/8MXowPJfNVOHDX+g/3dQ
61tsX03a26QYn2PtypTt1RtZiw8e5t5L8e0voLdvb4C4vxdyFe1Y1RmojJtv
dCfdRT66zX2uY/M10FFsvsqkjPvks31x85F8sxf5APgOeT1ojlttK6eUS6px
xU41qtpUDFXrG5EbfKv5as7sh/6+4GPkJP6oj/yhHLiAjmzPalE1eY0cbgdt
4CrwyZeL7PmHubV5Vvu6o+4mDvi71DhRXHii1Hy5mvFVvvl0LGNz2e8X2R9h
e8Qh4o5G32zVHXU32azaFMeL21WjyhXFSLFRzoTcYYJntsgmxXKdZ1ymmKr2
xHniOtWg3j5xsrhYb6C4U5wtrhaHyjc16FgSRD5izfyk1bY4R29tOfGenLA3
V7F9RrwXtxgXgp5xe3uVo++gY1dguT8Q7AmsRlQbuwN7O5QDir3ekB8465OI
v8RRirVyQLFXzDP4rzz6X8mHFdyjJnof9GcYFNgfRX+TgciHiy0misWhKNf0
xultU84tY92W6D2SjtK0caK4MJW2v1gZbUHM/mR16ByN7YO4y2X29KZfHv23
9Cfsxdz8wOYugcvYOjU07hSH3s+ZFaHVpmr0HPKnaeNq3TlJfp0J7W3VmfoL
zAtMl+pBb7c4VVyqN7yTuRVRPSqHZyP/FpivZeNidC9MGneKQy+he0rE5/Kh
clMcJ25Tjpag93Rob5PeqDXEeHzCals1/hG6pqbt7yyd+mt1iRsXKd47E/bH
1N9yB/gPWjW71Q==
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwtlXtM1WUYxx/wcFOPuEHA73f4nYubKKlRpugE22y55eWf+MOtBdQq0dY4
LJ3mmm7eL6gHprZlbrnlH15wHshbmem6EMYUNeEg0BKIlZkeZ0tx2bDPu+f9
47v3+7zP+1x/7/v8Im/XVURTRaQSpIGhPJEB0A9qPZFgpsg38Er44QyRffDz
IBAWaXZFssaJ/MTqIsdCIk8dkTNjRUrY24088IzIuUKRr8Af8FXpIivQXULX
BhbBZ/pF7mK/NyiyB5wrAKNFZqA/gr/D4BC4PUYklzymET+Jn4WsOcgbwTD8
kckrX6SKnMdjW4bNHFAD4tjeR5+PvhL9BmySyHtZx7OXDZ4HDehOkUMLOZwm
hx7Wk8jF5LkTn/VgGnyYGvdjW45NGZhl/R4l1izOlIIm+BTOTYBXw4+SwybW
CPIN/KbAi9m7jv+fkd2IyB36sJq4G5Ed5NOmPnxvAGvBj8T4m7zr2L/N92iF
PzC1mzrxGyfeY/hD8CJ4HRwhRia66fC5fIMivsVE4MGr+Ogf47cRXMH3efzu
g78M5tpeHmBvHnwr2ATa2DvD3hZ4OX5b8FtC3BOsZaY2dAl0XeA6KM0iNnVd
om+LuS+DrC8gv4tuF/Ch/xqbd0w8fIzBx2jwlu2ZkWfA34O/6ajuIPm3k38t
9+A71s+QP8FvEt09cADeyr265WpsE28I3kj8IL1No+c+MAHeR/xX0UuA+8uZ
JyDGueXspbKXgBexLkPO5LwPrMTmHjlnGF/0P4NvlQ5abU6jOL+Y84tAGrwb
H8c97avpZY3td7OjPTR9q4cnqXEq/p5Qz79gur3rvZzvBrOJ24mfHvhjfHeH
9Rs6xB0Oa/0fkv96av/U1V5cc/R+mDuxFPl9vlV/LnWDXjBEfh0+csZ+v+1b
C2sq8nHq20GftoPNBXo3TV39tpe+gNZo7miT/dbfe3pfV3PmKvE6wEc2px88
vUfm7sRtPT3sXYRfAAP52lszH1ZiswabqKuzopT4AfJwQQE8wbk2V2eRmT/t
9n556MqBn1w9zhbCe6m9Ah+vmTdi7+s2+GRs/oEXsW5FHsc3/BVfS/g2WeTi
j+gMuuxo3xaGdB59m6dz0czCKvsWR1ifYjMCHGLeJL8F7EXNLAWNeTpD4672
2vT3CztDG9CdBb+hfwObGHySqzmavP4j5kniRz2dY2Z2/WXPTzbvn7vyEPjg
zelaax82H2Bz09G6u9AP2hmczrlO5C76002uD+hVBuc6kUdY6zgfBaNcnefz
sZsHqrlrxdi9Am9C/6ydhRWsx0L6DnrDmoPk6ZtIFOhMNXO0z8aqN/PV7IMY
++vYS4Hfob4/wS16uIL+hdGF7Bt9iTUU1HcaAYXZzIywvlmT7y/kvYpcUlzN
PZfYv6P/HNtH+MtBnhjQd23e8iR4KFvzaMDvl+Rw1uaUDOr8NDPzOTunzX/C
n6//xHWe/jP+Bz8YE2U=
             "],
             VertexColors->None]}]}, 
         {RGBColor[0.941176, 0.906538, 0.834043], EdgeForm[None], 
          GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
GNX8a9fAdgHtwMr9MYH1atXA/+WEsWg=
             "],
             VertexColors->None], 
            PolygonBox[{{6198, 8471, 5181, 5086, 2570}, {7571, 5937, 5064, 
             5063, 2135}, {6404, 7890, 5202, 5103, 2797}, {7381, 5640, 1713, 
             5041, 5153}, {6493, 7945, 5208, 5112, 2920}, {8415, 5911, 2083, 
             5166, 5060}, {7605, 8417, 5065, 5069, 2302}, {5676, 7415, 5155, 
             5042, 1713}, {8011, 6610, 3180, 5122, 5214}, {6145, 8469, 5176, 
             5081, 2470}, {8418, 6028, 2252, 5171, 5072}, {8438, 5341, 1229, 
             5023, 5133}, {6569, 7989, 5212, 5117, 3049}, {8265, 6914, 3797, 
             5129, 5231}, {6316, 8475, 5192, 5096, 2735}, {6114, 6148, 2471, 
             5177, 5077}, {8456, 5578, 1646, 5038, 5148}, {6202, 6237, 2625, 
             5185, 5087}, {8462, 5855, 2076, 5056, 5164}, {8044, 6655, 3253, 
             5124, 5219}, {7919, 6452, 2920, 5111, 5206}, {8460, 5675, 1773, 
             5045, 5156}, {8073, 6698, 3318, 5125, 5221}, {5344, 5377, 5024, 
             5134, 1229}, {6358, 7857, 5200, 5099, 2740}, {6654, 8044, 5219, 
             5123, 3188}, {8419, 6059, 2302, 5172, 5073}, {5537, 8446, 5141, 
             5031, 1584}, {5825, 5872, 5055, 5163, 2023}, {7918, 8429, 5106, 
             5109, 2919}, {6949, 8294, 5233, 5130, 3797}, {5976, 6019, 2303, 
             5170, 5066}, {8424, 6204, 2522, 5182, 5088}, {8431, 6489, 2919, 
             5207, 5113}, {7444, 5708, 1834, 5047, 5159}, {5601, 7349, 5146, 
             5032, 1585}, {8429, 6401, 2796, 5201, 5106}, {5672, 8457, 5154, 
             5043, 1773}, {8451, 5539, 1584, 5034, 5144}, {8430, 6406, 2800, 
             5203, 5108}, {5406, 5441, 1445, 5138, 5027}, {6174, 7681, 5180, 
             5082, 2471}, {7988, 8432, 5116, 5119, 3114}},
             VertexColors->None]}]}}, {{}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1FtojnEcB/Dfa8ZEDc1h2NgFm1OKXMgWE7VpoXHpQmsbZbZyvJWE2TKS
xpW0GtrinYxMkitzitIs5jCLcsph5JDjZ7n4vp//9/c87/s+7/sccspqSqsT
EZHupW9ixJOMiK9TIv7wux5jqHfLDynQp02KWMxf+sOBfeWEvtO8iSk5Eb1M
8CnPm/cwyW628j5P8x6beYdNvMHjvMk0708dGzGUj3zHMObpX22fyRH6E/N5
WRFVehEbeFE6pFr/wHHjIp7Z75ieb93CctZLn/kon/OCo/mSY5gYH/HGfimM
7Igs5ssr28fb/prl5nvM6phkkl0ckhnx3vZ+fYF1+uSICuayjgVMMp9tXM1H
LGUPN/I39zF3QsRe5rGZJbzFbbzJrbzBzezkFr5lI8MxnGGW4/1knc1+Fkk4
tzlSbv1ZKuSLVMpU8w0cxGImuJwpLGGvz5zDZ5zLTmbyOicyyQTPMmXgf+c7
x3SU77mDt7mdd7mKp7iCLZzBWk5nHWfxAP/6T6r4hzV8zDVs5zlpkHpZLyPN
F/KLczCMXex2btr4gOfZxnruYwX3spK13C/t0qBf4EG+9VsO8R0P85J5Iw9w
A+u5iWVcxHVcykJO4WQmmM1UpnGw9LkOH7rWrrJDjshBWS+t5ktYIJNkl/7N
Nd0vNdYfeU2uyFr9Mg9JsXU157OEGZzNb+6dWfzJNHaxz73Wzufs4EnuZhVX
chkLJVuG64MH7m3p9Yzoyfj/3PgHteKo8Q==
             "]],
            "31"],
           Annotation[#, 31, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{7530, 5855, 8462, 8414, 8463, 8416, 8464, 8417, 7605, 
             6018, 6059, 8419, 7635, 6102, 8468, 8422, 8470, 8423, 8471, 6198,
              7707, 6201, 7741, 6236, 8474, 8426, 8475, 6316, 7817, 6318, 
             7854, 6355, 6401, 8429, 7918, 6451, 6489, 8431, 8476, 8432, 7988,
              6568, 6604, 6608, 6646, 8038, 6610, 8011, 6609, 8012, 6570, 
             7989, 6569, 7991, 6533, 7970, 6494, 7945, 6493, 7947, 6452, 7919,
              6405, 7890, 6404, 7891, 6356, 7855, 6319, 7818, 6277, 7779, 
             6238, 6237, 6202, 7708, 6170, 7678, 6143, 6140, 6106, 6103, 6064,
              7620, 6022, 6019, 5976, 7589, 5937, 7571, 5904, 5901, 5860, 
             5857, 7532, 5853, 7530}],
            "31"],
           Annotation[#, 31, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1GtojXEcwPG/bZj7C7ddDJNLyG0RIZcotcWKmhcjIcRsknciuea20ZIX
lOQ20Sy22FjLJddEGM3M5jIWIpeGLJfPkxfffZ7f/zznnP/Zec6TumjV7LxW
IYQJ/rxMDqGuWwjNfUP4zR/mv5HmxO4htO8VQgoHcDJbrNdE5+qweYP1I4xJ
DaGBgc9Zar2WJXzC03zIk7zP47zLI7zFQ7zKA7zONl4n9AjhkTmOzRzCDtbr
vHdaSgg55hksYDYr+EGftNGc1DOEsZqgU+bFvMQ9vM1y1rCB7xiT4LOzF1N6
ex6Tlag/zmnRU1U7p5Ql2qrz5mwWcTRHqovWm5vs5bVyHb9gDuu4nPXs5PO0
c+46c0cWcgSPcW60ro26Zj7DB3qsrp73nW+t/+JvJthnkn2P40RmR3t33iYu
Mm/hdhazmA/5gLGJIQxXmuL7hDCPfbmJR1WkdPN9ftUSx838qdSkEPrruLUM
3mQeb3A133M//7KYCb67GxzOerZEj2mxub9rL12bHWdyG+dwB7O4m4O4jAO5
goOZy9bMYBwz2eg1R/EVx/AOk3ibKTzHGJ5lax7kR3s8wM9cy3vMZBFn8hRn
s4TDuJNDmc8RLGQs89iKa1jvf5TFcpapUAVaoaUar2++g3hWsy1r+Mx3U8qn
vMBS5vMcC1gWreuVKs1vWMUmXuFFFrKc+5nPZdzFlVzISVzAaZzCPpzEAezH
uGg//Bhdx66xl6pShfap0noul2qqDppTmazvru0vuq7Lmu+xSu7T3uj3oNHW
MtiV6UxgGn/5rbdlNduwlk3uCRU8wc3M4SxO52D2Y2fGM1aN7mENanQ91Hb7
f5/7B6DbxeY=
             "]],
            "27.900000000000002`"],
           Annotation[#, 27.900000000000002`, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{7920, 6454, 7949, 6495, 7946, 6496, 7972, 6531, 7969, 
             6532, 7990, 6571, 8014, 6613, 8040, 6649, 8039, 6650, 6691, 8068,
              6693, 8069, 6694, 8070, 6652, 8042, 6617, 8016, 6616, 8017, 
             6575, 7994, 6574, 7995, 6538, 7974, 6500, 7950, 6456, 6455, 7921,
              6453, 7920}],
            "27.900000000000002`"],
           Annotation[#, 27.900000000000002`, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1Gloz3EcwPGvOeYuwozZgQfIsTVF5IgHQsTYaB6I0tzGI1rJNUeuFivk
SIYwk03uO8tyleXYsDXGn4mkXNOYV3nw/r/6fH/9f79fvytp7rK0pU1CCIP8
VHcPoaJTCD/4i9/YwFZxIcR1DqE3R/J3YgjzONE8n6t5kDk8xEbbX7HYXMki
PuVJPuZxPmIB7/Mw7/IAb3Ev77B5kn2x3Ny0i/NhX7a2/tIxUnqEkGVO5kJu
1XZlmi/yoz5rjTk2JoQ9HMbZmqvL5h0s4wU+ZzU/MHQN4T3/mF+pQsUqtbaF
G5SpY+ZU5rMj2yvimG9UorPKsK2I03mG81nBLL5kDtv4Xx4H8ggzmKM1um0+
zXI+4TvWs4ExzjM2PoQhHM4ZHMZMzuF6buJJbuQpFvIxGxUVG8IApSg6IYRZ
TOBapvIYy/RIX/VT8d1C6KkC2yewlNmsYz7/spAx7lEpB7CK4/iXPTxXvTRe
66xNZi7TuJnp3MqZ3Ml+XMA+XMz+zGZLTmatfSbzNQczwqF8wDjeZwLPsRlL
GM39/OJcV/EhV7Kc03iCU1nEDJYwmds4kHmM4hIGrmCVa5POCyxRnrZrgTpY
H8Efrn1bPucL17+YFTzPKl5iDS/zNa/wLa8xwpusYymvM59XuZ+7uYh5XMEs
juEoxnMEezOJTdmCnzxDEc9Sja7pnnkfd2mx5mm09llPZC4bPLPfdU93NNva
De7RLi3XEGtTGMMU1nt3BzGY27HSHPFuX+RRruNCTuJY9mES2zGaUar1LapW
rfteyRo+6/T/u/UPY33C4w==
             "]],
            "24.8`"],
           Annotation[#, 24.8, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{7948, 6498, 6536, 7973, 6499, 6497, 7948}],
            "24.8`"],
           Annotation[#, 24.8, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{7971, 6535, 7992, 6572, 6614, 8015, 6573, 7993, 6537, 
             6534, 7971}],
            "24.8`"],
           Annotation[#, 24.8, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{8013, 6612, 6651, 8041, 6615, 6611, 8013}],
            "24.8`"],
           Annotation[#, 24.8, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1GlMz3EcwPEvI8QTVjlKSg96kLCcmc14EBkzR6NMw5orE0/YzNWWY87Q
3Mwcc2aYys2mMbZMQyySq8nxxDWmhZd58P6/9vn+/v/f//f//47EmQUTFrQI
IaR7uRcbQkVUCPV8zDo+4Xf+4Fc2sW1cCLHRISRxMBM5lKM5m8u5n0u5h4u5
l+f4lKV8xO3aovnmDZzDNczjWh7kbe7jTe7iLbZKDOE3q80tYxwXk/iZyezU
PYRM9uFcZnAjs1nO9/qk6M4hdNFO6+nM1QxdMm/inX/vZw3r+JjPWKZzWqcK
a9OYrTSVmDtyBRt9R4PKdF6TrZ1lFks5kSc5gac5i7Vcykj7KGYqDzGLF7iS
x3Ra1eaHfMufbGJMF78p3rGwMwcwndmczlXMZSFX8ziLeIKn+IDNCl1DSFFf
ZSlH8T18nmk8yjuqUp75G2O7hZCgw+ZM5qtAjeYSNvMUYxJCqGQvPmcGmxnn
+uqpUSq0NpZFHM+1nMT1nMzNzOFWpjKfKSxgG45lBMfznX33YwMH8T2H8D7j
WfXvuFnOCJaxHQ/wi2NewWouYw2nsJRZPM+prGB/FjONO9iGi9iaS/jSfzSF
l1muEhVrvuZoqL47B+1Zw0jW8oXzUcbnvMh6vlFH2+vMnVjPaL7iB9tusJGV
vMYSXuFebuc8FnMRZ3E485jJDCYxgS3Zmh9dWw2usVpW8qp2a5vydcb6SA5T
DxWZm1zL33RXt5Rr7Tp3apsWaqC1cYxhX/50D/fmH3bgUza41yt4hIWcyzEc
wWQmsAMj+Ms5b/SMeq3ruqwqa+VR/59vfwEZIcP4
             "]],
            "21.7`"],
           Annotation[#, 21.7, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1GtoTnEcwPH/ihly34a5bFbkliUaWoYY84LmUhgics8mt2hsbO7F2Nwv
b+TWUIRJQkwicou0JpesJkbDizGSz5MX3+fz/M45nedy/ud0m5M7MScqhNDL
y71OIVyKDeE1n7GSL/idDWzSOYSEuBCSOYhJTONYzuc6HuVaHuIq7udyljCX
u7iEO7iAmzmXGzmbhTzCWzzA69zLm3zKqHjfh8msYw+26RJCJvtxITO4naO4
g1N5mdu0RSPMmzicRRzGDUxnISfwLOexkmvZuH0IaxjDYvZllibrkjmft1nG
x3quD+Z6NrBthxB+MY7xXUMYyMGcylks4EyuZzbzWcRTLORplvEJf+uvenYM
4YttvZmi6ETn4zoVqL/5BMfyYeRY/VBCQgiJOm57Ju9yKWtYyj8sY1xSCBXs
wyrWR/ZpjjnJmsjQBu/HMEvLddy8iie5hmeYx7Oczp2cxt2cwVKmMIf9uILN
IudjU07iJ5+Zyo8cws9MYy2H8gm78SpjeIzf/Ib1fMo8vuQUnuNkXmQ2yzmA
xezPfYzmMjbiar71n03hNaZzH0u1VEsi21TvOrRkJVuwiq34mq3ZTsP00xzP
N4zlO7ZnNb+6phWs5QNW8DBLuIjFXMZ5HM65zGQGkzmSvdidMWzOOmvuszVY
rQpd10Ht0WKdt38009VVReYGa/6H7uuOjmi/VipX4xXnuHHsxFT+dS825ytW
u1fL+YE3WMatzOVEZrJv5N5lohrrl2td4xnzXjd0TY9su8IHvBD7//n0Dzq/
tCs=
             "]],
            "18.6`"],
           Annotation[#, 18.6, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{7551, 5908, 7574, 5941, 7592, 5980, 6023, 6026, 6068, 
             7622, 6027, 7608, 5984, 7593, 5944, 5942, 5910, 5907, 7551}],
            "18.6`"],
           Annotation[#, 18.6, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1GtojWEAwPHHB7RNQgczZhZzG0VySSSMIylsWNMumUuRzoxhLQy55ANl
bEa5zKU1JRLlMsUkIjORa75YKZe5FGVm5bd8+J/feZ7zfnjP8zzvm1pYlBnr
FEJI83GvfwiXIyG8ZRNf8Rl/sJVdBoTQu3cInZnIFE7mHBZyNlewlNUsYSWL
eZAx7uca7uMq7mIht7OAW5jLbaziDR7iLT5hGx+znd+Y1ieEHskhRDmaKzmK
qziTezmDu7lcyzTcuIBDmcs05nEqd3ABazmfdVzBl9zMrn1DOMB01jCLpdqq
2x3Xs4lNfM9f/M1IorUbGMI4TuQiTuAS5nILc1jKbJZxB8+wnOdYx0a26q+G
9gvhi7lhHKUsZSs5xfpxDE/znh5qufF3Jia5RhmK6q75tfzACraxjpFBITRw
JN9wFv8wyXlIUYbmKaaTfitmDUt4lptZyzKe51ZeYDkvMp8VzGMlx3E9x3Ij
uzGTCVzM7sxmT+bwq3uZwhZO41MO5nUm8BR/+i87+Zzb+Zq5vMQcXmU+b3AS
D3MCjzKBGxnHMjZbu6Ws5zTe5HRWcwSL2IsxRjiTf+zPdLYzic1ssXcN/MwH
bOBR3uZJVrOIVdzEtYwyg6mcweEcwq6M5zdn7JOz1qwGPTI+wSMq1mrN0nHz
Q5isVmd6nXEj7+uEjmmuuUpu0CTfM5nE8Wz3zMXzBeP4jh89i/Ws4x7GuJBR
pnc8o+zBBLbbu8/eJR90R/VqNHeNj3iFDzrOR+T/++gf4M+u+A==
             "]],
            "15.5`"],
           Annotation[#, 15.5, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1GtoTnEcwPE/IVZMNmYucxnN5sVckxJzm0QysTA2hnJpDLM1txHiBbnO
KMNs6VFS5AWNmJalMFHubyhyqY0IWys+T158n8/5d04953nO738G5W+Yt75d
CCHFR23fEM7Fh9DAK6znVb5mI1/wKb/xJ5v5ix36hZDQM4QkjucMLud0rmAJ
K7iZJ1jIIyzgQa7hAa7iHi5nGXO5jTncwXLe5DHe4mO28iHb2MQhvUKI7e+7
2Y2ZHM6VTGM+U7mMKczlZE1SjHUGh3Axk5nDCSzjHEa4gs9ZzE4JIRxiGs9z
Hq9xK2sUUaN1I9/xJ38zrncI8UkhpDOOIzmWC5jDbVzIEmazlLt4gTtZwwgf
8QlbmZwYwlfHQ5mqLHUc4J6YrX6OdzCdVazXA+VbNzOhj2tUZZ3Je1zLwzqq
VusI4waGUMdUvuI0tjDRPCRpqmapQGedK+R5bmY1i3mRpbzE7bzMndG5467o
3DGPJziKGzmCRRzDEsZyPrsym925kD24mM3uaSKfcDBvMIbn+MNv2c1nLONL
7uVb5vE6l/Imx/E4x/IUY1jEzizle//dIr7jEt5mBis4jCeZxkLGcQpbPKcM
tjGR79mbH/nds2xgHU/xDs+ygutZzi1cx0yu4WzOZAqT2Yld2GTWPpu5N2xg
nSp1UoVarWk643wy9/Ov2f6jR7qvSp2Ozrs2KUuJrhvDNntuNNtbd+db60/2
Yi0j3McCzmUm06J7lLGMYZtn9cU75IPuqlbVqtLt6PzE/38v/QP3AK9C
             "]],
            "12.4`"],
           Annotation[#, 12.4, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1FtoT3EAwPGfeKBt5G42l41kUe7GltsuLEx2EbOWzRN7sFzbDIWQWiIy
2lbbir1M4UHu/81lJUOUS3ngwUIyC2NS+CwP3//n/M45D+d/fr/fSdhYlrul
Twhhhp9rcSHUDgvhLpt5hxf4gu18zsfsZDf7xocwYngIYziH8ZzLDBYznRu4
hEVcxEIuYAFTuZbzmc9krmERd3M9y1nACp7gFR7nVT7kTz7gL35mwogQYsZ4
BkYznVFM41jF64P7YvmeoznA9QXsz4VM5DomsICp3MdsnudGPudO9hsZQhWT
mK0cXTKuYKT3fj7mI77lN/7g4FEhDBkbwnTOZh5nMYczmcs13MV8bmcud3Iv
G9jEdj5hDxNiQ5iobPUdF8Iq9uNq5ivOcSXrVK8s4zZ+UqcOGseO9q6UqVbj
zezgcf5iE4eMD6GFk/mK39WjEuM4a2OxlqpUZarSDdeO8RZPMMKTbOEptvI0
77Cad3mG93mAF7mfl1nC0yxmNedyF+ewnMms4DxWMoV7OZSF7PKsi/mME3md
0Wxgt/94iC95kK95hG9Ywqss5k2msJrzWcMYljOae9jhnRbyHYsYYRpvM51n
OYVbOZyZ/G0uM/iXcexgl7lt4xc+5H3W8R4bWcMdLGUmN3EFsziJyziVSYxi
DL9ag53W4ge1qUW1uuX8DpZpudKVqMPO/7Hmt/Ip29WgWlX07gXl9e4v15PZ
h4P42h4byLf8ZI9G2Myj3MZ8ruQ0JnGCBui3ufroG9PRuxYY0Tk16rZz9bzJ
Ol5nzbD/369/ZVq1dQ==
             "]],
            "9.3`"],
           Annotation[#, 9.3, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1GtoTnEcwPH/ECVmyzxmYxuFFSaXhC33iMmwXJLreEExubVlpJBcck/Z
szCzDSmR5D5zbS6TtFISKXdb2WS8cfnIi+/zeX7nnBfPc/7/c7rnrZyeHxNC
yPRxNjmEPQkhXGYxLzHKWzzNap5hHWvZwEbW8xtbdA0hoVMIyRzEJA7mGM7n
KM7lCM5hFmdzOGdyKHM5hNM5mFM4kFM5m+s4kwXcy0t8yGbW8CfrmRYJ4QtT
+Znd+InJbHLNV90xN/I9Ex1/xwjfsjPbdPPb2JpZTOMsDudGnlCFFpnruJYt
O4ewi+k8xhyeYwHLVKFa82O+ZhO/My4xhPiUEDIYxz6MZT8OYA77cypzuZrT
uJYbeJRFLGUlH/EJfzC1Swg9NEktUkOYzBwVKMlcyPXK8P0YJ/AOP6lem82R
JOunsao2L+Vb7mG5KhWfFsJN9ubzf9eymQuZaI+M1Bgt03Lt0BXndvEqd/M6
97GKB3hIZXpiLudTVvIZT7GOUd5lMe+zhDXcygvcwotczMPM+7e/uYQlzOR6
DuMGZnETI5zHRv9hNOvYkzcYyzI2uwfb+YLb+Io7+YaLeY15rGIWo8zkEXZg
EWO5kXHcxA/u+Xy+5wJWcxyj7MvVjHACf1vj8Ywxp/Cj+Zs1f8gm1rKGxxnl
GhazkPmcxBWcwmz2YTrbsh0b7c0Ge/QlH/CeSlWiNcrXRB11vhd3MIa/PA9P
9Uilyna8iIWaoRTzMLZiR772zH32LFbxDLdzFXOZzQymM57t+cfaNHjnfOA9
3tZJleuQDuqCc/t5nnt5jrsT/r/n/gJ6Wr/h
             "]],
            "6.2`"],
           Annotation[#, 6.2, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1FlsTXkcwPE/4kFibW+1RS0PNGmUIhIiiEkI2tpieRFKbInEVipEhIex
tLVkMkG47S1VSy21tEjsglKVhoY3YkmsNYa2zJP43MzD937yOye5ueec37n9
Fq6csaJNCCHbx6meIeyIhFDFYp5hIU+ziJe4nzU8wJusZCPr+JSP+Jnf2aZX
CAlJvpyJTOVQpnAIk5nF7hzMJA5ihAOZyEwO53QOYy6HcCrncC1nsYC7Wc1d
rGEtW3mfLbzHZl7UeRWbL/Auv/KczqrIXMU7/MLb/IdvGekewhsmsX1aCKPY
h7M5kpuYw6PMYyPz2TbZvWQ6czRFVeYC3mA56/RIL83/8gW/sYVdUtQ7hAx2
4kBmcQoHMYeZzOU0ruJUruZGxljBhzzKOrbqhz6Z+6aGMEnZWquUPiGsYyoL
uEFRlWqCY3e4gJ8Y6eF+qMw8jku0VG/Nu/gfK9i1r2vlAD5ns1o135xsZ8Zo
nJZpeXwXdcW5Qu5RaXzPzLH4nrGM9TzMxyxnAyv4hMfZyJN8xko+ZwlrGeVD
bmM1/+QlbudlLuFBLmaUS1nC0dzMJM5lhPP43bX8wWds1DV1Ml9ll/jv40/3
oogvuJOvWMw3XMzrXMSbHMMoR7OUYxljAjezG7cwkVv5wbPI422O5yFmMp/J
nMjANL73zHvxI1vsQD1rWcb7LGcJ1zPKDVzJXE5mBtPZgQPYkZ3ZbFe/2tkm
PVC9+TBjWqc1ytZE9dcO50P8OJ96Vxp0RDFt1HrNVJrzI9iOCXzpHezG12zy
bt7iGRYyn6s0WZnmScxiBtPVUb88syb/Ue94lw08wWPap79V7dhfvMC93Knt
kf//J38DVzDMEQ==
             "]],
            "3.1`"],
           Annotation[#, 3.1, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{7120, 5319, 7144, 5358, 5390, 5392, 5419, 7186, 5393, 
             5391, 5360, 7145, 5359, 7146, 5321, 5320, 7121, 5318, 7120}],
            "3.1`"],
           Annotation[#, 3.1, "Tooltip"]& ]}, {}, {}}}],
      AspectRatio->1,
      DisplayFunction:>Identity,
      Frame->True,
      PlotRange->{{1., 74.}, {1., 74.}},
      PlotRangeClipping->True,
      PlotRangePadding->{
        Scaled[0.02], 
        Scaled[0.02]}], {192., -189.}, ImageScaled[{0.5, 0.5}], {360., 360.}],
     InsetBox[
     GraphicsBox[GraphicsComplexBox[CompressedData["
1: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
+iWf/4ocp95UjlNvKsepN5Xj1JvKcepN5Tj1pnKcelM5Tr0Z3OGGe5x6U+fj
hnucelPn44YfrTNb9cZ101ynyHVBnIfvvFfnmTmvw+eofW7R54S8L+99MK87
e53H91WOY6wrVyPHa3yDb/EMz/EC3+F7/ICXeIW7TTecelM5Tr2pHKfeVI5T
byrHqTeV65d8/itynHpTOU69qRyn3lSOU28qx6k3lePUm8px6k3lOPVmcIcb
7nHqTZ2PG+5x6k2djxt+tI511RvXZXQdNNcdcp0P59U7j9V5Y87T8Llon0P0
uR/vs3tfy+vIXrfxfZLjFuvK9cjxBt/iGZ7jBb7D9/gBL/EKd5tuOPWmcpx6
UzlOvakcp95UjlNvKn9J/oocp75UjlNfKsepL5Xj1JfKcepL5Tj1pXKc+lI5
Tn0Z3OGGe5z6Uufjhnuc+lLn44YfrYtf9cV1Xl1X0XXMXDfIdTqcF+88VOd9
Oc/C55p9jtDndrxP7n0prwN73cX3QY5TrCM3I8dbPMNzvMB3+B4/4CVe4W7T
Dae+VI5TXyrHqS+V49SXynHqS+UvyV+R49SXynHqS+U49aVynPpSOU59qRyn
vlSOU18qx6kvgzvccI9TX+p83HCPU1/qfNzwo302qr64brTrtLououuQue6P
62w4r915pM7bcp6EzyX7HKDP3Xif2/tKXsf1uorvexyXWEduR44zPMcLfIfv
8QNe4hXuNt1w6kvlOPWlcpz6UjlOfan8Jfkrcpz6UTlO/agcp35UjlM/Ksep
H5Xj1I/KcepH5Tj1Y3CHG+5x6kedjxvucepHnY8bfrQvT9UP15l3XWfXUXXd
QtcJc10e18Fw3rnzPJ1X5TwGnxv2OT2fi/E+tPd9vA7rdRLfxzjusE7MRo5z
vMB3+B4/4CVe4Q6/3HTDac+V47TnynHac+U47blynPZcOU57rhynPVeO054r
x2nPgzvccI/Tnut83HCP057rfNzwo321qj27T4TrsrsOsuuOus6f62q5jo3r
RjhP23mRzkPyuX+fs/W5Np8j8b6t91G8zul1CN832M/bbucjxwW+w/f4AS/x
Cnf45aYbTnuuHKc9V47TnivHac+V47TnynHac+U47blynPZcOU57Htzhhnuc
9lzn44Z7nPZc5+OGH+2LV+3ZfV7cV8F1zF032HU6XRfPdahc98V1FpzX7DxC
5+34nLzPpfocmM9deB/U+xReR/R9v+N0+13b7WLkeIfv8QNe4tWm8zxX5S/J
cdpz5TjtuXKc9lw5TnuuHKc9V47TnivHac+V47TnynHa8+AON9zjtOc6Hzfc
47TnOh83/Ghfy2rP7tPkvijuQ+C6366z67qWriPnuk2uk+K6BM4Ddt6d81x8
rtznOH1uyucYvM/ofQCv2/k+23Gz/a7t9m7keI8f8BKvcLfptO/KX5LjtO/K
cdp35Tjtu3Kc9l05TvuuHKd9V47TvivHad+V47TvwR1uuMdp33U+brjHad91
Pm740T611b7dd819jtxXxHX8XTfbdWpdF9J12Fz3yHVGnNfvPFrnrTlPxOey
fQ7S55J8bsD7el6H97qZ74MdR9sP247vR44PeIlXuNt02nflL8lx2nflOO27
cpz2XTlO+64cp31XjtO+K8dp35XjtO/Kcdr34A433OO07zofN9zjtO86Hzf8
aN/pat/uo+i+Ze4T5L4croPvutOu8+q6iq5j5rpBrtPhvHjnoTrvy3kWPtfs
c4Y+B+R9eu+reR3c61q+L3Zcbb9sO34YOS7xCnebbvoFn/+SHKe9V47T3ivH
ae+V47T3ynHae+U47b1ynPZeOU57rxynvQ/ucMM9Tnuv83HDPU57r/Nxw4/2
la/27j6p7kvoPmDuu+M+F64r7zrOrpvqOoWuC+Y6PK574Txz53U6j8p5Cz5H
7HN+PofjfXPvc3nd2utevm923G0/bbtejhxXuNt006/4/NfkOO21cpz2WjlO
e60cp71WjtNeK8dpr5XjtNfBHW64x2mvdT5uuMdpr3U+bjjt1X3V3cfYfUPd
p899sdyHxn0fXGfddY1dR9R1+1wny3VpXAfCedfOc3Rekc/5+xyuz8n5XIv3
ob2v5HVpx8n2q7a71cix23TDaX+V47S/ynHaX+U47a9ynPZXOU77qxyn/VWO
0/4Gd7jhHqf91fm44R6n/dX5uOG0v/o9Vfsrb+MdvIv38D4+wIfYdcVdx9d1
M12nznWhXIdlgp1n7Lw+59n4HLzPqfpcmc+BeF/X+0KOY+3nbGccmx9/gl/z
+Tjtr3Kc9lc5TvurHKf9VY7T/irHaX+V47S/wR1uuMdpf3U+brjHaX91Pm64
2l9+b0P7i7fxDt7Fe3gfH+BD7Dr+rpvtOrWuC+k6bK57NMHO63cerfPanHfi
c+E+x+lzVzM8x75vdFxpv0a781jtLx9/Tf6GHFd7S46rvSXH1d6S42pvyXG1
t+S42lu5ww33uNpbzscN97jaW87HDae/q7pY/V15G+/gXbyH9/EBPsTuk+G6
9K4D7bqrrnPoumIT7LoZzlN33qjzupx34XPSPtc4w3O8wA94iVd4pJ0l55j+
rj7+hhynv6scp7+rHKe/qxynv6scp7+rHKe/G9zhhnuc/q7Oxw33OP1dnY8b
Tn9H+4u38Q7exXt4Hx/gQ+y+NO4D4brrrnPsuqKu4zfBU+y6EM7Tdh6l85yc
l+BzxDM8xwv8gJd4hbtNN5y/A9pbPh+nv6O9JX9LjtPf0d6Sf0mO09/R3pK/
23SHG+5x+jvaW87HPU5/R3vL+Tj93dPB1d+Vt/EO3sV7eB8f4EPsvk/us+K+
Bq4j7rq9rpM5wVPsuiuug+A8ZecROu/H5/RneI4XeIlXuNt0w6mrlb8h/5wc
p/+qHKf/qhyn/6ocp/+qHKf/Gtzhhnuc/qvOxw33OP1XnY8bTv9Vrv6rvI13
8C7ew/v4AB9i901znyL3BXEdfte9dp3ZCZ5i1y1yHRHn+TsP13lzznOZ4Tle
4BXuNt1w+qfK35B/To7TH1WO0x9VjtMfVY7TH1WO0x8N7nDDPU5/VOfjhnuc
/qjOxw2nP6p5StUflbfxDt7Fe3gfH+BD7D6D7uvlPjruW+E68a7LPMFT7Dpf
rrvjuhjOW3eeqfPCZniOF3iFu003nP6n8jfkn5Pj9D+V4/Q/leP0P5Xj9D+V
4/Q/gzvccI/T/9T5uOEep/+p83HD6X9oP/E23sG7eA/v4wN8iN2X033w3HfK
fV7cV8F1zCd4il0Xz3WqXEfGdR6cl+08yhme4wXuNt1w+pvycz4f1/p8yd+Q
f06O0z/RvpJ/QY7TP9G+kn9FjtM/0b7y+bjH6Z9oXzkf9zj9E+0r5+P0TzVv
tvqn8jbewbt4D+/jA3yI3efWfSXdx819k9ynxH0BJniKXWfSdd9cl8l1U1zn
wHnJMzzHC9xtuuH0R5U/J39BjnM9sHKc/qxynP6scpz+rHKc/qxynP6scpz+
bHCHG+5x+rM6Hzfc4/RndT5uOP0Z7S3exjt4F+/hfXyAD/ERdt/WE+y+ZO4D
5L4bEzzFruPquoque+a6RK4jcotneI67TTec/qty/ZzPf0GO6/nL5K/J35Dj
9H+0x+RvyXH6P9pj8i/Jcfo/2mPyd5vucMM9Tv9He8z5uMfp/2iPOR+n/6u6
Wf1feRvv4F28h/fxAT7ER9h9k0+w+wK6D5f73kzwFLuOsuuauu6g64K5js8t
nuE57jbdcPq7yvVzPv8FOc7z0JXjPA9dOc7zJZXj9K+V4/SvleP0r5Xj9K+V
4/SvleP0r5Xj9K+DO9xwj9O/1vm44R6nf63zccPpX2nP8Tbewbt4D+/jA3yI
j7D7np9g9/V0Hz33rZrgKb7ArkvsuqHX+Abf4hme427TDad/pT3HtusXfByn
f6U9J39Fjqs9J8fpn2nPyT8nx+mfac/JvyDH6Z9pz8m/Isfpn2nP+Xzc4/TP
tOecj3uc/pn2nPNx+ueq29U/l7fxDt7Fe3gfH+BDfISP8Ql2X173wXTfuQme
4gt8ia/wNb7Bt3iG57jbdMPpnyvX9sscmx9/SY7TP1eO0z9XjtM/V47TP1eO
0z9XjtM/V47TP1eO0z9XjtM/D+5wwz1O/1zn44Z7nP65zscNp3+mPcfbeAfv
4j28jw/wIT7Cx/gEu6+2+9i6b+QET/EFvsRX+Brf4Fs8w3Psuh4r3G264fTf
tPfkT/FIv227byPH9O/Ug+SvyHH6d+pB8jfkOP079SD5W3Kc/p16kPxLcpz+
nXqQ/N2mO9xwj9O/Uw9yPu5x+nfqQc7H6d+rrlf/Xt7GO3gX7+F9fIAP8RE+
xif4FLuPtfvGTvAUX+BLfIWv8Q2+xa6r57pcruuzwt2mG07/XznOcyWOy+3X
bdcvv/+x+fFX5DjjgcpxxgOV44wHKscZD1SOMx6oHGc8UDnOeKBynPHA4A43
3OOMB+p83HCPMx6o83HDGQ/Q/uNtvIN38R7exwf4EB/hY3yCT7H71rtP9ARP
8QV23yD39XAdftfNdh1c19F0HT7X8VriFe423XDGB9SD5E/JvQ430s/b7tvI
MeMB6kHy1+Q44wHqQfLPyXHGA9SD5F+Q44wHqAfJvyLHGQ9QD/L5uMcZD1AP
cj7uccYD1IOcjzMeqLpd44HyNt7Bu3gP7+MDfIiP8DE+waf4DLtP/ARP8QV2
3zD39XEfDtfNdx1s19F1HU7X8XPdryVe4W7TDWe8UDnOeMH39Y7r7edt56++
/7H58dfkOOODynHGB5XjjA8qxxkfVI4zPqgcZ3xQOc74YHCHG+5xxgd1Pm64
xxkf1Pm44YwPqAfxNt7Bu3gP7+MDfIiP8DE+waf4DJ/jCZ7iC+y+ge7r5T48
7pvhOviuo+06vK7j6bp/rhPmOkKuU7LC3aYbzniCeuF1P9/3+z7AcYB1oI0c
M16gPiR/Q44zXqA+JH9LjjNeoD4k/5IcZ7xAfUj+btMdbrjHGS9QH3I+7nHG
C9SHnI8zXqg6XeOF8jbewbt4D+/jA3yIj/AxPsGn+Ayf4wme4gvsPqLu8+e+
XO6j474Yrqvvutyu6+s6oK4b6LpirlvkOirdphvOeML7dl7397qf1wF8H+A4
wHb/+vsfmx9/Q44zfqgcZ/xQOc74oXKc8UPlOOOHynHGD4M73HCPM36o83HD
Pc74oc7HDWf8QH2It/EO3sV7eB8f4EN8hI/xCT7FZ/gcT/AUX2D3FXbfT/fp
c18t98lxnw3X6Xedb9cFdh1R1xl0HTPXVeo2/WgdCp6787kd7/t739D7Bl5H
9DqC7yMcN1gnPGY8Qb1I/jk5zniCepH8C3Kc8QT1IvlX5DjjCepFPh/3OOMJ
6kXOxz3OeIJ6kfNxxhNVl2s8Ud7GO3gX7+F9fIAP8RE+xif4FJ/hczzBU3yB
3XfcfYHdx9N999xHy3143MfDfQBcN9x1hl2H1HUOXXet27Tr1PicvM/p+pyf
zwn5nIH3Gb3v4HVHrzv4PsNxhXXDY/Pjn5PjjDcqxxlvVI4z3qgcZ7xROc54
Y3CHG+5xxht1Pm64xxlv1Pm44Yw3qB/xNt7Bu3gP7+MDfIiP8DE+waf4DJ/j
CZ7iC3yJ3UfcfX/dp9N999y3y31/3DfEfQZcl9x1i10X1XUau00/WtfqKZ8/
Mq/NeTc+9+9zwz536HNLPrfgfUzvY3gd0+sWvk9xHGJdaSPHjFeoN8nfkuOM
V6g3yb8kxxmvUG+Sv9t0hxvuccYr1Jucj3uc8Qr1JufjjFeqbtd4pbyNd/Au
3sP7+AAf4iN8jE/wKT7D53iCp/gCX+Ir7L7i7gPsvp7uC+i+Yu5L5D4m7nvg
uuiuu+w6sE837boNzkN33qzz+pxX5LwEn2v2uUifi/I5Ce+Tep/E66JeB/F9
juMW64rH5sffkuOMZyrHGc9UjjOeqRxnPDO4ww33OOOZOh833OOMZ+p83HDG
M9SXeBvv4F28h/fxAT7ER/gYn+BTfIbP8QRP8QW+xFf4GruvuPsEu8+o+xS6
z5n7IrmPivssuI7700277ovrWDjv3nnBzkt0XpPzInyu2ucqfc7K5yy8z+p9
Fa+jep3E9z2OS6wjHjNeoZ4k/4IcZ7xCPUn+FTnOeIV6ks/HPc54hXqS83GP
M16hnuR8nPFK1d0ar5S38Q7exXt4Hx/gQ3yEj/EJPsVn+BxP8BRf4Et8ha/x
DXafcfcpdp9T90l0XzX3YXKflqebdp0o171xnQ7XEXAes/MgnUflPAyfw/a5
TJ/L8rkM78N638Xrql4n8X2M4w7rhsfmx78gxxmPVI4zHqkcZzwyuMMN9zjj
kTofN9zjjEfqfNxwxiPUj3gb7+BdvIf38QE+xEf4GJ/gU3yGz/EET/EFvsRX
+Brf4Fvsvubui+y+qu7D6L5t7OvkuqYZj1BPko+s65N8ZN2D5CPzLpOPzNvw
OW6f4/Q5Lp/b8D6t92G8rup1D9+nOM6wbrSRY8Yj1JPkX5LjjEeoJ8nfbbrD
Dfc44xHqSc7HPc54hHqS83HGI1VXazxS3sY7eBfv4X18gA/xET7GJ/gUn+Fz
PMFTfIEv8RW+xjf4Fs+w+6q7L7P7uLrvo/vCse+U+wK4TrnrKGc847qVrsPn
umGua+S6Kq7L4Lxu54U6L8x5Ij4n7nOiPhfmcyDe5/W+jddVvQ7i+xjHJdaV
L77/sfnxL8lxxjOV44xnBne44R5nPFPn44Z7nPFMnY8bzniG+hNv4x28i/fw
Pj7Ah/gIH+MTfIrP8Dme4Cm+wJf4Cl/jG3yLZ3iO3QfefaPdZ9Z9KN3nzn23
uk27T4n7Jriue8ZH1KfkI+saJh9Z9yn5yLoTyUfmrSYfmceSfOS51eQjz6Ek
H7nvk3zkOkvykXGPdaiNHDM+oj4l/4ocZ3xEfcrn4x5nfER9yvm4xxkfUZ9y
Ps74qOpwjY/K23gH7+I9vI8P8CE+wsf4BJ/iM3yOJ3iKL/AlvsLX+Abf4hme
4wV2H3v3vXZfXPfddB/AbtPum+Q+Lu4zkfGT63q7TrHrqrruo+vOuW6V6964
bobz5p1H6zw659H43LzPyfocnM+1eN/Z+0Re5/W6je+7HAdZd778/sfmx78i
xxk/De5wwz3O+KnOxw33OOOnOh83nPET9Snexjt4F+/hfXyAD/ERPsYn+BSf
4XM8wVN8gS/xFb7GN/gWz/AcL/Advsfu0+0+wO5L2m3afdzcV8p9bzJ+oj4l
H1n3OfnIupjJR9blSj6yrkfykXm+yUfm9SQfeU43+chzMclH7kMlH7kulHxk
XGQdaiPHjJ+oT8nfbbrDDfc44yfqU87HPc74ifqU83HGT1Vna/xU3sY7eBfv
4X18gA/xET7GJ/gUn+FzPMFTfIEv8RW+xjf4Fs/wHC/wHb7HD9h9yd0nudu0
+0q6z537cGX85L4n7uPguvOui+26vK7r6bqArivmukKuM+I6A84zdl6h84ic
J+Bzvz6X53M03gf3vpbXpb1O5Psyx0HWna++/7H58Xeb7nDDPc74qc7HDfc4
46c6Hzec8RP1Kd7GO3gX7+F9fIAP8RE+xif4FJ/hczzBU3yBL/EVvsY3+BbP
8Bwv8B2+xw94id23vdu0+9y676b7Amb8RH1KPrIvRvKRdcOTj6xbmnxk3bPk
I+ugJB+Z95x8ZB5T8pHnhpOPPKeTfOS+WfKR60bJR8ZF1qE2csz4ifqUz8M9
zviJ+pTzcY8zfqI+5Xyc8VPVyRo/lbfxDt7Fe3gfH+BDfISP8Qk+xWf4HE/w
FF/gS3yFr/ENvsUzPMcLfIfv8QNe4hXuNu2+2+4D7D6lGT9Vjt0Hy3173FfE
fQ1cF911lV2X1XUZXafNdZpcp8V1GZyH7TxL5005r8HnkH2O0OeCvK/vfTav
a3sdyfdtjpOsSx473HDveT+46Q433OOMn+p83HDVp3yfW3zf23gH7+I9vI8P
8CE+wsf4BJ/iM3yOJ3iKL/AlvsLX+Abf4hme4wW+w/f4AS/xCnebbth9yd03
uepTcuy+fO4j5j5H7rPiPg2u8+460a4T67qRrhvnulGuE+O6EM77dh6n86yc
F+FzzT6n6HNG3vf3PpvXtb2O5Ps2x0nWJY8N97jqU87DDfe46lPOxw3n/R31
Kd7GO3gX7+F9fIAP8RE+xif4FJ/hczzBU3yBL/EVvsY3+BbP8Bwv8B2+xw94
iVe423TDeX9HfUr+lBy7T6j7Grrvmvs+uW+M+064br3rVruOretYuo6d61a5
To3rUDiv3HmfztNynoXPTfvco88hed/f+2xe1/Y6ku/bqj5Zh9rIscd5f0d9
ynm4x3l/R33K+bjqU30fVZ/ibbyDd/Ee3scH+BAf4WN8gk/xGT7HEzzFF/gS
X+FrfINv8QzP8QLf4Xv8gJd4hbtNN1z1KTmu+pQcu2+x+6y6D6T70LmPlfvg
uI+G6+i7rrbr6rqupuvouW6W6+K4zoXz0J036rwv53H4HLbPRfockvf9vc/m
dW2vI1V9KnfYuuSx6lPOxw33uOpTzscN5/pTvU+s60/lbbyDd/Ee3scH+BAf
4WN8gk/xGT7HEzzFF/gSX+FrfINv8QzP8QLf4Xv8gJd4hbtNN5zrT5XjXH+q
HLuPuvs+uy+t+2K6r577crmvj/t6uM6/63y7zq/rerqOn+t0ue6O62I4j915
qM4rc16Iz2n7XKTPIXnf3/tsXtfeos502HGSdcljhxvuPe9rm+5ww7n+RH2K
t/EO3sV7eB8f4EN8hI/xCT7FZ/gcT/AUX+BLfIWv8Q2+xTM8xwt8h+/xA17i
Fe423XCuP1Gfkj8lx7n+RH1KPrIvb/KRfQGTj+wrlHxkn4HkI+sKJx9ZJzD5
yLo8yUfmwScfmZeWfOS57OQjzx0lH7mvlpxxT4d93+Y4ybrkseEe5/oT9Snn
41x/oj7F23gH7+I9vI8P8CE+wsf4BJ/iM3yOJ3iKL/AlvsLX+Abf4hme4wW+
w/f4AS/xCnebbjjXn6hPyZ+S41x/oj4lH9knPPnIPqXJR/Y5Sz6y70nykXXO
k4+sW5p8ZJ2w5CPrciQfmSebfGSeSPKR5yCTj9znT877sA57Hcn3bVWfrENt
5NjjXH+iPuU8nOtP1Kd4G+/gXbyH9/EBPsRH+Bif4FN8hs/xBE/xBb7EV/ga
3+BbPMNzvMB3+B4/4CVe4W7TDef6E/Up+VNynOtP1Kfkz8ix+6C7j7L7sLoP
o/uyuS+T+7K4D4Prrruusuukuo6h6465bpDrgDiP33m1zmNz3ojPaftcpM8h
bXFdqMNe1/Y6UtWnnD9Sh/qRY64/UZ9yPs71p3rfV9efytt4B+/iPbyPD/Ah
PsLH+ASf4jN8jid4ii/wJb7C1/gG3+IZnuMFvsP3+AEv8Qp3m244158qx7n+
VDnO9afKca4/VY5z/aly7L7Q7gvrPpHuE+c+Ue4L4z4QrvPuus2uq+o6iK5j
5rpEriviPH/n1TqPzXkjPqftc5FbXKfusPfZvK69RZ3psOMk65LHDjc/r64/
UZ/ibbyDd/Ee3scH+BAf4WN8gk/xGT7HEzzFF/gSX+FrfINv8QzP8QLf4Xv8
gJd4hbtNN5zrT9Sn5E/Jca4/UZ+SPyPHuf5EfUo+si918pF9KpOP7EuVfGSf
ieQj6zonH1lHMfnIukbJR+b1Jx+Zt5Z85Lns5Nw367D3/b3PtsW4p8O+b3Oc
ZF3y2HCuP1Gf4m28g3fxHt7HB/gQH+FjfIJP8Rk+xxM8xRf4El/ha3yDb/EM
z/EC3+F7/ICXeIW7TTec60/Up+RPyXGuP1Gfkj8jx7n+RH1K/oIcu4+2++i6
j6b75rlPlvvguK+F6867TrTrvLpuo+uuuQ6S6444z995tc5jc95Irj9Rn/L5
I/f5cz7vwzrsdSTft1V9sg61sePw+/1Gvc952f3Z7/3Cj3zvF6bdL/3o/vv/
Pu0L/ou/8XM/fv6LNd6+7P7xt9//e/Npn/A/+Je/+f6/T/uE/6mP/+rzr7uv
f/j3lz7tG/7x/NPKh3b9DfcRf7Y+77v1vmn4/G/crD9+7T7jXfcXPnzbv3Tb
zX/i12c/8cP1/qXeVz3p7v7573z/X73v+mz9dX5XnY/fvx7r//9t9/Fl+T8v
8vX+1Xv+yO+rrz9fv14//SJeH7vu7/6dD//m3V/7mV/71s/8Wr3fqjr0Yv06
fHveffy2f/RF8h/6sf/0/Ad+qHw3vF71/xvq1J9/EX98uf9h5fU+7+X6+/6R
qmMvu//wK+//va33ha/WX/dPlxfD97scXsf6Oer7vhu+3nL9dX7lLvnHr/PL
Xfyb3/nyN7/zH19tnt8+vS71fX98fb++6j78un59dp984////ve6fn3u44/H
gyfx+u+Bfdfe/zzr31/XXX78V++fn3R/4PVPHb3+qft4/ff8JF7//+v3RP7e
65+/Xren6/axeBJ//PpfexNvfr2nw8eX69f79wyf/1PL5B9/n8dP4m9+bGCf
9nX5+OfxY/XzfDb8fTyJN///n3UvfuDDX1T9/6vfWG26exKv23v93p+t/97/
2JN4/Xt7Hv+D95/9Gz9Xv69n6+//f67ijc/P+/qX3Yef+uh15fX38Xzz/Gr3
P/kkXp/3fDPP9cXq916t/67+9eBv1Pf3fGh3q3hd957E6/r3PN5sDy+G//8q
/vj6fO9JvD4uhr+7F0O7+9Tu1/kq+Uf+7DL5+vup3+9Q5yZP449/LkfP482/
r5fD39Ondr/++3gar8+7G9rHUOe+/ml/9Y/f1r/gdX3fXtffL3n6+efDx8vP
htfp0/6I69f9zfD9flrPe8Ppt4d2/d23w/fneppVNz6tb7d+Xb5Y158vX3T/
5VsfCu90aK8vhvo29He/Onz/P3sxnFd/j8M49R8N+bvL9Xl/5OXw810OdfD5
8Hu/Gtrjy+5/fWg2v3GVv8/17+F6/fX/xPD1//31cP7Qrr439GfffTa8PkN/
d1DvHwe/Gn5vP3kz1MNu3c/9+m33W7/3l//MyT/tuv9x/Tf+87s/ftt966++
/7f9pPsdH//drr/ub//Uv/39D93Rtz5Lf/jx4/9v6I/+9/D5p/V3cbv+/02H
/98Pz7qPp/2bF0NdmnX//b99+LcajvPub/+t9/9+d9f9oY//5uvX7S++GNr1
fP11/+bw/zudp79b151F+sP1z3c31MNP/de6v/vk9es3fN3vLofXd5H+6uPr
9s+Gv59vLIf/f30fq6G9zYc61w2/v/vh76JLf7H+/Q1fZ/IkX3f9Oi1Sh6u/
qONXH/4gnw3H71T/sRjGSU+H/uvJcHw6vF5vhuPT4fe1GM5/uvn/+fbT7o9+
/PdmffyvT4fx2KLb/fALnn62+f1OPlv/Pc/fDMfP1j//zWL98/+94fN/dqhv
v/pZ6v/673XoT/7d6+H4Ga/fs+H3thp+j5/q//r4rPvOv33/77PXw/HZ8PPN
h5/vU//x8ef/rWdD3an6UtddPtX79eswjGe+Tb2f1H2s4ef5xvOhDjwZ+t/n
3R/++If36VjjtvXv6Xn31z90bz++Gn7e58PHnySvr7M+7/nwcyyH38OLoU6t
hn6l6tAidWk9Dhv+Lv/lp/q/fj2H+v3t4e/86/V3/3Q4vhxe54ehv/tU79fn
veTvuV6n4e/n9FM9r/q+/rr1873a/P1999Uw3h36yZ8efg/vhtf93ev16/hP
ng2v5+vh6382HF8PP/9q+PpvMr6t/qHGoevv4/P0D+u/q8+Hr/NkOJL/8Nvh
5xjyy7dDHeiGcfzb9evw80N/8fNvh9fvU3+y/j11w5H1WHOfo/rHGk/hvJ+t
vPrBGp/U++caD7FPcL5+jRc+jevXx0/j+M3P9/9TfrLpjEPZH9DvO/kTPJzf
yPO+vT7/Lfnb7v8DJIvyeA==
       "], {{
         {GrayLevel[0.8], EdgeForm[None], 
          GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxMnXW4VkXbt/eKu2vdmw2KCkhJKQYhiCIqdregqCAWFtiKKIqd2CgKBip2
Nyp2YGF3B3ZhYH5zPr/fexzfH3Nce+Zac62ZWec5e+v7fH5dxx20zYFxS0tL
jxVaWpIQNwstCo2x7UIrhVYObdvQiu5vE1rB/c39LHO3cExD297zKqHtHFoW
WjO00aE13B8TWmto7UKbFFpYQkuv0CaG1tP9LV0vF9pOodVCq4e2Y2hV90d5
jLo7+J3kDna93qFt5Rr50HbxWnj33qEtF1qn0PYKbVn39wxtGfd3D619aB1C
G+u4VGj7eF7n0A4MrTvnGNoBoXVzf7fQ2jx/V++V/kF+ln1u7XVxpvuFtnxo
XUObEFoX9/f3GHX39TvJjfNalg7tjNBGhLZOaKeFNjy0tUOb4e/E9zkstL6h
9QvtEJ9Nn9AOdSR3uPMrhnZ0aCuHtkpox4S2amirhXZCaKuHNiS040Mb7P4J
AZ7VQxsS2nGhPzC0QaEdFVp/15riGgNCm+o88yf7PbzjWOeZf7r3wd6O8LpW
Cm2a3z80tLNDWy+0kaGdFdq67p/p86B/SmhrhrZWaKc6ckbneN76oV0U2qYt
8uCC0DYObZPQTg5tmOef6HeuEdpJjuSO9LrY53mhbRjaRqGdG9oG7p/vMepO
9zvJ7eFv2DG08Y7wd7HXwve7qkXc48GVLWKd/hUt8o3+zBaxDlOXOeLr1Z6H
K9e3iEXYnNsiD+nf2CLWYfyRFjEBLw+3iBX6l7se98G1LXIbn65pkdv0r/MY
def4neTmux58zXIN7pgbvBbefXeLuMeDu1rEOv07W+Qb/Vt8XpzTrY74eo/n
4cq8Ft0p3AEPtuhOoX9zi5xh/k3eK/2H/Cz7nO11cab3t8htfL2vRW7Tf8Bj
1L3X7yT3dotYhKm3WsQi/TdbxCL9Z1rkAIxf2qI7jm/2eIsYwpVHfU7w/pgj
ueda5NXU0F5uEX+w+VKLuKT/rGvz3CUt8p53fO73wcgTfg9+v9Ain/Hp+Rb5
TP9Fj1F3gd9J7ukW3QXs4UnXwN2nHMm93yIH4P29FjlA/zOviXW82yIHyL3e
Is+5w95w5Lze8Vny3BdeO1x/2qJ7jVqftMgT+gt9Hrj+iiOuv9aiO5F3vOox
+h94jbj+UWgXtugO+NiRuotaxD3MbhHutSS0NLTNQ4vd/6FFrOPB9y3yjf5X
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
7qnOw/IJrg3jp3mM5052PWqdWRaL1DrDNehP8zzWdLbfA4PnOMLgJWXxAUcz
QtvV/Us9BhfnlcUTXF9QFqOweaEj53W+86P9DblLuDtmugasXeFvxveZ7vfD
/qyyOIPNK52Hqcs8D95nO8/8cz2PNV3uPPPXq4Q7J7R8aFeXxSIMXlMWf/uH
dq0j/F7nCI9zHeHxekd4vMER7m50hLWbHGHzZkf4usUR7m51hOXPAmMbtenn
e8riCY7uKMs3eLzTERbvDm2yn7vXzx4b2u2hHeE593nsiFD3mbIY4vs/FNpx
ZfH7sCOcPuIIU/MdYeRRR/h9zBFmH3eEtScc4fdJRzh9yhE2n3ZkHc+XxRys
Pet1welzjrC/wJHn5rGnNq37Bc+DkRcd+eYvOcLjy45wt9ARNl8ti0s8frMs
vmH59dAuLovxV/wsz/3q8+Us3/KzMPtOWfzB17uOcPqeIzy+4Xq844Oy+Ibf
Dx35nfCRIzy+7drU/dhjc0L7xBFOP3WE06/L4gy+Pi+LVzj9xmOw9oXHYHZR
WbzC6VeOzP/SeXKLy+KPPX/rGnD6S1nMkfuxLC7h8fvQbiuLu0WB4c3b9PwP
HuO5z7xe1vdzaHe51tfh+S3bVAfnuPv5nfGbz/v+0PoFV7/ze/4I7YHQHgxt
iSNc/OkI1385wvXfjnD9jyNc/+sI1/85wjX/n7kT4TqqKMJ1XFGE60JFvMJp
WhHfcM29QsQz7hcizxUrehaWk4pqMKdU0RgeLFXRt4epSkV8w3W1ogjXtYoi
XNcrinDdqCjCbFZRhPHW8PNrZXHdrqIIj20VRdhvX1GE6w4VRdaxbPj5/bKY
XbqidcF4x4oijC9TUeS5ckX7YN3LVTQPxjtVFGG8c0URrrtUFOF6+YoiXHer
iBVY7lkRlzDbvaIxWO5a0bM897sZgYkVKnoWrntX5AYe9KkowvL3gbet2/Rz
j4rq8Y4VK+ILZleqKML4j+H5bdv0c6+KalN35fDzT2Z5lYoifqxaUcShIRVx
CY8DKrpH4HpoRWOwObCiMfYxuCK+4Xr1iiLzB1WUJ8cdwO8rfletUVENuF6n
IrbgcXhFHMPvmhWxDuPDKnqW/loVjfHcahWtl/WNqIh1aq3tGvTXdW0YH+nf
n3hwQjU8F9qI0DatiFHY3KAi7mF8Q0cY2cgRxjd2hPHNPA+WN3eE5S1Da1bE
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
8exOMwE7l9XEOg5d6jxuzXQkd7nzuHVFTf/NQRw6xCzw7a/0GD7NCW2Xmry5
oSbu4fq6mpyBwWucx6dZro2v13qM565yPby8viavqDXXNejP9jzWdKPfg1s3
OeLW3TXxDe93ed/07/EYPt1ak6t4dntN/uDTHY6c123Ok5tUkxP4cK9r4Mq8
mnzAg5v9fu6GB2ryhzN7yHn8uM/zqPeg88y/xfNY0/3OM59/18n/HYD/+8HD
roFb82vyAS+fqtmZmpzap02ePR7atPDzlBCfqCnizZOOzHna8/DmGUdcfNYR
V16qyQHYf74mRuHxOefx72XncWKBx3huocf4Pf9iTV5R6wXXoP9ZTczBxSt+
Fhc/rIlpWH6tJsdw63VH3HrDEYfedMSbtxzx7G1HXHnHEYfedcTL9xy5D953
5M74wJF1fFqTP6z1I68Lhz52xKFPHHnuVe+DdX/u/cHvF4641VLX94aXr0O7
uiafvnQezxY54sc3zuPT9zU5hh/Vujjge/7gMRz6qSYnceX3mpiG98U18Qp3
PzuPQ9+6Nl7+4jGe+9H1qPVbTf5Q61fXoP+d57GmP/wefFriyD0U18U93kR1
7Zt+UtcYrvxdk8P4+m9NvuHNf46c1z/Ok6vUxTT7T+uqgSuluhyA/T/9fu6D
R0Pbt00OlevKMz9X17xHQiuGnx+raf5fnsea8nXl57sO/vH7rVbX2ePQunXt
gTU26nIJV7K6In4064r41FpXxIl2dUVcaasr4l/7uiKedagr4tZSdUW8Wbqu
CHcd64p407kuH/Bg2br8wZvl6op406muyHNd6noWV5apqwZzlq9rDG9WqotR
2OxWlz94072uiDc96op43LOuiDcr1BXxplddEW961xXxrE9dkbuhb10Rh/rV
FXFoxboi61itLnZhcOXw81c1+bRKXRFvVq0r8lzXuvbBugfUNQ+fBtYVcWhQ
XRH2B9cV8Wn1uiLeDK3LE3xasy438GyNusbwY0hdz/JcvS5GYGKtup7FlbXr
8gROR9QV4W6duiI8DaurHu9Yry6+8GNkXRE/1q8rcq8Mr6s2dTeoawznNnTE
xY0c8W/LunzAp03qcgkntvIYdwz8T2jT+OZ1eYJnWzgyf7PQCs6Nqotj+N3a
NXBlp7pYJ7d9XW7gxLZ1nRHebONn6W/nMZ7b2OtlfTvW5Q+1dnCNVjvK70l+
R472+/Hm8dCmhHZsaOPq4h4/xtTlD97s6gj7uznize6OeLOH5+HKeEf82NMR
vvari3UY36cuN3BiL+fxZqzrsY69PcZzB9TlAx5MqMsfau3rGvSPr4s5ONrf
72HO1LpYIXd4Xdzjx8S6/MGbSY54fEho/evy5lBHvDnC8/DjSEf8OMoRP46r
i3Xed0xdbsD70c7jzYHeBx5P9hjPHeSxfv4eQ11rimvQP8H7g+Vpjrhymb83
3//kujzh3j3ReRw6yZHcKc7jzel1eYITc+vigO95hsfw46y63IC18+tiHcan
Uzfwv2mIZzuPK6e6Ni4WQn7/No2f6XrUOq8uN6h1bl016J/meazpAr8HFy90
xL9ZdTmDT5d73/RnewzGZ9TlDA5dWpczuDXTkfO6xHlyh/k7w8cVrrFzaNfU
xT28X+T34+7VdXmCH9c6D79Xet4uoc1xnvkXex5rusr5MY783sK361xjnGt0
cO62urjHoRvr8gpvbnLElZsdcesWR/y43fNw4g5HfLrTER4fqIt1zuCeutzA
ibuch81bXY913O0xnptXl1f4cX9d/lDrvtAOdv8lf1dYe9DvYc6LdbFC7om6
uMehR+ryCm/mO+LKo4649Zgjfjzpebj+lCP3wdOOePNCXdzzvufqcgMnnnEe
nx7yPvD7WY/x3MMeY03P1+UYtRa4Bv2XvT+8WegI79/WxQosFIMHr9XlyivO
49arjoy/Sb3w3DkhvlOXG7hyQ113K9/+XY/h4vt1eYIfn9bFOox/VBdzePCB
8/D7Vl21cfdDj/Hce65HrU/qcoNaH7sG/bc9jzV95vdw93zuiIvf1+UMTnzn
fdP/wWMwvqguV/Hs67qcwYlvHDmvr5wnd31ddxL7/9E1uKt+rcsB2P/C7+du
+MXnhSu/OY8TP3ke9RY7z/wvPY81/ew88//v3wXwzzO/uwYeLKnLSdyKG+Ie
h6KGuKf/V12+4dnfjvj0jyMOJQ3Nw4m0oYhP5YZYh/FSQw7Q79YQH3zDQkNc
4sq/roe7uYZqwHKxoTzzqw39vsezfEN55ndvqB7ftiX8fG9de6g19CxutW+I
exxqa4h7+o2GfMOzrKGIT82GIg51aGgeri/VUOQ+WD78/HqIb4S2XEMO4EbX
hsbY5zINuYQrlYbOgz0s3VANnFu2oTzz6w2tlzV1bCjP/NaG1oL3PRraK26t
2RATfPNeDTmATz0byuPZCg1Fcr0byuNTv4Ycw49Nws//+fxWbGgMh/o35CSu
DGyIaXhftSFe4W7lhvI41Keh2ni5SkNjPLdSQ/WoNaAhf6i1WkM16K/V0D5g
v29DNVjf4Ia84h5auyHu8WZ4Q8/SH9qQtzi6RkMRz4Y1FDmjEQ3Nw6d1Goo4
sWFDfMP1Bg1xT3/1ht7JHTCyIWf+DG1QQ2fAmtZtqMYfoa3fUJ75Qxqax5rW
ayjP/HYNfUP426ihd8L+pg2dPf5t2xD3eLNNQ57Q37whV3FuC0ec29IRb7bz
PPzb3hHudm6Ib7ge3RD39Cc2xAqM7NSQMzC4levh2Q6ugX+jnGf+mIa4ZE87
Os/8Sa4Hj1u7BnvY1c/i314NcY83ezbkCf3dG3IV58Y64tw4R7zZ2/M6hbaP
Y+fQDmzoLsCPAxq6a+gf5DH2uV9D3uLoLj4P9rCva3QJbX/nmb+b18uaJjjP
/IO9P3w6oyG2YOr0hhilv5m/J9/ssIaYxrlDPA9XDnUkd7jz+Hd0Q17h0DEN
+YYrJzTEJXwd35Ab9C/2+2DkuIZchdOjGnKYWlNcA/+mOs/8yX4P7zjWeeYf
4bXg7pGO1Jrm9+Pc2Q3xjR9nNeQD/XM8hhNn+mzIndqQ57h7miPndUpDdxm5
gVm4G0L8OrSLGnKDvZ3ckM88d6Lfj+snOZK7sKG7jDnnNeQ2np3bkNv0Lwht
Yz833WskN8Pnh1uXNuQVHrSE9dwd4j2hXdGQVzgx03kYv8wRXy93xONZjnh5
pefhylWOOHe1I25d35AncHdtQ97C6RzncXe267GOazzGczc25A/ezG3IT2pd
5xr0H26IP7i7we9hzkMNMU3uzoa8wolbQtsjtPGh3eqIr7c54vHtjnh5l+fh
yt2O+/nsiLg1r6E7gvfd35C3OHqv87h7k/eB9/d5jOdu9hhrerCh+4taD7gG
/Ue8P5yb74hbbzfEK2w+3hDT+PGo8/D+mCO5J5zHxacb8hCHvvC355s/4zG8
ea4h93Dr5Ya4hNkXGvIWbxY4j7tPujb+Pe8xnnvW9aj1UkOsU+tF16D/lOex
poV+Dw694ohn7zbEN+y/433Tf89j+PF6Q3cWd9ibDbmKx285cl5vOE/uDn9n
+PggtPMb8unThvy5JLRX/X78/rghh7mfPnMetz70PHz9xHnmv+Z5rOkj5y/y
9+bu52+iz11jpuvhK65+35BLuML9gXu48rUj7n7jiIvfOuLiD56HTz864t9P
jjj0e0NcwuDihlzFoZ+dx7nvXI91/OIxnlvSkEs49FtDrlLrV9egX83EIgz+
4fcwp5KJY3JRJpdw5e+G3OOb/OOIu/864uJ/jrgYZ5qHT0mmiH9ppohD5Uz+
8L5CJle5G3KZ8jj3p/fBHZDPNMZzf3mMNZUy3TXUKmaqQb+WaX/4V88U8ax3
+Pn9hphqZuIb5xqZ8riSZYrkWjPl8a99Jvdwa1FD9y/fvkOmMdxaOpOHONQ5
E6OwtmwmV3GoY6Y8zrXLVBsXl8k0xnNLZapHrU6ZfKPWcplq0G/LNI81dcn0
HjxbPlPEp76ZHIDxPpn2Tb9fpjG86Z7JQ+6tnpkcxukVMkU87pEpT+7Lhu4k
9r9iphq4tWqmO4t810zvx/WVMzmJT6tlynN+K2Wah9OrZMozv1umeaypf6Y8
8/mdgJf8DTcgUw38G5TJPZxbK5MnOLFmJq/or57JQ7wZkini8dBMES+HZ5qH
c2tninizfiYW4W5kJsfoj87EDbysm8lbfFojUz38HpGpBi6ulynP/A0zeYVP
62TKM39n14PNYZlqsIeNMj2Lc/w3kPAEJ7bM5BX9TTJ5yN8Rm2aKeLyZY+z/
dhLzCv5vKhHxZqdMzuDKjpnuCPqjPMY+t8/kLffEBpnOgz1s6xq4uIPzzN84
03pZ03bOM38X7w+3Ds/EIhwdlolX+idk+mZ8q90ysY5/YzwPb3Z1JLe787g4
PpNj+LRXJvfwZv9MXMLXfpk8oT84EzvwsW8mb/Fpj0w+U2tv18DFCc4zf0+/
h3fs4zzzx3oteDzOkVoH+P04d1QmvvHjyEw+0D/aYzhxhM+G3CGZ7i88PtSR
8zo4tF7Obe7vzL07NZMb7G9iJrdx+kC/H6cPciR3XKa/iZkzJZOreHZMJrfp
H+sxnpvsNZJ7ObSTQjs5tC38fric5m+IZ2dk8gHeT8/k2AjPw5lhnk/E3VMc
cfpMz8Ozsxzx6fxMbsDaeZm8oj83EyswMj2TwzB7quvh+tmugdPnOs/8CzO5
hEPnOM/8610PHk9zDfZwkZ/Fs1mZfID3yzM5Rn+Gvw1nc4kj7l7qiNOzPQ/P
rnDEp2sz3Qt4c02me4f+dR5jn1dnchhfL/B5sIcrXQOn5zjP/Iu9XtZ0lfPM
v8H7w6cnMjEKj49nYpT+if6efLObM/GNKzd6Huzf5EjuFufx8o5MLuHKXZl8
w6cHMrEIp/dnYpT+S34fjNybyWEcuj2T29S62zVw+j7nmX+n38M77nGe+bd6
Lbh7myO15oU2KZNPT2fiHg+eysQ6/Wc8hgdP+mzIPZrpLsPXxxw5r/mZ7jVy
x2dykXvtxUxusLdHMvnMcw/5/bj+sCO5FzLdicxZkMlt6j2XyVv6z3uM5571
Gsnx74r496/8O9ZXMnmFB6s3w50X4nehvZ3JB3h/K5Nj9F/1s/D+miPuvu6I
0+94Hp6964hPH2dyA9Y+yuQV/d8ysQIjH2RyGGbfcD1cf881cPpD55n/aSaX
cOh955n/u+vB45uuwR4+87N4xl7xAd6/yeQY/S8y/bcF+W8NfumIu4scZ/mM
mIdn3zvi0+JM9wLe/JLp3qH/q8fY50+ZHMbXT3we7OEH18Dpn51n/udeL2v6
0Xnm/+H94VNrU4zCY7MpRul3buqb8a3+ysQ3rizxPNj/05Hc387jZUtTLuFK
3JRv+FRqikU4LTbFKP39ws/Lh9Y1tHxoD2Zy6L9MblMraaoGTheayjM/auo9
vCNtKs8d8I/Xgrv/OlKr3NT78al9U9zjQVtTrNPv0NQYHrRr6mzINZq6y/A1
aypyXvWm7jVyX/k7cwcvF8YXZnKl1pTPPFdp6v24Xm0qklu2qd9/zOnYlNvc
W0s35S39ZZoa47mlmlojuSFNsQVTX/v9cNmlqW+IZ72a8gHeV2jKMfqcO87A
e7emIu52byridO+m5uFZn6YiPq3clBuw1r8pr+iPbIoVGFmxKYdhtkdT9XC9
b1M1cHqlpvLMX7Upl3CoX1N55q/fVD147NlUDfawWlPP4tkaTfkA70ObOg/6
A5v6NpzNoKYi7g5uKuL0sKbm4dmaTUV8WrepewFv1mnq3qG/XlNj7HPtphzG
11WaOg/2sFZTNXB6RFN55g9oar2saXhTeeZv0NT+8Gn3phiFx92aYrS9XeF7
8s02bopvXNmwqXmwv1FTkdwmTeXxcoumXMKVre0bPu3YFItwukNTjFbNL39L
cddv15TDOLR5U25TaxvXwOntnWf+VqHl/I5tnWf+pk2tBXc3c6TWTn4/Pu3R
FPd4MK4p1umP9xgejPXZkBvT1F2Gr7s6cl67NHWvkevUlIvcaxOacoOz3Lkp
n3lulN+P66Mdye3b1J3InL2bcpt6ezXlLf19PMZze3qN5PZvyjHcOrApr/Cg
1i543xruhNAObcornDjIeRif6Iivkxzx+GBHvDzM83DlcEecO8IRt6Y05Qnc
Hd2Ut3B6pPO4e4jrsY6jPMZzxzXlD94c05Sf1JrsGvTPa4o/uDvW72HOuU0x
Te6UprzCiROa+ruBe2uaI76e6IjHJzni5amehyunOeLc6Y64Nb2pO4L3ndWU
tzh6hvO4O9X7wPszPcZzx3uMNZ3T1P1FrbNdg/753h/OXeCIW7c0xStsXtwU
0/hxofPwfpEjuRnO4+JlTXmIQw/42/PNL/cY3sxuyj3cuqYpLmH2qqa8xZsr
nMfdS0Pbsin/rvQYz81yPWrNaYp1al3tGvRneh5rutbvwaHrHPHstqb4hv1b
vW/6t3sMP25o6s7iDrupKVfx+GZHzutG58md7O8MH3e4Bj7d25Q/B4Q21+/H
77ubcpi/He5zHrfu9Dx8vcd55l/veazpLueZPye4Nyq00aHd7xp8g0Lozwvx
odAea8qlI93HPVx52BF3H3HExfmOuPi45+HTE47496QjDi1oiksYfKYpV3Ho
Kedx7lHXYx1Pe4znXmjKJRx6rilXqfWsa9D/qCkWYfB5v4c5HzbFMbnXm3IJ
V15uyj2+yUJH3H3FERdfdcTFNzwPn950xL+3HHHog6b84X3vNuUqd8PbzuPc
i94Hd8A7HuO5lzzGmt5v6q6h1nuuQf9j7w//PnHEs7+b4hKmvmiKb5z7LLRL
mnLlc0dyXzqPf1835R5uwcIkf/tvPIZb3zXlIQ790hSjsPZjU67i0PfO49wi
18bFHzzGc9+6HrV+bso3av3kGvS/8jzWtNjvwbNfHfHp36YcgPF/vG/6/3kM
b/5oykPurT+bchin/3LkvJY4T+7Bpu4k9t/Sqhq4lWvVnUX+N78f15NWOYlP
+VblOb+oVfNwOrVvzP/d81hT3Ko8819rii+4LLbKPZybGH7uGdoKoWWtcglX
Kq1yD1eqrYq4W2tVxMV6qyIuNls1D59aWxXxr12rIg51bBWXMNihVa7iUFur
8jjXaFU91tG+VWM8t2yrXMKhpVvlKrWWalUN+iu3ikUYXKZV72FO//Dzp03l
urfKJVzp3Cr3OJsurYq4u3yrIi52bVXExR6tmodPnBkR/zg7Ig6t2Cp/8KZP
q1zlbujVqjzOLdeqfXAH9G7VGM91atUYa+rXqruGWn1bVYP+Kq3aH/6t2qqI
Z5u0ikuYGtgqvnFutVblcWVAqyK5Qa3K49+QVrmHWzu06tvzzYe2agy3hrXK
Qxxap1WMwtrwVrmKQ/+PprOOs7L6uvjc7nuHe0fsAmwROzBAEcRARVBUVEAw
EQsVQZBQEEEJAVFBxUIQbCwM7O7uwu5u5d3f31rvH+uz2Oc8Z5/znL3WvjPj
CDvVNY/ntq0rN17cua4xnutYVz5yda7Lb+TqVFcO4u3qWseZdqtrH3zWpS7G
T/vU5QE0vndd703cw2P4pltdPqRvda/Lw3h6z7qY+9qjrnnm2tRVZ/Sxr3Pg
rV51eaYQ2L2u/fF6z7o8yedbb88XA/t5HZ4+wPOs71rXOs60v+ezXsNnHn47
0HHJ+fAoc0fU5aUWf8bivZo/a2v2bl8zXjzMjBf7eR1+6m/GfwPMeOiYunSJ
BgfV5VU8dKTn8dzhzsc5BnqM546ry0t46Oi6vEquo5yDeFRdWkSDx3of1oys
S8fMnVKXl/DKCXV5j5oMMePdE8148SQzXjzV6/DTUDP+O82Mh86qyz/sd2ag
fV294XTP47nj/R70gDM8hqcHe4wzjair15BruHMQn+33w3+jzfjskrp0iabG
1aVvPDfG83hlrJm5czyP/ybU5T28dXBd/Zfan+cxvHV+XT7EQ1Pr0ihau6Au
r+KhSZ7Hc+c6N16c7DGem+h85JpSl9/IdaFzEI/3Os40zfvgs+lm/HRZXR5A
45f6vYnneAzfzKzLh/Sti+vyMJ6ebea+ZnmeuT519STef65z4K2r6upZzF/k
/fH6lXV5Ej9d7Xnu73Kvw9PzPM/6GV7Hma7wPOv53T1+Z5bfl73GOfAfXyPz
PSjffy6uy0t45fq6vIdXFpjx7kIzXrzBjBdv9Dr8dJMZ/91sxkN31KVLNHhb
XV7FQ7d4Hs8tcj7OcavHeO6uuryEh5bU5VVy3e4cxM/UpUU0eKf3Yc3TdemY
uWV1eQmvLK3Le3ztcK8Z795nxov3m/Hig16Hn/gefVhd/nvEjIeeqss/7Pd4
XV6lNzzqeTx3t9+DHvCYx3juHo9xpifr6jXkesI5iJ/1++G/58z47LO6dImm
XqxL33juec/jlRfMzL3kefz3al3ew1s/ufbU/DWP4a036vIhHnqvLo2itbfr
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
MVrj/XZISVPw9ilpC94uJa1vErxxSnrfKHjDlO50j+BuKWm8XXDblHTfJqV6
oKktg7dISVvw5in5iXzkQouMdQjsE5gduDiwV2BWYGZK/iE3eT8jX+hr87S8
uGlK58Pr7VOK0fpmKcX4cr2UzodXOfsGKfWC9VOa4+cmXYN3T0njnYJ3Seln
xox1SUn3jO2ckjd2Skkf9DPuaduUfMI8c/Tl5pTqTZ9jfpuUPLprcOeUehJn
4Rx4cauU7ouvF9hzt5Q8v3VKc/QJxliPv8nBWekN5Oa52wL/Up+UPh9apXQO
PgPQYD0ljR8Q6Gmtw/vbA/B+KXkD3tdapx57WpcHB/pYf/BBfs9DA4ekpFPG
DvS9nxQ40fqAh6Tkob1d5zYeOyElT/fy+fB9b8dF5+vt2pwfmJhS/9jHuVI+
b4+UNH5UYFBKWocHpuQB+MiUvAEP8L0cHjgspf4xOHB8Sj0DPi6lu2S+b0o+
Y+zYlPx6iO+l2fPcRdJn4Xzr+v3Ii6eP9vnw/TGO13Q+4p39fuelpCd4Qkqa
g8en5JkRgeEp6X5Y4IyUegG16p6Svk4NnJKS1k92PdDLmMDolHQDn52SZ850
rq08NiqlvozX8Ql9kNz4f33nJi974tcZKXn6LJ8P3490vKXzEePFoT7fJj77
6Sn1hdM81935LkpJ+xcGLvDejE1PyQ+MTU7JD5NS0kdH39O5KXllsuf4Gqru
eu7g+XNS8vrUwJSU+tPpPgfeHev76uY9p6Xk+3Ge6+ox1ndxDs66vXPzHP47
IiWd3ZqSR/8O3Bz4K/BnShqfF7gyJa3DV6TkAfjylLwBz01JX5ek1DfR3fzA
dSnpD77W+y0IXJ+SThm7xvd+f+A+1xC+NyUPXeq8J3tsaUqevsrnw/dXOz7Y
+a52Hd4IvJ5S/7jMuXr6vHNS0vjtKfWqY8zcx9HmW1Lyxi2+m/6BRYEbUuof
9wTuTqlnwHcF+nl+YUo+Y+zOlPx6ve/lCM9zF/v7LJzvJL8fefH0Ep8P39/h
eLDzEU/2+72Wkp7gV1PSHPxKShp/MvBESrp/PPCY73R54OOU9PVgYFlKWn/A
9UAvzweeS0k38LMpeeYJ5xrrsWcCbYpR78AhgXXNBxel3WXOu47H+hTl6ad8
Pnz/tOMxzkeMFx/y+Ub47I+m1Bce9hyf0x8FPkxJ++8E3k7pc5uxD1LyA2Nv
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
vR693xm4IyuNkuO2rPxzi59DL0877zA/u8Q6YJ8nstLfA4H7s/LwPYG7s9L6
Usdo917HaPc+x2hlmdejlQcdo52HHJ/vfR7PSnePBh7JSqcP+zm8epffZ7zn
mRvhszA30Tkey0rTjzkXunzG70kNPg184trAy303PwZ+yEpPLwSez0pPz3o9
enrOMbp70c/h71cDr2Sl69cDr2Wlp3cD72SlNfjtrPomGkFD6OytwJtZaZ8c
L2flmzeca67X8dxs52a/y7yO5/DKSz7TTOcgRtfv+Rxo5IvA51lpBf4sK/19
6bkFHvvU5/s48JHPu9zxNR77MKtedb/rjRa/D3yX1ffSzH+Qlf/e9zmu8hjx
ktBw2xY9j16/CXydle7hr7LS6LeeW+wxzpoIT3YK7JKTpn/w3k0e2zknrfwS
+Nn6+NUxevnNMdr93THa/cMx2v3TMe/2l2Pe9W/HaPofx2j6X8do+j/HaDAV
Z0nmpFfOtyIr/fIOxGiUeWL0m85pDbpf4Vz4I5PTHPVvBNdz8m0uOJuTvvM5
xei1kFOMXos5xWi6HFzKSbuVnGJ0U80pRje1nGJ01JxTjDZb5RSjP/YnRpcr
B7fOSa8tOZ0PXa6UU4xOmSemr3Be3gddr5LTevyxak4xel0tpxi9rBm8Rk4a
Wj2nOTTEGDFaWyun59DpusHr5NTPqP9PWXm9TU5zaLxdcNvA3aHD9UOHG+ek
rQ2C18/JH+vl9Bx6XzunPfAJ88zhE3KQF81uFLxhTjqFyYVnOAvr0fqmwZvk
pNf2OcXob+vgrXLqQx2CN8tJi9vkNMc7bJ7THDreMniLnHTMOmLelTGeW+L3
/tE63janXGgKf+yUk147Bu+Qk6a3D94uJ63DrEHfzDOHzzgX50aX5NgxJ63D
5Drc/r/K2t810DlwbOD6wHzrb89Ad+tyj0A363s3r0EfXRyjl90do9e9vB69
7u0YzfUM7J+TNuH9XI+jA0dZu/sGeuTkk67Oi9b3ca5WXrev9dorcEBOHujh
56jzMc6b99nJhcZ7ew1aOSzQ17qED81J3wcFDsxJ330co+mDHaOVw70e7Rzh
GN0NCgzMSX/wkTnp7CjPoccBgf45ee8A3wu67+dc7byO51b2WTh3G6/juXvC
Fxu2qG7UYGxgjGsDj/Y9TQlcmJOOBweOz8lLx7nmm3iMGN2c4OfQ6cmBk3LS
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
At/puMDYsrwCjylLc/wM9NyyPAOfU5a/pzlXZ4+xHq2NDpxdlgbHON7RY6PK
0u4E50U3V/p8fXz2S8v63oKvIfiaha/v6bn0Wr4nedS98lyPEU9wf3/cfba9
75ve2sF1QAcXB2aV5Xt4pmvOnpe49vDssvQ6z+fr7THW48+LAtPL6h3kmFFW
b5rue9nT9zq5LI/Ck8ry/RTf+8jQ1ZGBO8ryw12BO333jwYe8d09HHjId/mI
Y3x7Q2BhWX6GF5Tl4UWeO8pj15elNfoW2kKXi/0cNXvM+3V0feiD/Dz7usC1
Zf3Mcb7jQc5HjI/v9rmp/+POhUaecEwPuCZwdVm9AEa7A5ybOXrk+YGJZfVI
+Lyy+tokz+3uMXRznj+jqDe94/7AfWX58N7A0rK0xp096HeCl5Xl1/v83EiP
PVBWH7nH7zPMOYjP8jx7bB1fh43212r8nJef3fDzFX4+y88m+LkIdX0x8EJZ
mno38E5ZPnw/8J7v/vvAd67P14GvrBfWPW+9wM/5DuBnfRfwM2Xp8e3AW2Vp
9h3H1ObLwBdl6fHVwCtlefXlwEtlafAln3Wa55m7zGd813X+yrnoJR/4Hajf
J4HlzrFSJXpnRTlWDm4dWCswMHBkIBvYO7BXRX5i3cdl+Qr+qCz/wx+W1ac+
9H7o+NvAN2Xp9TvHCz3G3V3nd/3cevos8GlZWvvUZ73W88yl4xx7BrpX5Gfu
782yPPx64DU0E74cFPjN9U/Gs4mK9JKqKH7QuYipT6vg5op8/UfEv5fVr8+O
+NeyPpt/Cfxc1tcO8E9l6bEp1q2wztiHmBrXgqsVeezvwF+uE3fMvfPZ8Kvz
0kf+LGtvetIbfh/0wrnIhScyFZ0bfxaDCxV9HcNZfiyrT8A/lNUvYPQ6y/dE
XnzOunxFvQPOVdSfcq45fQpmP3TdCK5XpDn0QozGGePuni7rXSsV/Te3cnCp
ol4Cc9anypovO+9eriV77mOdUZs9At0q8gNaXLMiLWwUvGFFWtgkeOOKarxj
cMeK7nH74O0q0gXr1qjoveHVK3p/eLWK7hdetSJdbxC8fkWaYx9i7nXb4G0q
8k+b4HUr8tg6wWtX5N217Rv8xzxz6JUzcm70wrnIhd43regd8MMWwZsHlqLT
+F6xKXAvd1FVfB86rSou8vVM4LWqPMS6DhV5Cd6sIt/D7SvyP8x+Y2Pd0YEd
KvIId8af0eC4Ft0d2uFdt65IN1sFb1mRd2HOiqaYZ44ewJ2tV5Hv2wW3rcj/
MPf1X/y5S/Bu9snuFcVoYr/AvtbK/o7RR0/HeKlrRWv+LSvHrhX5qXNwp4p8
Be9iTfewngrO3cP17hc4oiLPd7fO6BfUf5XAP2XlJm/CGuzqucMDh1krRzhG
R/2dFw8cFDiwIk/0cdzsMf7uc/zNGXeuqL/sVJF26Z3cH3eH/5ln7k73jD/d
S8jRqyLvHew98NMBvi80PsBnqvpZ5vDBkZ6j7xwaOKQiHx/iXPSkvp67MLT1
SuDlqj5rqRk15PP1H/cyvHFCYLD1MSxwhjVxpmM0Mtwx7z0hML4ivbDu+Ip8
NsS51vPYcdbQsYFjKtIcuU+vyDMnB07yHZ0bOKcij53oXO2cg/VtnOPoirQz
KXB+Rb4h32mux3jnQvsjfO4x/N5H8Nk+122BW3322x1z7iWOrwl8FfgyMLpF
60ZV5KtzIx5ZUQ+Az6qoF5zl/dDcxMB5FWnwfMedPDbBWuFdx1Xk27GcsSJf
w5y1o+eZmxf4PPBZRX3oJN8R/eDUwCkVafSKwOUV6elKxwd7/ZW+u5sCNwYG
BRYHFlXUr2cELqqol8PTK/LeTM/t6bFpFXl7duDiijw5y88d5dzkxecXBCZX
5L8pgQsr8upUx92dj7iDazjUdb7ZZ6X2tzju6hzk7eLc6KBTtJdJgfOb1C+H
+l429d2gM7x9fWB+Rb6Hr6vI//C1FfWFa11/dHer9x7oe7qhIp9d5Ts90mML
K/LqAu+B9672cwM8v8DxF64l+3xdkc6o06eBT3xuPj/usQ4eDzxmHTwZeML1
eSvwpu/xtcCrflfW3e13hu+qSC/wnRXpBr6jIk0/GnikIo0/5pj7fSXwckV+
fSBwv+vDZ9i9vuN7fdbTPc/cGJ/xcdfqVedCy0/5HfDB84HnKvqMRZdoZx0z
2lzbzN0vdd/ic2OC1z1bkdfhZyryPPx0Rd562vuhrzcCr1ek3zcdT/UYdzfZ
7/pSRX59MfBCRb59wWed5HnmzmnRnT1cUU98MLCsol65zPd1WeCjwIcV/TsZ
HztGH98Fvq1IE987RiM/OObf1ljuNZc6xwcVee79wHsVeQ9+tyL9flORnuY7
9zeu87+BfyryP/0DnQ1x/el3lzg3eekdn3hv5v4O/OVn/3GMjv5zXvz5a+CX
ivz5m+MbPfZzRb2BM75TUR95uyLt0pcf8t3N9Dxz97jOfD4tdo6fKvLh794D
z/3o+0LjK3ymRX6WOXzA11/M0d//DPxRkaf/cK7b/X7M8XtL/LdK/vvqlFj3
qj87J0St3wh+vSotrBTcUpUWVg5uXVWdNgzeoKp7bBfctqr3bhO8blW+KgYX
qtIOnK9KQ3CuKu1kgzNVaY59GlV5phpcqarm5CYvPmOsXJV3S1Xtgf7Ika7K
h8wzh2/IV6+q5utVdVb0tX5VMc/tH9jP+x0Q6Bk4OHBF4PLAboHzuJtA58D4
wLlV+WrN4DWq8ha8elUeg1erqh/Aq1blB+6Mvak/97ROVV5cpar7RROMrV2V
d9eqag96Cjl4Dj0xz9yuPhdnwqvUh5rRD5qDa1XVfmf+209VWtilqhgddKoq
ph77BPb2Pe4V2LMqX20ZvEVVfoM3r8pzW1U1R09nrENVGt02eJuqfL51Vc+N
D10NblH+su+Ye8ejmwZvUtXnRPuqYr4WId9mVfU8atjKGurhs6KpfR3jc3Js
XJWn4Y2q8jaMXumX5OBe6JXcDTrDM12Dd6/KV3CXqjzfxfWnH+zm+y5aL+yd
8j11r8pb6IM7TXpsj6p82a2qPegpu1pHCc93834TrTPqcU5gnM90vueo98DA
kdbNUYFBrsGwwBm+r6GBU32nJwdOqsoHaLpPVXcJH+Q7hQ/0vcC9rTn2GVCV
Lg8L9HVtTnHe1h47tCrvHuI9as7RqyotHuq5NZyvv7Vyms+Kdk53zM/h+BkE
35efZ+b77wlmvkf/uRE+bVHv4vcW+RnY/36HLNYPDhxflbfh46ryPHxsVb0E
PqYqLZ/hvTf2PZ1YlS+P9v1u5LEhVXn3BO/RxjmOtraGeG5t14Q6re537VeV
d48IHB7YMTAmMNq1nxyYZC1c4BjtXOiYu7wscGmgo9edXZWfxzrXDh4bFdgu
MDJwVlWaIzcaQpf0LbRFn7skMLuqXjDOubZ3DtZv6xwjqvJJL6/r5bNcYr3M
8fnwwRSfG0/OCFxUVS8gx/CqfMvY9Kp6A2NnVtUj+/mOVvE9obmtPI+++Szc
yfe3t3NMq+oza0hgalVanuszofHLHdN/eJZnevq9L67Kx7MCM6vy80yfe3/P
z3I9Xgq8WNXn/Y6uA5/5HX331Hl+4Lqq9HFr4Bbr4vbAba7bY4FHfa8PBR70
e7PuWr8/fI3vAL7adwFfVZWWbw7cVJXGb3HMXS4LPFCVBm8ILKzKxwsC11fl
v+t91oGeZ+4En/FW1+pB50L7S/wO+HNp4B6f65vA1z77d4Fvq/L6vMCVgTcD
bWvhlZp8zrq7q+pN8F1V9ZE7A3dU5b87vB8afCTwcFW6ftTxSI89ZF3wrvdX
5eP7AvdW5ed7fdZhnmeOr2nWjbOsU1MP4P5urMrni3xf9NnnA89VpZe3/B5o
7W3H6Pcdx7znF4HPq+rdrHu2Kr+94FwTPPZMVf57OvBUVVokN19v4XN+boHO
0OxngU+r8u6LzjXeOVh/jnM8WZVevnU96EeL/T5X+FzkQtPv+tz49qPAh1X5
nhxPVOV/+PGqegqMXo/xPZF3ttd9UJU/4Per8gn8XlUees/7odevAl9Wpd+v
Hc/zGHc31+/6SVV9ZHng46p6zMc+6xzPL/d9oSlqST3a1aQz6rFeTTFaSwYn
arqvRnC9pneqBVdr0lQluFzTezJGjC6bglf4Hn8J/Gx9wD9V5RuY36nBe38E
fq9KU/Bvvsvmmva70WO/VuU/fi+H369Z4Bw/+H5/9X744L/Av1XpOFXT+1Bz
3qNVTZ+pV7rOfD/K1218PcL3EPQkejnfG/B5QC/newXGiPu6NtQBn+cjX64m
P8HZmnwDZ2ryHvdUqsl/cLEm7XAW3hNPMlaoyX/pms6N98hBTF9hnv2W+P3+
qaofUCvu/XaP/W0NbRBj69ekqQ1ritHaRjXFaGrb4G1q0tTW/H5TTd/PrBG8
ek3egler6XudNWuaw2+MrVqTN9gHDfFzavrE2jXpldzkne+60e/w9sox1rom
f65SU4xfyUeMJ7er6Xx4ZeOazo1ft69pjp5BjpVq6hNwS0167xC8WU2+Zwwd
0+//tObo1385vs13Rsz31Xzubm3PkKN9TV7aNHiTmt6B3+3iHPiQO9uyJs/x
LM/RPxjboiaPbl7TmegB5OB96C/M/2+uHp8fgeF1/U7o7/4dr20jHhsYU9cZ
u8WzXWs6K7x7Te8Ad6np3eDdavLcLsE72wM9AvvY2/De1tZ+gX2tIcb2cl0H
BQa6HvCRNXmsU015V/bYgJp0t0dN50Ob3WuK6QXk29N3NCowsia/dq4pF77n
vLvW5PlDA4fU1Ffgg2vqL3CfmvwEH1ST5w4I9LQO+gf6WQfwETV5kfn9rQPG
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
V2wdkrq5r4vGa5xwUPX8cELsYA7AB08s9vFnhWeKfR35dDEHkE8VcwP5ZLF/
8TweKfa7l4WXiv0P+WL6+arwSrGfkvZCxv1L4Ys8Q+TnxRx6LPVekLTPijn9
XOyD989Hn5T6ns9zmFX9m6U6fjyeug6PvU8U+/j7wnvFvo58t5gDyHeKuYF8
O+PC2WOvF8ePT4VPimMG8uOMJfmvFfOMtI+K+fpKxmVK8hmLw2IL9p2f/lEv
nP4g9sH7D6OfnfrQ8SP6N3O1PyFnqvY55D/FPv6T8GOx3/8gfF8cC3hWDxf7
1wzh62Jf/yrPA3/5Q/i92G+QvxVz5sfUdV3Sfi3mHFyHJ+NSN/y/OHV/lTbh
6zzVnP459sH7X6Jfm/rQ4eI3se+K2P5dcVz4Nnm0Q31zV/v+bJIdq9smba5q
PpDWoZoP7ar9g9jGOP1dzDfy21evoU7M87w5+f8r5vocyp+9Oj59Fzvg7p8Z
L8aANues5v1fyWNcSKM83KUObL0pdXPfHtKvF64TVg5HxworCWOEA6t9fBHJ
hat9HblQNQeQC1ZzA7lAtX811XETv1tScolq/0MuXu3XS0suVe2npC1WPe7r
Sq5T/QyRa1dzqK26Xp4raWtVc3rRavvgfadqHb+nvk55NtsKfavjx3zVdRFj
sHf+ah9fpTpW4etdMh5wANm5mhudMzacD7ic5LLV8WNNyTWqYwbyX9W/XSZ/
mWqekbZ6NV/pN+PCb5vJZyyIc9iCffCB/lEvnF612j54v1q1Dm+pb7X4Gf3r
E39C9o7PbSP0qvbxTYnB1X6/seS/M6YDhQHV/rW+5HrVvt61+nngL90lt6z2
G+QW1ZyhPurC50jrVr1eZs5gfmAfwnx2YHyXuql3t+r96DXVnN6s2j54v3m1
jn9THzpc3KDaPjiM7RtVx4UNq/OYp/sLu1b7/o7CDtXzNmm7VPOBtO2r+bBd
/GOWjFPPaq5snzxi8fLVz3vm5G9dzfWdhH7V8QlbsAPublU9XvOmzZ2red+j
Om+epFF+rtSBrTOl7h7xObgID5kTVqi2g3kDH1yx2seHC8OqfR25VzUHkHtW
cwM5tNq/Bmfs8btRwr7xP+TI9HN/Yb9qPyVtn4z7ZGFS/AM5sZpDu6ferkk7
uprTe8c+eD8i+pKpb0Sew0XChdXxY4/UtXDsHVLt44cKh1T7OnJ8NQeQB1dz
Azku40LcOqA6fhwlTKiOGcgjq8eS/NHVPCPtiGq+7pdxWT75jMVCsQX71k3/
qBdOHxb74P3h0ddMfejbp3/Tqv0JeUG1zyHPr/bxU4STq/3+JOHE6ljAsxpU
7V/HCcdW+/oxeR74y5nCGdV+gzy9mjMnp66tknZadVyG6/CkLXXD/w1TN/Wy
doFL8AZOnxr74P3U6N1THzpcPD72bRrbT6iOC1OSRztw/epq379MuDRtk3ZV
NR9Iu6SaDxdX+0ffjNN51Vy5JHmsm1bM8+yT/HOruX6FcHl1fDohdsDdszJe
A9LmldW8Pzt5/ZNG+V1SB7b2Tt3nCDM3qkvYuvG7Xfbe7Pv/aekZcM6j8ANj
Kn0D4UeeX8v6DF2vK7kO52noej3JrsI31ZK873S9fst5PzG+LZf/k+ch2U34
lbGW3ET4mbFu+b7fefaSmwl/VN+L/nV1m/zd9ftqu2jjdV0vJbmk8Fq1XIJ3
fbqeU3IO4f5qObtwl67bS7YT7tD1rJKzCHdWp6E/pOu5JecS7qsuN5twj647
SnYQXq1uZ3Hh3ur8jjlr5AnhceEo4VnhGeHu6nK0/Ut1v+nzb9V9ZSy+qu4f
7yy/rJb8XpY1DuPCvcSPx4RHhRurx5Rx+kRYreW/V/+Fr7c81uNz7yPVMQb5
cHWsQdJXeP6k8EQ1/5GPC0er/HPpw6FJo+2DUu5B4SNhFeV3EW6vHsuZhY+r
bSHvfV13llxJeFfXK0quIPxX18tJLiu8revlW9a/qO43Z7q8U30veW/qehnJ
pYU3qiXP/q3qOsj7rPrMF86A+by6DvQPdL1yy3a8V20LdkyvHi/G8dPqcozj
Tbr+X/JuFv6Ozrvkp4WnhAWE3YXB+AFno4o3B3TQPJW03YQ2YZAwUJgvaeg9
hDOE04XFVPYGlR2tsovq+lpdj+zg79De0/jbn8vyG3ddz+jgs5m/bHwmaSel
X8+5UUrvqbrOEs4UmrQ5oGXbt5LsLiwo7BG7N27z2dqcwb2Y9OHCsJa/Zfd0
42/CMb4jhX2EhXT/NUpfTW1V6f2FXYVFhb2EPYVOqWOvcGPv1LuwMFQYIiyS
e9GXTN0jWubTiJRpxXbaWCjlsJt56an4axfZ80Dj75tOCM94Ni9W20Q7z1e3
TR34/ryS8wgvV/cZe1+qlpR5rvpexumF6joo/0p1fyhzi67/iU/cKszUsn5b
te+jww3iBzEIntEmMeXZ6rrxHb57f1fjbw4/U52G79C/+eI7rCfY3/D3j3Ol
fyJ83PJ3Ke9v/C3gzhqH+xp/j3glXd/b+HvGZ+u+j4QPsSnxnvjO2LXFR4gN
peVxOSJ+/WTLPOcZkwfveR7oxIYmz+fpanuxdUHOMFPdq3bw2oqxY+zHJk4Q
j3u33IdzhG0isbGPcF7ythUuEM4X+kaeF1+4SrhS2E6Ylvt2EC4SLoy/X537
tk/atPjoFcLlwo7CxSnTP/WRByevSfn9hLuFu+Kbtwu3xWenCzfGv2+KDtev
Ff4TH71euK5ljl2XPDhxc8rAh1uij0o7d7bs97cmb0TaRId/d8SO3dIOtu6b
cuTtkv5dJuwkXCpcIvSLpM87J5+8qcI7wtstx6D3hHeF0yLJO1Z4WXip5Vj1
fu47JmkvCpMjXxAmRT4vjBEeEO4XxgkPCw+1fCbXY8KjLf9P1SPJG5809F4t
+wWxDN7fkDElrn0QO06N7f8VDhDuE+4VThTeEF5v+YwJfJn5eH/hnjzX0bkX
/YTc+5owJfJV4fjIV4RT0s5bwsmRbwonRdIe54s9nr4dl3Ivpw8fxm7i3Y3p
D/GCOYC4zLxCbGbOZh/DWoS1ychI5lXW9awhWL+wpr8nOnsF1jesU0Yln/Ks
g4lrxELWxS9HZz3KOoP1BWvQr6OzJp0RnTXsN9FZE7+S8uwn7k3bF6YO5up9
YiPxb+/ERGIkewziHbFtcmwhLrBfeTpxnL3Ic7lvQu4lb0xiBn07IP2j7WGZ
j5mfh6cddPY3N1Svldh73RidveP06HulHPqI2IutExOrsIO18rfpP2to1pqs
Z9kzsEZhzcK+gXXMO2mD9RfrM/YJr2a8WLOzNmVNyrqb9RlronMiWTdNTR3U
SywkrhOvWd+zXmHdxL7nvbR3RtLQWet/mPumpB3avjz20gf2MW/EjonhJeu5
aXlurI94h8F6lDU4c8yv0dlD/JD+M//8ljz2Oqzp2RNcFcl916QO8tizvZm2
2cO9FZ39zacZC/ZDn0W/ILagn5IxpsyBiR9wewHO0NLcsoqwieaZE4QpjWPf
rJKzNI6j7SXbNY6LSPKIHb8Lv4X/HRrfR72zS87WOE6T/2vL8fUX4eeW55/P
hE9bnm8+j8688kV05pkvozOvfBWd+NKxcXvE36+TR+yhTfKI8ezHmJ/XFI4Q
Dm9c7xp8U1PoJAzjrGPWOpF7CotEDm1s3+qszRrPK38TV1qeb5B/tTyX0A77
POaYf3If8eiPjBHx6c/o01MOnbmHMcbWxYThsYm5ZUb6xtzyrfBNy/PESspf
sfGaBbtWbTy3kLZC4/i9vORyjecb0tDhAfeu0jgeLym5RGNukNalcXxdPLYQ
p8lHJ9aSv3LjeaJzYzuIv6ShE++XalzvpbF3RuL40o3ziPHL8v3vxvP3r/EJ
1hY/Cj+0vFb4Kfo18Rd09g/Mc8xprC2+F75reX7+LmN0Zeogjz0ScyHzJPMM
40HbzJdzS84lPNiynLMxJ+Zo7LvMP9iI3cw3i8VfFhKGCHtk7EYIezf2y7Xi
a9ixnmTXxn65duM8xmJdyXUaP1ckedi+fuMy2L1BY51+bNhYp///ltyo8XjB
1Y0b+1M3yc0bj+WmjfPg3GaNdZ4DttA2Y0od1ItfUo77GI+dhH7h9jZCr3C+
d/RZksY7Dvyb9xndG/MAuWVj/vdJmblS344ZX+QOjTm6nbBtYw73TZmOSeub
Z7B97oMr1L1FY84gu8Uv9w5n8BHGgzGaV9hF2FmYXxgs7CbMFzkoPrpPnh/P
eF9hZHx0ZPIWEHZP+baUGyi0hAFCf2HhxnECn1gwfkEZYha+QKxpUo4yNeV2
bczdQ4Txwjyxl2cAFw8WxjWOPYfmPjg8Wti/sS8j92vM7wOSV1I3/SceHJi8
ZXPvqMa8HZM8eDs2+jLJZyyIj4elbfpwePQuseugxrw/KOVXTT+wm3Vhk3Fi
7dZKv1kztmU82LOxnmYdvTXfymj8PQfO5/618VnOfA/l68bfdujZ5u+L8P0H
9k7sPVibs//bOXXxnoh9Dvsb9opbt7wW5B3SdsnjPRH7IvZMHXJvn3B0gnBk
4/0ldrGn4ftRY/INKd51sS9iD8TvCCflt4Sc0Ts+5/Ry/tBhOYOIc4xmz1lG
/KaZ307ze0Tex7EOZj3L+xX2RexXlolk/zF72sHuOWMLbfM9Kb7Tw/dtls69
7GP4hs/YfMcH7p0rnNOYt8izG++he2ZceiXtrMZx4WjhqMZx4VjhmMYxY2Ly
iEeThUmN49Sk5BFLjksZuHd8dLg4JTox6MTGawvizcnCSY1jxmnC1MZ8PiV5
8PvU6BvEFtreLOWoa8uU47554wv4AbHjfOG8xrHkguh9ksa49Ey/z2y8d0ee
0TjWTEsZ3rf1ynhVjetl7cXf9n6Xie+wz55b6fMr7Zl28kNdX6hyz7bzu85t
Ur5H6j69cbw8PX0e1ebfo/JbQ86X5Yxyzmke2uYz2jg/iXd2+8c/llDadN0z
vYPf27E3G51nyf6NfeRyuud2+N3R7/VGpzzv4w5MmU+Ud7fuuaKjv9XNd8r5
djfv7cbkPr7Hy3fH+e50l8yfB7X8PfNHlT5gNs9dR4Uz/E5qzjb/xmKtcIj1
Futi4iNzJntQYhOxmXUe8YXYxh6V2Mf8wx6POMF97Fe5lzzenRC7iR28iyIu
E9fZKzMns3bjXSrxlzzW4rSJzr6Z9Rx28A6LctTF3ppy5PEehHUe6ynehfN+
mfdevNMcm3Hhe31vNP6m6PA2n0fBGR17tfm8Ds44GkZ6m8884h30lPCc9+ns
59nH8379mOgD23x+K2e3cp5f+5zpx7v+o2PHRokTvDPYMJLynM3ZLudz8o6b
/Tl77k0iaZs9MO8gePfAtxf+aHz2Pe/FT0oZ/gZwcnT+zjAxbfOOm3cB7NHZ
P0+N3i1pJ8cnWEuxhlov/aP8oDafN8tZx93TPuUHt/mcWM6cHdDm85A5s/v/
TSDmbQ==
             "]], PolygonBox[CompressedData["
1:eJwllPlTz0EYx1fq0/fowH7CqJhkBkXlys0ghtwxxUhjGOOYDsoxw/+QP8GR
LmcpR8y4pzAyGEK5z6LTFTOU1+P54TXzfu3ud/ez++x+YzbmpeUGGGOyIBCu
WmPGuMZEeoyJglN4FJ7jGJMLJ/BIPNvRtvP4SDw+2Jg4uI6PdfW30VCBD8Xz
GVsAXnIeNIQZ8xgq6Y/Bz9BXCZnkv7S1+JkzhA/CA2Q9chxsIPeB8eRdMIf8
ivF+Hxlm4y/wJq8x/fE/5F6rv21mzu30B0MqawfBDHIj/aVe/Y2LH8WLg4z5
Apvwvq6udQ7Syd9kPubaBsvxTryTtapgAf4OTyHvh4PkUNrucrj1cAgPczXf
g/nkN1a/fS+swX/hW5m7HBbhH6z2VUAq/tHq3NXwlfwDtjB2NGTT74HCMN3j
OnIP/R30nZIxeI3MT61KYBR+wWrtpE1qcRzf7WhNYqU2VmvT7mitq61mqflU
/DFe4NUz7LZ6RnI2sgeHvAX2hfLN0I98mDGDONssGIKX4eMcXXMcfgs/wN2p
g5Wu7lH21sp+V+Hf5Y759cwz8N94mV/PYK2rNZdaS9sAvMjqWlLT2+R66GHu
WhhP/x2ra/XCQLzEau3lm46RB9OWSE6C1eQu2rpYO4H5l+EtVmvTBsPxKryN
sRWQgN/EM5k7FhLxWryQnO7RvdZBhkf3PIv+13JnmKuR8xyBn5P9c9atzNdG
XkLbJfovwnTyc6tjS2Am/hL30dfg1bd60uq3yJuVt33N6tryxsulFrQlOLrH
IPJm6Oau/4RAV9+A3P2zcFnuitxBvucTXMHjXc3NcMPqf4C8fdnTWat7+P/t
jr7lLPk/CdE3vYL8xepdljNNcrVGUhs5oxT8Pb5H3jaE40fw9dQnAixejH8m
F0EIvhOGhfO/AwvJzfSf9ukcfnyHq33R4XoX5U3KW5Q7mUZfh9Vayhtfirdb
vXsyx1z8LT7PpzWKwEut3g35hkn4Q3wGZx8IreTFrtaqBqaRm6zW5ghMwZ9Z
rV0+PCU/gVxyEUyW/0qrY3MgGX9kdaysMRF/gCd79U5PwO9bXfuuR8/C5+p/
rZzJP8SP03Q=
             "]]}]}, {}, {}, {}}, {}},
       VertexColors->CompressedData["
1:eJztnX+M13Udx+HwTGSJUO1ayRlMOSmjISUo6XuB10jtRrCVFGJDGK5W9JvD
NvsjlA2ltJBkhekaxAScgaSCYa3baT9IOxTxiuSAuIO7Q1IqlLLuz/rj6Xxu
7899X5/v9/HXbY9997kv3/vyfL5+vV/vsQuWzF5UN2TIkNvePmTIsIGf3+h6
S/ecJzvS9XXXDD9v4Za0Y/mMJX87cSDB4XA4HA6Hw+FwOBwOh8PhcDgcDofD
4fDq4x2jDt4/asazaek1w7efP+yx1N62ZMazp7vgcDgcDv8/Hs2/8Ds4HA6H
43f4HRwOh8PxuwifJxwOh8Nj8mj+hd/B4XA4HL/D7+BwOByO30X4POGDwydO
f3ze07ueSwdW/nzrOx/4Vdpzxo8aHjnzULj3CYfD4/Bo/oXfVQd3/Qj/qg6u
/o5F82ifAzwmj+Zf+B0cXl6u/GjlV9Y0rLr8+XTGl3pW3t/Rnl686qnetaMO
p+l7rl511iWdafyYDeteuOuZdKrtPatvaDoiX684/gjH7+DR8rVK5X3o3uDk
a8q/Tk/+T93yCfvTtXX7vr5gx3NpdPOyD194RU/65MIXfvGR9X9J+0+e6NrQ
si813rr+3LNmHpVcPcf1Tb4ntcmj+Rd+Vy7uxvO54nN0qbJ/X9fXtr82eekV
d3Slq4+MeduO+gNpRvN7Vz10U1/afEvTyFWzDqXvdt2z7uL+g2nXRz84+uxx
/ZLfurBp2acvO5jmnjl63+qLu9KUbVs3bX53v+2DfH9qk0fzL/wupr7l8rVc
nP7g4OTj6vNX/qL8qHF30x8vWDPgM199//FXJvakOUMfax73of705Ps+0frW
nT1p2Z9Pbrz50t7U2PDgomvf1Z+uO9m09cTUnvT6zqVrnn/6WLp3/jdvePDK
/nRqa9O0l2/5azr1gw0XzfvikfT7L0x5sW1iv/RT9T5zfa/g5eLR/Au/i8lz
+Z2Kt4vu41TKB8uin24ep/xlxC+bbrv97CPp+/WfG7GxpTvdOaX1e69M6k/3
3bVy2ITJx9K039ZtPLKtN+0c/7Ov7f5yX9p2Z1ozdENf2rOp7fRLy/tSw5oR
h169rje1/vPX37lqU2/69yPn/nT2pL4099KHv93ym17pjx33NK1/YvHh1Pb4
+Te2bTmcmju3ty6+qF/WRfG72uTR/Au/i6l7ufzu3mEXzmzf8qf06MgnhjeO
35Pq6z9+0/RLugvP+6L5YNF5WdF5nKo3Ljp1zr8+P/VoWri3Zc7HPjvgV+1z
3zHuYF+64x+tY8c0Hk93r+147TN1A/nY+nNevvmhY+nK+TNXrBj4Ob5t3uzt
+3vTD/fOu+Anl/XJPA7/guNf8Erla9U6d5ern+j+u3K9XsUVyi+Uv6g8S3GV
36042L52/h8OpKGd43Z8YOn+NKX+9Ud3X99Lf61GeTTfwadi8rL014qeSyk6
33S5W6dVz3H7YqrPpfIpVT9U/TXlU+RTtcmj+Q4+FZMXXXeqlE/ler47r676
R5Xiyo9U3qT6Wccn7Fy3677+9MCPW2et2teX9v59wfT1PcdsP3LzJnyqOng0
f8GPysUrlXdUirvz5GpOYFJn03m7xnanpw6ceCaNPJoafvfqqVlTdT6ieHN3
0+JPbelON7Y8vO32l46mztWXb/7WNP189/eqfpPKg3LlR9TxapNH8xf8qDp4
0XsecvWn3DqbOxen5gFUHqHqYC5Xz3d/rzvPgL/A8Rd40XmN6wtu/6LoforS
SZW/uD6i8gg158YcGhzdhhcd57s6rHRJ6afi6vkuV/G/qgup+ozSc1W3cfce
RJvHg6Pb6HYcXnT/V+mVu9dF6a3SeXfPjDpv6MbVKm7PdU7f3dsGLxePpsPo
dmXj56J129VJpW8ud/d9qee45/JUHK6eo+r56n26eQd1lerm0fQZPY/Jc51f
dvVc1RncORalk0q31etVHK50W8Xnqq6idF79u9x43t0DgM6Xi0fTZ/Q8Js9V
D3f7g6r+rObYlR4qHVZ+ofRcvR+lz+58izsPqc47q8+B+Zba5NF0G52PyXPN
pSg9UfqTaz5c6bCaS1c6nyueVzrvzrFQb6kOHk1X0eGYeuu+Pte+01zzeG79
RMXh6v2ouLfofXToKvqJfpaXu/qp4lilb0qXlI65ddpcfUPFVX0jV3042veh
1ng0PUQ/y8Xd+oC719GN95ReufqpdNitM6jnu/VV8np0Ep0sLy96f7s735tr
TixX/u7WRd17UlRcin6in+hnebnbh1J5q4r3XL1y+03ufJr7fpQv0FeKyaPp
HjoZkxd9nsKdy3L3iKrXK51UOsa9D9XBo+kYulcdPFd/x61PqvzanVN1zwWo
eFLFvegb+oa+xeFF35/izv+oOErlm+r1ue5NduM39gygb+hbeXXM3cei6lru
3ip3bsfVSXc/LXW8cvFo+oYeDo6+5Tov455/d+/9ybVXxNVDtx9ddF+Y/Bed
RCcHn+c6J+7ej+Oe43PPvxQdH7r9DrcOqfzCrR8SZ6Kr6GqcODPX/WKqv5Dr
nq9cuurGme4+JcXd9+nWS93+DnWAcvFoOoxuD46eu3UAN99X84Qq7i16/4Yb
r6rnuHucFFf1YXceST3fvY+Ge5PLxaPpMLo9OLpd9P5Speeujrk6rF7vPseN
Y3Pt31Z1HvV5Fn2vAfock0fTYXS7srrt3tvl9uNcnVfxZ644XMX5Srdz7TWt
lC+4XP0d3bgdXygXj6bz+EJMv8h1D697v5jSSTeed/dju3Vvd77OPSfrxvPu
fT1u/I/+VwePpufof7l8Idd5jaLPoyk9d/u5irv9WXevgvIp1e9w/UL5r3sP
Wi5fwC/wBXwhPnf//+bao+jug3XnDHP5hTtXmWsuXb1P5Qu58gLyherm0XQe
X6gOnqvvrOJYd89YrvOSRdeXcvmFu0+4aF8gj6gOHk3/8Yvq5u7cqZtfKJ10
9dytL6k+snveKtfcqXt+Sum/qge6+u9yfCEmj6b/+EV180qdL8vlI7nOHeSa
p3LzCJWv5aoj5fIF8oty8Wi+gI/UJnfnqXLt+3LzhVz7Ftw9DK5fRJtfyuUL
+Ei5eDS/wF+qmxe9H0Ppaq6+ibsHwz1nkWsPhts3d89NuPfG5qpf4S+1yaP5
Dj5Vm7zo/r57D6PbT8/lO+68WdF9edeP8BE4fhTn84QPTr0u1z0juc6V5+rX
uOdKcvVxmOOC4zv4DvyNfce9v8/1naL7/spH1PvMtZ/EzWuifR/g5eLR/AJ/
gf8vd+eic+U1Re+5LftelGjfE3i5eDQfwXfgb8Z3cp33V3Nlue4bcvMgd6+j
8h2V7yiufMrd38I5Gjj+hX/B35hXam7BndN2/UvNv7l7xlyfUr7v7hPIdZ4U
X4Pjd/hdrfGi97a593kpf1R+pF6f654Ut07o+lrR+xCYr4Djd/gdPG/e5+aD
7j3v7v07uV6v3mcuX2M/A7yaeDT/wu/gEfJBd67e5W6dsFJ1RfIyeDXxaP6F
38Ej+2PR9ytF4/gavJp4NP/C7+Bl5Ln2F0Xj0T5nOBy/i/N5wuFwODwmj+Zf
+B0cDofD8Tv8Dg6Hw+H4XYTPEw6Hw+ExeTT/wu/gcDgcjt/hd3A4HA6vTb+D
w+FwOBwOh8PhcDgcDofD4XA4HA6Hw+Fvnqt7MOFwOBwOh8PhcDgcDofD4XA4
HF5Z/l9PZnBO
        "]],
      AspectRatio->1,
      DisplayFunction:>Identity,
      Frame->True,
      PlotRange->{{1., 74.}, {1., 74.}},
      PlotRangeClipping->True,
      PlotRangePadding->{
        Scaled[0.02], 
        Scaled[0.02]}], {576., -189.}, 
     ImageScaled[{0.5, 0.5}], {360., 360.}]}, {}},
  ContentSelectable->True,
  DisplayFunction->Identity,
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{{3.398387662934*^9, 3.398387688002*^9}, 3.398387730367*^9, 
   3.398388982119*^9, 3.398394815642*^9, 3.398394856585*^9, 
   3.3984404891451564`*^9, 3.3984405203639064`*^9, {3.399299993424843*^9, 
   3.399300014331227*^9}, 3.3993008689929466`*^9, 3.3993015606067476`*^9, 
   3.3993022812051096`*^9, {3.399303538963159*^9, 3.3993035873384686`*^9}, 
   3.399311414591688*^9, 3.399311695062233*^9, 3.3993173483327885`*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztfYefXNWRbvl2mKBIcEKAQGSTjHFacFh799m7z4tNzgaTTDZJgEEEIZTz
KEughAgSCkhCAqGcZqRR1mhyDj0dvLbZ/2BffXXOuff07dsz06Me2eu3/Lit
nu7b3fee+k7VV3Wq6tzwwPDHHnn6geGPP/TAeb98/oFnH3v8oRfO+8Uzz/NL
oa8QfeUxItp6HuH5f/NT/fDf/P9/P44HvHLqng/EPw4uYTCehfDMcV8bgGfh
gNfkvJD7mnwLyYnyTB9dn+8EfUco7Tu8X73AfXZawHX27+F1DuriOvvn5Tr7
qWEdEPBDZowzX3YCvlJ9UcR9zf436PwBvte6/t4eXUJPv7JYHqP+r8zl7uyP
BZ0/NPiqT+v5zRT30Xj27/kl9P/7Gc/CfME0h9vv6YgWuZOZb8i+d/N8UN+N
Yw63c/KQ7Kup2NXY+bXX32bs8ga/nLSe472b8eX9sn5Rxqn/KPDrqTrqduyy
f1HGqf+fwi+HayvubrQH9EgcoS5OCGJrf3OU5TBEPQPkqRqivIGpF5jPySx0
C6oc+EOufKMX93by0CvquwHtoU78uxpQDVSfxxfk3fhey9XjG5Q+OFlfG5g+
C4P8vKAr6cHVdeXnDTyJq9PenXxZN451gfuhTe6zD9Rb0WDIfBb88vv5/1AY
Txbj2RnBJ4TcE5zuvyjkfVE64E4PeO20Hp53Mp8t8F1V8O3ldNmn4la8y+7B
oPs++07W3wi++aCPfwWvfEU980E4Ejyf5tKvBo4L+r7T3U+Gu/tkxq9m0SxZ
f+sbvfsFb7bLmd4cP6vLd51TepH/CL/Q04GO4t2L6FeDxvHv/mrQeHmG43sB
r12Gx8K+FI1cDp/6H4PH06/PnCTHWHkM0Q2nTZB3cUT6fIDtK/nNVyfTTd+c
xleCxxD95mtT3Kv5H38lXUOjp797KgDxDy2Gv8GV5KQjeg0E+cfH6HK1bAMC
viOLjcvD4IQCvpmC2X2QH9LVjXTp4Qb7IaH/vas83lXI+3XXmMyWx7B7bfq/
LoMIGYMT9MXhXO4v8wKc/1GCuwyPDt1y9ox7/iGBeZm+q1vOmUm3nT+Hbjl3
Jt2d2516ystzmnulCn3fkYMqPF9J6eazZzjpz/jjN581nW4dOouP2XTzkOlD
9c3dfHYJzpKjQB75tSEl8i6OK/9ujKDcHF/jrefOEhHhWvEKRCUi478dc1d8
s7gLvlGy7xTn4SiQxxDdet5s9257c6eeKbxLmccrC2/6Uc7mVt1ZoXuFuEO8
givDFUJsN501/QI9AOa0Oy5aIMfd31pEd1++iO685B3+YryCx/nuzTl4vPxk
ud1dWo3907kP0v3feV/+5bu9Lg+SHWbAWuLKD7Lj2+S7pgt8o2Nu+bdXL6WH
/uljeuD7H9E9Vyx25MUo3X3ZQrn7286bI4cehW/lBce366vnG5cBwOHIcITS
BsaRR3WesRffzcNIne3HN/8rYxbGn2bSDykJu8++6b5Lp9Htw+bSXYyS3161
lO6/9gN68Icr6LGfr6On/v0zevSnn9CDP1guw/m7735I9/I5d136rkbZfJlm
+HH51kvyMpq3WaOJkcOhRi5Mv7h2OA2/bZf8y4cZUAt5eRzQqKUdZ8lzvMrT
UGmIiKsjYB7wyi2iJ7XJ4OfyGr/3DXmt2H3NHBhIDOwjP15NT/5yI/3hP76g
527a5tCLd+6m/vTsjVvp6f+7iZ76t8/o9z9ZI3K498olguXb+ONGzQmWzy65
+KQ01S2uprJmsx7uqDyJyMibt3Dg5Gtz1mvnyGNERgbQU6anRG5JqaioTFG8
Zs7Rmjzdas02p33dGl+ceRcPEI7fXv2eDNwzv9nCQ7qHRjxYTm88etihkU8e
Y6P65uPH6LWHD9HL95TSM7/eQo//66f08HUr6b5vvyeXIRegv1IrW7roZBWm
jDOra3sc8Rxje/O/j6HxrzThBvlZVJ4bxFt65No8IPxcPZLCbCAEHny+5xCr
y4V8dZjeRk1i/G+/YF6gNcXfGCa/BO65YomoESAb8H3prr301tMnaNzLdTRl
VKND08a08OlT326hia8105gXatKk8BBL4R62XVpLO2Zm6SmI44K86JpbfOZL
j7YjAgjRD75/K91792Q5QvIYlXcChPKdPAjlLKOVp1PYnRJAIiuKkEz9sJgz
o3z5cEQ0YcPfzHGG0fTTXe0/ncf7VtYWON9MjGcxMe7aQyOfOECT32ig2dNi
9O6ChENLlqSoHy18N0XzZqdoxqQkjX6+hl66e68W0Xo2Bh+k0Yn86P6b5XNR
V/djgDHYGHQefoceeWxyiH7+y1vlGX8eMrEk4uRVFJD2EKVpzAGJ3IlhZyUc
FpEUK6bF6kZxjAUywkYeovKHwgzMOF1PPFHZQ2db1kOdcvsFbIYvfUcsAubM
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
PL/P6Sv/D12wdds=\
\>"]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["thresholdImage",
  FontWeight->"Bold"],
 "\nConverts a grayscale image I into a binary image by setting all the \
values below the threshold t to zero"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "thresholdImage", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"thresholdImage", "[", 
    RowBox[{"I_", ",", " ", "t_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", " ", "<", " ", "t"}], ",", " ", "0", ",", " ", "1"}], 
       "]"}], "&"}], ",", " ", "I", ",", " ", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["invertImage",
  FontWeight->"Bold"],
 "\nInverts an image "
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "invertImage", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"invertImage", "[", "I_", "]"}], " ", ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", " ", "==", " ", "0"}], ",", " ", "1", ",", " ", "0"}], 
       "]"}], "&"}], ",", " ", "I", ",", " ", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["n4, n8",
  FontWeight->"Bold"],
 "\nReturns the points in the 4 neighborhood and the 8 neighborhood of p"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "n4", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"n4", "[", "p_", "]"}], " ", ":=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        ",", " ", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "-", "1"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        ",", " ", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "+", "1"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "-", "1"}], ",", " ", 
        RowBox[{"p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
        "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "+", "1"}], ",", " ", 
        RowBox[{"p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
        "}"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "n8", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"n8", "[", "p_", "]"}], " ", ":=", 
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
            "x"}], ",", " ", 
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "+", 
            "y"}]}], "}"}], ",", 
         RowBox[{"{", " ", 
          RowBox[{"x", ",", " ", 
           RowBox[{"-", "1"}], ",", " ", "1"}], " ", "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"y", ",", " ", 
           RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}], ",", " ", 
       "1"}], "]"}], " ", ",", " ", 
     RowBox[{"{", "p", "}"}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getN4, getN8, getN4Immersion",
  FontWeight->"Bold"],
 "\nReturns the points in the 4 / 8 neighborhood of p if it is in the \
thresholded image I"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getN4", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getN4", "[", 
    RowBox[{"p_", ",", " ", "I_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"n4", "[", "p", "]"}], ",", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"I", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], " ", "&"}]}], 
    "]"}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getN8", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getN8", "[", 
    RowBox[{"p_", ",", " ", "I_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"n8", "[", "p", "]"}], ",", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"I", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], "&"}]}], "]"}]}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getN4Immersion", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getN4Immersion", "[", 
    RowBox[{"p_", ",", " ", "V_"}], "]"}], " ", ":=", " ", 
   RowBox[{"getN4", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}], ",", "  ", 
     RowBox[{"thresholdImage", "[", 
      RowBox[{
       RowBox[{"Take", "[", 
        RowBox[{"V", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
            "1"}], ",", " ", 
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
            "1"}]}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "-", 
            "1"}], ",", " ", 
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "+", 
            "1"}]}], "}"}]}], "]"}], ",", " ", 
       RowBox[{"V", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}]}], "]"}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getC4",
  FontWeight->"Bold"],
 "\nGets the number of 4-connected elements around point p in the pointset X"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getC4", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getC4", "[", 
   RowBox[{"p_", ",", " ", "testPoints_", ",", " ", "imagePoints_"}], "]"}], 
  " ", ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"Module", " ", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "tPoints", ",", " ", "mImage", ",", " ", "count", ",", " ", "list", ",", 
      " ", "list2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"tPoints", " ", "=", " ", "testPoints"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mImage", " ", "=", " ", "imagePoints"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"count", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"tPoints", ",", " ", "#"}], "]"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"list", " ", "=", " ", 
              RowBox[{"{", "#", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"count", " ", "=", " ", 
              RowBox[{"count", " ", "+", " ", "1"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"While", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "list", "]"}], " ", ">", " ", "0"}], 
               ",", " ", "\[IndentingNewLine]", 
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"list2", " ", "=", " ", 
                   RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"Scan", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"tPoints", " ", "=", " ", 
                    RowBox[{"Complement", "[", 
                    RowBox[{"tPoints", ",", " ", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"mImage", " ", "=", " ", 
                    RowBox[{"Complement", "[", 
                    RowBox[{"mImage", ",", " ", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"list2", " ", "=", " ", 
                    RowBox[{"Union", "[", 
                    RowBox[{"list2", ",", " ", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"n4", "[", "#", "]"}], ",", " ", "mImage"}], 
                    "]"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    " ", "&"}], ",", " ", "list"}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"list", " ", "=", " ", "list2"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "]"}], " ", "&"}], ",", "testPoints"}], "]"}],
      ";", "\[IndentingNewLine]", "count"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getC4", "[", 
    RowBox[{"p_", ",", " ", "X_"}], "]"}], " ", ":=", " ", 
   RowBox[{"getC4", "[", 
    RowBox[{"p", ",", " ", "X", ",", " ", "X"}], "]"}]}], ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getC8",
  FontWeight->"Bold"],
 "\nGets the number of 8-connected elements around point p in the pointset X"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getC8", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getC8", "[", 
   RowBox[{"p_", ",", " ", "testPoints_", ",", " ", "imagePoints_"}], "]"}], 
  " ", ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"Module", " ", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "tPoints", ",", " ", "mImage", ",", " ", "count", ",", " ", "list", ",", 
      " ", "list2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"tPoints", " ", "=", " ", "testPoints"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mImage", " ", "=", " ", "imagePoints"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"count", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"tPoints", ",", " ", "#"}], "]"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"list", " ", "=", " ", 
              RowBox[{"{", "#", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"count", " ", "=", " ", 
              RowBox[{"count", " ", "+", " ", "1"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"While", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "list", "]"}], " ", ">", " ", "0"}], 
               ",", " ", "\[IndentingNewLine]", 
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"list2", " ", "=", " ", 
                   RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"Scan", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"tPoints", " ", "=", " ", 
                    RowBox[{"Complement", "[", 
                    RowBox[{"tPoints", ",", " ", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"mImage", " ", "=", " ", 
                    RowBox[{"Complement", "[", 
                    RowBox[{"mImage", ",", " ", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"list2", " ", "=", " ", 
                    RowBox[{"Union", "[", 
                    RowBox[{"list2", ",", " ", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"n8", "[", "#", "]"}], ",", " ", "mImage"}], 
                    "]"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    " ", "&"}], ",", " ", "list"}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"list", " ", "=", " ", "list2"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "]"}], " ", "&"}], ",", "testPoints"}], "]"}],
      ";", "\[IndentingNewLine]", "count"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getC8", "[", 
    RowBox[{"p_", ",", " ", "X_"}], "]"}], " ", ":=", " ", 
   RowBox[{"getC8", "[", 
    RowBox[{"p", ",", " ", "X", ",", " ", "X"}], "]"}]}], ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isCurveEnd",
  FontWeight->"Bold"],
 "\nTells us whether the point p is a curve end point in the image V"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isCurveEnd", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isCurveEnd", "[", 
   RowBox[{"p_", ",", " ", "V_", ",", " ", "W_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", " ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"currentN4", ",", " ", "n"}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{
     RowBox[{"currentN4", "=", " ", 
      RowBox[{"getN4", "[", 
       RowBox[{"p", ",", " ", "V"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"n", " ", "=", " ", 
      RowBox[{"Length", "[", "currentN4", "]"}]}], ";", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"Return", "[", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"n", "\[Equal]", "0"}], ")"}], " ", "||", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"n", "\[Equal]", "1"}], ")"}], "&&", " ", 
         RowBox[{"isBoundaryPoint", "[", 
          RowBox[{
           RowBox[{
           "currentN4", "\[LeftDoubleBracket]", "1", 
            "\[RightDoubleBracket]"}], ",", " ", "V", ",", " ", "W"}], 
          "]"}]}], ")"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "\n",
 StyleBox["isLocalMinima",
  FontWeight->"Bold"],
 "\nTells you whether the point p is a local minma in image V"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isLocalMinima", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isLocalMinima", "[", 
   RowBox[{"V_", ",", " ", "p_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"currentN8", ",", " ", "isAbove", ",", " ", "isBelow"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"currentN8", " ", "=", " ", 
      RowBox[{"n8", "[", "p", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"isAbove", " ", "=", " ", "False"}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"isBelow", " ", "=", " ", "False"}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"Scan", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"isAbove", " ", "=", " ", 
            RowBox[{"isAbove", " ", "||", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"V", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], " ",
                ">", " ", 
               RowBox[{"V", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}]}], 
              ")"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"isBelow", " ", "=", " ", 
            RowBox[{"isBelow", " ", "||", "  ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"V", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], " ",
                "<", " ", 
               RowBox[{"V", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}]}], 
              ")"}]}]}], ";"}]}], "\[IndentingNewLine]", "]"}], "&"}], ",", 
       "  ", "currentN8"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"isAbove", " ", "&&", " ", 
      RowBox[{"!", "isBelow"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isSimple",
  FontWeight->"Bold"],
 "\nTells us whether the point p is simple in the image V, inverse of the \
image W"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isSimple", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isSimple", "[", 
    RowBox[{"p_", ",", " ", "V_", ",", " ", "W_"}], "]"}], " ", ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"getC4", "[", 
        RowBox[{"p", ",", " ", 
         RowBox[{"getN4", "[", 
          RowBox[{"p", ",", " ", "V"}], "]"}], ",", " ", 
         RowBox[{"getN8", "[", 
          RowBox[{"p", ",", " ", "V"}], "]"}]}], "]"}], "  ", "\[Equal]", " ",
        "1"}], ")"}], " ", "&&", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"getC8", "[", 
        RowBox[{"p", ",", " ", 
         RowBox[{"getN8", "[", 
          RowBox[{"p", ",", " ", "W"}], "]"}], ",", " ", 
         RowBox[{"getN8", "[", 
          RowBox[{"p", ",", " ", "W"}], "]"}]}], "]"}], "  ", "\[Equal]", " ",
        "1"}], ")"}]}], ")"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isSimpleImmersion",
  FontWeight->"Bold"],
 "\nTells us whether the point p is simple in the image V,inverse of the \
image W when testing the immersion threshold "
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isSimpleImmersion", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isSimpleImmersion", "[", 
   RowBox[{"p_", ",", " ", "V_", ",", " ", "threshold_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"V2", ",", " ", "W2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"V2", " ", "=", " ", 
      RowBox[{"Take", "[", 
       RowBox[{"V", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
           "1"}], ",", " ", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
           "1"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "-", 
           "1"}], ",", " ", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "+", 
           "1"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"V2", " ", "=", " ", 
      RowBox[{"thresholdImage", "[", 
       RowBox[{"V2", ",", " ", "threshold"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"W2", " ", "=", " ", 
      RowBox[{"invertImage", "[", "V2", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"isSimple", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}], ",", " ", "V2", ",", " ", "W2"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "\n",
 StyleBox["isBoundaryPoint",
  FontWeight->"Bold"],
 "\nTells us whether the point p is in the boundary point of the Image V, \
inverse of the image W"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isBoundaryPoint", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isBoundaryPoint", "[", 
    RowBox[{"p_", ",", " ", "V_", ",", " ", "W_"}], "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"V", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], ")"}], " ", "&&", 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"getN4", "[", 
         RowBox[{"p", ",", " ", "W"}], "]"}], "]"}], " ", ">", " ", "0"}], 
      ")"}]}], ")"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "\n",
 StyleBox["isBoundaryPointImmersion",
  FontWeight->"Bold"],
 "\nTells us whether the point p is in the boundary point of the Image V, \
inverse of the image W when performing immersion"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isBoundaryPointImmersion", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isBoundaryPointImmersion", "[", 
    RowBox[{"p_", ",", " ", "V_"}], "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{
             "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{"V", "\[LeftDoubleBracket]", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
              "\[RightDoubleBracket]"}]}], "}"}], " ", "&"}], ",", "  ", 
          RowBox[{"n4", "[", "p", "]"}]}], "]"}], ",", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
           "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], " ", 
           "<", " ", 
           RowBox[{"V", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{
             "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "\[RightDoubleBracket]"}]}], ")"}], " ", "&"}]}], " ", "]"}], 
      "]"}], " ", ">", " ", "0"}], ")"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isBorderingBackground",
  FontWeight->"Bold"],
 "\nTells us whether the point p is bordering a background pixel."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isBorderingBackground", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isBorderingBackground", "[", 
    RowBox[{"p_", ",", " ", "V_", ",", " ", "W_"}], "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"V", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], ")"}], " ", "&&", 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"getN8", "[", 
         RowBox[{"p", ",", " ", "W"}], "]"}], "]"}], " ", ">", " ", "0"}], 
      ")"}]}], ")"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isDestructible",
  FontWeight->"Bold"],
 "\nTells us whether a point p can be destroyed from image V (inverse W) \
while preserving skeleton Pres..\n\tthinOperator = 0 \[Rule] Topology \
preservation \n\tthinOperator = 1 \[Rule] Curve preservation \n\tthinOperator \
= 2 \[Rule] Surface preservation (To be implemented)"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isDestructible", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isDestructible", "[", 
   RowBox[{
   "p_", ",", " ", "V_", ",", " ", "W_", ",", " ", "Pres_", ",", " ", 
    "thinOperator_"}], "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"thinOperator", "==", "0"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"isBoundaryPoint", "[", 
       RowBox[{"p", ",", " ", "V", ",", " ", "W"}], "]"}], " ", "&&", " ", 
      RowBox[{"isSimple", "[", 
       RowBox[{"p", ",", " ", "V", ",", " ", "W"}], "]"}], " ", "&&", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Pres", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], " ", "\[Equal]", " ", "0"}], ")"}]}], 
     ")"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"isBoundaryPoint", "[", 
       RowBox[{"p", ",", " ", "V", ",", " ", "W"}], "]"}], " ", "&&", " ", 
      RowBox[{"isSimple", "[", 
       RowBox[{"p", ",", " ", "V", ",", " ", "W"}], "]"}], " ", "&&", " ", 
      RowBox[{"!", 
       RowBox[{"isCurveEnd", "[", 
        RowBox[{"p", ",", " ", "V", ",", " ", "W"}], "]"}]}], " ", "&&", " ", 
      
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Pres", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], " ", "\[Equal]", " ", "0"}], ")"}]}], 
     ")"}]}], "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isSkeletalSurfacePoint",
  FontWeight->"Bold"],
 "\nLets us know whether a given skeletal point p is a surface point... \n\t\
Pre: p is on the skeleton"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isSkeletalSurfacePoint", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isSkeletalSurfacePoint", "[", 
   RowBox[{"p_", ",", " ", "S_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", " ", 
   RowBox[{
    RowBox[{"{", "imageN8", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"imageN8", " ", "=", " ", 
      RowBox[{"getN8", "[", 
       RowBox[{"p", ",", " ", "S"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "\[IndentingNewLine]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "+", " ", "1"}]}], "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               " ", "+", "1"}], ",", " ", 
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             " ", "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               "+", "1"}], " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "+", " ", "1"}]}], "}"}]}], "]"}]}], " ", ")"}], " ", "||",
         
        RowBox[{"(", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "-", " ", "1"}]}], "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               " ", "-", "1"}], ",", " ", 
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             " ", "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               "-", "1"}], " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "-", " ", "1"}]}], "}"}]}], "]"}]}], " ", ")"}], " ", "||",
         "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "+", " ", "1"}]}], "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               " ", "-", "1"}], ",", " ", 
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             " ", "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               "-", "1"}], " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "+", " ", "1"}]}], "}"}]}], "]"}]}], " ", ")"}], " ", "||",
         "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "-", " ", "1"}]}], "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               " ", "+", "1"}], ",", " ", 
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             " ", "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               "+", "1"}], " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "-", " ", "1"}]}], "}"}]}], "]"}]}], " ", ")"}]}], ")"}], 
      "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isSkeletalSurfaceInteriorPoint",
  FontWeight->"Bold"],
 "\nLets us know whether the point is an interior point of a surface"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isSkeletalSurfaceInteriorPoint", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isSkeletalSurfaceInteriorPoint", "[", 
    RowBox[{"p_", ",", " ", "S_"}], "]"}], " ", ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"getN8", "[", 
       RowBox[{"p", ",", " ", "S"}], "]"}], "]"}], " ", "\[Equal]", " ", 
     "8"}], ")"}]}], ";"}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getSkeletalPixelType",
  FontWeight->"Bold"],
 "\nGets the point type of a pixel p in the Skeleton S\n\t0 - Not in the \
skeleton\n\t1 - A skeletal point\n\t2 - A curve end point\n\t3 - A curve \
interior point\n\t4 - A surface boundary point\n\t5 - A surface interior \
point"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getSkeletalPixelType", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getSkeletalPixelType", "[", 
   RowBox[{"p_", ",", " ", "S_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", " ", 
   RowBox[{
    RowBox[{"{", "ret", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"S", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], "  ", "==", "0"}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"ret", " ", "=", " ", "0"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"isSkeletalSurfacePoint", "[", 
          RowBox[{"p", ",", " ", "S"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"isSkeletalSurfaceInteriorPoint", "[", 
            RowBox[{"p", ",", " ", "S"}], "]"}], ",", " ", 
           RowBox[{"ret", " ", "=", " ", "5"}], ",", " ", 
           RowBox[{"ret", " ", "=", " ", "4"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"getN4", "[", 
              RowBox[{"p", ",", " ", "S"}], "]"}], "]"}], " ", "\[Equal]", 
            " ", "0"}], ",", "\[IndentingNewLine]", 
           RowBox[{"ret", " ", "=", " ", "1"}], ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"getN4", "[", 
                RowBox[{"p", ",", " ", "S"}], "]"}], "]"}], " ", "\[Equal]", 
              " ", "1"}], ",", " ", 
             RowBox[{"ret", " ", "=", " ", "2"}], ",", " ", 
             RowBox[{"ret", " ", "=", " ", "3"}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "ret", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getBlankImage",
  FontWeight->"Bold"],
 "\nReturns a blank image of the same size as the source image."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getBlankImage", "]"}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getBlankImage", "[", "]"}], " ", ":=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{"0", ",", " ", 
     RowBox[{"{", 
      RowBox[{"x", ",", " ", 
       RowBox[{
        RowBox[{"sliceSize", "[", 
         RowBox[{"1", ",", "1"}], "]"}], "-", "gaussianRadius"}], ",", " ", 
       RowBox[{
        RowBox[{"sliceSize", "[", 
         RowBox[{"1", ",", "2"}], "]"}], "+", "gaussianRadius"}]}], "}"}], 
     ",", " ", 
     RowBox[{"{", 
      RowBox[{"y", ",", " ", 
       RowBox[{
        RowBox[{"sliceSize", "[", 
         RowBox[{"2", ",", "1"}], "]"}], "-", "gaussianRadius"}], ",", " ", 
       RowBox[{
        RowBox[{"sliceSize", "[", 
         RowBox[{"2", ",", "2"}], "]"}], "+", "gaussianRadius"}]}], "}"}]}], 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["findSkeletalValue",
  FontWeight->"Bold"],
 "\nFinds the correct skeletal value that a pixel can be reduced while \
performing immersion"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "findSkeletalValue", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"findSkeletalValue", "[", 
    RowBox[{"p_", ",", "V_"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"neighbors", ",", "skelVal", ",", " ", "V2", ",", " ", "W2"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"V2", " ", "=", " ", 
       RowBox[{"thresholdImage", "[", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"V", ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              "-", "2"}], ",", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              "+", "2"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
              "-", "2"}], ",", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
              "+", "2"}]}], "}"}]}], "]"}], ",", " ", 
         RowBox[{"V", "\[LeftDoubleBracket]", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
           " ", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
          "\[RightDoubleBracket]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"W2", " ", "=", " ", 
       RowBox[{"invertImage", "[", "V2", "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"isCurveEnd", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "3"}], "}"}], ",", " ", "V2", ",", " ", "W2"}], 
         "]"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"V", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"neighbors", "=", 
            RowBox[{"Sort", "[", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                   "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                   RowBox[{
                   "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], ",", 
                   RowBox[{"V", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}]}], 
                  "}"}], "&"}], ",", 
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"n4", "[", "p", "]"}], ",", 
                  RowBox[{"{", "p", "}"}]}], "]"}]}], "]"}], ",", 
              RowBox[{
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
                ">", 
                RowBox[{
                "#2", "\[LeftDoubleBracket]", "3", 
                 "\[RightDoubleBracket]"}]}], "&"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"neighbors", " ", "=", " ", 
            RowBox[{"Select", "[", 
             RowBox[{"neighbors", ",", " ", 
              RowBox[{
               RowBox[{
                RowBox[{
                "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
                " ", "\[LessEqual]", " ", 
                RowBox[{"V", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", " ", 
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}]}], 
               " ", "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"skelVal", "=", 
            RowBox[{"neighbors", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"Length", "[", "neighbors", "]"}], ",", "3"}], 
             "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Do", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"\[Not]", 
                 RowBox[{"isSimpleImmersion", "[", 
                  RowBox[{"p", ",", "V", ",", 
                   RowBox[{"neighbors", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", "3"}], "\[RightDoubleBracket]"}]}], 
                  "]"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"Module", "[", 
                 RowBox[{
                  RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"skelVal", "=", 
                    RowBox[{"neighbors", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", "3"}], "\[RightDoubleBracket]"}]}], ";",
                    "\[IndentingNewLine]", 
                   RowBox[{"Break", "[", "]"}], ";"}]}], 
                 "\[IndentingNewLine]", "]"}]}], "]"}], ";"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "1", ",", 
               RowBox[{"Length", "[", "neighbors", "]"}]}], "}"}]}], "]"}], 
           ";", "\[IndentingNewLine]", "skelVal"}]}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["performThinning",
  FontWeight->"Bold"],
 "\nPerforms the thinning operation on image V, (Inverse of the image W) for \
a maximum of n iterations, while preserving earlier skeleton Pres, for \
topology/curve or surface preservation."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "performThinning", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"performThinning", "[", 
   RowBox[{
   "V_", ",", " ", "W_", ",", " ", "n_", ",", " ", "Pres_", ",", " ", 
    "thinOperator_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "G", ",", "H", ",", "m", ",", " ", "dMap", ",", " ", "boundaryPoints", 
      ",", " ", "thicknessImage", ",", " ", "thickness", ",", " ", 
      "progress"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"m", " ", "=", " ", 
      RowBox[{"Max", "[", "V", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"G", " ", "=", " ", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{"H", " ", "=", " ", "W"}], ";", "\[IndentingNewLine]", 
     RowBox[{"thicknessImage", " ", "=", " ", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"thickness", " ", "=", " ", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"progress", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"progress", " ", "=", " ", 
         RowBox[{"Join", "[", 
          RowBox[{"progress", ",", " ", 
           RowBox[{"{", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"G", ",", " ", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"Frame", "\[Rule]", "False"}], ",", "  ", 
              RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}], ",", "  ", 
              "\[IndentingNewLine]", 
              RowBox[{"ColorFunction", "\[Rule]", 
               RowBox[{"Function", "[", 
                RowBox[{
                 RowBox[{"{", "x", "}"}], ",", " ", 
                 RowBox[{"GrayLevel", "[", "x", "]"}]}], "]"}]}], ",", " ", 
              RowBox[{"ImageSize", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"300", ",", "300"}], "}"}]}]}], "]"}], "}"}]}], 
          "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"thickness", " ", "=", " ", 
         RowBox[{"thickness", "+", "1"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"dMap", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"isDestructible", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "G", ",", 
                 " ", "H", ",", " ", "Pres", ",", " ", "thinOperator"}], 
                "]"}], " ", ",", " ", 
               RowBox[{"{", 
                RowBox[{"x", ",", " ", "y", ",", " ", 
                 RowBox[{"Length", "[", 
                  RowBox[{"getN4", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "G"}], 
                   "]"}], "]"}]}], "}"}], ",", " ", 
               RowBox[{"{", "}"}]}], "]"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
           "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"dMap", " ", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"dMap", " ", "=", " ", 
         RowBox[{"Sort", "[", 
          RowBox[{"dMap", ",", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
              "#2", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
              ">", 
              RowBox[{
              "#1", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
             ")"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "dMap", "]"}], " ", "\[Equal]", " ", "0"}], 
          ",", " ", 
          RowBox[{"Break", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"boundaryPoints", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"isBorderingBackground", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"x", ",", "y"}], "}"}], ",", " ", "G", ",", " ", 
                 "H"}], "]"}], " ", ",", " ", 
               RowBox[{"{", 
                RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
               RowBox[{"{", "}"}]}], "]"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
           "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"boundaryPoints", " ", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{"boundaryPoints", ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"thicknessImage", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], " ",
                "\[Equal]", " ", "0"}], ",", 
              RowBox[{
               RowBox[{"thicknessImage", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "=",
                " ", "thickness"}]}], "]"}], ";"}], " ", "&"}], ",", " ", 
          "boundaryPoints"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Scan", "[", " ", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"isDestructible", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", 
                  RowBox[{
                  "#", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "}"}], ",", " ", "G", ",", 
                " ", "H", ",", " ", "Pres", ",", " ", "thinOperator"}], "]"}],
               ",", " ", 
              RowBox[{"Module", "[", 
               RowBox[{
                RowBox[{"{", "}"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"G", "\[LeftDoubleBracket]", " ", 
                   RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], " ", 
                   "\[RightDoubleBracket]"}], "  ", "=", " ", "0"}], ";", 
                 RowBox[{
                  RowBox[{"thicknessImage", "\[LeftDoubleBracket]", " ", 
                   RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], " ", 
                   "\[RightDoubleBracket]"}], " ", "=", " ", "0"}]}]}], 
               "]"}]}], "]"}], ";"}], "&"}], ",", "dMap"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"H", "=", 
         RowBox[{"invertImage", "[", "G", "]"}]}], ";"}], 
       "\[IndentingNewLine]", ",", " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "n"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"boundaryPoints", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"isBorderingBackground", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"x", ",", "y"}], "}"}], ",", " ", "G", ",", " ", "H"}],
              "]"}], " ", ",", " ", 
            RowBox[{"{", 
             RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
            RowBox[{"{", "}"}]}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}], ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"boundaryPoints", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"boundaryPoints", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"thicknessImage", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{
              "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              ",", " ", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             "\[RightDoubleBracket]"}], " ", "\[Equal]", " ", "0"}], ",", 
           RowBox[{
            RowBox[{"thicknessImage", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{
              "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              ",", " ", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             "\[RightDoubleBracket]"}], "=", " ", "thickness"}]}], "]"}], 
         ";"}], " ", "&"}], ",", " ", "boundaryPoints"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"progress", " ", "=", " ", 
        RowBox[{"Join", "[", 
         RowBox[{"progress", ",", " ", 
          RowBox[{"{", 
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"G", ",", " ", 
             RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
             RowBox[{"Frame", "\[Rule]", "False"}], ",", " ", " ", 
             RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}], ",", " ", 
             RowBox[{"ColorFunction", "\[Rule]", 
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", "x", "}"}], ",", " ", 
                RowBox[{"GrayLevel", "[", "x", "]"}]}], "]"}]}], ",", "  ", 
             RowBox[{"ImageSize", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"300", ",", "300"}], "}"}]}]}], "]"}], "}"}]}], 
         "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"G", ",", " ", "thicknessImage", ",", " ", "progress"}], "}"}],
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.3993009561966295`*^9, 3.3993010048844414`*^9}, {
  3.3993011114788733`*^9, 3.3993011171039095`*^9}, {3.399301698076378*^9, 
  3.3993017057483015`*^9}, {3.399301797842641*^9, 3.3993018016395407`*^9}, {
  3.3993039893254166`*^9, 3.399303994591075*^9}, {3.3993113428568535`*^9, 
  3.399311368513268*^9}, {3.3993117123279686`*^9, 3.3993117228280354`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["performImmersionThinning",
  FontWeight->"Bold"],
 "\nPerforms shape perserving thinning on a grayscale volume"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "performImmersionThinning", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"performImmersionThinning", "[", 
   RowBox[{"V_", ",", " ", "n_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "bins", ",", " ", "V2", ",", " ", "beach", ",", " ", "modified", ",", 
      " ", "s0", ",", " ", "s1", ",", " ", "s2", ",", " ", "s3", ",", " ", 
      "s4"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"V2", " ", "=", " ", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"bins", "[", "i", "]"}], " ", "=", " ", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "0", ",", " ", "255"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"bins", "[", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], "]"}],
           "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"bins", "[", 
             RowBox[{
             "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
             "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
              "}"}], "}"}]}], "]"}]}], ";"}], " ", "&"}], ",", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"x", ",", " ", "y", ",", " ", 
             RowBox[{"V2", "\[LeftDoubleBracket]", 
              RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}]}], "}"}], 
           ",", " ", 
           RowBox[{"{", 
            RowBox[{"x", ",", "1", ",", " ", 
             RowBox[{
              RowBox[{"Dimensions", "[", "V2", "]"}], "\[LeftDoubleBracket]", 
              "1", "\[RightDoubleBracket]"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"y", ",", "1", ",", " ", 
             RowBox[{
              RowBox[{"Dimensions", "[", "V2", "]"}], "\[LeftDoubleBracket]", 
              "2", "\[RightDoubleBracket]"}]}], "}"}]}], "]"}], ",", " ", 
         "1"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"s0", " ", "=", " ", 
         RowBox[{"Show", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"V2", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], 
            ",", " ", 
            RowBox[{"Graphics", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"PointSize", "[", "0.001", "]"}], ",", " ", 
               RowBox[{"RGBColor", "[", 
                RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", " ", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Point", "[", 
                   RowBox[{
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[RightDoubleBracket]"}],
                     " ", "-", " ", 
                    RowBox[{"{", 
                    RowBox[{"0.5", ",", " ", "0.5"}], "}"}]}], "]"}], " ", 
                  "&"}], ",", " ", 
                 RowBox[{"bins", "[", "g", "]"}]}], "]"}]}], "}"}], "]"}]}], 
           "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"modified", " ", "=", " ", "False"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"beach", " ", "=", " ", 
            RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Scan", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"isBoundaryPointImmersion", "[", 
                 RowBox[{"#", ",", " ", "V2"}], "]"}], ",", " ", 
                RowBox[{"beach", " ", "=", " ", 
                 RowBox[{"Join", "[", 
                  RowBox[{"beach", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{"Length", "[", 
                    RowBox[{"getN4Immersion", "[", 
                    RowBox[{"#", ",", " ", "V2"}], "]"}], "]"}]}], "}"}], 
                    "}"}]}], "]"}]}]}], "]"}], " ", "&"}], ",", " ", 
             RowBox[{"bins", "[", "g", "]"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"s1", " ", "=", " ", 
            RowBox[{"Show", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"ListDensityPlot", "[", 
                RowBox[{"V2", ",", 
                 RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
                 RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], 
               ",", " ", 
               RowBox[{"Graphics", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"PointSize", "[", "0.001", "]"}], ",", 
                  RowBox[{"RGBColor", "[", 
                   RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", " ", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Point", "[", 
                    RowBox[{
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[RightDoubleBracket]"}],
                     " ", "-", " ", 
                    RowBox[{"{", 
                    RowBox[{"0.5", ",", " ", "0.5"}], "}"}]}], "]"}], "  ", 
                    "&"}], ",", " ", "beach"}], "]"}]}], "}"}], "]"}]}], 
              "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"s4", " ", "=", " ", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{
              RowBox[{"Take", "[", 
               RowBox[{"V2", ",", " ", 
                RowBox[{"{", 
                 RowBox[{"40", ",", "55"}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"25", ",", "40"}], "}"}]}], "]"}], ",", " ", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "beach", "]"}], " ", "\[Equal]", " ", 
              "0"}], ",", " ", 
             RowBox[{"Break", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]",
            
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"beach", " ", "=", " ", 
              RowBox[{"Sort", "[", 
               RowBox[{"beach", ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                  "#1", "\[LeftDoubleBracket]", "3", 
                   "\[RightDoubleBracket]"}], " ", "<", " ", 
                  RowBox[{
                  "#2", "\[LeftDoubleBracket]", "3", 
                   "\[RightDoubleBracket]"}]}], " ", "&"}]}], "]"}]}], ";"}], 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{"Scan", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"V2", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                   " ", "=", " ", 
                   RowBox[{"findSkeletalValue", "[", 
                    RowBox[{"#", ",", " ", "V2"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"V2", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    " ", "\[NotEqual]", " ", "g"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bins", "[", "g", "]"}], " ", "=", " ", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"bins", "[", "g", "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[RightDoubleBracket]"}],
                     "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"modified", "=", "True"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                   "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], "&"}],
              ",", " ", "beach"}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"s2", " ", "=", " ", 
            RowBox[{"Show", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"ListDensityPlot", "[", 
                RowBox[{"V2", ",", 
                 RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
                 RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], 
               ",", "\[IndentingNewLine]", " ", 
               RowBox[{"Graphics", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"PointSize", "[", "0.001", "]"}], ",", 
                  RowBox[{"RGBColor", "[", 
                   RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", " ", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Point", "[", 
                    RowBox[{
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[RightDoubleBracket]"}],
                     " ", "-", " ", 
                    RowBox[{"{", 
                    RowBox[{"0.5", ",", " ", "0.5"}], "}"}]}], "]"}], "  ", 
                    "&"}], ",", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"beach", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V2", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    " ", "\[Equal]", " ", "g"}], " ", "&"}]}], "]"}]}], 
                   "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", " ", 
               RowBox[{"Graphics", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"PointSize", "[", "0.001", "]"}], ",", 
                  RowBox[{"RGBColor", "[", 
                   RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", " ", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Point", "[", 
                    RowBox[{
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[RightDoubleBracket]"}],
                     " ", "-", " ", 
                    RowBox[{"{", 
                    RowBox[{"0.5", ",", " ", "0.5"}], "}"}]}], "]"}], "  ", 
                    "&"}], ",", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"beach", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V2", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    "\[NotEqual]", " ", "g"}], " ", "&"}]}], "]"}]}], "]"}]}],
                  "}"}], "]"}]}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
           
           RowBox[{"s3", " ", "=", " ", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{
              RowBox[{"Take", "[", 
               RowBox[{"V2", ",", " ", 
                RowBox[{"{", 
                 RowBox[{"40", ",", "55"}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"25", ",", "40"}], "}"}]}], "]"}], ",", " ", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"g", " ", "\[GreaterEqual]", " ", "99"}], " ", "&&", 
                " ", 
                RowBox[{"g", " ", "\[LessEqual]", " ", "99"}]}], ",", " ", 
               RowBox[{"Show", "[", 
                RowBox[{
                 RowBox[{"GraphicsArray", "[", 
                  RowBox[{"{", " ", 
                   RowBox[{"s1", ",", " ", "s2"}], "}"}], "]"}], ",", " ", 
                 RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}], 
                 ",", " ", 
                 RowBox[{"ImageSize", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"1600", ",", "800"}], "}"}]}], ",", " ", 
                 RowBox[{"PlotLabel", "\[Rule]", 
                  RowBox[{
                   RowBox[{"ToString", "[", "g", "]"}], " ", "<>", " ", 
                   "\"\< : \>\"", " ", "<>", " ", 
                   RowBox[{"ToString", "[", "i", "]"}]}]}]}], "]"}]}], "]"}], 
             ";"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"\[Not]", "modified"}], ",", " ", 
             RowBox[{"Break", "[", "]"}]}], "]"}], ";"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "1", ",", " ", "n"}], "}"}]}], "]"}], ";"}],
        "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"g", ",", " ", "1", ",", " ", "255"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "V2"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["performErosion",
  FontWeight->"Bold"],
 "\nErodes the image by removing the curve end points"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "performErosion", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"performErosion", "[", 
   RowBox[{"V_", ",", " ", "W_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dMap", ",", " ", "outImage"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"ListDensityPlot", "[", 
       RowBox[{"V", ",", " ", 
        RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"isBoundaryPoint", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "V", ",", " ",
                 "W"}], "]"}], "  ", "&&", " ", 
              RowBox[{"isCurveEnd", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "V", ",", " ",
                 "W"}], "]"}]}], ")"}], " ", ",", " ", 
            RowBox[{"{", 
             RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
            RowBox[{"{", "}"}]}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"dMap", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"outImage", " ", "=", " ", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"outImage", "\[LeftDoubleBracket]", " ", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           " ", "\[RightDoubleBracket]"}], "  ", "=", " ", "0"}], ";"}], 
        "&"}], ",", "dMap"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"ListDensityPlot", "[", 
        RowBox[{"outImage", ",", " ", 
         RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "outImage", "]"}], ";"}]}], "\[IndentingNewLine]",
    "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isCurveNeighbor",
  FontWeight->"Bold"],
 "\nSpecifies whether a given point q is a curve neighbor of the point p in \
image V"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isCurveNeighbor", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isCurveNeighbor", "[", 
   RowBox[{"q_", ",", " ", "p_", ",", " ", "V_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "currentN4", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"currentN4", " ", "=", " ", 
      RowBox[{"getN4", "[", 
       RowBox[{"p", ",", " ", "V"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "currentN4", "]"}], " ", "==", " ", "2"}], 
         ")"}], " ", "&&", " ", 
        RowBox[{"MemberQ", "[", 
         RowBox[{"currentN4", ",", " ", "q"}], "]"}]}], ")"}], "]"}], ";"}]}],
    "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["addPixelToImage",
  FontWeight->"Bold"],
 "\nAdds a pixel to a binary Image"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "addPixelToImage", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"addPixelToImage", "[", 
   RowBox[{"p_", ",", " ", "V_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "outImage", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"outImage", " ", "=", " ", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"outImage", "\[LeftDoubleBracket]", 
       RowBox[{
        RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        ",", " ", 
        RowBox[{"p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
        "\[RightDoubleBracket]"}], " ", "=", "1"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "outImage", "]"}], ";"}]}], "\[IndentingNewLine]",
    "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getCurveNeighbors",
  FontWeight->"Bold"],
 "\nGets the curve neighbors of a given point p"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getCurveNeighbors", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getCurveNeighbors", "[", 
   RowBox[{"p_", ",", " ", "V_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "currentN4", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"currentN4", " ", "=", " ", 
      RowBox[{"getN4", "[", 
       RowBox[{"p", ",", " ", "V"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"Select", "[", 
       RowBox[{"currentN4", ",", " ", 
        RowBox[{
         RowBox[{"isCurveNeighbor", "[", 
          RowBox[{"#", ",", " ", "p", ",", " ", "V"}], "]"}], "&"}]}], " ", 
       "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["performDilation",
  FontWeight->"Bold"],
 "\nDilates the image by adding curve end points"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "performDilation", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"performDilation", "[", 
   RowBox[{"V_", ",", " ", "W_", ",", " ", "oldV_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dMap", ",", " ", "outImage", ",", " ", "neighbors"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"ListDensityPlot", "[", 
       RowBox[{"V", ",", " ", 
        RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"isBoundaryPoint", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "V", ",", " ", 
               "W"}], "]"}], "  ", "&&", " ", 
             RowBox[{"isCurveEnd", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "V", ",", " ", 
               "W"}], "]"}]}], " ", ",", " ", 
            RowBox[{"{", 
             RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
            RowBox[{"{", "}"}]}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"dMap", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"neighbors", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"neighbors", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"neighbors", ",", " ", 
            RowBox[{"getCurveNeighbors", "[", 
             RowBox[{"#", ",", " ", "oldV"}], "]"}]}], "]"}]}], ";"}], "&"}], 
       ",", " ", "dMap"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"outImage", " ", "=", " ", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"outImage", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            " ", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], " ", "=", "1"}], ";"}], "&"}], ",", 
       "neighbors"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"ListDensityPlot", "[", 
        RowBox[{"outImage", ",", " ", 
         RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "outImage", "]"}], ";"}]}], "\[IndentingNewLine]",
    "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["performPruning",
  FontWeight->"Bold"],
 "\nPrunes the image n times."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "performPruning", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"performPruning", "[", 
   RowBox[{"V_", ",", " ", "W_", ",", " ", "n_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{"n", " ", "\[Equal]", " ", "0"}], ",", " ", "V", ",", " ", 
    "\[IndentingNewLine]", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "erodedImage", ",", " ", "prunedImage", ",", " ", "dilatedImage"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"ListDensityPlot", "[", 
         RowBox[{"V", ",", " ", 
          RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], "*)"}],
       "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"erodedImage", " ", "=", " ", 
        RowBox[{"performErosion", "[", 
         RowBox[{"V", ",", " ", "W"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"prunedImage", " ", "=", " ", 
        RowBox[{"performPruning", "[", 
         RowBox[{"erodedImage", ",", " ", 
          RowBox[{"invertImage", "[", "erodedImage", "]"}], ",", " ", 
          RowBox[{"n", "-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"dilatedImage", " ", "=", " ", 
        RowBox[{"performDilation", "[", 
         RowBox[{"prunedImage", ",", " ", 
          RowBox[{"invertImage", "[", "prunedImage", "]"}], ",", " ", "V"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"dilatedImage", ",", " ", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
           RowBox[{"ImageSize", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "dilatedImage", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getCurveLength:",
  FontWeight->"Bold"],
 "\nGets the length of a curve area given the starting point p, and the \
annotated skeleton A"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getCurveLength", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getCurveLength", "[", 
   RowBox[{
   "p_", ",", " ", "A_", ",", " ", "curveTypes_", ",", " ", "hashKey_"}], 
   "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", " ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "n", ",", " ", "dMap", ",", " ", "dMap2", ",", " ", "n4Temp", ",", " ", 
      "A2", ",", " ", "toHash", ",", " ", "doHash", ",", " ", 
      "curveEndPoints", ",", " ", "allCurvePoints"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
        "hashKey", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
        " ", "\[NotEqual]", " ", 
        RowBox[{"curveLengthHashKey", "\[LeftDoubleBracket]", 
         RowBox[{
         "hashKey", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "\[RightDoubleBracket]"}]}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"curveLengthHashKey", "\[LeftDoubleBracket]", 
            RowBox[{
            "hashKey", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
             "\[RightDoubleBracket]"}], " ", "=", " ", 
           RowBox[{
           "hashKey", "\[LeftDoubleBracket]", "2", 
            "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"curveLengthHash", "\[LeftDoubleBracket]", 
            RowBox[{
            "hashKey", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
             "\[RightDoubleBracket]"}], " ", "=", " ", 
           RowBox[{"getBlankImage", "[", "]"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"curveLengthHash", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{
          "hashKey", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          ",", " ", 
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], ",", " ", 
       RowBox[{"Return", "[", 
        RowBox[{"curveLengthHash", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{
          "hashKey", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          ",", " ", 
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"A2", " ", "=", " ", "A"}], ";", "\[IndentingNewLine]", 
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"curveTypes", ",", " ", 
               RowBox[{"A", "\[LeftDoubleBracket]", 
                RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}]}], "]"}]}],
             ",", " ", 
            RowBox[{"{", 
             RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
            RowBox[{"{", "}"}]}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"dMap", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"A2", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            " ", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], " ", "=", " ", "0"}], ";"}], "&"}], ",",
        " ", "dMap"}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"A2", ",", " ", 
             RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], ",",
            
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
              RowBox[{"PointSize", "[", "0.02", "]"}], ",", 
              RowBox[{"Point", "[", 
               RowBox[{
                RowBox[{"Reverse", "[", "p", "]"}], "+", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.5"}], ",", 
                  RowBox[{"-", "0.5"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], "]"}], 
       ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"n", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"toHash", " ", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"{", "p", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"doHash", " ", "=", " ", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"getN4", "[", 
         RowBox[{"p", ",", " ", "A2"}], "]"}], "]"}], " ", "\[LessEqual]", 
       " ", "2"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"curveEndPoints", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"getN4", "[", 
          RowBox[{"p", ",", " ", "A2"}], "]"}], "]"}], " ", "\[NotEqual]", 
        " ", "2"}], ",", " ", 
       RowBox[{"curveEndPoints", " ", "=", " ", 
        RowBox[{"{", "p", "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"allCurvePoints", " ", "=", " ", 
      RowBox[{"{", "p", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", " ", 
      RowBox[{"True", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"toHash", " ", "=", " ", 
         RowBox[{"Join", "[", 
          RowBox[{"toHash", ",", " ", "dMap"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dMap2", " ", "=", " ", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"n", " ", "=", " ", 
         RowBox[{"n", " ", "+", " ", 
          RowBox[{"Length", "[", "dMap", "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Scan", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"A2", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", " ", 
                  RowBox[{
                  "#", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
               RowBox[{"n4Temp", "=", " ", 
                RowBox[{"getN4", "[", 
                 RowBox[{"#", ",", " ", "A2"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"dMap2", " ", "=", " ", 
                RowBox[{"Join", "[", 
                 RowBox[{"dMap2", ",", 
                  RowBox[{"Select", "[", 
                   RowBox[{"n4Temp", ",", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"getN4", "[", 
                    RowBox[{"#", ",", " ", "A2"}], "]"}], "]"}], " ", 
                    "\[LessEqual]", " ", "1"}], ")"}], "  ", "&"}]}], "]"}]}],
                  "]"}]}], ";", " ", "\[IndentingNewLine]", 
               RowBox[{"allCurvePoints", " ", "=", " ", 
                RowBox[{"Join", "[", 
                 RowBox[{"allCurvePoints", ",", 
                  RowBox[{"Select", "[", 
                   RowBox[{"n4Temp", ",", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"getN4", "[", 
                    RowBox[{"#", ",", " ", "A2"}], "]"}], "]"}], " ", 
                    "\[LessEqual]", " ", "1"}], ")"}], "  ", "&"}]}], "]"}]}],
                  "]"}]}], ";", " ", "\[IndentingNewLine]", 
               RowBox[{"curveEndPoints", " ", "=", " ", 
                RowBox[{"Join", "[", 
                 RowBox[{"curveEndPoints", ",", 
                  RowBox[{"Select", "[", 
                   RowBox[{"n4Temp", ",", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"getN4", "[", 
                    RowBox[{"#", ",", " ", "A2"}], "]"}], "]"}], " ", 
                    "\[NotEqual]", " ", "1"}], ")"}], "  ", "&"}]}], "]"}]}], 
                 "]"}]}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";"}], 
           "&"}], ",", " ", "\[IndentingNewLine]", "dMap"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dMap", " ", "=", " ", "dMap2"}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "dMap", "]"}], " ", "\[Equal]", " ", "0"}], 
          ",", " ", 
          RowBox[{"Break", "[", "]"}]}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"A", ",", " ", 
             RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], ",",
            "\[IndentingNewLine]", 
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
              RowBox[{"PointSize", "[", "0.02", "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Point", "[", 
                  RowBox[{
                   RowBox[{"Reverse", "[", "#", "]"}], "+", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "0.5"}], ",", 
                    RowBox[{"-", "0.5"}]}], "}"}]}], "]"}], "&"}], ",", " ", 
                "allCurvePoints"}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
         RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], "]"}], 
       ";"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"doHash", ",", " ", "\[IndentingNewLine]", 
       RowBox[{"Scan", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"curveLengthHash", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{
              "hashKey", "\[LeftDoubleBracket]", "1", 
               "\[RightDoubleBracket]"}], ",", " ", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              ",", " ", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             "\[RightDoubleBracket]"}], " ", "=", " ", 
            RowBox[{"{", 
             RowBox[{
             "n", ",", " ", "curveEndPoints", ",", " ", "allCurvePoints"}], 
             "}"}]}], ";"}], "&"}], ",", " ", "toHash"}], "]"}]}], "]"}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"n", ",", " ", "curveEndPoints", ",", " ", "allCurvePoints"}], 
       "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input"],

Cell[BoxData[""], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getClosestValue:",
  FontWeight->"Bold"],
 "\nGets the closest value to a given pixel in the image"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getClosestValue", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getClosestValue", "[", 
   RowBox[{"p_", ",", " ", "image_", ",", " ", "level_"}], "]"}], " ", ":=", 
  " ", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n4List", ",", " ", "closestValues"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"image", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], " ", "\[NotEqual]", " ", "0"}], ",", " ", 
       
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"image", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{
             "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "\[RightDoubleBracket]"}], ",", " ", "level"}], "}"}], "}"}], 
        "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"level", " ", "\[LessEqual]", " ", "0"}], ",", " ", 
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"0", ",", " ", "level"}], "}"}], "}"}], "]"}]}], "]"}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"n4List", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"n4", "[", "p", "]"}], ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
            "\[GreaterEqual]", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}]}], ")"}], "  ", "&&", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
            "\[LessEqual]", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], ")"}], " ", "&&", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], " ", 
            "\[GreaterEqual]", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}]}], ")"}], "  ", "&&", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], " ", 
            "\[LessEqual]", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], ")"}]}], "&"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"closestValues", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"closestValues", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"closestValues", ",", " ", 
            RowBox[{"getClosestValue", "[", 
             RowBox[{"#", ",", " ", "image", ",", " ", 
              RowBox[{"level", "-", "1"}]}], "]"}]}], "]"}]}], ";"}], "&"}], 
       ",", " ", "n4List"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"closestValues", " ", "=", " ", 
      RowBox[{"Sort", "[", 
       RowBox[{"closestValues", ",", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
           "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], " ", 
           ">", " ", 
           RowBox[{
           "#2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
          ")"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"closestValues", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"closestValues", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
           " ", "\[Equal]", " ", 
          RowBox[{"closestValues", "\[LeftDoubleBracket]", 
           RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}]}], "&"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"closestValues", " ", "=", " ", 
      RowBox[{"Sort", "[", 
       RowBox[{"closestValues", ",", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
           "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
           ">", " ", 
           RowBox[{
           "#2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          ")"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{
       "closestValues", "\[LeftDoubleBracket]", "1", 
        "\[RightDoubleBracket]"}], "}"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["canRemovePixel:",
  FontWeight->"Bold"],
 "\nLets you know whether the given pixel can be removed from the skeleton \
based in the filter criteria.\nCost Function has the following values\n\t1: \
Remove if the length of the added segment >= filter threshold\n\t2: Remove if \
the length of the added segment / length of the total curve >= filter \
threshold\n\t3: Remove if the thickness difference between grayscale levels \
<= filter threshold\n\t4: Remove if the curve has not been growing recently\n\
\t5: Remove if the curve does not fall close to the eigen vector value"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "canRemovePixel", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"canRemovePixel", "[", 
    RowBox[{
    "p_", ",", " ", "annotatedTopologyCurves_", ",", " ", "annotatedCurves_", 
     ",", " ", "annotatedSkeleton_", ",", "thicknessMap_", ",", " ", 
     "curveEndHistory_", ",", " ", "costFunction5Val_", ",", " ", 
     "currentGrayLevel_", ",", " ", "filterThreshold_", ",", "  ", 
     "costFunction_", ",", " ", "hashGrayValue_"}], "]"}], " ", ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"canRemove", ",", " ", "type"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"type", " ", "=", " ", 
       RowBox[{"annotatedSkeleton", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"canRemove", " ", "=", " ", "False"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"costFunction", ",", "\[IndentingNewLine]", "1", ",", 
        RowBox[{"Switch", "[", 
         RowBox[{"type", ",", "\[IndentingNewLine]", "1", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", "False"}], ",", 
          "\[IndentingNewLine]", "2", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"getCurveLength", "[", 
              RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
               RowBox[{"{", 
                RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
             "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", ">=",
             " ", "filterThreshold"}]}], ",", "\[IndentingNewLine]", "3", ",",
           " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"getCurveLength", "[", 
              RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
               RowBox[{"{", 
                RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
             "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", ">=",
             " ", "filterThreshold"}]}], ",", "\[IndentingNewLine]", "4", ",",
           " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"getCurveLength", "[", 
              RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
               RowBox[{"{", 
                RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
             "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", ">=",
             " ", "filterThreshold"}]}], ",", "\[IndentingNewLine]", "5", ",",
           " ", 
          RowBox[{"canRemove", " ", "=", " ", "True"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "2", ",", 
        RowBox[{"Switch", "[", 
         RowBox[{"type", ",", "\[IndentingNewLine]", "1", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", "False"}], ",", 
          "\[IndentingNewLine]", "2", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
              "/", " ", 
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedSkeleton", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
             ")"}], " ", ">=", " ", "filterThreshold"}]}], ",", 
          "\[IndentingNewLine]", "3", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "/", 
              " ", 
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedSkeleton", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
             ")"}], " ", ">=", " ", "filterThreshold"}]}], ",", 
          "\[IndentingNewLine]", "4", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
              "/", " ", 
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedSkeleton", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
             ")"}], " ", ">=", " ", "filterThreshold"}]}], ",", 
          "\[IndentingNewLine]", "5", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", "True"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "3", ",", 
        " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "curveStats", ",", " ", "curveLength", ",", " ", "endPoints", ",", 
            " ", "thicknesses", ",", " ", "totalThickness"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"curveStats", " ", "=", "  ", 
            RowBox[{"getCurveLength", "[", 
             RowBox[{"p", ",", " ", "annotatedSkeleton", ",", " ", 
              RowBox[{"{", 
               RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"endPoints", " ", "=", " ", 
            RowBox[{
            "curveStats", "\[LeftDoubleBracket]", "2", 
             "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"curveLength", " ", "=", " ", 
            RowBox[{
            "curveStats", "\[LeftDoubleBracket]", "1", 
             "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"thicknesses", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"thicknessMap", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
               "&"}], ",", " ", "endPoints"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"totalThickness", " ", "=", " ", 
            RowBox[{"Sum", "[", 
             RowBox[{
              RowBox[{
              "thicknesses", "\[LeftDoubleBracket]", "i", 
               "\[RightDoubleBracket]"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "1", ",", " ", 
                RowBox[{"Length", "[", "thicknesses", "]"}]}], "}"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{"type", ",", "\[IndentingNewLine]", "1", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "False"}], ",", 
             "\[IndentingNewLine]", "2", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Length", "[", "thicknesses", "]"}], " ", "\[Equal]",
                  " ", "2"}], ")"}], "&&", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"curveLength", " ", "-", " ", "totalThickness"}], 
                 "  ", "\[LessEqual]", "  ", "filterThreshold"}], ")"}]}]}], 
             ",", "\[IndentingNewLine]", "3", ",", " ", 
             RowBox[{"canRemove", " ", "=", "  ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Length", "[", "thicknesses", "]"}], " ", "\[Equal]",
                  " ", "2"}], ")"}], "&&", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"curveLength", " ", "-", " ", "totalThickness"}], 
                 "  ", "\[LessEqual]", " ", "filterThreshold"}], ")"}]}]}], 
             ",", "\[IndentingNewLine]", "4", ",", " ", 
             RowBox[{"canRemove", " ", "=", "  ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Length", "[", "thicknesses", "]"}], " ", "\[Equal]",
                  " ", "2"}], ")"}], "&&", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"curveLength", " ", "-", " ", "totalThickness"}], 
                 "  ", "\[LessEqual]", "  ", "filterThreshold"}], ")"}]}]}], 
             ",", "\[IndentingNewLine]", "5", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "True"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ",", "\[IndentingNewLine]", "4", ",", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "endPoints", ",", " ", "endValues", ",", " ", "endFailed"}], "}"}],
           ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"endPoints", " ", "=", "  ", 
            RowBox[{
             RowBox[{"getCurveLength", "[", 
              RowBox[{"p", ",", " ", "annotatedCurves", ",", " ", 
               RowBox[{"{", 
                RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
             "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"endValues", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"getClosestValue", "[", 
                 RowBox[{"#", ",", " ", "curveEndHistory", ",", " ", "5"}], 
                 "]"}], "\[LeftDoubleBracket]", 
                RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "&"}], 
              ",", "endPoints"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"endFailed", " ", "=", " ", "False"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Scan", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"endFailed", " ", "=", " ", 
                RowBox[{"(", 
                 RowBox[{"endFailed", " ", "||", " ", 
                  RowBox[{"(", 
                   RowBox[{"#", " ", "\[GreaterEqual]", " ", 
                    RowBox[{
                    "currentGrayLevel", " ", "+", " ", "filterThreshold"}]}], 
                   ")"}]}], ")"}]}], ";"}], "&"}], ",", "endValues"}], "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"Map", "\[IndentingNewLine]", 
            RowBox[{"Switch", "[", 
             RowBox[{"type", ",", "\[IndentingNewLine]", "1", ",", " ", 
              RowBox[{"canRemove", " ", "=", " ", "False"}], ",", " ", 
              "\[IndentingNewLine]", "2", ",", " ", 
              RowBox[{"canRemove", " ", "=", " ", "endFailed"}], ",", 
              "\[IndentingNewLine]", "3", ",", " ", 
              RowBox[{"canRemove", " ", "=", "  ", "endFailed"}], ",", 
              "\[IndentingNewLine]", "4", ",", " ", 
              RowBox[{"canRemove", " ", "=", "  ", "endFailed"}], ",", 
              "\[IndentingNewLine]", "5", ",", " ", 
              RowBox[{"canRemove", " ", "=", " ", "True"}]}], 
             "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ",", "\[IndentingNewLine]", "5", ",", " ", 
        RowBox[{"Module", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Switch", "[", 
            RowBox[{"type", ",", "\[IndentingNewLine]", "1", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "False"}], ",", 
             "\[IndentingNewLine]", "2", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "True"}], ",", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"costFunction5Val", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", " ", 
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                " ", "<", " ", "filterThreshold"}], ","}], "*)"}], 
             "\[IndentingNewLine]", "3", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "True"}], ",", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"costFunction5Val", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", " ", 
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                " ", "<", " ", "filterThreshold"}], ","}], "*)"}], 
             "\[IndentingNewLine]", "4", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "True"}], ",", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"costFunction5Val", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", " ", 
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                " ", "<", " ", "filterThreshold"}], ","}], "*)"}], 
             "\[IndentingNewLine]", "5", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "True"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "canRemove", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["annotateImageWithPixelType:",
  FontWeight->"Bold"],
 "\nAnnotates an image with the pixel type"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "annotateImageWithPixelType", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annotateImageWithPixelType", "[", "image_", "]"}], " ", ":=", " ",
    "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "annotatedImage", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"annotatedImage", " ", "=", " ", 
       RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dMap", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"image", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", " ", "y"}], "\[RightDoubleBracket]"}], " ", 
              ">", " ", "0"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"x", ",", " ", "y", ",", " ", 
               RowBox[{"getSkeletalPixelType", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"x", ",", "y"}], "}"}], ",", " ", "image"}], 
                "]"}]}], "}"}], ",", " ", 
             RowBox[{"{", "}"}]}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"x", ",", 
             RowBox[{"sliceSize", "[", 
              RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
             RowBox[{"sliceSize", "[", 
              RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"y", ",", 
             RowBox[{"sliceSize", "[", 
              RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
             RowBox[{"sliceSize", "[", 
              RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
         "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dMap", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"dMap", ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Scan", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"annotatedImage", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              
             RowBox[{
             "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "\[RightDoubleBracket]"}], " ", "=", " ", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
          ";"}], "&"}], ",", " ", "dMap"}], "]"}], ";", "\[IndentingNewLine]",
       "annotatedImage"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["makeGraySkeleton:",
  FontWeight->"Bold"],
 "\nCreates a Gray scale skeleton of the grayImage, starting at the grayscale \
level startLevel, ending at endLevel at a grayscale step of step, while \
perfoming pruneAmount pruning steps."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "makeGraySkeleton", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"makeGraySkeleton", "[", 
   RowBox[{
   "grayImage_", ",", "startLevel_", ",", "endLevel_", ",", "step_", ",", 
    "pruneAmount_", ",", "filterThreshold_", ",", "costFunction_", ",", 
    "eigenValues_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "maxThinningIterations", ",", "olderSkeleton", ",", "graySkeleton", ",", 
      "grayLevels", ",", "binaryImage", ",", "thinningResults", ",", 
      "curveSkeleton", ",", "prunedCurveSkeleton", ",", 
      "prunedCurveSkeletonWithOlder", ",", "topologySkeleton", ",", 
      "topologyBranches", ",", "annotatedTopologyBranches", ",", 
      "annotatedSkeleton", ",", "removedPixels", ",", "allRemovedPixels", ",",
       "dMap", ",", "thicknessMap", ",", "lastThicknessMap", ",", 
      "actualGraySkeleton", ",", "allBranches", ",", "annotatedAllBranches", 
      ",", "curveEndHistory", ",", "s1", ",", "s2", ",", "s3", ",", "s4", ",",
       "s5", ",", "s6", ",", "s7", ",", "s8", ",", "s9", ",", "s10", ",", 
      "s11", ",", "s12"}], "}"}], ",", 
    RowBox[{
     RowBox[{"maxThinningIterations", "=", "100"}], ";", 
     RowBox[{"olderSkeleton", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"graySkeleton", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"grayLevels", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"allRemovedPixels", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"curveEndHistory", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"lastThicknessMap", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"binaryImage", "=", 
         RowBox[{"thresholdImage", "[", 
          RowBox[{"grayImage", ",", "i"}], "]"}]}], ";", 
        RowBox[{"thinningResults", "=", 
         RowBox[{"performThinning", "[", 
          RowBox[{"binaryImage", ",", 
           RowBox[{"invertImage", "[", "binaryImage", "]"}], ",", 
           "maxThinningIterations", ",", "olderSkeleton", ",", "1"}], "]"}]}],
         ";", 
        RowBox[{"curveSkeleton", "=", 
         RowBox[{
         "thinningResults", "\[LeftDoubleBracket]", "1", 
          "\[RightDoubleBracket]"}]}], ";", 
        RowBox[{"prunedCurveSkeleton", "=", 
         RowBox[{"performPruning", "[", 
          RowBox[{"curveSkeleton", ",", 
           RowBox[{"invertImage", "[", "curveSkeleton", "]"}], ",", 
           "pruneAmount"}], "]"}]}], ";", 
        RowBox[{"prunedCurveSkeletonWithOlder", "=", 
         RowBox[{"BitOr", "[", 
          RowBox[{"prunedCurveSkeleton", ",", "olderSkeleton"}], "]"}]}], ";",
         
        RowBox[{"thinningResults", "=", 
         RowBox[{"performThinning", "[", 
          RowBox[{"binaryImage", ",", 
           RowBox[{"invertImage", "[", "binaryImage", "]"}], ",", 
           "maxThinningIterations", ",", "prunedCurveSkeletonWithOlder", ",", 
           "0"}], "]"}]}], ";", 
        RowBox[{"topologySkeleton", "=", 
         RowBox[{
         "thinningResults", "\[LeftDoubleBracket]", "1", 
          "\[RightDoubleBracket]"}]}], ";", 
        RowBox[{"thicknessMap", "=", 
         RowBox[{
         "thinningResults", "\[LeftDoubleBracket]", "2", 
          "\[RightDoubleBracket]"}]}], ";", 
        RowBox[{"topologyBranches", "=", 
         RowBox[{
          RowBox[{"performThinning", "[", 
           RowBox[{"topologySkeleton", ",", 
            RowBox[{"invertImage", "[", "topologySkeleton", "]"}], ",", 
            "maxThinningIterations", ",", "olderSkeleton", ",", "0"}], "]"}], 
          "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ";", 
        RowBox[{"topologyBranches", "=", 
         RowBox[{"BitXor", "[", 
          RowBox[{"olderSkeleton", ",", "topologyBranches"}], "]"}]}], ";", 
        RowBox[{"allBranches", "=", 
         RowBox[{"BitXor", "[", 
          RowBox[{"olderSkeleton", ",", "topologySkeleton"}], "]"}]}], ";", 
        RowBox[{"annotatedTopologyBranches", "=", 
         RowBox[{
         "annotateImageWithPixelType", "[", "topologyBranches", "]"}]}], ";", 
        
        RowBox[{"annotatedSkeleton", "=", 
         RowBox[{
         "annotateImageWithPixelType", "[", "topologySkeleton", "]"}]}], ";", 
        
        RowBox[{"annotatedAllBranches", "=", 
         RowBox[{"annotateImageWithPixelType", "[", "allBranches", "]"}]}], 
        ";", 
        RowBox[{"removedPixels", "=", 
         RowBox[{"getBlankImage", "[", "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "2"}], "}"}], ",", 
                  RowBox[{"annotatedSkeleton", "\[LeftDoubleBracket]", 
                   RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}]}], 
                 "]"}], "&&", 
                RowBox[{
                 RowBox[{"curveEndHistory", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                 "\[Equal]", "0"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}],
         ";", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"curveEndHistory", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", 
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "=", 
              "i"}], ";"}], ")"}], "&"}], ",", "dMap"}], "]"}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"topologyBranches", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                 "\[Equal]", "1"}], "&&", 
                RowBox[{"canRemovePixel", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"x", ",", "y"}], "}"}], ",", 
                  "annotatedTopologyBranches", ",", "annotatedAllBranches", 
                  ",", "annotatedSkeleton", ",", "lastThicknessMap", ",", 
                  "curveEndHistory", ",", "eigenValues", ",", "i", ",", 
                  "filterThreshold", ",", "costFunction", ",", "i"}], "]"}]}],
                ",", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}],
         ";", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"removedPixels", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", 
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "=", 
              "1"}], ";"}], ")"}], "&"}], ",", "dMap"}], "]"}], ";", 
        RowBox[{"allRemovedPixels", "=", 
         RowBox[{"BitOr", "[", 
          RowBox[{"removedPixels", ",", "allRemovedPixels"}], "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"topologySkeleton", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                 "\[Equal]", "1"}], "&&", 
                RowBox[{
                 RowBox[{"graySkeleton", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                 "\[Equal]", "0"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}],
         ";", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"graySkeleton", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", 
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "=", 
              "i"}], ";"}], ")"}], "&"}], ",", "dMap"}], "]"}], ";", 
        RowBox[{"olderSkeleton", "=", "topologySkeleton"}], ";", 
        RowBox[{"lastThicknessMap", "=", "thicknessMap"}], ";", 
        RowBox[{"actualGraySkeleton", "=", "graySkeleton"}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"allRemovedPixels", "\[LeftDoubleBracket]", 
                 RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                "\[Equal]", "1"}], ",", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}],
         ";", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"actualGraySkeleton", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", 
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "=", 
              "0"}], ";"}], ")"}], "&"}], ",", "dMap"}], "]"}], ";", 
        RowBox[{"s1", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"binaryImage", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Binary Image\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s2", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"curveSkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Curve Skeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s3", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"prunedCurveSkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{
           "PlotLabel", "\[Rule]", "\"\<Pruned Curve Skeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s4", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"prunedCurveSkeletonWithOlder", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{
           "PlotLabel", "\[Rule]", 
            "\"\<Pruned Curve Skeleton with Older\>\""}]}], "]"}]}], ";", 
        RowBox[{"s5", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"topologySkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Topology Skeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s6", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"graySkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Grayscale Skeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s7", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"topologyBranches", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Topology Branches\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s8", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"removedPixels", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Removed Pixels\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s9", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"allRemovedPixels", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<All Removed Pixels\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s10", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"actualGraySkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Actual Grayskeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s11", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"curveEndHistory", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Curve End History\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s12", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"allBranches", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<All Branches\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s13", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"annotatedSkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Annotated Skeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"Show", "[", 
         RowBox[{
          RowBox[{"GraphicsRow", "[", 
           RowBox[{"{", 
            RowBox[{
            "s1", ",", "s4", ",", "s5", ",", "s6", ",", "s12", ",", "s9", ",",
              "s10"}], "}"}], "]"}], ",", 
          RowBox[{"PlotLabel", "\[Rule]", 
           RowBox[{"\"\<Grayscale value: \>\"", "<>", 
            RowBox[{"ToString", "[", "i", "]"}]}]}], ",", 
          RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"1200", ",", 
             FractionBox["1200", "5"]}], "}"}]}]}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "endLevel", ",", "startLevel", ",", 
         RowBox[{"-", "step"}]}], "}"}]}], "]"}], ";", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"graySkeleton", ",", "actualGraySkeleton"}], "}"}], "]"}], 
     ";"}]}], "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["cleanImmersionSkeleton",
  FontWeight->"Bold"],
 "\nPerforms a post-processing step on the grayscale skeleton to prune it \
using the pruning parameter, and to remove surfaces."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "cleanImmersionSkeleton", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cleanImmersionSkeleton", "[", 
   RowBox[{"skel_", ",", " ", "pruneAmount_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bins", ",", " ", "binarySkel", ",", " ", "newSkel"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newSkel", " ", "=", " ", "skel"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"bins", "[", "i", "]"}], " ", "=", " ", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "0", ",", " ", "255"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"bins", "[", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], "]"}],
           "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"bins", "[", 
             RowBox[{
             "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
             "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
              "}"}], "}"}]}], "]"}]}], ";"}], " ", "&"}], ",", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"x", ",", " ", "y", ",", " ", 
             RowBox[{"skel", "\[LeftDoubleBracket]", 
              RowBox[{"x", ",", " ", "y"}], "\[RightDoubleBracket]"}]}], 
            "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"x", ",", "1", ",", " ", 
             RowBox[{
              RowBox[{"Dimensions", "[", "skel", "]"}], 
              "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "}"}],
            ",", " ", 
           RowBox[{"{", 
            RowBox[{"y", ",", "1", ",", " ", 
             RowBox[{
              RowBox[{"Dimensions", "[", "skel", "]"}], 
              "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "}"}]}], "]"}], ",", " ", "1"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"binarySkel", " ", "=", " ", 
         RowBox[{"thresholdImage", "[", 
          RowBox[{"skel", ",", " ", "g"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"isSkeletalSurfaceInteriorPoint", "[", 
               RowBox[{
                RowBox[{"#", "\[LeftDoubleBracket]", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "2"}], "}"}], "\[RightDoubleBracket]"}], 
                ",", " ", "binarySkel"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"newSkel", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], " ",
                "=", " ", "0"}]}], "]"}], ";"}], " ", "&"}], ",", 
          RowBox[{"bins", "[", "g", "]"}]}], "]"}], ";"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"g", ",", " ", "255", ",", " ", "1", ",", " ", 
         RowBox[{"-", "1"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "newSkel"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Structure Tensor Methods", "Subtitle"],

Cell[TextData[{
 StyleBox["getGradientField",
  FontWeight->"Bold"],
 ":\nGets the gradient field of the image"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getGradientField", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getGradientField", "[", "arr_", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grad", ",", "len", ",", "wid"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"grad", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", "0"}], "}"}], "&"}], ",", "#"}], "]"}], "&"}],
          ",", "arr"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"len", ",", "wid"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "arr", "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"grad", "\[LeftDoubleBracket]", 
          RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"x", "+", "1"}], ",", "y"}], "\[RightDoubleBracket]"}], 
            "-", 
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"x", "-", "1"}], ",", "y"}], 
             "\[RightDoubleBracket]"}]}], ",", 
           RowBox[{
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", 
              RowBox[{"y", "+", "1"}]}], "\[RightDoubleBracket]"}], "-", 
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", 
              RowBox[{"y", "-", "1"}]}], "\[RightDoubleBracket]"}]}]}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"x", ",", "2", ",", 
          RowBox[{"len", "-", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", "2", ",", 
          RowBox[{"wid", "-", "1"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "grad"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getGradientField3D",
  FontWeight->"Bold"],
 ":\nGets the gradient field of the image"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getGradientField3D", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getGradientField3D", "[", "arr_", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grad", ",", "len", ",", "wid"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"grad", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "0", ",", "0"}], "}"}], "&"}], ",", "#"}], 
              "]"}], "&"}], ",", "#"}], "]"}], "&"}], ",", "arr"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"len", ",", "wid", ",", " ", "hei"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "arr", "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"grad", "\[LeftDoubleBracket]", 
          RowBox[{"x", ",", "y", ",", " ", "z"}], "\[RightDoubleBracket]"}], 
         "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"x", "+", "1"}], ",", "y", ",", " ", "z"}], 
             "\[RightDoubleBracket]"}], "-", 
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"x", "-", "1"}], ",", "y", ",", " ", "z"}], 
             "\[RightDoubleBracket]"}]}], ",", 
           RowBox[{
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", 
              RowBox[{"y", "+", "1"}], ",", " ", "z"}], 
             "\[RightDoubleBracket]"}], "-", 
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", 
              RowBox[{"y", "-", "1"}], ",", " ", "z"}], 
             "\[RightDoubleBracket]"}]}], ",", 
           RowBox[{
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", "y", ",", " ", 
              RowBox[{"z", "+", "1"}]}], "\[RightDoubleBracket]"}], "-", 
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", "y", ",", " ", 
              RowBox[{"z", "-", "1"}]}], "\[RightDoubleBracket]"}]}]}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"x", ",", "2", ",", 
          RowBox[{"len", "-", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", "2", ",", 
          RowBox[{"wid", "-", "1"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"z", ",", " ", "2", ",", " ", 
          RowBox[{"hei", "-", "1"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "grad"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.398388731663*^9, 3.398388731823*^9}, {3.398393561936*^9,
   3.398393629307*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getGaussianMask",
  FontWeight->"Bold"],
 ":\nGets a Gaussian Mask"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getGaussianMask", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getGaussianMask", "[", "a_", "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"res", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Binomial", "[", 
           RowBox[{
            RowBox[{"2", "*", "a"}], ",", 
            RowBox[{
             RowBox[{"Floor", "[", 
              SqrtBox[
               RowBox[{
                SuperscriptBox["x", "2"], "+", 
                SuperscriptBox["y", "2"]}]], "]"}], "+", "a"}]}], "]"}], ",", 
          
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"-", "a"}], ",", "a"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"-", "a"}], ",", "a"}], "}"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"N", "[", 
       RowBox[{"res", "/", 
        RowBox[{"Tr", "[", "res", "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getGaussianMask3D",
  FontWeight->"Bold"],
 ":\nGets a Gaussian Mask"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getGaussianMask3D", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getGaussianMask3D", "[", "a_", "]"}], ":=", "\[IndentingNewLine]",
    
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"res", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Binomial", "[", 
           RowBox[{
            RowBox[{"2", "*", "a"}], ",", 
            RowBox[{
             RowBox[{"Floor", "[", 
              SqrtBox[
               RowBox[{
                SuperscriptBox["x", "2"], "+", 
                SuperscriptBox["y", "2"], "+", 
                SuperscriptBox["z", "2"]}]], "]"}], "+", "a"}]}], "]"}], ",", 
          
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"-", "a"}], ",", "a"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"-", "a"}], ",", "a"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"z", ",", " ", 
            RowBox[{"-", "a"}], ",", " ", "a"}], "}"}]}], "]"}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"N", "[", 
       RowBox[{"res", "/", 
        RowBox[{"Tr", "[", "res", "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getLocalStructureTensor",
  FontWeight->"Bold"],
 ":\nGets the local structure tensor given the gradient field grad_ and the \
mask width a_"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getLocalStructureTensor", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getLocalStructureTensor", "[", 
    RowBox[{"grad_", ",", "a_"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "tensors", ",", "lst", ",", " ", "len", ",", "wid", ",", "t", ",", 
       "mask"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tensors", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Transpose", "[", 
                RowBox[{"{", "#", "}"}], "]"}], ".", 
               RowBox[{"{", "#", "}"}]}], ")"}], "&"}], ",", "#"}], "]"}], 
          "&"}], ",", "grad"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"lst", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}], "&"}], ",", "#"}], 
           "]"}], "&"}], ",", "grad"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"len", "=", 
       RowBox[{"Length", "[", "grad", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"wid", "=", 
       RowBox[{"Length", "[", 
        RowBox[{
        "grad", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"mask", "=", 
       RowBox[{"getGaussianMask", "[", "a", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"lst", "\[LeftDoubleBracket]", 
           RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], "=", 
          RowBox[{"mask", ".", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"tensors", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"x", "-", "a"}], ",", 
                 RowBox[{"x", "+", "a"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"y", "-", "a"}], ",", 
                 RowBox[{"y", "+", "a"}]}], "}"}]}], "]"}], ",", "1"}], 
            "]"}]}]}], ";"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"len", "-", "a"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"wid", "-", "a"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "lst"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.398393636766*^9, 3.398393656992*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getLocalStructureTensor",
  FontWeight->"Bold"],
 ":\nGets the local structure tensor given the gradient field grad_ and the \
mask width a_"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getLocalStructureTensor3D", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getLocalStructureTensor3D", "[", 
    RowBox[{"grad_", ",", "a_", ",", " ", "mask_", ",", " ", "skel_"}], "]"}],
    ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "tensors", ",", "lst", ",", " ", "len", ",", "wid", ",", "t", ",", " ", 
       "temp"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tensors", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Transpose", "[", 
                   RowBox[{"{", "#", "}"}], "]"}], ".", 
                  RowBox[{"{", "#", "}"}]}], ")"}], "&"}], ",", "#"}], "]"}], 
             "&"}], ",", " ", "#"}], "]"}], "&"}], ",", "grad"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"lst", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", " ", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], "&"}], 
               ",", "#"}], "]"}], "&"}], ",", " ", "#"}], "]"}], "&"}], ",", 
         "grad"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"len", ",", " ", "wid", ",", " ", "hei", ",", " ", "temp"}], 
        "}"}], "=", 
       RowBox[{"Dimensions", "[", "grad", "]"}]}], ";", "\[IndentingNewLine]",
       
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"skel", "\[LeftDoubleBracket]", 
            RowBox[{"x", ",", " ", "y", ",", " ", "z"}], 
            "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"lst", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", "y", ",", " ", "z"}], 
             "\[RightDoubleBracket]"}], "=", 
            RowBox[{"mask", ".", 
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"tensors", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"x", "-", "a"}], ",", 
                   RowBox[{"x", "+", "a"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"y", "-", "a"}], ",", 
                   RowBox[{"y", "+", "a"}]}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"z", "-", "a"}], ",", " ", 
                   RowBox[{"z", "+", "a"}]}], "}"}]}], "]"}], ",", "2"}], 
              "]"}]}]}], ";"}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"len", "-", "a"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"wid", "-", "a"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"z", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"hei", "-", "a"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "lst"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.3983898113310003`*^9, 3.398389812087*^9}, {
   3.398389847582*^9, 3.3983898831400003`*^9}, {3.398389932729*^9, 
   3.398389973351*^9}, {3.398390206807*^9, 3.398390222801*^9}, {
   3.398390303325*^9, 3.398390324663*^9}, {3.398391560307*^9, 
   3.398391576377*^9}, {3.398393546394*^9, 3.398393547792*^9}, {
   3.398393661101*^9, 3.398393682625*^9}, 3.3983941263*^9}],

Cell[BoxData[""], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["normalizeVector",
  FontWeight->"Bold"],
 ":\nNormalizes a vector"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "normalizeVector", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizeVector", "[", "v_", "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"v", ".", "v"}], " ", "\[NotEqual]", " ", "0"}], ",", " ", 
     RowBox[{"v", "/", 
      SqrtBox[
       RowBox[{"v", ".", "v"}]]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["normalizeVector3D",
  FontWeight->"Bold"],
 ":\nNormalizes a vector"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "normalizeVector3D", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizeVector3D", "[", "v_", "]"}], ":=", "\[IndentingNewLine]",
    
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"v", ".", "v"}], " ", "\[NotEqual]", " ", "0"}], ",", " ", 
     RowBox[{"v", "/", 
      SqrtBox[
       RowBox[{"v", ".", "v"}]]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getEigen",
  FontWeight->"Bold"],
 ":\nGets the eigen values of a list of structure tensors"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getEigen", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getEigen", "[", "lst_", "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{"Eigensystem", ",", "#"}], "]"}], "&"}], ",", "lst"}], "]"}]}],
   ";"}]}], "Input",
 CellChangeTimes->{{3.3983904461540003`*^9, 3.3983904700220003`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getEigen3D",
  FontWeight->"Bold"],
 ":\nGets the eigen values of a list of structure tensors"
}], "Subsubtitle",
 CellChangeTimes->{{3.398390482612*^9, 3.398390483212*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getEigen3D", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"getEigen3D", "[", 
   RowBox[{"lst_", ",", " ", "skel_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "eigs", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"eigs", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
                "}"}], "&"}], ",", "#"}], "]"}], "&"}], ",", " ", "#"}], 
          "]"}], "&"}], ",", "grad"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"skel", "\[LeftDoubleBracket]", 
           RowBox[{"x", ",", " ", "y", ",", " ", "z"}], 
           "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"eigs", "\[LeftDoubleBracket]", 
            RowBox[{"x", ",", "y", ",", "z"}], "\[RightDoubleBracket]"}], "=",
            
           RowBox[{"Eigensystem", "[", 
            RowBox[{"lst", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", "y", ",", "z"}], "\[RightDoubleBracket]"}], 
            "]"}]}], ";"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"x", ",", "1", ",", "len"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "1", ",", "wid"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"z", ",", "1", ",", "hei"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "eigs"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.3983904461540003`*^9, 3.39839050854*^9}, {
   3.398393704361*^9, 3.398393704817*^9}, {3.3983937414189997`*^9, 
   3.3983938627390003`*^9}, {3.3983938943780003`*^9, 3.398393949026*^9}, {
   3.3983941085550003`*^9, 3.398394111042*^9}, 3.3983947090030003`*^9, {
   3.398395200943*^9, 3.3983952010550003`*^9}}],

Cell["\<\
lst=getLocalStructureTensor[getGradientField[slice],gaussianRadius];
eigens=getEigen[lst];
Show[{ListDensityPlot[slice/255.0,Mesh\[Rule]False,ColorFunctionScaling\[Rule]\
False,DisplayFunction\[Rule]Identity],Graphics[{RGBColor[0,0,1],Table[If[\
eigens\[LeftDoubleBracket]x,y,1,1\[RightDoubleBracket]>0,Line[{{y,x},{y,x}+\
Reverse[normalizeVector[eigens\[LeftDoubleBracket]x,y,2,2\[RightDoubleBracket]\
]]*(1-eigens\[LeftDoubleBracket]x,y,1,2\[RightDoubleBracket]/eigens\
\[LeftDoubleBracket]x,y,1,1\[RightDoubleBracket])}],Circle[{y,x},0.01]],{x,\
Length[eigens]},{y,Length[eigens\[LeftDoubleBracket]1\[RightDoubleBracket]]}]}\
,AspectRatio\[Rule]Automatic,PlotRange\[Rule]{{0,65},{0,65}},Frame\[Rule]True,\
DisplayFunction\[Rule]Identity]},DisplayFunction\[Rule]$DisplayFunction];\
\>", "SmallText"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getCostFunction5",
  FontWeight->"Bold"],
 ":\nReturns the cost of adding in a new pixel based on the structure tensor \
eigen analysis."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getCostFunction5", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getCostFunction5", "[", 
    RowBox[{
    "p_", ",", "  ", "eigenValues_", ",", "  ", "skeletonDirections_", ",", 
     " ", "annotatedSkeleton_"}], "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "cost", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"cost", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            " ", 
            RowBox[{
            "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
            " ", "1", ",", " ", "1"}], "\[RightDoubleBracket]"}], " ", 
          "\[NotEqual]", " ", "0"}], ")"}], ",", "\[IndentingNewLine]", 
        RowBox[{"cost", " ", "=", " ", 
         RowBox[{"1", " ", "-", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Abs", "[", 
             RowBox[{
              RowBox[{"skeletonDirections", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", " ", 
                RowBox[{
                "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
                "\[RightDoubleBracket]"}], " ", ".", " ", 
              RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", " ", 
                RowBox[{
                "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                ",", " ", "2", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], 
             "]"}], ")"}], " ", "*", " ", 
           RowBox[{"(", 
            RowBox[{"1", "-", " ", 
             RowBox[{"Abs", "[", 
              RowBox[{
               RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                 ",", " ", "1", ",", " ", "2"}], "\[RightDoubleBracket]"}], 
               " ", "/", "  ", 
               RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                 ",", " ", "1", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], 
              "]"}]}], " ", ")"}]}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"annotatedSkeleton", "\[LeftDoubleBracket]", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
           " ", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
          "\[RightDoubleBracket]"}], " ", "\[Equal]", " ", "1"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"cost", " ", "=", " ", 
         RowBox[{"Abs", "[", 
          RowBox[{
           RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{
             "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",",
              " ", "1", ",", " ", "2"}], "\[RightDoubleBracket]"}], " ", "/", 
           "  ", 
           RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{
             "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",",
              " ", "1", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], 
          "]"}]}]}], " ", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "cost", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getCostFunction5Image",
  FontWeight->"Bold"],
 ":\nGets an image annotated using the 5th cost function (Eigen Analysis)"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getCostFunction5Image", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getCostFunction5Image", "[", 
    RowBox[{
    "skeleton_", ",", " ", "eigenValues_", ",", " ", "skeletonDirections_", 
     ",", " ", "annotatedSkeleton_"}], "]"}], " ", ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"retVal", ",", " ", "s2"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"s2", " ", "=", " ", "skeleton"}], ";", "\[IndentingNewLine]", 
      RowBox[{"retVal", " ", "=", " ", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"s2", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", " ", "y"}], "\[RightDoubleBracket]"}], " ", 
            ">", " ", "0"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{"getCostFunction5", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"x", ",", "y"}], "}"}], ",", "  ", "eigenValues", ",", 
             "  ", "skeletonDirections", ",", " ", "annotatedSkeleton"}], 
            "]"}], ",", "\[IndentingNewLine]", "0"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"x", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "skeleton", "]"}], 
            "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "}"}], 
         ",", " ", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"y", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "skeleton", "]"}], 
            "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], "}"}]}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "retVal", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getSkeletonDirection",
  FontWeight->"Bold"],
 ":\nGets the Vector field of the skeleton"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getSkeletonDirection", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getSkeletonDirection", "[", "skeleton_", "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"direction", ",", " ", "defaultDirections"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"defaultDirections", " ", "=", " ", 
       RowBox[{"getEigen", "[", 
        RowBox[{"getLocalStructureTensor", "[", 
         RowBox[{
          RowBox[{"getGradientField", "[", "skeleton", "]"}], ",", "1"}], 
         "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"direction", " ", "=", " ", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"skeleton", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], " ", ">", 
            " ", "0"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"n4", ",", " ", "dir"}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"n4", " ", "=", " ", 
               RowBox[{"getN4", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"x", ",", "y"}], "}"}], ",", " ", "skeleton"}], 
                "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"dir", " ", "=", " ", 
               RowBox[{"defaultDirections", "\[LeftDoubleBracket]", 
                RowBox[{"x", ",", "y", ",", "2", ",", "2"}], 
                "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"Switch", "[", 
               RowBox[{
                RowBox[{"Length", "[", "n4", "]"}], ",", 
                "\[IndentingNewLine]", "1", ",", " ", 
                RowBox[{
                 RowBox[{"dir", " ", "=", " ", 
                  RowBox[{
                   RowBox[{
                   "n4", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], " ", "-", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", "y"}], "}"}]}]}], ";"}], ",", 
                "\[IndentingNewLine]", "2", ",", " ", 
                RowBox[{"dir", " ", "=", " ", 
                 RowBox[{
                  RowBox[{
                  "n4", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}], " ", "-", " ", 
                  RowBox[{
                  "n4", "\[LeftDoubleBracket]", "1", 
                   "\[RightDoubleBracket]"}]}]}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"normalizeVector", "[", "dir", "]"}]}]}], 
            "\[IndentingNewLine]", "]"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", " ", 
         RowBox[{"{", 
          RowBox[{"x", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "skeleton", "]"}], 
            "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "}"}], 
         ",", " ", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"y", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "skeleton", "]"}], 
            "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], "}"}]}],
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "direction", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["doSkeletonCleanup:",
  FontWeight->"Bold"],
 "\nCleans up the skeleton using cost function 5"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "doSkeletonCleanup", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"doSkeletonCleanup", "[", 
   RowBox[{
   "sourceImage_", ",", "skeleton_", ",", "threshold_", ",", "stepSize_", ",",
     "showGeneralPlots_", ",", "showIterationPlots_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "sourceEigens", ",", "binarySkeleton", ",", "skeletonDirections", ",", 
      "pixelCosts", ",", "prunedSkeleton", ",", "newPixels", ",", 
      "annotatedNewPixels", ",", "grayValueSkeleton", ",", "p1", ",", "p2", 
      ",", "p3", ",", "p4", ",", "p5", ",", "p6", ",", "p7", ",", "p01", ",", 
      "p02", ",", "p03"}], "}"}], ",", 
    RowBox[{
     RowBox[{"sourceEigens", "=", 
      RowBox[{"getEigen", "[", 
       RowBox[{"getLocalStructureTensor", "[", 
        RowBox[{
         RowBox[{"getGradientField", "[", "sourceImage", "]"}], ",", 
         "gaussianRadius"}], "]"}], "]"}]}], ";", 
     RowBox[{"binarySkeleton", "=", 
      RowBox[{"thresholdImage", "[", 
       RowBox[{"skeleton", ",", "1"}], "]"}]}], ";", 
     RowBox[{"skeletonDirections", "=", 
      RowBox[{"getSkeletonDirection", "[", "binarySkeleton", "]"}]}], ";", 
     RowBox[{"pixelCosts", "=", 
      RowBox[{"getCostFunction5Image", "[", 
       RowBox[{
       "binarySkeleton", ",", "sourceEigens", ",", "skeletonDirections", ",", 
        
        RowBox[{"annotateImageWithPixelType", "[", "binarySkeleton", "]"}]}], 
       "]"}]}], ";", 
     RowBox[{"prunedSkeleton", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{"showGeneralPlots", ",", 
       RowBox[{
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{
           RowBox[{"p1", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"sourceImage", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<Source Image\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p2", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"skeleton", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{
              "PlotLabel", "\[Rule]", "\"\<Grayscale Skeleton\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p3", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"binarySkeleton", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<Binary Skeleton\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p4", "=", 
            RowBox[{"Show", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ListDensityPlot", "[", 
                 RowBox[{
                  FractionBox["sourceImage", "255.`"], ",", 
                  RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
                  RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}], ">", "0"}], ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{
                    RowBox[{"Reverse", "[", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "2", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    FractionBox[
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "2"}], 
                    "\[RightDoubleBracket]"}], 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}]]}], ")"}]}]}]}], "}"}], "]"}], 
                    ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}]}], "}"}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "sourceEigens", "]"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "sourceEigens", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], 
                 "]"}]}], "}"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{
              "PlotLabel", "\[Rule]", "\"\<Source Vector Field\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p5", "=", 
            RowBox[{"Show", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ListDensityPlot", "[", 
                 RowBox[{
                  FractionBox[
                   RowBox[{"thresholdImage", "[", 
                    RowBox[{"skeleton", ",", "1"}], "]"}], "255.`"], ",", 
                  RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
                  RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"skeletonDirections", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                    "]"}]}], "]"}]}]}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "skeletonDirections", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "skeletonDirections", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], 
                 "]"}]}], "}"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{
              "PlotLabel", "\[Rule]", "\"\<Skeleton Vector Field\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p6", "=", 
            RowBox[{"Show", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ListDensityPlot", "[", 
                 RowBox[{
                  FractionBox["slice", "255.`"], ",", 
                  RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
                  RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}], ">", "0"}], ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{
                    RowBox[{"Reverse", "[", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "2", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    FractionBox[
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "2"}], 
                    "\[RightDoubleBracket]"}], 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}]]}], ")"}]}]}]}], "}"}], "]"}], 
                    ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}]}], "}"}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "sourceEigens", "]"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "sourceEigens", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"skeletonDirections", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                    "]"}]}], "]"}]}]}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "skeletonDirections", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "skeletonDirections", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], 
                 "]"}]}], "}"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{
              "PlotLabel", "\[Rule]", 
               "\"\<Source  Field on Skeleton Field\>\""}]}], "]"}]}], ";", 
           RowBox[{"p7", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"pixelCosts", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<Cost Function\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"Show", "[", 
            RowBox[{
             RowBox[{"GraphicsGrid", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"p1", ",", "p2", ",", "p3"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"p4", ",", "p5", ",", "p6"}], "}"}], ",", 
                RowBox[{"{", "p7", "}"}]}], "}"}], "]"}], ",", 
             RowBox[{"ImageSize", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"1200", ",", "1200"}], "}"}]}]}], "]"}]}]}], "]"}], 
        ";"}]}], "]"}], ";", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"grayValueSkeleton", "=", 
         RowBox[{"thresholdImage", "[", 
          RowBox[{"skeleton", ",", "grayValue"}], "]"}]}], ";", 
        RowBox[{"newPixels", "=", 
         RowBox[{"grayValueSkeleton", "-", "prunedSkeleton"}]}], ";", 
        RowBox[{"annotatedNewPixels", "=", 
         RowBox[{"annotateImageWithPixelType", "[", "newPixels", "]"}]}], ";",
         
        RowBox[{"skeletonDirections", "=", 
         RowBox[{"getSkeletonDirection", "[", "grayValueSkeleton", "]"}]}], 
        ";", 
        RowBox[{"pixelCosts", "=", 
         RowBox[{"getCostFunction5Image", "[", 
          RowBox[{
          "grayValueSkeleton", ",", "sourceEigens", ",", "skeletonDirections",
            ",", "annotatedNewPixels"}], "]"}]}], ";", 
        RowBox[{"If", "[", 
         RowBox[{"showIterationPlots", ",", 
          RowBox[{
           RowBox[{"p01", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"newPixels", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<New Pixels\>\""}]}], 
             "]"}]}], ";"}]}], "]"}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"newPixels", "\[LeftDoubleBracket]", 
                 RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], ">", 
                "0"}], ",", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}],
         ";", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"newPixels", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "#1", "\[LeftDoubleBracket]", "1", 
                   "\[RightDoubleBracket]"}], ",", 
                  RowBox[{
                  "#1", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                ">", "0"}], ",", 
               RowBox[{
                RowBox[{"Module", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"curvePoints", ",", "curveCost"}], "}"}], ",", 
                  RowBox[{
                   RowBox[{"curvePoints", "=", 
                    RowBox[{
                    RowBox[{"getCurveLength", "[", 
                    RowBox[{"#1", ",", "annotatedNewPixels", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "grayValue"}], "}"}]}], "]"}], 
                    "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
                   ";", 
                   RowBox[{"curveCost", "=", 
                    FractionBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"i", "=", "1"}], 
                    RowBox[{"Length", "[", "curvePoints", "]"}]], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"pixelCosts", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    "&"}], ")"}], "/@", "curvePoints"}], ")"}], 
                    "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], 
                    
                    RowBox[{"Length", "[", "curvePoints", "]"}]]}], ";", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"curveCost", "\[GreaterEqual]", "threshold"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Scan", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"prunedSkeleton", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    "=", "1"}], ";"}], ")"}], "&"}], ",", "curvePoints"}], 
                    "]"}], ";"}]}], "]"}], ";", 
                   RowBox[{"Scan", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"newPixels", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    "=", "0"}], ";"}], ")"}], "&"}], ",", "curvePoints"}], 
                    "]"}], ";"}]}], "]"}], ";"}]}], "]"}], ";"}], ")"}], 
           "&"}], ",", "dMap"}], "]"}], ";", 
        RowBox[{"If", "[", 
         RowBox[{"showIterationPlots", ",", 
          RowBox[{
           RowBox[{"p02", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"prunedSkeleton", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<Pruned Skeleton\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p03", "=", 
            RowBox[{"Show", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ListDensityPlot", "[", 
                 RowBox[{
                  FractionBox["slice", "255.`"], ",", 
                  RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
                  RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}], ">", "0"}], ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{
                    RowBox[{"Reverse", "[", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "2", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    FractionBox[
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "2"}], 
                    "\[RightDoubleBracket]"}], 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}]]}], ")"}]}]}]}], "}"}], "]"}], 
                    ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}]}], "}"}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "sourceEigens", "]"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "sourceEigens", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"skeletonDirections", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                    "]"}]}], "]"}]}]}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "skeletonDirections", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "skeletonDirections", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], 
                 "]"}]}], "}"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{
              "PlotLabel", "\[Rule]", 
               "\"\<Source  Field on Skeleton Field\>\""}]}], "]"}]}], ";", 
           RowBox[{"p04", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"pixelCosts", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<Cost Function\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"Show", "[", 
            RowBox[{
             RowBox[{"GraphicsRow", "[", 
              RowBox[{"{", 
               RowBox[{"p01", ",", "p02", ",", "p03", ",", "p04"}], "}"}], 
              "]"}], ",", 
             RowBox[{"ImageSize", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"1200", ",", "300"}], "}"}]}], ",", 
             RowBox[{"PlotLabel", "\[Rule]", 
              RowBox[{"\"\<Gray Value : \>\"", "<>", 
               RowBox[{"ToString", "[", "grayValue", "]"}]}]}]}], "]"}]}]}], 
         "]"}], ";"}], ",", 
       RowBox[{"{", 
        RowBox[{"grayValue", ",", "255", ",", "1", ",", "stepSize"}], "}"}]}],
       "]"}], ";", 
     RowBox[{"newSkeleton", "=", "skeleton"}], ";", 
     RowBox[{"dMap", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"prunedSkeleton", "\[LeftDoubleBracket]", 
              RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], "\[Equal]", 
             "0"}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", "y"}], "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}], ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
       "]"}]}], ";", 
     RowBox[{"dMap", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"dMap", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
     ";", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"newSkeleton", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
             ",", 
             RowBox[{
             "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "\[RightDoubleBracket]"}], "=", "0"}], ";"}], ")"}], "&"}], ",", 
       "dMap"}], "]"}], ";", 
     RowBox[{"{", 
      RowBox[{"newSkeleton", ",", "prunedSkeleton"}], "}"}]}]}], 
   "]"}]}]}], "Input"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Statistical Profiles", "Subtitle"],

Cell[TextData[{
 StyleBox["getPriorVal",
  FontWeight->"Bold"],
 "\nGets the earlier value in the histogram table"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getPriorVal", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getPriorVal", "[", 
   RowBox[{"hist_", ",", " ", "currentIndex_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"priorVal", ",", " ", "cVal", ",", " ", "pVal", ",", " ", "i"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"priorVal", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"cVal", " ", "=", " ", 
      RowBox[{"hist", "\[LeftDoubleBracket]", 
       RowBox[{"currentIndex", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"i", " ", "=", " ", 
      RowBox[{"currentIndex", " ", "-", " ", "1"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"i", " ", ">=", " ", "1"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"priorVal", " ", "=", " ", 
         RowBox[{"hist", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Break", "[", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"i", "--"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "priorVal"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getNextVal",
  FontWeight->"Bold"],
 "\nGets the next value in the histogram table"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getNextVal", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getNextVal", "[", 
   RowBox[{"hist_", ",", " ", "currentIndex_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"nextVal", ",", " ", "cVal", ",", " ", "nVal", ",", " ", "i"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"nextVal", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"cVal", " ", "=", " ", 
      RowBox[{"hist", "\[LeftDoubleBracket]", 
       RowBox[{"currentIndex", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"i", " ", "=", " ", 
      RowBox[{"currentIndex", " ", "+", " ", "1"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"i", " ", "<=", " ", 
        RowBox[{"Length", "[", "hist", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"nVal", " ", "=", " ", 
         RowBox[{"hist", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"nVal", " ", "\[NotEqual]", " ", "cVal"}], ",", " ", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", " ", 
            RowBox[{
             RowBox[{"nextVal", " ", "=", " ", "nVal"}], ";", " ", 
             RowBox[{"Break", "[", "]"}]}]}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"i", "++"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "nextVal"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["smudgeHistogram",
  FontWeight->"Bold"],
 "\nSmudges a histogram by averaging the neighbors"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "smudgeHistogram", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"smudgeHistogram", "[", "hist_", "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "newHist", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newHist", " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{"0", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Length", "[", "hist", "]"}], "-", "1"}], "}"}], ",", " ", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"newHist", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", "1"}], "\[RightDoubleBracket]"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"(", " ", 
           RowBox[{
            RowBox[{"hist", "\[LeftDoubleBracket]", 
             RowBox[{"i", ",", "1"}], "\[RightDoubleBracket]"}], " ", "+", 
            " ", 
            RowBox[{"hist", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"i", "+", "1"}], ",", "1"}], 
             "\[RightDoubleBracket]"}]}], ")"}], " ", "/", " ", "3.0"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"newHist", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", "2"}], "\[RightDoubleBracket]"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"hist", "\[LeftDoubleBracket]", 
             RowBox[{"i", ",", "2"}], "\[RightDoubleBracket]"}], " ", "+", 
            " ", 
            RowBox[{"hist", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"i", "+", "1"}], ",", "2"}], 
             "\[RightDoubleBracket]"}]}], ")"}], " ", "/", " ", "3.0"}]}], 
        ";"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "1", ",", " ", 
         RowBox[{
          RowBox[{"Length", "[", "hist", "]"}], "-", "1"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "newHist"}]}],
    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getPeakCount",
  FontWeight->"Bold"],
 "\nCounts the number of peaks"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getPeakCount", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"getPeakCount", "[", 
   RowBox[{"hist_", ",", "s_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "priorVal", ",", "currVal", ",", "nextVal", ",", "n", ",", " ", 
      "newHist"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newHist", " ", "=", " ", "hist"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"newHist", " ", "=", " ", 
        RowBox[{"smudgeHistogram", "[", "newHist", "]"}]}], ",", " ", 
       RowBox[{"{", "s", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"n", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"priorVal", "=", 
         RowBox[{"getPriorVal", "[", 
          RowBox[{"newHist", ",", " ", "i"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"currVal", "=", 
         RowBox[{"newHist", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", "2"}], "\[RightDoubleBracket]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nextVal", "=", 
         RowBox[{"getNextVal", "[", 
          RowBox[{"newHist", ",", " ", "i"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"currVal", " ", ">", " ", "priorVal"}], " ", ")"}], "&&", 
           " ", 
           RowBox[{"(", " ", 
            RowBox[{"currVal", " ", ">", " ", "nextVal"}], ")"}]}], ",", " ", 
          
          RowBox[{"n", "++"}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "[", "newHist", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "n"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getTypeDurationGraph",
  FontWeight->"Bold"],
 "\nDisplays a graph of how long a skeletal point stays as a skeletal type"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getTypeDurationGraph", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getTypeDurationGraph", "[", 
   RowBox[{"stats_", ",", " ", "types_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"image", ",", " ", "newStats"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"image", " ", "=", " ", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newStats", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"stats", ",", " ", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"types", ",", " ", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"image", "\[LeftDoubleBracket]", " ", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
            " ", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], "++"}], ";"}], "&"}], ",", "newStats"}],
       "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"ListDensityPlot", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"#", "&"}], ",", " ", "image", ",", " ", "1"}], "]"}], ",", 
       " ", 
       RowBox[{"Mesh", "\[Rule]", "True"}], ",", " ", 
       RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}], ",", 
       RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], " ", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getTypeLengthSummationGraph",
  FontWeight->"Bold"],
 "\nDisplays a graph of the cumulative length / area of a curve or surface"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getTypeLengthSummationGraph", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getTypeLengthSummationGraph", "[", 
   RowBox[{"stats_", ",", " ", "types_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"image", ",", " ", "newStats"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"image", " ", "=", " ", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newStats", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"stats", ",", " ", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"types", ",", " ", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"image", "\[LeftDoubleBracket]", " ", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
            " ", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], " ", "+=", "  ", 
          RowBox[{
          "#", "\[LeftDoubleBracket]", "6", "\[RightDoubleBracket]"}]}], 
         ";"}], "&"}], ",", "newStats"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"ListDensityPlot", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"#", "&"}], ",", " ", "image", ",", " ", "1"}], "]"}], ",", 
       " ", 
       RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
       RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}], ",", " ", 
       RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getThicknessHistogram",
  FontWeight->"Bold"],
 "\nGets the list of thicknesses and their frequencies"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getThicknessHistogram", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"getThicknessHistogram", "[", "list_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tList", ",", "plot"}], "}"}], ",", 
    RowBox[{
     RowBox[{"tList", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", 
          RowBox[{
           RowBox[{"sliceSize", "[", 
            RowBox[{"1", ",", "2"}], "]"}], " ", 
           RowBox[{"sliceSize", "[", 
            RowBox[{"2", ",", "2"}], "]"}]}]}], "}"}]}], "]"}]}], ";", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"tList", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
             "+", "1"}], "\[RightDoubleBracket]"}], "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
             "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
             ",", 
             RowBox[{
              RowBox[{
               RowBox[{"tList", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
                  "+", "1"}], "\[RightDoubleBracket]"}], 
               "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "+", 
              "1"}]}], "}"}]}], ";"}], ")"}], "&"}], ",", "list"}], "]"}], 
     ";", 
     RowBox[{"tList", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"tList", ",", 
        RowBox[{
         RowBox[{
          RowBox[{
          "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          "\[NotEqual]", 
          RowBox[{"-", "1"}]}], "&"}]}], "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "tList", "]"}], ">", "0"}], ",", 
       RowBox[{"plot", "=", 
        RowBox[{"ListPlot", "[", 
         RowBox[{"tList", ",", 
          RowBox[{"Joined", "\[Rule]", "True"}], ",", 
          RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
          RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}]}], 
      "]"}], ";", 
     RowBox[{"{", 
      RowBox[{"tList", ",", "plot"}], "}"}]}]}], "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getPeakCountForImage",
  FontWeight->"Bold"],
 "\nGets a plot of the number of histogram peaks there are at each point"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getPeakCountForImage", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getPeakCountForImage", "[", 
   RowBox[{
   "stats_", ",", " ", "types_", ",", " ", "skel_", ",", " ", "noiseValue_"}],
    "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"newStats", ",", " ", "img"}], "}"}], ",", "\[IndentingNewLine]",
     
    RowBox[{
     RowBox[{"newStats", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"stats", ",", " ", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"types", ",", " ", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"img", " ", "=", " ", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"skel", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], " ", ">", 
              " ", "0"}], ",", " ", "\[IndentingNewLine]", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", "thicknessData", "}"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"thicknessData", " ", "=", " ", 
                 RowBox[{"getThicknessListAndGraph", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"x", ",", "y"}], "}"}], ",", " ", "stats", ",", 
                   " ", "types"}], "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"img", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], " ", 
                 "=", " ", 
                 RowBox[{"getPeakCount", "[", 
                  RowBox[{
                   RowBox[{"thicknessData", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], " ", 
                   ",", "noiseValue"}], "]"}]}], ";"}]}], 
              "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], 
           ";"}], "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ";"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", " ", 
         RowBox[{"sliceSize", "[", 
          RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
         RowBox[{"sliceSize", "[", 
          RowBox[{"1", ",", "2"}], "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "img"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getThicknessListAndGraph",
  FontWeight->"Bold"],
 "\nGets the list of thickness information and the graph of how the thickness \
changes along the grayscale value"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getThicknessListAndGraph", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getThicknessListAndGraph", "[", 
    RowBox[{"p_", ",", "stats_", ",", "types_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"d", ",", "newStats", ",", "plot"}], "}"}], ",", 
     RowBox[{
      RowBox[{"newStats", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"stats", ",", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"types", ",", 
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
           "]"}], "&"}]}], "]"}]}], ";", 
      RowBox[{"d", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"newStats", ",", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
            "\[Equal]", 
            RowBox[{
            "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "&&",
            
           RowBox[{
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
            "\[Equal]", 
            RowBox[{
            "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
          "&"}]}], "]"}]}], ";", 
      RowBox[{"d", "=", 
       RowBox[{"Sort", "[", 
        RowBox[{"d", ",", 
         RowBox[{
          RowBox[{
           RowBox[{
           "#1", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}], "<", 
           
           RowBox[{
           "#2", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}]}], 
          "&"}]}], "]"}]}], ";", 
      RowBox[{"d", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"#1", "\[LeftDoubleBracket]", 
           RowBox[{"{", 
            RowBox[{"4", ",", "5"}], "}"}], "\[RightDoubleBracket]"}], "&"}], 
         ")"}], "/@", "d"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "d", "]"}], ">", "0"}], ",", 
        RowBox[{"plot", "=", 
         RowBox[{"ListPlot", "[", 
          RowBox[{"d", ",", 
           RowBox[{"Joined", "\[Rule]", "True"}], ",", 
           RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"AxesLabel", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<Grayscale\>\"", ",", "\"\<Thickness\>\""}], 
             "}"}]}]}], "]"}]}]}], "]"}], ";", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"d", ",", 
          RowBox[{"{", "plot", "}"}]}], "}"}], ",", 
        RowBox[{"getThicknessHistogram", "[", "d", "]"}]}], "}"}]}]}], 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["displayThicknessStatisticsPerPoint",
  FontWeight->"Bold"],
 "\nDisplays the thickness statistics graph per point"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "displayThicknessStatisticsPerPoint", "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"displayThicknessStatisticsPerPoint", "[", 
    RowBox[{"p_", ",", "stats_", ",", "types_", ",", "skel_", ",", "img_"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "d", ",", "arr", ",", "s0", ",", "s1", ",", "s2", ",", "s3", ",", "s4", 
       ",", "thicknessInfo"}], "}"}], ",", 
     RowBox[{
      RowBox[{"newStats", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"stats", ",", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"types", ",", 
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
           "]"}], "&"}]}], "]"}]}], ";", 
      RowBox[{"d", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"#1", "\[LeftDoubleBracket]", 
           RowBox[{"{", 
            RowBox[{"2", ",", "3"}], "}"}], "\[RightDoubleBracket]"}], "&"}], 
         ")"}], "/@", "newStats"}]}], ";", 
      RowBox[{"arr", "=", 
       RowBox[{"getBlankImage", "[", "]"}]}], ";", 
      RowBox[{"Scan", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"arr", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
             
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], "++"}], "&"}], ",", "d"}], "]"}], ";", 
      RowBox[{"thicknessInfo", "=", 
       RowBox[{"getThicknessListAndGraph", "[", 
        RowBox[{"p", ",", "stats", ",", "types"}], "]"}]}], ";", 
      RowBox[{"s0", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", 
          RowBox[{
          "\"\<Thickness Histogram (Peak Count {0, 1, 2, 3}= {\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"getPeakCount", "[", 
             RowBox[{
              RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
               RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", "0"}],
              "]"}], "]"}], "<>", "\"\<,\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"getPeakCount", "[", 
             RowBox[{
              RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
               RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", "1"}],
              "]"}], "]"}], "<>", "\"\<,\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"getPeakCount", "[", 
             RowBox[{
              RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
               RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", "2"}],
              "]"}], "]"}], "<>", "\"\<,\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"getPeakCount", "[", 
             RowBox[{
              RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
               RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", "3"}],
              "]"}], "]"}], "<>", "\"\<}\>\""}]}]}], "]"}]}], ";", 
      RowBox[{"s1", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", "\"\<Thickness Variation\>\""}]}], 
        "]"}]}], ";", 
      RowBox[{"s2", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"img", ",", 
             RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
             RowBox[{"Mesh", "\[Rule]", "False"}]}], "]"}], ",", 
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
              RowBox[{"PointSize", "[", "0.02`", "]"}], ",", 
              RowBox[{"Point", "[", 
               RowBox[{
                RowBox[{"Reverse", "[", "p", "]"}], "+", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.5`"}], ",", 
                  RowBox[{"-", "0.5`"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", "\"\<Source Image\>\""}]}], "]"}]}], 
      ";", 
      RowBox[{"s3", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"arr", ",", 
             RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], ",",
            
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
              RowBox[{"PointSize", "[", "0.02`", "]"}], ",", 
              RowBox[{"Point", "[", 
               RowBox[{
                RowBox[{"Reverse", "[", "p", "]"}], "+", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.5`"}], ",", 
                  RowBox[{"-", "0.5`"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", "\"\<Curve Duration\>\""}]}], 
        "]"}]}], ";", 
      RowBox[{"s4", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"skel", ",", 
             RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], ",",
            
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
              RowBox[{"PointSize", "[", "0.02`", "]"}], ",", 
              RowBox[{"Point", "[", 
               RowBox[{
                RowBox[{"Reverse", "[", "p", "]"}], "+", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.5`"}], ",", 
                  RowBox[{"-", "0.5`"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", "\"\<Grayscale Skeleton\>\""}]}], 
        "]"}]}], ";", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"GraphicsRow", "[", 
         RowBox[{"{", 
          RowBox[{"s0", ",", "s1"}], "}"}], "]"}], ",", 
        RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"\"\<Point :{\>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "]"}],
           "<>", "\"\<,\>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "]"}],
           "<>", "\"\<}\>\""}]}]}], "]"}], ";", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"GraphicsRow", "[", 
         RowBox[{"{", 
          RowBox[{"s2", ",", "s3", ",", "s4"}], "}"}], "]"}], ",", 
        RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
       "]"}]}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["displayThicknessStatisticsPerPointSet",
  FontWeight->"Bold"],
 "\nDisplays the thickness statistics graph for a set of points"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "displayThicknessStatisticsPerPointSet", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"displayThicknessStatisticsPerPointSet", "[", 
    RowBox[{
    "points_", ",", " ", "stats_", ",", " ", "types_", ",", "skel_", ",", " ",
      "img_"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Scan", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"displayThicknessStatisticsPerPoint", "[", 
        RowBox[{
        "#", ",", " ", "stats", ",", " ", "types", ",", " ", "skel", ",", " ",
          "img"}], "]"}], ";"}], "&"}], ",", "points"}], "]"}]}], 
  ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["displayThicknessStatistics",
  FontWeight->"Bold"],
 "\nDisplays the thickness statistics for all the points"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "displayThicknessStatistics", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"displayThicknessStatistics", "[", 
   RowBox[{
   "stats_", ",", " ", "types_", ",", " ", "pointsOfInterest_", ",", " ", 
    "skel_", ",", " ", "img_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "image", ",", " ", "points", ",", " ", "lists", ",", " ", "n", ",", " ", 
      "trueList", ",", " ", "newStats"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"image", " ", "=", " ", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newStats", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"stats", ",", " ", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"types", ",", " ", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"points", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"lists", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"points", " ", "=", " ", 
          RowBox[{"Union", "[", 
           RowBox[{"points", ",", " ", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
              "}"}], "}"}]}], "]"}]}], ";"}], "&"}], ",", " ", "newStats"}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"p", ",", " ", "pointData", ",", " ", "list"}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"p", " ", "=", " ", "#"}], ";", "\[IndentingNewLine]", 
            RowBox[{"list", " ", "=", " ", 
             RowBox[{
              RowBox[{"getThicknessListAndGraph", "[", 
               RowBox[{"p", ",", " ", "stats", ",", " ", "types"}], "]"}], 
              "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"lists", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"lists", ",", " ", "list"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"displayThicknessStatisticsPerPoint", "[", 
             RowBox[{
             "p", ",", " ", "stats", ",", " ", "types", ",", " ", "skel", ",",
               "img"}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", " ", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{"pointsOfInterest", ",", " ", "p"}], "]"}], " ", ",", 
              " ", 
              RowBox[{"displayThicknessStatisticsPerPoint", "[", 
               RowBox[{
               "p", ",", " ", "stats", ",", " ", "types", ",", " ", "skel", 
                ",", "img"}], "]"}]}], "]"}]}]}], "]"}], ";"}], "&"}], ",", 
       " ", "\[IndentingNewLine]", "points"}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"lists", " ", "=", " ", 
      RowBox[{"Append", "[", 
       RowBox[{"lists", ",", " ", 
        RowBox[{"{", 
         RowBox[{"PlotJoined", "\[Rule]", "True"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"lists", " ", "=", " ", 
      RowBox[{"Append", "[", 
       RowBox[{"lists", ",", " ", 
        RowBox[{"{", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"350", ",", " ", "350"}], "}"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Apply", "[", 
      RowBox[{"MultipleListPlot", ",", "lists"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["displayStatistics",
  FontWeight->"Bold"],
 "\nDisplays an analysis of the statistics"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "displayStatistics", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"displayStatistics", "[", "stats_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"s1", ",", "s2", ",", "s3", ",", "s4"}], "}"}], ",", 
    RowBox[{
     RowBox[{"s1", "=", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"getTypeDurationGraph", "[", 
         RowBox[{"stats", ",", 
          RowBox[{"{", "1", "}"}]}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", "\"\<Point Duration\>\""}]}], "]"}]}],
      ";", 
     RowBox[{"s2", "=", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"getTypeDurationGraph", "[", 
         RowBox[{"stats", ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3"}], "}"}]}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", "\"\<Curve Duration\>\""}]}], "]"}]}],
      ";", 
     RowBox[{"s3", "=", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"getTypeLengthSummationGraph", "[", 
         RowBox[{"stats", ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3"}], "}"}]}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", "\"\<Curve Length Summation\>\""}]}], 
       "]"}]}], ";", 
     RowBox[{"s4", "=", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"getTypeDurationGraph", "[", 
         RowBox[{"stats", ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "5"}], "}"}]}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", "\"\<Surface Duration\>\""}]}], 
       "]"}]}], ";", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"GraphicsGrid", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"s3", ",", "s4"}], "}"}]}], "}"}], "]"}], ",", 
       RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
      "]"}]}]}], "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Gets the statistics of all the images and stores them in a file\
\>", "Subsubtitle"],

Cell["\<\
Do[Print[i];
  Clear[slice];
  Clear[sliceSize];
  inputs=getInput[i];
  slice=inputs\[LeftDoubleBracket]1\[RightDoubleBracket];
  sliceSize=inputs\[LeftDoubleBracket]2\[RightDoubleBracket];
  Clear[inputs];
  finalResult=makeGraySkeleton[slice,1,255,1,3];
  finalImage=finalResult\[LeftDoubleBracket]1\[RightDoubleBracket];
  finalStats=finalResult\[LeftDoubleBracket]2\[RightDoubleBracket];
  Put[finalImage,rootPath<>\"/results/FinalImage\"<>ToString[i]<>\".nb\"];
  Put[finalStats,rootPath<>\"/results/FinalStats\"<>ToString[i]<>\".nb\"];
  ,{i,1,9}
  ]\
\>", "SmallText"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Loads the statistics from a file", "Subsubtitle"],

Cell["\<\
finalImage = Get[ rootPath<> \"/results/FinalImage3.nb\"];
ListDensityPlot[Map[#/255.0&, finalImage, 1], Mesh\[Rule]False, \
ColorFunctionScaling\[Rule]False, ImageSize\[Rule]{350, 350}];
finalStats = Get[ rootPath<> \"/results/FinalStats3.nb\"];
displayStatistics[finalStats];\
\>", "SmallText"],

Cell["\<\
finalResult=makeGraySkeleton[slice,1,255,50,3];
finalImage=finalResult\[LeftDoubleBracket]1\[RightDoubleBracket];
finalStats=finalResult\[LeftDoubleBracket]2\[RightDoubleBracket];
ListDensityPlot[Map[#/255.0&,finalImage,1],Mesh\[Rule]False,\
ColorFunctionScaling\[Rule]False,ImageSize\[Rule]{350,350}];\
\>", "SmallText"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Misc Tests", "Subsubtitle"],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{28,40},{29,40},{30,40},{31,40}},\
finalStats,{2,3,4},finalImage,slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatistics[finalStats, {2,3,4}, {},finalImage,slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{36,18},{35,18},{30,54},{48,35},{42,20}\
,{38,8}},finalStats,{2,3,4},finalImage,slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{30,52},{30,51},{31,51},{31,50},{31,49}\
},finalStats,{2,3,4},finalImage,slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{45,40}, {34,49},{31,32}}, finalStats, \
{2,3,4}, finalImage,slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{32,34}, {33,34}, {34,34},{35,34}, \
{36,34}, {37,34}},finalStats,{2,3,4},finalImage,slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{10,28},{32,26},{32,27}, {32,28}, \
{32,29},{32,30} },finalStats,{2,3,4},finalImage,slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatistics[finalStats, {2,3,4}, {}, finalImage, slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatisticsPerPoint[{26,37},finalStats,{2,3,4},finalImage,\
slice];\
\>", "SmallText"],

Cell["DEBUG : Input 1, (28,40) , (29,40), (30,40), (31,40)", "SmallText"],

Cell["\<\
peakCount=getPeakCountForImage[finalStats,{2,3,4},finalImage,1];\
\>", "SmallText"],

Cell["peakCount = Get[rootPath<>\"/results/PeakCount1-0.nb\"];", "SmallText"],

Cell["\<\
mpc=Max[peakCount];ListDensityPlot[Map[Map[If[#>0,(mpc-#),0]&,#]&,peakCount], \
Mesh\[Rule]False];\
\>", "SmallText"],

Cell["\<\
filteredImage=Table[0,{x,sliceSize[1,1]-1,sliceSize[1,2]+1},{y,sliceSize[2,1]-\
1,sliceSize[2,2]+1}];
dMap=Flatten[Table[If[(finalImage\[LeftDoubleBracket]x,y\[RightDoubleBracket]>\
0)&&(peakCount\[LeftDoubleBracket]x,y\[RightDoubleBracket]\[Equal]1),{x,y},{}]\
,{x,sliceSize[1,1],sliceSize[1,2]},{y,sliceSize[2,1],sliceSize[2,2]}],1];
dMap=Select[dMap,Length[#]>0&];
Scan[filteredImage\[LeftDoubleBracket]#\[LeftDoubleBracket]1\
\[RightDoubleBracket],#\[LeftDoubleBracket]2\[RightDoubleBracket]\
\[RightDoubleBracket]=finalImage\[LeftDoubleBracket]#\[LeftDoubleBracket]1\
\[RightDoubleBracket],#\[LeftDoubleBracket]2\[RightDoubleBracket]\
\[RightDoubleBracket];&,dMap];
Show[GraphicsArray[{ListDensityPlot[filteredImage/255.0,DisplayFunction\[Rule]\
Identity,Mesh\[Rule]False],ListDensityPlot[slice,DisplayFunction\[Rule]\
Identity,Mesh\[Rule]False],ListDensityPlot[finalImage,DisplayFunction\[Rule]\
Identity,Mesh\[Rule]False]}],DisplayFunction\[Rule]$DisplayFunction];
\
\>", "SmallText"],

Cell["Put[peakCount,rootPath<>\"/results/PeakCount1-1.nb\"];", "SmallText"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ListContourPlot", "::", "\<\"arrayerr\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(slice\\) must be a valid array.\"\>"}]], "Message", \
"MSG",
 CellChangeTimes->{3.39838762915*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ListDensityPlot", "::", "\<\"arrayerr\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(slice\\) must be a valid array.\"\>"}]], "Message", \
"MSG",
 CellChangeTimes->{3.3983876293310003`*^9}]
}, Closed]]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Scratch",
WindowSize->{1057, 1101},
WindowMargins->{{0, Automatic}, {0, Automatic}},
CellLabelAutoDelete->True,
Magnification->1,
FrontEndVersion->"6.0 for Microsoft Windows (32-bit) (April 20, 2007)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[590, 23, 42, 0, 83, "Title"],
Cell[635, 25, 63, 0, 49, "Subtitle"],
Cell[701, 27, 79, 1, 29, "Subsubtitle"],
Cell[783, 30, 395, 9, 52, "Input"],
Cell[1181, 41, 185, 5, 52, "Input"],
Cell[CellGroupData[{
Cell[1391, 50, 130, 4, 48, "Subsubtitle"],
Cell[1524, 56, 1630, 44, 199, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[3191, 105, 124, 4, 48, "Subsubtitle"],
Cell[3318, 111, 1611, 42, 199, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4966, 158, 120, 4, 48, "Subsubtitle"],
Cell[5089, 164, 730, 18, 112, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5856, 187, 448, 8, 257, "Subsubtitle"],
Cell[6307, 197, 8588, 186, 952, "Input"],
Cell[CellGroupData[{
Cell[14920, 387, 1467, 38, 172, "Input"],
Cell[16390, 427, 281618, 4713, 203, 258169, 4328, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[298057, 5146, 197, 5, 48, "Subsubtitle"],
Cell[298257, 5153, 498, 15, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[298792, 5173, 105, 4, 48, "Subsubtitle"],
Cell[298900, 5179, 459, 13, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[299396, 5197, 151, 4, 48, "Subsubtitle"],
Cell[299550, 5203, 2331, 66, 112, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[301918, 5274, 192, 5, 48, "Subsubtitle"],
Cell[302113, 5281, 673, 19, 52, "Input"],
Cell[302789, 5302, 649, 19, 52, "Input"],
Cell[303441, 5323, 1480, 42, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[304958, 5370, 154, 4, 48, "Subsubtitle"],
Cell[305115, 5376, 3532, 78, 552, "Input"],
Cell[308650, 5456, 221, 6, 31, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[308908, 5467, 154, 4, 48, "Subsubtitle"],
Cell[309065, 5473, 3532, 78, 552, "Input"],
Cell[312600, 5553, 221, 6, 31, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[312858, 5564, 151, 4, 48, "Subsubtitle"],
Cell[313012, 5570, 1260, 33, 192, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[314309, 5608, 154, 5, 67, "Subsubtitle"],
Cell[314466, 5615, 3027, 73, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[317530, 5693, 164, 5, 48, "Subsubtitle"],
Cell[317697, 5700, 916, 26, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[318650, 5731, 210, 5, 48, "Subsubtitle"],
Cell[318863, 5738, 1686, 46, 172, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[320586, 5789, 193, 6, 67, "Subsubtitle"],
Cell[320782, 5797, 852, 24, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[321671, 5826, 228, 6, 67, "Subsubtitle"],
Cell[321902, 5834, 1747, 47, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[323686, 5886, 159, 4, 48, "Subsubtitle"],
Cell[323848, 5892, 864, 24, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[324749, 5921, 366, 7, 105, "Subsubtitle"],
Cell[325118, 5930, 1888, 47, 112, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[327043, 5982, 198, 5, 67, "Subsubtitle"],
Cell[327244, 5989, 6502, 166, 252, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[333783, 6160, 171, 4, 48, "Subsubtitle"],
Cell[333957, 6166, 474, 13, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[334468, 6184, 323, 7, 162, "Subsubtitle"],
Cell[334794, 6193, 2334, 55, 332, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[337165, 6253, 149, 4, 48, "Subsubtitle"],
Cell[337317, 6259, 900, 26, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[338254, 6290, 183, 5, 48, "Subsubtitle"],
Cell[338440, 6297, 6347, 152, 452, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[344824, 6454, 279, 6, 67, "Subsubtitle"],
Cell[345106, 6462, 13388, 314, 772, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[358531, 6781, 157, 4, 48, "Subsubtitle"],
Cell[358691, 6787, 16121, 367, 852, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[374849, 7159, 140, 4, 48, "Subsubtitle"],
Cell[374992, 7165, 3442, 90, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[378471, 7260, 173, 5, 48, "Subsubtitle"],
Cell[378647, 7267, 914, 24, 152, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[379598, 7296, 122, 4, 48, "Subsubtitle"],
Cell[379723, 7302, 900, 22, 172, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[380660, 7329, 137, 4, 48, "Subsubtitle"],
Cell[380800, 7335, 862, 22, 172, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[381699, 7362, 136, 4, 48, "Subsubtitle"],
Cell[381838, 7368, 3914, 101, 312, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[385789, 7474, 116, 4, 48, "Subsubtitle"],
Cell[385908, 7480, 2180, 51, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[388125, 7536, 182, 5, 48, "Subsubtitle"],
Cell[388310, 7543, 13292, 318, 1092, "Input"],
Cell[401605, 7863, 26, 0, 31, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[401668, 7868, 145, 4, 48, "Subsubtitle"],
Cell[401816, 7874, 5166, 133, 312, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[407019, 8012, 622, 10, 162, "Subsubtitle"],
Cell[407644, 8024, 16591, 348, 1432, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[424272, 8377, 142, 4, 48, "Subsubtitle"],
Cell[424417, 8383, 2779, 69, 212, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[427233, 8457, 280, 6, 67, "Subsubtitle"],
Cell[427516, 8465, 19114, 442, 1046, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[446667, 8912, 223, 5, 48, "Subsubtitle"],
Cell[446893, 8919, 4017, 103, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[450947, 9027, 44, 0, 49, "Subtitle"],
Cell[450994, 9029, 130, 4, 48, "Subsubtitle"],
Cell[451127, 9035, 2231, 60, 232, "Input"],
Cell[CellGroupData[{
Cell[453383, 9099, 132, 4, 48, "Subsubtitle"],
Cell[453518, 9105, 3099, 79, 232, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[456654, 9189, 113, 4, 48, "Subsubtitle"],
Cell[456770, 9195, 1236, 35, 179, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[458043, 9235, 115, 4, 48, "Subsubtitle"],
Cell[458161, 9241, 1418, 40, 179, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[459616, 9286, 187, 5, 48, "Subsubtitle"],
Cell[459806, 9293, 3038, 81, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[462881, 9379, 187, 5, 48, "Subsubtitle"],
Cell[463071, 9386, 4335, 110, 272, "Input"],
Cell[467409, 9498, 26, 0, 31, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[467472, 9503, 112, 4, 48, "Subsubtitle"],
Cell[467587, 9509, 502, 15, 79, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[468126, 9529, 114, 4, 48, "Subsubtitle"],
Cell[468243, 9535, 520, 16, 79, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[468800, 9556, 138, 4, 48, "Subsubtitle"],
Cell[468941, 9562, 400, 12, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[469378, 9579, 200, 5, 48, "Subsubtitle"],
Cell[469581, 9586, 2639, 64, 212, "Input"],
Cell[472223, 9652, 811, 12, 69, "SmallText"]
}, Open  ]],
Cell[CellGroupData[{
Cell[473071, 9669, 183, 5, 48, "Subsubtitle"],
Cell[473257, 9676, 4610, 109, 252, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[477904, 9790, 167, 4, 48, "Subsubtitle"],
Cell[478074, 9796, 1954, 46, 252, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[480065, 9847, 135, 4, 48, "Subsubtitle"],
Cell[480203, 9853, 3705, 85, 412, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[483945, 9943, 139, 4, 48, "Subsubtitle"],
Cell[484087, 9949, 34165, 771, 1864, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[518301, 10726, 40, 0, 49, "Subtitle"],
Cell[518344, 10728, 133, 4, 48, "Subsubtitle"],
Cell[518480, 10734, 1383, 32, 272, "Input"],
Cell[CellGroupData[{
Cell[519888, 10770, 129, 4, 48, "Subsubtitle"],
Cell[520020, 10776, 1754, 42, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[521811, 10823, 138, 4, 48, "Subsubtitle"],
Cell[521952, 10829, 2204, 54, 252, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[524193, 10888, 115, 4, 48, "Subsubtitle"],
Cell[524311, 10894, 1954, 48, 292, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[526302, 10947, 167, 4, 48, "Subsubtitle"],
Cell[526472, 10953, 1860, 48, 212, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[528369, 11006, 174, 4, 48, "Subsubtitle"],
Cell[528546, 11012, 1980, 50, 212, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[530563, 11067, 148, 4, 48, "Subsubtitle"],
Cell[530714, 11073, 2503, 70, 92, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[533254, 11148, 165, 4, 48, "Subsubtitle"],
Cell[533422, 11154, 3069, 74, 352, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[536528, 11233, 210, 5, 48, "Subsubtitle"],
Cell[536741, 11240, 2801, 79, 132, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[539579, 11324, 160, 4, 48, "Subsubtitle"],
Cell[539742, 11330, 7667, 189, 412, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[547446, 11524, 173, 4, 48, "Subsubtitle"],
Cell[547622, 11530, 663, 18, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[548322, 11553, 155, 4, 48, "Subsubtitle"],
Cell[548480, 11559, 4203, 100, 452, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[552720, 11664, 132, 4, 48, "Subsubtitle"],
Cell[552855, 11670, 1957, 55, 132, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[554849, 11730, 94, 2, 28, "Subsubtitle"],
Cell[554946, 11734, 586, 15, 219, "SmallText"]
}, Open  ]],
Cell[CellGroupData[{
Cell[555569, 11754, 55, 0, 28, "Subsubtitle"],
Cell[555627, 11756, 306, 6, 69, "SmallText"],
Cell[555936, 11764, 331, 6, 69, "SmallText"]
}, Open  ]],
Cell[CellGroupData[{
Cell[556304, 11775, 33, 0, 28, "Subsubtitle"],
Cell[556340, 11777, 140, 3, 28, "SmallText"],
Cell[556483, 11782, 98, 2, 28, "SmallText"],
Cell[556584, 11786, 155, 3, 28, "SmallText"],
Cell[556742, 11791, 148, 3, 28, "SmallText"],
Cell[556893, 11796, 136, 3, 28, "SmallText"],
Cell[557032, 11801, 160, 3, 28, "SmallText"],
Cell[557195, 11806, 159, 3, 28, "SmallText"],
Cell[557357, 11811, 100, 2, 28, "SmallText"],
Cell[557460, 11815, 111, 3, 28, "SmallText"],
Cell[557574, 11820, 73, 0, 28, "SmallText"],
Cell[557650, 11822, 93, 2, 28, "SmallText"],
Cell[557746, 11826, 77, 0, 28, "SmallText"],
Cell[557826, 11828, 127, 3, 28, "SmallText"],
Cell[557956, 11833, 1001, 17, 124, "SmallText"],
Cell[558960, 11852, 75, 0, 28, "SmallText"],
Cell[559038, 11854, 216, 6, 70, "Message"],
Cell[559257, 11862, 222, 6, 70, "Message"]
}, Closed]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
