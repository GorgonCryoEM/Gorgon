(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    551691,      11861]
NotebookOptionsPosition[    541597,      11541]
NotebookOutlinePosition[    542005,      11559]
CellTagsIndexPosition[    541962,      11556]
WindowFrame->Normal
ContainsDynamic->False*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Grayscale Skeletonization", "Title"],

Cell["Connectivity Functions, and Skeletonization", "Subtitle"],

Cell[TextData[StyleBox["Initializations",
 FontWeight->"Bold"]], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "rootPath", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "rootPath", " ", "=", " ", 
   "\"\<C:\\\\_WashU\\\\ssa1\\\\source\\\\GrayscaleSkeleton\\\\\>\""}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.398387709633*^9, 3.398387725028*^9}, {3.398387818031*^9,
   3.398387818158*^9}, {3.3984405071139064`*^9, 3.3984405113014064`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "gaussianRadius", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaussianRadius", " ", "=", " ", "4"}], ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getProteinSlice",
  FontWeight->"Bold"],
 "\nGets a slice from the protein data set"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getProteinSlice", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getProteinSlice", "[", "i_", "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"vol", ",", " ", "maxVal", ",", "minVal"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vol", " ", ":=", " ", 
       RowBox[{"Get", "[", 
        RowBox[{
        "rootPath", " ", "<>", " ", "\"\<data\\\\proteinVolume.nb\>\""}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"maxVal", " ", "=", " ", 
       RowBox[{"Max", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{
         "vol", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], "]"}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"minVal", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{
         "vol", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], "]"}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"Map", "[", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Round", "[", 
           FractionBox[
            RowBox[{
             RowBox[{"(", 
              RowBox[{"#", "-", "minVal"}], ")"}], " ", "*", "255.0"}], 
            RowBox[{"maxVal", "-", "minVal"}]], "]"}], "&"}], ",", " ", 
         RowBox[{
         "vol", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], ",", 
         " ", "1"}], "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getVolume",
  FontWeight->"Bold"],
 "\nGets a slice from the protein data set"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getVolume", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getVolume", "[", 
    RowBox[{
    "fileName_", ",", " ", "xRange_", ",", " ", "yRange_", ",", " ", 
     "zRange_"}], "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"vol", ",", " ", "maxVal", ",", "minVal"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vol", " ", ":=", " ", 
       RowBox[{"Get", "[", 
        RowBox[{
        "rootPath", " ", "<>", " ", "\"\<data\\\\\>\"", " ", "<>", " ", 
         "fileName"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"maxVal", " ", "=", " ", 
       RowBox[{"Max", "[", 
        RowBox[{"Flatten", "[", "vol", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"minVal", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{"Flatten", "[", "vol", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"Take", "[", 
        RowBox[{
         RowBox[{"Map", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Round", "[", 
             FractionBox[
              RowBox[{
               RowBox[{"(", 
                RowBox[{"#", "-", "minVal"}], ")"}], " ", "*", "255.0"}], 
              RowBox[{"maxVal", "-", "minVal"}]], "]"}], "&"}], ",", " ", 
           "vol", ",", " ", "1"}], "]"}], ",", " ", "xRange", ",", " ", 
         "yRange", ",", " ", "zRange"}], "]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getImage",
  FontWeight->"Bold"],
 "\nGets a slice from a grayscale image"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getImage", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getImage", "[", "imgName_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "picture", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"picture", "=", 
       RowBox[{"Import", "[", 
        RowBox[{
        "rootPath", " ", "<>", " ", "\"\<\\\\data\\\\\>\"", " ", "<>", " ", 
         "imgName"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"picture", "\[LeftDoubleBracket]", 
        RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getInput",
  FontWeight->"Bold"],
 "\nGets the input \n\t1: Protein Sliced at 32\n\t2: Protein Sliced at 20\n\t\
3: Random.gif\n\t4: Blobs.gif\n\t5: Dragon.gif\n\t6: Letters.gif\n\t7: \
Rings.gif\n\t8: XWithGraySpots.gif\n\t9: Vessel\nAlso defines sliceSize which \
is a hash map of the pixels that span the image... The rest of the pixels \
make up a blank boundary which simplifies the calculations."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getInput", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getInput", "[", "i_", "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", " ", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"inputImage", ",", " ", "sliceSize"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Switch", "[", 
       RowBox[{"i", ",", "\[IndentingNewLine]", "1", ",", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Protein32.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "2", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Protein40.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "3", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Random.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "4", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Blobs.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "5", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Dragon.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "6", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Letters.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "7", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Rings.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "8", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<XWithGraySpots.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "9", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<vessel_1.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "10", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Basin.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "11", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Basin2.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "101", ",", " ", 
        RowBox[{"inputImage", " ", "=", "  ", 
         RowBox[{
         "getImage", "[", "\"\<Protein32-surfaceRemoved.gif\>\"", "]"}]}], 
        ",", "\[IndentingNewLine]", "102", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<Protein40-surfaceRemoved.gif\>\"", "]"}]}], 
        ",", "\[IndentingNewLine]", "103", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<Random-surfaceRemoved.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "104", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Blobs-surfaceRemoved.gif\>\"", "]"}]}],
         ",", "\[IndentingNewLine]", "105", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<Dragon-surfaceRemoved.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "106", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<Letters-surfaceRemoved.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "107", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Rings-surfaceRemoved.gif\>\"", "]"}]}],
         ",", "\[IndentingNewLine]", "108", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<XWithGraySpots-surfaceRemoved.gif\>\"", 
          "]"}]}], ",", "\[IndentingNewLine]", "109", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<vessel_1-surfaceRemoved.gif\>\"", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"1", ",", "1"}], "]"}], " ", "=", " ", "1"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"2", ",", "1"}], "]"}], " ", "=", " ", "1"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"1", ",", "2"}], "]"}], " ", "=", " ", 
       RowBox[{
        RowBox[{"Dimensions", "[", "inputImage", "]"}], 
        "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"2", ",", "2"}], "]"}], " ", "=", " ", 
       RowBox[{
        RowBox[{"Dimensions", "[", "inputImage", "]"}], 
        "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"inputImage", " ", "=", " ", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"x", " ", ">=", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"1", ",", "1"}], "]"}]}], " ", ")"}], "&&", 
            RowBox[{"(", " ", 
             RowBox[{"x", " ", "<=", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"1", ",", "2"}], "]"}]}], " ", ")"}], " ", "&&", " ", 
            RowBox[{"(", 
             RowBox[{"y", " ", ">=", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"2", ",", "1"}], "]"}]}], ")"}], " ", "&&", " ", 
            RowBox[{"(", 
             RowBox[{"y", " ", "<=", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"2", ",", "2"}], "]"}]}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"inputImage", "\[LeftDoubleBracket]", 
            RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], ",", 
           "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"x", ",", " ", 
           RowBox[{"1", "-", "gaussianRadius"}], ",", " ", 
           RowBox[{
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}], "+", "gaussianRadius"}]}], "}"}],
          ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"y", ",", " ", 
           RowBox[{"1", "-", "gaussianRadius"}], ",", " ", 
           RowBox[{
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}], "+", "gaussianRadius"}]}], 
          "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]",
       
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"1", ",", "1"}], "]"}], " ", "=", " ", 
       RowBox[{"gaussianRadius", "+", "1"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"2", ",", "1"}], "]"}], " ", "=", " ", 
       RowBox[{"gaussianRadius", "+", "1"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"1", ",", "2"}], "]"}], " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Dimensions", "[", "inputImage", "]"}], 
         "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
        "gaussianRadius"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"2", ",", "2"}], "]"}], " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Dimensions", "[", "inputImage", "]"}], 
         "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "-", 
        "gaussianRadius"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"inputImage", ",", " ", "sliceSize"}], "}"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "slice", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", "sliceSize", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"inputs", "=", 
   RowBox[{"getInput", "[", "10", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"slice", "=", 
   RowBox[{"inputs", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{"sliceSize", "=", 
   RowBox[{"inputs", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
   ";"}], "\n", 
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"GraphicsRow", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListContourPlot", "[", 
       RowBox[{"slice", ",", 
        RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
        RowBox[{"Contours", "\[Rule]", "10"}]}], "]"}], ",", 
      RowBox[{"ListDensityPlot", "[", 
       RowBox[{"slice", ",", 
        RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
        RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], "}"}], 
    "]"}], ",", 
   RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
  "]"}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", "inputs", "]"}], ";"}]}], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJzM3V2o5dm63/WFsKFIESy0iGVSYGVRlMvK6tVrvr/P+Z/v66X2yzniTRKN
JKjJjQcPrQkbggOlUTl0CF5UukEhlh0vWiutCGrZoZ0NZSMEpanYXlh2QDDd
lIqEss/NvrKr1nqeyfy4532tm8m3np7P/vH85nj2+L+MMf7kn/+93/2X/pGD
g4Ojf/rg4M3n1d8/nOx+HlS7fAO+Bd+G78B34XvwIXwffgAfwQ/hY/gEPoVr
cB1uwE24BbfhDtyFe3AfHsBDeASP4Qlc7XKBD6bE4YMZcfhgThw+WBCHD5bE
4YMVcfhgTRw+OCMOH5wThw8uiMMHl8Thg0fE4YOfE4cPfkEcPvglcfjgV7tc
wQXewAe/w/fhAm/gg9+F7Tt+3oBvwbfhO/Bd+B58CN+HH8BH8EP4GD6BT+Ea
XIcbcBNuwW24A3fhHtyHB/AQHsFjeAJXu1zg7D8Rh7P/RBzO/hNxOPtPxOHs
PxGHs/9EHM7+E3E4+0/E4ew/EYez/0Qczv4TcTj7T8Th7D8Rh7P/RBzO/hNx
OPvPNVdwgTdw9p/4PlzgDZz9Z988x77j5y34NnwHvgvfgw/h+/AD+Ah+CB/D
J/ApXIPrcANuwi24DXfgLtyD+/AAHsIjeAxP4GqXC5z9J+Jw9p+Iw9l/Ig5n
/4k4nP0n4nD2n4jD2X8iDmf/iTic/SficPafiMPZfyIOZ/+JOJz9J+Jw9p+I
w9l/Ig5n/7nmCi7wBs7+E9+HC7yBs//su65ynmPf8fM2fAe+C9+DD+H78AP4
CH4IH8Mn8Clcg+twA27CLbgNd+Au3IP78AAewiN4DE/gapcLnP0n4nD2n4jD
2X8iDmf/iTic/SficPafiMPZfyIOZ/+JOJz9J+Jw9p+Iw9l/Ig5n/4k4nP0n
4nD2n4jD2X8iDmf/ueYKLvAGzv4T34cLvIGz/+y7j+N1lfMc+46fd+C78D34
EL4PP4CP4IfwMXwCn8I1uA434CbcgttwB+7CPbgPD+AhPILH8ASudrnA2X8i
Dmf/iTic/SficPafiMPZfyIOZ/+JOJz9J+Jw9p+Iw9l/Ig5n/4k4nP0n4nD2
n4jD2X8iDmf/iTic/SficPafa67gAm/g7D/xfbjAGzj7z777xt7H8brKeY59
x8+78D34EL4PP4CP4IfwMXwCn8I1uA434CbcgttwB+7CPbgPD+AhPILH8ASu
drnA2X8iDmf/iTic/SficPafiMPZfyIOZ/+JOJz9J+Jw9p+Iw9l/Ig5n/4k4
nP0n4nD2n4jD2X8iDmf/iTic/SficPafa67gAm/g7D/xfbjAGzj7z77nVN43
9j6O11XOc+w7ft6DD+H78AP4CH4IH8Mn8Clcg+twA27CLbgNd+Au3IP78AAe
wiN4DE/gapcLnP0n4nD2n4jD2X8iDmf/iTic/SficPafiMPZfyIOZ/+JOJz9
J+Jw9p+Iw9l/Ig5n/4k4nP0n4nD2n4jD2X8iDmf/ueYKLvAGzv4T34cLvIGz
/+x7Lu5zKu8bex/H6yrnOfYdPw/h+/AD+Ah+CB/DJ/ApXIPrcANuwi24DXfg
LtyD+/AAHsIjeAxP4GqXC5z9J+Jw9p+Iw9l/Ig5n/4k4nP0n4nD2n4jD2X8i
Dmf/iTic/SficPafiMPZfyIOZ/+JOJz9J+Jw9p+Iw9l/Ig5n/7nmCi7wBs7+
E9+HC7yBs/8E+x5O9J9gn1N539j7OF5XOc+x7/h5H34AH8EP4WP4BD6Fa3Ad
bsBNuAW34Q7chXtwHx7AQ3gEj+EJXO1ygbP/RBzO/hNxOPtPxOHsPxGHs/9E
HM7+E3E4+0/E4ew/EYez/0Qczv4TcTj7T8Th7D8Rh7P/RBzO/hNxOPtPxOHs
P9dcwQXewNl/4vtwgTdw9p9g3/uL/uNzcJ9LeZ/Y+zZeRzmvsc/c3/P5AD6C
H8LH8Al8CtfgOtyAm3ALbsMduAv34D48gIfwCB7DE7ja5QJn/4k4nP0n4nD2
n4jD2X8iDmf/iTic/SficPafiMPZfyIOZ/+JOJz9J+Jw9p+Iw9l/Ig5n/4k4
nP0n4nD2n4jD2X+uuYILvIGz/8T34QJv4Ow/+94zjv7jezc+B/e5lPeJvW/j
dZTzGvvMgz2fR/BD+Bg+gU/hGlyHG3ATbsFtuAN34R7chwfwEB7BY3gCV7tc
4Ow/EYez/0Qczv4TcTj7T8Th7D8Rh7P/RBzO/hNxOPtPxOHsPxGHs/9EHM7+
E3E4+0/E4ew/EYez/0Qczv4TcTj7zzVXcIE3cPaf+D5c4A2c/WffuoboP77n
53s3Pgf3uZT3ib1v43WU8xr7zNGez4fwMXwCn8I1uA434CbcgttwB+7CPbgP
D+AhPILH8ASudrnA2X8iDmf/iTic/SficPafiMPZfyIOZ/+JOJz9J+Jw9p+I
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
w9l/Ig5n/4k4nP0n4nD2n4jD2X8iDmf/iTic/SficPafiMPZfyIOZ/+55gou
8AbO/hPfhwu8gbP/BHsOVfQfz2Vwn3T3LXYfUff1c58t971xHwrXhbtO03VT
rmPwvWLf8/O9G5+D+1zK+8Tet/E6ynmNfaa357MPD+AhPILH8ASudrnA2X8i
Dmf/iTic/SficPafiMPZfyIOZ/+JOJz9J+Jw9p+Iw9l/Ig5n/4k4nP0n4nD2
n4jD2X8iDmf/iTic/SficPafa67gAm/g7D/xfbjAGzj7z75z76L/eA6M5zK4
T7r7FruPqPv6uc+W+964D4Xrwl2n6bop1zH4XrHv+fnejc/BfS7lfWLv23gd
5bzGPtPf8zmAh/AIHsMTuNrlAmf/iTic/SficPafiMPZfyIOZ/+JOJz9J+Jw
9p+Iw9l/Ig5n/4k4nP0n4nD2n4jD2X8iDmf/iTic/SficPafiMPZf665ggu8
gbP/xPfhAm/g7D/7ztmM/uO5U54D47kM7pPuvsXuI+q+fu6z5b437kPhunDX
abpuynUMvlfse36+d+NzcJ9LeZ/Y+zZeRzmvsc8M9nwO4RE8hidwtcsFzv4T
cTj7T8Th7D8Rh7P/RBzO/hNxOPtPxOHsPxGHs/9EHM7+E3E4+0/E4ew/EYez
/0Qczv4TcTj7T8Th7D8Rh7P/XHMFF3gDZ/+J78MF3sDZf/ad6xv9x3PuPHfK
c2A8l8F90t232H1E3dfPfbbc98Z9KFwX7jpN1025jsH3in3Pz/dufA7ucynv
E3vfxuso5zX2meGezxE8hidwtcsFzv4TcTj7T8Th7D8Rh7P/RBzO/hNxOPtP
xOHsPxGHs/9EHM7+E3E4+0/E4ew/EYez/0Qczv4TcTj7T8Th7D8Rh7P/XHMF
F3gDZ/+J78MF3sDZf4I9Rzz6j+dqes6d5055DoznMrhPuvsWu4+o+/q5z5b7
3rgPhevCXafpuinXMfhese/5+d6Nz8F9LuV9Yu/beB3lvMY+M9rzOYYncLXL
Bc7+E3E4+0/E4ew/EYez/0Qczv4TcTj7T8Th7D8Rh7P/RBzO/hNxOPtPxOHs
PxGHs/9EHM7+E3E4+0/E4ew/EYez/1xzBRd4A2f/ie/DBd7A2X+Co/94brjn
+Hqupufcee6U58B4LoP7pLtvsfuIuq+f+2y57437ULgu3HWarptyHYPvFfue
n+/d+Bzc51LeJ/a+jddRzmvsM+M9nxO42uUCZ/+JOJz9J+Jw9p+Iw9l/Ig5n
/4k4nP0n4nD2n4jD2X8iDmf/iTic/SficPafiMPZfyIOZ/+JOJz9J+Jw9p+I
w9l/rrmCC7yBs//E9+ECb+DsP8HRf+J3Gv3Hc8M9x9dzNT3nznOnPAfGcxnc
J919i91H1H393GfLfW/ch8J14a7TdN2U6xh8r9j3/HzvxufgPpfyPrH3bbyO
cl5jn5ns+ax2ucDZfyIOZ/+JOJz9J+Jw9p+Iw9l/Ig5n/4k4nP0n4nD2n4jD
2X8iDmf/iTic/SficPafiMPZfyIOZ/+JOJz9J+Jw9p9rruACb+DsP/F9uMAb
OPtPcPSf+B1G/wm+Ad+Cb8N34LvwPfgQ9pwG9013H2P3FXWfP/fdOoXdl8J1
4q7bdB2V6xp8z9j3/nwPx+fiPqfyvrH3cbyucp5j3+Gz+O9T4nD2n4jD2X8i
Dmf/iTic/SficPafiMPZfyIOZ/+JOJz9J+Jw9p+Iw9l/Ig5n/4k4nP0n4nD2
n4jD2X8iDmf/ueYKLvAGzv4T34cLvIGz/wRf95/8HV73n+Qb8C34NnwHvgvf
gw9hz4XxnAb3TXcfY/cVdZ+/U9h9cNyXwnXirtt0HZXrGnzP2Pf+fA/H5+I+
p/K+sfdxvK5ynkPf8TP6T/47HP0n43D0n4zD0X8yDkf/yTgc/SfjcPSfjMPR
fzIOR//JOBz9J+Nw9J+Mw9F/Mg5H/8k4HP0n43D0n4zD0X+CK7jAGzj6T34f
LvAGjv6THPOf+P+56/6TfAO+Bd+G78B34XvwIew5VJ4L4zkN7pvuPsbuK3oK
u++W++C4L4XrxF236Toq1zX4nrHv/fkejs/FfU7lfWPv43hdtafPZJzP4r/P
iMM5/4k4nPOfiMM5/4k4nPOfiMM5/4k4nPOfiMM5/4k4nPOfiMM5/4k4nPOf
iMM5/4k4nPOfiMM5/4k4nPOfa67gAm/gnP/E9+ECb+Cc/wTH/If+k3wDvgXf
hu/Ad+F78CHsuXeeQ3UEe06D+6a7j/Ep7D5/7rvlPjjuS+E6cddtuo7KdQ2+
Z+x7f76H43Nxn1N539j7OHvmNfaZsucz5z/0n4zPicM5/6H/ZHxJHM75D/0n
42vicM5/6D8ZPycO5/yH/pPxS+Jwzn/oPxn/OXE45z/0n4z/kjic8x/6T/73
8AbO+Q/9J78Pb+Cc/9B/8v/XYv4TfAO+Bd+G78B34XvwIew5m557dwR7Lozn
NLhv+ilcg93nz3233AfHfSlcJ+66TddRua7B94x978/3cHwu7nMq7xvvuY5y
XmOfyTifxX+fE4dz/hNxOOc/EYdz/hNxOOc/EYdz/hNxOOc/EYdz/hNxOOc/
EYdz/hNxOOc/EYdz/hNxOOc/EYdz/nPNFVzgDZzzn/g+XOANnPOf4Jj/BMf8
J/gGfAu+Dd+B78L34EPYc309Z/MI9hwqz4XxnIZTuAa7r6j7/LnvlvvguC+F
68Rdt+k6Ktc1+J6x7/35Ho7PxX1OVe2y93G8rnKeY9/xM+c/8e9wzn8iDuf8
J+Jwzn8iDuf8J+Jwzn8iDuf8J+Jwzn8iDuf8J+Jwzn8iDuf8J+Jwzn8iDuf8
J+Jwzn+uuYILvIFz/hPfhwu8gXP+Exzzn/j/qev+k3wDvgXfhu/Ad+F78CHs
OeKe63sEe+6d51B5LswpXIPdx9h9Rd3nz3233AfHfSlcJ+66TddRua7B94x9
78/3cHwuXu2y9429j+N1lfMc+46fxX9fEIdz/hNxOOc/EYdz/hNxOOc/EYdz
/hNxOOc/EYdz/hNxOOc/EYdz/hNxOOc/EYdz/hNxOOc/11zBBd7AOf+J78MF
3sA5/wmO+Q/9J/kGfAu+Dd+B78L34EP4Puw54kew52x67p3nUJ3CNdh9093H
2H1F3efPfbfcB8d9KVwn7rpN11G5rsH3jH3vz/dwql32OZX3jb2P43WV8xz7
jp85/6H/ZHxJHM75D/0n42vicM5/6D8ZPycO5/yH/pPxS+Jwzn/oPxn/OXE4
5z/0n4z/kjic8x/6T/738AbO+Q/9J78Pb+Cc/9B/8v+XYv4TfAO+Bd+G78B3
4XvwIXwffgAfwZ7r6zmbnnt3Ctdgz2lw33T3MXZfUff5c98t98FxXwrXibtu
03VUrmvwPWPf+6t22efiPqfyvrH3cbyucp5j3/Gz+O9L4nDOfyIO5/wn4nDO
fyIO5/wn4nDOfyIO5/wn4nDOfyIO5/wn4nDOfyIO5/wn4nDOf665ggu8gXP+
E9+HC7yBc/4THPMf+k/yDfgWfBu+A9+F78GH8H34AXwEe4645/p6zuYpXIM9
F8ZzGtw33X2M3VfUff7cd8t9cNyXwnXirtt0HZXrGnzPuNpl38PxubjPqXL+
s+c+jtdVznPsO37m/If+k/EVcTjnP/SfjJ8Rh3P+Q//J+AVxOOc/9J+MPyIO
5/yH/pPxXxCHc/5D/8n4r3a5ggu8gXP+Q//J78MbOOc/9J/8/52Y/wTfgG/B
t+E78F34HnwI34cfwEfwQ9hzxD3X9xSuwZ5D5bkwntPgvunuY+y+ou7z575b
7oPjvhSuE3fdpuuoXNdQ7bLv/fkejs/Fc/7jfWHv03jd5DzGvrL87Z/Ff18R
h3P+E3E45z8Rh3P+E3E45z8Rh3P+E3E45z8Rh3P+E3E45z8Rh3P+E3E45z/X
XMEF3sA5/4nvwwXewDn/CY75D/0n+QZ8C74N34HvwvfgQ/g+/AA+gh/Cx7Dn
iJ/CNdhz7zyHynNhPKfBfdPdx9h9Rd3nz3233AfHfSlcJ+66TddRVbvse8a+
9+d7ODn/2fOcyvvG3sfxusp5jn3Hz5z/0H8yviYO5/yH/pPxc+Jwzn/oPxm/
JA7n/If+k/GfE4dz/kP/yfgvicM5/6H/5H8Pb+Cc/9B/8vvwBs75D/0n/38l
5j/BN+Bb8G34DnwXvgcfwvfhB/AR/BA+hk/gU7gGe86m5955DpXnwnhOg/um
u4+x+4q6z5/7brkPjvtSuE7cdZvVLruuwfeMfe8v5z8+9/Y5lPeFvU/jdZPz
GPvK6rd/Fv99TRzO+U/E4Zz/RBzO+U/E4Zz/RBzO+U/E4Zz/RBzO+U/E4Zz/
RBzO+c81V3CBN3DOf+L7cIE3cM5/gmP+Q/9JvgHfgm/Dd+C78D34EL4PP4CP
4IfwMXwCn8I12HN9PWfTc+88h8pzYTynwX3T3cfYfUXd5899t9wHx30pXCde
7bLrqFzX4HvGOf+h//gc3OdS3if2vo3XUc5r7DNlz2fOf+g/GT8jDuf8h/6T
8QvicM5/6D8Zf0QczvkP/SfjvyAO5/yH/pPxX+1yBRd4A+f8h/6T34c3cM5/
6D/5/xsx/wm+Ad+Cb8N34LvwPfgQvg8/gI/gh/AxfAKfwjXYc8Q919dzNj33
znOoPBfGcxrcN919jN1X1H3+3HfLfXDcl6LaZddtuo7KdQ05//G9Pt+z8bm3
z6G8L+x9Gq+bnMfYV9a//bP472fE4Zz/RBzO+U/E4Zz/RBzO+U/E4Zz/RBzO
+U/E4Zz/RBzO+c81V3CBN3DOf+L7cIE3cM5/gmP+Q/9JvgHfgm/Dd+C78D34
EL4PP4CP4IfwMXwCn8I1uA57jrjn+nrOpufeeQ6V58J4ToP7pruPsfuKus+f
+265D061y64Td92m66hy/rPnPWPf+/M9HJ+L+5zK+8bex/G6ynmOfcfPnP/Q
fzJ+ThzO+Q/9J+OXxOGc/9B/Mv5z4nDOf+g/Gf8lcTjnP/Sf/O/hDZzzH/pP
fh/ewDn/of/k/y/E/Cf4BnwLvg3fge/C9+BD+D78AD6CH8LH8Al8CtfgOtyA
PUfcc309Z9Nz7zyHynNhPKfBfdPdx9h9Rd3nz323ql12XwrXibtuM+c/rlvw
PWLf6/M9G597+xzK+8Lep/G6yXmMfeXst38W//2cOJzzn4jDOf+JOJzzn4jD
Of+JOJzzn4jDOf+JOJzzn2uu4AJv4Jz/xPfhAm/gnP8Ex/yH/pN8A74F34bv
wHfhe/AhfB9+AB/BD+Fj+AQ+hWtwHW7ATdhzxD3X13M2PffOc6g8F8ZzGtw3
3X2M3VfUff6qXXYfHPelcJ14zn/oPxnf816x7/n53o3PwX0u5X1i79t4HeW8
xj5T9nzm/If+k/EL4nDOf+g/GX9EHM75D/0n478gDuf8h/6T8V/tcgUXeAPn
/If+k9+HN3DOf+g/2fdj/hN8A74F34bvwHfhe/AhfB9+AB/BD+Fj+AQ+hWtw
HW7ATbgFe4645/p6zqbn3nkOlefCeE6D+6a7j7H7ila77L5b7oPjvhQ5/3Fd
puukXLfge8S+1+d7Nj739jmU94W9T+N1k/MY+8r5b/8s/vsFcTjnPxGHc/4T
cTjnPxGHc/4TcTjnPxGHc/5zzRVc4A2c85/4PlzgDZzzn+CY/9B/km/At+Db
8B34LnwPPoTvww/gI/ghfAyfwKdwDa7DDbgJt+A27DninuvrOZuee+c5VJ4L
4zkN7pvuPsbVLrvPn/tuuQ9Ozn/oPxnfs24q43veK874nvdufA7ucynvE3vf
xuso5zX2mbLnM+c/9J+MXxKHc/5D/8n4z4nDOf+h/2T8l8ThnP/Qf/K/hzdw
zn/oP/l9eAPn/If+k3095j/BN+Bb8G34DnwXvgcfwvfhB/AR/BA+hk/gU7gG
1+EG3IRbcBvuwJ4j7rm+nrPpuXeeQ+W5MJ7T4L7p1S67r6j7/LnvVs5/3HfC
deCuy3SdlOsWfI/Y9/p8z8bn3j6H8r6w92m8bnIeY1+5+O2fxX+/JA7n/Cfi
cM5/Ig7n/CficM5/Ig7n/OeaK7jAGzjnP/F9uMAbOOc/wTH/of8k34Bvwbfh
O/Bd+B58CN+HH8BH8EP4GD6BT+EaXIcbcBNuwW24A3dhzxH3XF/P2fTcO8+h
8lwYz2modtl9jHP+Q//J+Iw47L4UrhN33abrqFzX4HvGvvfnezg+F/c5lfeN
vY/jdZXzHPuOnzn/of9k/BFxOOc/9J+M/4I4nPMf+k/Gf7XLFVzgDZzzH/pP
fh/ewDn/of9k3475T/AN+BZ8G74D34XvwYfwffgBfAQ/hI/hE/gUrsF1uAE3
4RbchjtwF+7BniPuub6es+m5d55D5bkw1S67b3rOf9w31H383FfLfW7cd8J1
4K7LdJ2U6xZ8j9j3+nzPxufePofyvrD3abxuch5jX7n87Z/Ff39EHM75T8Th
nP9EHM75T8ThnP9ccwUXeAPn/Ce+Dxd4A+f8JzjmP/Sf5BvwLfg2fAe+C9+D
D+H78AP4CH4IH8Mn8Clcg+twA27CLbgNd+Au3IP7sOeIe66v52x67p3nUFW7
7DkNOf+h/2R8Rhx23y33wXFfCteJu27TdVSua/A9Y9/78z0cn4v7nMr7xt7H
8brKeY59x8+c/9B/Mv5z4nDOf+g/Gf8lcTjnP/Sf/O/hDZzzH/pPfh/ewDn/
of9kX475T/AN+BZ8G74D34XvwYfwffgBfAQ/hI/hE/gUrsF1uAE34Rbchjtw
F+7BfXgAe4645/p6zqbn3lW77LkwOf9xX3T3KXbfUPfxc18t97lx3wnXgbsu
03VSrlvwPWLf6/M9G597+xzK+8Lep/G6yXmMfeXRb/8s/vvPicM5/4k4nPOf
iMM5/7nmCi7wBs75T3wfLvAGzvlPcMx/6D/JN+Bb8G34DnwXvgcfwvfhB/AR
/BA+hk/gU7gG1+EG3IRbcBvuwF24B/fhATyEPUfcc309Z7PaZc+hyvkP/Sfj
M+Kw+4q6z5/7brkPjvtSuE7cdZuuo3Jdg+8Z+96f7+H4XNznVN439j6O11XO
c+w7fub8h/6T8V8Qh3P+Q//J+K92uYILvIFz/kP/ye/DGzjnP/Sf7Lsx/wm+
Ad+Cb8N34LvwPfgQvg8/gI/gh/AxfAKfwjW4DjfgJtyC23AH7sI9uA8P4CE8
gj1H3HN9q1323Luc/3jui+cwuC+6+xS7b6j7+LmvlvvcuO+E68Bdl+k6Kdct
+B6x7/X5no3PvX0O5X1h79N43eQ8xr7y89/+Wfz3XxCHc/4TcTjnP9dcwQXe
wDn/ie/DBd7AOf8JjvkP/Sf5BnwLvg3fge/C9+BD+D78AD6CH8LH8Al8Ctfg
OtyAm3ALbsMduAv34D48gIfwCB7DniNe7bLnbOb8h/6T8Rlx2H3T3cfYfUXd
5899t9wHx30pXCfuuk3XUbmuwfeMfe/P93B8Lu5zKu8bex/H6yrnOfYdP3P+
Q//J+C+Jwzn/of/kfw9v4Jz/0H/y+/AGzvkP/Sf7asx/gm/At+Db8B34LnwP
PoTvww/gI/ghfAyfwKdwDa7DDbgJt+A23IG7cA/uwwN4CI/gMTyBq132XN+c
/3iunedMee6L5zC4L7r7FLtvqPv4ua+W+9y474TrwF2X6Top1y34HrHv9fme
jc+9fQ7lfWHv03jd5DzGvvKL3/5Z/PdfEodz/nPNFVzgDZzzn/g+XOANnPOf
4Jj/0H+Sb8C34NvwHfgufA8+hO/DD+Aj+CF8DJ/Ap3ANrsMNuAm34Dbcgbtw
D+7DA3gIj+AxPIGrXfYc8Zz/0H8yPiMO5/yH/pPxPfsWZ3zPvn4Z37PvTcb3
rAvP+J51Uxnf815xxve8d5PxPc+lMr7nvk3G98xr7DNlz2fOf+g/Gf/VLldw
gTdwzn/oP/l9eAPn/If+k30z5j/BN+Bb8G34DnwXvgcfwvfhB/AR/BA+hk/g
U7gG1+EG3IRbcBvuwF24B/fhATyER/AYnsDVLhc45z+e2+s5mp5r5zlTnvvi
OQzui+4+xe4b6j5+7qvlPjfuO+E6cNdluk7KdQu+R+x7fb5n43Nvn0N5X9j7
NF43OY+xr/zyt38W//1Xu1zBBd7AOf+J78MF3sA5/wmO+Q/9J/kGfAu+Dd+B
78L34EP4PvwAPoIfwsfwCXwK1+A63ICbcAtuwx24C/fgPjyAh/AIHsMTuNrl
Auf8h/6T8RlxOOc/9J+M7zmXIeN79i3O+J59/TK+Z9+bjO9ZF57xPeumMr7n
veKM73nvJuN7nktlfM99m4zvmdfYZ8qez5z/0H/yv4M3cM5/6D/5fXgD5/yH
/pN9MeY/wTfgW/Bt+A58F74HH8L34QfwEfwQPoZP4FO4BtfhBtyEW3Ab7sBd
uAf34QE8hEfwGJ7A1S4XOOc/EYdz/hNxOOc/EYc9h8pzYTynwX3T3cfYfUXd
5899t9wHx30pXCfuuk3XUbmuwfeMfe/P93B8Lu5zKu8bex/H6yrnOfYdPyu4
wBu/9zu7XMEF3sA5/wm+7j+p4wBdN+Bb8G34DnwXvgcfwvfhB/AR/BA+hk/g
U7gG1+EG3IRbcBvuwF24B/fhATyER/AYnsDVLhc4+k/G4eg/GYej/2QcznPr
6D8Z33MuQ8b37Fuc8T37+mV8z743Gd+zLjzje9ZNZXzPe8UZ3/PeTcb3PJfK
+J77NhnfM6+xz1R7Pgu8gaP/5PfgAm/g6D/Jcf1F/0m+Ad+Cb8N34LvwPfgQ
vg8/gI/gh/AxfAKfwjW4DjfgJtyC23AH7sI9uA8P4CE8gsfwBK52ucB5/UX/
yfiMOJzXX/SfjO855y7je86ByfiefdIzvmcf0Yzv2Wcr43v2ocj4nnWaGd+z
jiHje97zy/ie5+AZ33OfOON7rqMyvqfPlD2fGzivv+g/+T14A+f1F/0n/nei
/yTfgG/Bt+E78F34HnwI34cfwEfwQ/gYPoFP4RpchxtwE27BbbgDd+Ee3IcH
8BAewWN4Ale7XODoPxmHo/9kHI7+k3E4z+Wl/2R8z7lTGd9zLkPG9+xbnPE9
+/plfM++Nxnfsy4843vWTWV8z3vFGd/z3k3G9zyXyvie+zYZp69UsH3Hz+g/
+X24wBs4+k9y3P+J67S4/xN8A74F34bvwHfhe/AhfB9+AB/BD+Fj+AQ+hWtw
HW7ATbgFt+EO3IV7cB8ewEN4BI/hCVztcoHz/k/E4bz/E3E47/9EHM77PxGH
PWfTc+88h8pzYTynwX3T3cfYfUXd5899t9wHx30pXCfuuk3XUbmuwfeMfe/P
93B8Lu5zKu8bH9BHKth5jn3Hzwou8Mbv/S4c93/oP8k34FvwbfgOfBe+Bx/C
9+EH8BH8ED6GT+BTuAbX4QbchFtwG+7AXbgH9+EBPIRH8BiewNUuFzjv/9B/
Mj4jDuf9H/pPxvecG57xPedqZnzPuVMZ33MuQ8b37Fuc8T37+mV8z743Gd+z
Ljzje9ZNZXzPe8UZ3/PeTcb3PJfKOPOWCva6ynmOfcfPAm/gvP9D/8m+Ffd/
6D/Jt+Db8B34LnwPPoTvww/gI/ghfAyfwKdwDa7DDbgJt+A23IG7cA/uwwN4
CI/gMTyBq10ucN7/of9kfEYczvs/9J+ML4jDef+H/pPxPefcZXzPOTAZ37NP
esb37COa8T37bGV8zz4UGd+zTjPje9YxZHzPe34Z3/McPONcJ1Ww93G8ror+
Y58pez43cN7/of/Ef5f3f+g/ybfg2/Ad+C58Dz6E78MP4CP4IXwMn8CncA2u
ww24CbfgNtyBu3AP7sMDeAiP4DE8gatdLnDe/6H/ZHxGHM77P/SfjC+Iw3n/
h/6T8T3namZ8z7lTGd9zLkPG9+xbnPE9+/plfM++Nxnfsy4843vWTWV8z3vF
Gd/z3k3GuS9Twd439j5O9J/8/p4+s9nzmfd/6D95XXaw+9/l/Z/gW/Bt+A58
F74HH8L34QfwEfwQPoZP4FO4BtfhBtyEW3Ab7sBduAf34QE8hEfwGJ7A1S4X
OO//RBzO+z8Rh/P+T8ThvP8TcTjv/0Qc9hxxz/X1nE3PvfMcKs+F8ZwG9013
H2P3FXWfP/fdch8c96VwnbjrNl1H5boG3zP2vb8D7gNXsM+pvG98QB+pYOc5
9p3/3+dxdfz272Hyn377t+V/9+3flv+rt39b/j/e/m35H/vH3/z9qeRq+uZv
y//q77352/J/+PZvy3/37d+femd1BV99nqDzBJ0n6DxB5wk6T9B5gs4TdJ6g
8wSdp+g7Rd8p+k7Rd4q+U/Sdou8UfafoO0VfDX019NXQV0NfDX019NXQV0Nf
DX019NXRV0dfHX119NXRV0dfHX119NXRV0dfA30N9DXQ10BfA30N9DXQ10Bf
A30N9DXR10RfE31N9DXR10RfE31N9DXR10RfC30t9LXQ10JfC30t9LXQ10Jf
C30t9LXR10ZfG31t9LXR10ZfG31t9LXR10ZfB30d9HXQ10FfB30d9HXQ10Ff
B30d9HXR10VfF31d9HXR10VfF31d9HXR10VfD3099PXQ10NfD3099PXQ10Nf
D3099PXR10dfH3199PXR10dfH3199PXR10ffAH0D9A3QN0DfAH0D9A3QN0Df
AH0D9A3RN0TfEH1D9A3RN0TfEH1D9A3RN0TfCH0j9I3QN0LfCH0j9I3QN0Lf
CH0j9I3RN0bfGH1j9I3RN0bfGH1j9I3RN0bfBH0T9E3QN0HfBH0T9E3QN0Hf
BH0T9FXoq9BXoa9CX4W+Cn0V+ir0VeirdvUV9BX0FfQV9BX0FfQV9BX0FfQV
9P10Pb5bvyn1m1K/KfWbUr8p9ZtSvyn1m1K/KfVDX0FfQV9BX0FfQV9BX0Ff
QV9B38GM+s2o34z6zajfjPrNqN+M+s2o34z6zagf+gr6CvoK+gr6CvoK+gr6
CvoK+g7m1G9O/ebUb0795tRvTv3m1G9O/ebUb0790FfQV9BX0FfQV9BX0FfQ
V9BX0HewoH4L6regfgvqt6B+C+q3oH4L6regfgvqh76CvoK+gr6CvoK+gr6C
voK+gr6DJfVbUr8l9VtSvyX1W1K/JfVbUr8l9VtSP/QV9BX0FfQV9BX0FfQV
9BX0FfQdrKjfivqtqN+K+q2o34r6rajfivqtqN+K+qGvoK+gr6CvoK+gr6Cv
oK+gr6DvYE391tRvTf3W1G9N/dbUb0391tRvTf3W1A99BX0FfQV9BX0FfQV9
BX0FfQV9B2fU74z6nVG/M+p3Rv3OqN8Z9TujfmfU74z6oa+gr6CvoK+gr6Cv
oK+gr6CvoO/gnPqdU79z6ndO/c6p3zn1O6d+59TvnPqdUz/0FfQV9BX0FfQV
9BX0FfQV9BX0HVxQvwvqd0H9LqjfBfW7oH4X1O+C+l1Qvwvqh76CvoK+gr6C
voK+gr6CvoK+gr6DS+p3Sf0uqd8l9bukfpfU75L6XVK/S+p3Sf3QV9BX0FfQ
V9BX0FfQV9BX0FfQd/CI+j2ifo+o3yPq94j6PaJ+j6jfI+r3iPo9on7oK+gr
6CvoK+gr6CvoK+gr6CtbfX/445u/7bkaf+nN36st//3v3vxt+Xff/L3Y8tdv
/7Y8ePP3xZb/88/f/G35/pu/T7f88du/Lf/RN38fbXnX13ftudsJ9TuhfifU
74T6nVC/E+p3Qv1OqN8J9Tuhfj63fNeeC55Sv1Pqd0r9TqnfKfU7pX6n1O+U
+p1Sv1Pq53PVd+25ZY361ahfjfrVqF+N+tWoX4361ahfjfrVqJ/Pfd+156p1
6lenfnXqV6d+depXp3516lenfnXqV6d+Ppd+1577Nqhfg/o1qF+D+jWoX4P6
Nahfg/o1qF+D+vnc/F17Lt2kfk3q16R+TerXpH5N6tekfk3q16R+Ternc/13
7bl5vBfYrP7qX/zP/tGP/rCZ/F/+x3/sT/6b/+OWX/39Uv/X/taW/6k//n/N
/8Jf3fI/9/Zvy3/w1/+7f3n9XuSN9xNb13m3fJV3y1d5t3yVd8tXebccn7v6
W+hvob+F/hb6W6n/itvkb5O/Tf42+dvkb5O/Q/4O+Tvk75C/Q/4O+bvk75K/
S/4u+bvk75K/R/4e+Xvk75G/R/4e+fvk75O/T/4++fvk75N/QP4B+QfkH5B/
QP4B+YfkH5J/SP4h+YfkH5J/RP4R+UfkH5F/RP4R+cfkH5N/TP4x+cfkH5N/
Qv4J+Sfkn5B/Qv4J+SvyV+SvyF+RvyJ/tZu/kL+Qv5C/kL+Qv5D/YIr+Kfqn
6J+if4r+KfrJX8hfyF/IX8hfyH8wQ/8M/TP0z9A/Q/8M/eQv5C/kL+Qv5C/k
P5ijf47+Ofrn6J+jf45+8hfyF/IX8hfyF/IfLNC/QP8C/Qv0L9C/QD/5C/kL
+Qv5C/kL+Q+W6F+if4n+JfqX6F+in/yF/IX8hfyF/IX8Byv0r9C/Qv8K/Sv0
r9BP/kL+Qv5C/kL+Qv6DNfrX6F+jf43+NfrX6Cd/IX8hfyF/IX8h/8EZ+s/Q
f4b+M/Sfof8M/eQv5C/kL+Qv5C/kPzhH/zn6z9F/jv5z9J9n/q/+7j/zV3o/
i/UjrerB3/7g96p/cstX/92W/+Hv/5F/4RfTLV/l3fJ/2/mbj/7sX9ry7vVZ
i+uzFtdnLa7PWlyftbg+a3F91uL6rMX1WYvrM99rftfeG25z/dTm+qnN9VOb
66c2109trp/a+N/G/zb+t/G/jf9t/G/jfxv/2/jfxv82/rfxv43/bfxv438b
/31v/F17L7uD/x387+B/B/87+N/B/w7+d/C/g/8d/O/gfwf/O/jfwf8O/nfw
v4P/Hfzv4H8H/zv438F/38t/19577+J/F/+7+N/F/y7+d/G/i/9d/O/ifxf/
u/jfxf8u/nfxv4v/Xfzv4n8X/7v438X/Lv538d91D+/auoIe/vfwv4f/Pfzv
4X8P/3v438P/Hv738L+H/z387+F/D/97+N/D/x7+9/C/h/89/O/hfw//XVfy
rq3b6ON/H//7+N/H/z7+9/G/j/99/O/jfx//+/jfx/8+/vfxv4//ffzv438f
//v438f/Pv738d91O+/aupgB/g/wf4D/A/wf4P8A/wf4P8D/Af4P8H+A/wP8
H+D/AP8H+D/A/wH+D/B/gP8D/B/g/wD/XRf1rq07GuL/EP+H+D/E/yH+D/F/
iP9D/B/i/xD/h/g/xP8h/g/xf4j/Q/wf4v8Q/4f4P8T/If4P8d91Z+/auq4R
/o/wf4T/I/wf4f8I/0f4P8L/Ef6P8H+E/yP8H+H/CP9H+D/C/xH+j/B/hP8j
/B/h/wj/Xdf3rq2bG+P/GP/H+D/G/zH+j/F/jP9j/B/j/xj/x/g/xv8x/o/x
f4z/Y/wf4/8Y/8f4P8b/Mf6P8d91k+/ausQJ/k/wf4L/E/yf4P8E/yf4P8H/
Cf5P8H+C/xP8n+D/BP8n+D/B/wn+T/B/gv8T/J/g/wT/XZf6jq37zOeWjeRd
/yv8r/C/wv8K/yv8r/C/wv8K/yv8r/C/wv8K/yv8r/C/wv8K/yv8r/C/wv8K
/9/xdbUF/wv+F/wv+F/wv+B/wf+C/wX/C/4X/C/4X/C/4H/B/4L/Bf8L/hf8
L/hf8L/gv+uq37V1y/ncv5G8O/6njP8p43/K+J8y/qeM/ynjf8r4nzL+p4z/
KeN/yvifMv6njP8p43/K+J8y/qeM/ynjf8r4nzL+3/F14QX/C/4X/C/4X/C/
4H/B/4L/Bf8L/hf8L/hf8L/gf8H/gv8F/wv+F/wv+F/wv+C/+wK8a+vu872Z
RvLu+J8x/meM/xnjf8b4nzH+Z4z/GeN/xvifMf5njP8Z43/G+J8x/meM/xnj
f8b4nzH+Z4z/GeN/xvh/x/c1KPhf8L/gf8H/gv8F/wv+F/wv+F/wv+B/wf+C
/wX/C/4X/C/4X/C/4H/B/4L/Bf/d1+Jd2zci3ztrJO+O/znjf874nzP+54z/
OeN/zvifM/7njP8543/O+J8z/ueM/znjf874nzP+54z/OeN/zvifM/7njP93
fF+Ogv8F/wv+F/wv+F/wv+B/wf+C/wX/C/4X/C/4X/C/4H/B/4L/Bf8L/hf8
L/hf8N99Wd61fU/yvc1G8u74XzD+F4z/BeN/wfhfMP4XjP8F43/B+F8w/heM
/wXjf8H4XzD+F4z/BeN/wfhfMP4XjP8F43/B+H/H95Up+F/wv+B/wf+C/wX/
C/4X/C/4X/C/4H/B/4L/Bf8L/hf8L/hf8L/gf8H/gv8F/91X6F3btyffe24k
747/JeN/yfhfMv6XjP8l43/J+F8y/peM/yXjf8n4XzL+l4z/JeN/yfhfMv6X
jP8l43/J+F8y/peM/3d8X6SC/wX/C/4X/C/4X/C/4H/B/4L/Bf8L/hf8L/hf
8L/gf8H/gv8F/wv+F/wv+F/w332x3rV9p3LdQCN5d/yvGP8rxv+K8b9i/K8Y
/yvG/4rxv2L8rxj/K8b/ivG/YvyvGP8rxv+K8b9i/K8Y/yvG/4rxv2L8v+P7
ehX8L/hf8L/gf8H/gv8F/wv+F/wv+F/wv+B/wf+C/wX/C/4X/C/4X/C/4H/B
/4L/7uv2ru2blutuGsm743/N+F8z/teM/zXjf834XzP+14z/NeN/zfhfM/7X
jP8143/N+F8z/teM/zXjf834XzP+14z/NeP/Hd+XruB/wf+C/wX/C/4X/C/4
X/C/4H/B/4L/Bf8L/hf8L/hf8L/gf8H/gv8F/wv+F/x3X8J3bd+/PAfoep3W
h+vktz59suW3Pj3d8lufvtryW5u+3fJbn14Ft8jfIn+L/C3yt8jfIn+b/G3y
t8nfJn+b/G3yd8jfIX+H/B3yd8jfIX+X/F3yd8nfJX+X/F3y98jfI3+P/D3y
98jfI3+f/H3y98nfJ3+f/H3yD8g/IP+A/APyD8g/IP+Q/EPyD8k/JP+Q/EPy
j8g/Iv+I/CPyj8g/Iv+Y/GPyj8k/Jv+Y/GPyT8g/If+E/BPyT8g/IX9F/or8
Ffkr8lfkr3bzF/IX8hfyF/IX8hfyx3sOH255V/8U/VP0T9E/RT/5C/kL+Qv5
C/kL+eM57Ydb3tU/Q/8M/TP0z9BP/kL+Qv5C/kL+Qv54zvThlnf1z9E/R/8c
/XP0k7+Qv5C/kL+Qv5A/7pN/uOVd/Qv0L9C/QP8C/eQv5C/kL+Qv5C/kj/t8
H255V/8S/Uv0L9G/RD/5C/kL+Qv5C/kL+eM+xYdb3tW/Qv8K/Sv0r9BP/kL+
Qv5C/kL+Qv64zvpwy7v61+hfo3+N/jX6yV/IX8hfyF/IX8j/0zx0V/8Z+s/Q
f4b+M/SfoZ/8hfyF/IX8hfyF/Afn6D9H/zn6z9F/jv7zzL97fXvG9e0Z17dn
XN+ecX17xvXtGde3Z1zfnnF9e8b17Tu+b/hPvHt9SP0K9SvUr1C/Qv0K9SvU
r1C/Qv3cd/1d29f8J979/Z3z+zvn93fO7++c3985v79zfn/n/P7O+f2d8/t7
x/ddL9SvUL9C/Qr1K9SvUL9C/Qr1K9SvUD/3rX/X9oX/iXd/fxf8/i74/V3w
+7vg93fB7++C398Fv78Lfn8X/P7e8X3rC/Ur1K9Qv0L9CvUr1K9Qv0L9CvUr
1M99/9+1ffV/4t3f3yW/v0t+f5f8/i75/V3y+7vk93fJ7++S398lv793fN//
Qv0K9SvUr1C/Qv0K9SvUr1C/Qv0K9fPchHftXIKfePf394jf3yN+f4/4/T3i
9/eI398jfn+P+P094vf3iN9ffB5f6fxgy291/qUtv9X5z2/5rc7f3fJbmast
v9U52PJbne9v+a3O+1t+K/POlt/q/KPBJ+g7Qd8J+k7Qd4K+E/SdoO8EfSfo
O0HfKfpO0XeKvlP0naLvFH2n6DtF3yn6TtFXQ18NfTX01dBXQ18NfTX01dBX
Q18NfXX01dFXR18dfXX01dFXR18dfXX01dHXQF8DfQ30NdDXQF8DfQ30NdDX
QF8DfU30NdHXRF8TfU30NdHXRF8TfU30NdHXQl8LfS30tdDXQl8LfS30tdDX
Ql8LfW30tdHXRl8bfW30tdHXRl8bfW30tdHXQV8HfR30ddDXQV8HfR30ddDX
QV8HfV30ddHXRV8XfV30ddHXRV8XfV30ddHXQ18PfT309dDXQ18PfT309dDX
Q18PfX309dHXR18ffX309dHXR18ffX309dE3QN8AfQP0DdA3QN8AfQP0DdA3
QN8AfUP0DdE3RN8QfUP0DdE3RN8QfUP0DdE3Qt8IfSP0jdA3Qt8IfSP0jdA3
Qt8IfWP0jdE3Rt8YfWP0jdE3Rt8YfWP0jdE3Qd8EfRP0TdA3Qd8EfRP0TdA3
Qd8EfRX6KvRV6KvQV6GvQl+Fvgp9FfqqXX0FfQV9BX0FfQV9BX0FfQV9BX0F
fbEO/IMt79ZvSv2m1G9K/abUb0r9ptRvSv2m1A99BX0FfQV9BX0FfQV9BX0F
fQV9sY72gy3v1m9G/WbUb0b9ZtRvRv1m1G9G/WbUD30FfQV9BX0FfQV9BX0F
fQV9BX2xDvGDLe/Wb0795tRvTv3m1G9O/ebUb0795tQPfQV9BX0FfQV9BX0F
fQV9BX0FfbGO64Mt79ZvQf0W1G9B/RbUb0H9FtRvQf0W1A99BX0FfQV9BX0F
fQV9BX0FfQV9sQ7mgy3v1m9J/ZbUb0n9ltRvSf2W1G9J/ZbUD30FfQV9BX0F
fQV9BX0FfQV9BX2xjuCDLe/Wb0X9VtRvRf1W1G9F/VbUb0X9VtQPfQV9BX0F
fQV9BX0FfQV9BX0FffEe9gdb3q3fmvqtqd+a+q2p35r6ranfmvqtqR/6CvoK
+gr6CvoK+gr6CvoK+gr6Ds6o3xn1O6N+Z9TvjPqdUb8z6ndG/c6o3xn1Q19B
X0FfQV9BX0FfQV9BX0FfQV88p/5gy7v1O6d+59TvnPqdU79z6ndO/c6p3zn1
Q19BX0FfQV9BX0FfQV9BX0FfQV88Z/1gy7v1u6B+F9TvgvpdUL8L6ndB/S6o
3wX1Q19BX0FfQV9BX0FfQV9BX0FfQV88J/xgy7v1u6R+l9TvkvpdUr9L6ndJ
/S6p3yX1Q19BX0FfQV9BX0FfQV9BX0FfQV885/pgy7v1e0T9HlG/R9TvEfV7
RP0eUb9H1O8R9UNfQV9BX0FfQV9BX0FfQV9BX9nqi+eX8RnPL+Mznl/GZzy/
jM94fhmf8fwyPuP5ZXzG88v4jOeX8RnPL+PzStcx+o7Rd4y+Y/Qdo+899L2H
vvfQ9x763kPfCfpO0HeCvhP0naDvffS9j7730fc++t5PfX/s7d/2nOv33v5t
zwlfvP3bnhP+Z97+bc8J//23f9tzwv+9t3/bc8L/5tu/7Tnh//Xbv+054f/T
27/tOeH/4O3fKfpq6Kuhr4a+Gvpq6Kuhr4a+Gvpq6Kuhr46+Ovrq6Kujr46+
Ovrq6Kujr46+Ovoa6Gugr4G+Bvoa6Gugr4G+Bvoa6Gugr4m+Jvqa6Guir4m+
Jvqa6Guir4m+Jvpa6Guhr4W+Fvpa6Guhr4W+Fvpa6Guhr42+Nvra6Gujr42+
Nvra6Gujr42+Nvo66Ougr4O+Dvo66Ougr4O+Dvo66Ougr4u+Lvq66Ouir4u+
Lvq66Ouir4u+Lvp66Ouhr4e+Hvp66Ouhr4e+Hvp66Ouhr4++Pvr66Oujr4++
Pvr66Oujr4++PvoG6Bugb4C+AfoG6Bugb4C+AfoG6Bugb4i+IfqG6Buib4i+
IfqG6Buib4i+IfpG6Buhb4S+EfpG6Buhb4S+EfpG6Buhb4y+MfrG6Bujb4y+
MfrG6Bujb4y+Mfom6Jugb4K+Cfom6Jugb4K+Cfom6Nvu03/z7d92H+m/8fin
vz+23Uf88O3fdh/xv/30p7/3tvuI93tv/rb7iP/3z3/6W2z3Ef/V27/tPuL/
28uf/v7Mdh/xv/ivvPnb7iP+/77+6e/3q119f4C+x+h7gr6n6HuGvufo+wZ9
L9H3A/peo+/mlPpNqd+U+k2p35T6TanflPpNqd+U+k2pH/oeo+8J+p6i7xn6
nqPvG/S9RN8P6HuNvpsz6jejfjPqN6N+M+o3o34z6jejfjPqN6N+6HuMvifo
e4q+Z+h7jr5v0PcSfT+g7zX6bs6p35z6zanfnPrNqd+c+s2p35z6zanfnPqh
7zH6nqDvKfqeoe85+r5B30v0/YC+1+i7uaB+C+q3oH4L6regfgvqt6B+C+q3
oH4L6oe+x+h7gr6n6HuGvufo+wZ9L9H3A/peo+/mkvotqd+S+i2p35L6Lanf
kvotqd+S+i2pH/oeo+8J+p6i7xn6nqPvG/S9RN8P6HuNvpsr6reifivqt6J+
K+q3on4r6reifivqt6J+6HuMvifoe4q+Z+h7jr5v0PcSfT+g7zX6bq6p35r6
ranfmvqtqd+a+q2p35r6ranfmvqh7zH6nqDvKfqeoe85+r5B30v0/YC+1+i7
eUb9zqjfGfU7o35n1O+M+p1RvzPqd0b9zqgf+h6j7wn6nqLvGfqeo+8b9L1E
3w/oe42+m+fU75z6nVO/c+p3Tv3Oqd859TunfufU75z6oe8x+p6g7yn6nqHv
Ofq+Qd9L9P2Avtfou3lB/S6o3wX1u6B+F9TvgvpdUL8L6ndB/S6oH/oeo+8J
+p6i7xn6nqPvG/S9RN8P6HuNvpuX1O+S+l1Sv0vqd0n9LqnfJfW7pH6X1O+S
+qHvMfqeoO8p+p6h7zn6vkHfS/T9gL7X6Lv5iPo9on6PqN8j6veI+j2ifo+o
3yPq94j6bdfpha6rz+1zravP7XOtq8/tc62rz+1zravPY56/bZ9rxXOu3edv
2+daV5/b51pXn+/l+sH/+e+9+Xsv1w/+J3/rzd97uX7wr/zlN3/v5frBi/M3
f+/l+sG7f+LN33u5fvD/+b/f/B3n+sHNl2/+jnP94L//19/8Hef6wb/w59/8
Hef6wVbzzd8x9TuhfifU74T6nVC/E+r3PvV7n/q9T/3ep37vU7/3qd/71O99
6vc+9Xuf+p1QvxPqd0L9Tqjf9rllPCeM+sVzwqhfPCeM+sVzwqhfPCeM+sVz
wqhfPCeM+sVzwqhfPCeM+sVzwqjf//nqzd9p1u/vvXjzd5r1+ztfvPk7zfr9
rU/f/J1m/f7aR2/+TrN+f/nfePN3mvX7F//cm7/TrN/52Zu/06xfvfbm7zTr
9yf++Ju/U+pXo3416lejfjXqV6N+NepXo3416lejfjXqV6N+NepXo3416lej
fjXqV6N+NepXo3416lenfnXqV6d+depXp3516lenfnXqV6d+depXp3516len
fnXqV6d+depXp3516lenfnXq16B+DerXoH4N6tegfg3q16B+DerXoH4N6teg
fg3q16B+DerXoH4N6tegfg3q16B+DerXpH5N6tekfk3q16R+TerXpH5N6tek
fs3cX/fqs5n76159NnN/3avPZu6ve/XZzP11rz6bub/u1Wcz8+7mb5K/Sf4m
+Zvkb5K/Rf4W+Vvkb5G/Rf4W+dvkb5O/Tf42+dvkb5O/Q/4O+Tvk75C/Q/4O
+bvk75K/S/4u+bvk75K/R/4e+Xvk75G/R/4e+fvk75O/T/4++fvk75N/QP4B
+QfkH5B/QP4B+YfkH5J/SP4h+YfkH5J/RP4R+UfkH5F/RP4R+cfkH5N/TP4x
+cfkH5N/Qv4J+Sfkn5B/Qv5J5p80/5d/5+tfV5n/f/2dN5Eq8//rv1d98t/8
bpX5b330h//RfzGuMv9/+tlPfw+rzL/6H/7cT1+tdvP/hvzfk/8F+b8k/2fk
f0z+X0/RP0X/FP1T9E/RP0U/+b8n/wvyf0n+z8j/mPy/nqF/hv4Z+mfon6F/
hn7yf0/+F+T/kvyfkf8x+X89R/8c/XP0z9E/R/8c/eT/nvwvyP8l+T8j/2Py
/3qB/gX6F+hfoH+B/gX6yf89+V+Q/0vyf0b+x+T/9RL9S/Qv0b9E/xL9S/ST
/3vyvyD/l+T/jPyPyf/rFfpX6F+hf4X+FfpX6Cf/9+R/Qf4vyf8Z+R+T/9dr
9K/Rv0b/Gv1r9K/RT/7vyf+C/F+S/zPyPyb/r8/Qf4b+M/Sfof8M/WfoJ//3
5H9B/i/J/xn5H2/z717fNLm+aXJ90+T6psn1TZPrmybXN02ub5pc3zS5vmly
fdPi+qbF9U2L65sW1zctrm9aXN+0uL5pcX3T4vomrgvi+iauC+L6Jq4L4vom
rgvi+iauC+L6Jq4L4vqmleeH/Nt/45/9h7//R1p5fsjP/+ybjPHfn1f/xE//
a3/tT7fy/JD//R/c/jv/wb8V+c+vfwetPD/k6nfTwv8W/rfwv4X/Lfxv4X8L
/1v438L/Fv638L+N/238b+N/G//b+N/G/zb+t/G/jf9t/G/jfxv/2/jfxv82
/rfxv43/bfxv438b/9v438b/Nv638b+N/238b+N/G//b+N/G/zb+t/G/g/8d
/O/gfwf/O/jfwf8O/nfwv4P/Hfzv4H8H/zv438H/Dv538L+D/x387+B/B/87
+N/B/w7+d/C/g/8d/O/gfwf/O/jfwf8O/nfwv4v/Xfzv4n8X/7v438X/Lv53
8b+L/1387+J/F/+7+N/F/y7+d/G/i/9d/O/ifxf/u/jfxf8u/nfxv4v/Xfzv
4n8X/7v438X/Lv538b+H/z387+F/D/97+N/D/x7+9/C/h/89/O/hfw//e/jf
w/8e/vfwv4f/Pfzv4X8P/3v438P/Hv738L+H/z387+F/D/97+N/D/x7+9/C/
j/99/O/jfx//+/jfx/8+/vfxv4//ffzv438f//v438f/Pv738b+P/3387+N/
H//7+N/H/z7+9/G/j/99/O/jfx//+/jfx/8+/vfxf4D/A/wf4P8A/wf4P8D/
Af4P8H+A/wP8H+D/AP8H+D/A/wH+D/B/gP8D/B/g/wD/B/g/wP8B/g/wf4D/
A/wf4P8A/wf4P8D/Af4P8H+I/0P8H+L/EP+H+D/E/yH+D/F/iP9D/B/i/xD/
h/g/xP8h/g/xf4j/Q/wf4v8Q/4f4P8T/If4P8X+I/0P8H+L/EP+H+D/E/yH+
D/F/hP8j/B/h/wj/R/g/wv8R/o/wf4T/I/wf4f8I/0f4P8L/Ef6P8H+E/yP8
H+H/CP9H+D/C/xH+j/B/hP8j/B/h/wj/R/g/wv8R/o/wf4z/Y/wf4/8Y/8f4
P8b/Mf6P8X+M/2P8H+P/GP/H+D/G/zH+j/F/jP9j/B/j/xj/x/g/xv8x/o/x
f4z/Y/wf4/8Y/8f4P8b/Mf6P8X+C/xP8n+D/BP8n+D/B/wn+T/B/gv8T/J/g
/wT/J/g/wf8J/k/wf4L/E/yf4P8E/yf4P8H/Cf5P8H+C/xP8n+D/BP8n+D/B
/wn+b9elxjrQ8D/WgYb/sQ40/I91oOF/rAMN/2MdaPgf60DD/1gHGv7HOtDw
P9aBhv/xHDj8j+fA4X88Bw7/4zlw+B/PgcP/eA4c/l99Vun/1WeV/l99Vun/
1WeV/l99Vun/1WeV/l/t71Ol/1f7+1Tp/9X+PlX6f7W/T5X+X+3vU6X/V/v7
VOn/1f4+Vfp/tb9Plf5f7e9Tpf9X+/tUu/7/Af4/xv8n+P8U/5/h/3P8/wb/
X+L/D/j/Gv9/g//f4/8L/P8S/z/D/8f4/yH+f4L/T/H/K/z/Fv9f4f+P+P8K
/7/D/xf4/zX+f4H/n+P/p/j/Mf5/hP83p4z/KeN/yvifMv6njP8p43/K+J8y
/qeM/ynjf8r4nzL+p4z/KeN/yvifMv6njP8p43/K+J8y/qeM/ynjf8r4nzL+
p4z/KeN/yvifMv6njP8p43/K+J8y/vH/Mf4/wf+n+P8M/5/j/zf4/xL/f8D/
1/j/G/z/Hv9f4P+X+P8Z/j/G/w/x/xP8f4r/X+H/t/j/Cv9/xP9X+P8d/r/A
/6/x/wv8/xz/P8X/j/H/I/y/OWP8zxj/M8b/jPE/Y/zPGP8zxv+M8T9j/M8Y
/zPG/4zxP2P8zxj/M8b/jPE/Y/zPGP8zxv+M8T9j/M8Y/zPG/4zxP2P8zxj/
M8b/jPE/Y/zPGP8zxv+M8Y//j/H/Cf4/xf9n+P8c/7/B/5f4/wP+v8b/3+D/
9/j/Av+/xP/P8P8x/n+I/5/g/1P8/wr/v8X/V/j/I/6/wv/v8P8F/n+N/1/g
/+f4/yn+f4z/H+H/zTnjf874nzP+54z/OeN/zvifM/7njP8543/O+J8z/ueM
/znjf874nzP+54z/OeN/zvifM/7njP8543/O+J8z/ueM/znjf874nzP+54z/
OeN/zvifM/7njH/8f4z/T/D/Kf4/w//n+P8N/r/E/x/w/zX+/wb/v8f/F/j/
Jf5/hv+P8f9D/P8E/5/i/1f4/y3+v8L/H/H/Ff5/h/8v8P9r/P8C/z/H/0/x
/2P8/wj/by4Y/wvG/4Lxv2D8Lxj/C8b/gvG/YPwvGP8Lxv+C8b9g/C8Y/wvG
/4Lxv2D8Lxj/C8b/gvG/YPwvGP8Lxv+C8b9g/C8Y/wvG/4Lxv2D8Lxj/C8b/
gvG/YPzj/2P8f4L/T/H/Gf4/x/9v8P8l/v+A/6/x/zf4/z3+v8D/L/H/M/x/
jP8f4v8n+P8U/7/C/2/x/xX+/4j/r/D/O/x/gf9f4/8X+P85/n+K/x/j/0f4
f3PJ+F8y/peM/yXjf8n4XzL+l4z/JeN/yfhfMv6XjP8l43/J+F8y/peM/yXj
f8n4XzL+l4z/JeN/yfhfMv6XjP8l43/J+F8y/peM/yXjf8n4XzL+l4z/JeMf
/x/j/xP8f4r/z/D/Of5/g/8v8f8H/H+N/7/B/+/x/wX+f4n/n+H/Y/z/EP8/
wf+n+P8V/n+L/6/w/0f8f4X/3+H/C/z/Gv+/wP/P8f9T/P8Y/z/C/5srxv+K
8b9i/K8Y/yvG/4rxv2L8rxj/K8b/ivG/YvyvGP8rxv+K8b9i/K8Y/yvG/4rx
v2L8rxj/K8b/ivG/YvyvGP8rxv+K8b9i/K8Y/yvG/4rxv2L8rxj/+P8Y/5/g
/1P8f4b/z/H/G/x/if8/4P9r/P8N/n+P/y/w/0v8/wz/H+P/h/j/Cf4/xf+v
8P9b/H+F/z/i/yv8/w7/X+D/1/j/Bf5/jv+f4v/H+P8R/t9cM/7XjP8143/N
+F8z/teM/zXjf834XzP+14z/NeN/zfhfM/7XjP8143/N+F8z/teM/zXjf834
XzP+14z/NeN/zfhfM/7XjP8143/N+F8z/teM/zXjf834x//H+P8E/5/i/zP8
f47/3+D/S/z/Af9fr6+fyzevx+f6+rl883p8rq+fy1+vG/5Jz9Vz+eb1+Fxf
j/vrdcbfrq/7RPN6fK5z3c9u/hb5W+Rvkb9F/hb52+Rvk79N/jb52+Rvk79D
/g75O+TvkL9D/g75u+Tvkr9L/i75u+Tvkr9H/h75e+Tvkb9H/h75++Tvk79P
/j75++Tvk39A/gH5B+QfkH9A/gH5h+Qfkn9I/iH5h+Qfkn9E/hH5R+QfkX9E
/hH5x+Qfk39M/jH5x+Qfk39C/gn5J+SfkH9C/knmj/dCIn+8FxL5472QyB/v
hUT+q/9fqDJ/vBeyk/9D8n9C/qfk/4r835L/Ffl/NkX/FP1T9E/RP0X/FP3k
/4T8T8n/Ffm/Jf8r8v9shv4Z+mfon6F/hv4Z+sn/Cfmfkv8r8n9L/lfk/9kc
/XP0z9E/R/8c/XP0k/8T8j8l/1fk/5b8r8j/swX6F+hfoH+B/gX6F+gn/yfk
f0r+r8j/Lflfkf9nS/Qv0b9E/xL9S/Qv0U/+T8j/lPxfkf9b8r8i/89W6F+h
f4X+FfpX6F+hn/yfkP8p+b8i/7fkf0X+n63Rv0b/Gv1r9K/Rv0Y/+T8h/1Py
f0X+b8n/ivw/O0P/GfrP0H+G/jP0n6Gf/J+Q/yn5vyL/t+R/Rf68vuX65hOu
b55yffMV1zffcn3ziuubH7m+ecX1zXdc37zg+uZrrm++4Prmc65vPuX65mOu
bz7i+ubmGde3Z1zfnnF9e8b17RnXt2dc355xfXvG9e0Z17dnXB+ecX14xvXh
GdeHZ1wfnnF9eMb14RnXh2dcH55xfXjG9SH1e0z9nlC/p9TvGfV7Tv2+oX4v
qd8P1O819fuR+r2ift9RvxfU72vq9wX1+5z6fUr9PqZ+H1G/m+f8/s75/Z3z
+zvn93fO7++c3985v79zfn/n/P7O+f2d8/s75/d3zu/vnN/fOb+/c35/5/z+
zvn9nfP7O+f3R/0eU78n1O8p9XtG/Z5Tv2+o30vq9wP1e039fqR+r6jfd9Tv
BfX7mvp9Qf0+p36fUr+Pqd9H1O/mBb+/C35/F/z+Lvj9XfD7u+D3d8Hv74Lf
3wW/vwt+fxf8/i74/V3w+7vg93fB7++C398Fv78Lfn8X/P4u+P1Rv8fU7wn1
e0r9nlG/59TvG+r3kvr9QP1eU78fqd8r6vcd9XtB/b6mfl9Qv8+p36fU72Pq
9xH1u3nJ7++S398lv79Lfn+X/P4u+f1d8vu75Pd3ye/vkt/fJb+/S35/l/z+
Lvn9XfL7u+T3d8nv75Lf3yW/v0t+f9TvMfV7Qv2eUr9n1O859fuG+r2kfj9Q
v9fU70fq94r6fUf9XlC/r6nfF9Tvc+r3KfX7mPp9dJn70sf52rEv/ZW/233p
43zt2Jf+yt/tvvRX/m73pb/yd7svfZyvHfvSX/m73Zf+yt/tvvRX/m73fd/V
9z763kff++h7H30n6DtB3wn6TtB3kvpiX/XQF/uqh77YVz30xb7qoS/2VQ99
sa966It91UNf7Kse+mJf9dAX+6rv6quhr4a+Gvpq6Kuhr4a+Gvpq6Kuhr4a+
Ovrq6Kujr46+Ovrq6Kujr46+Ovrq6Gugr4G+Bvoa6Gugr4G+Bvoa6Gugr/H/
dW3vRogCAAAFm1I+oqj8BcuhDXIKIKcAcgogpwDyK+ACR29uO9h5+cN3wnfC
d8J3wnfCd8J3wnfCd8J3wnfGd8Z3xnfGd8Z3xnfGd8Z3xnfGF+AL8AX4AnwB
vgBfgC/AF+AL8IX4QnwhvhBfiC/EF+IL8YX4QnwRvghfhC/CF+GL8EX4InwR
vghfjC/GF+OL8cX4YnwxvhhfjC/Gd8F3wXfBd8F3wXfBd8F3wXfBd8GX4Evw
JfgSfAm+BF+CL8GX4EvwXfFd8V3xXfFd8V3xXfFd8V3xXfHd8N3w3fDd8N3w
3fDd8N3w3fDd8KX4UnwpvhRfii/Fl+JL8aX4Unx3fHd8d3x3fHd8d3x3fHd8
d3z3n+/7rX99H9fj5/t+61/fx/X4+T6ux8/3cT1+vu+3/vV9XI+f7+N6/Hwf
1+N/3x98B74d34Zvxbfgm/FN+EZ8A77+Sb8n/Z70e9LvSb8n/Z70e9LvSb8n
/fAd+HZ8G74V34JvxjfhG/EN+PqMfhn9Mvpl9Mvol9Evo19Gv4x+Gf3wHfh2
fBu+Fd+Cb8Y34RvxDfj6nH45/XL65fTL6ZfTL6dfTr+cfjn98B34dnwbvhXf
gm/GN+Eb8Q34+oJ+Bf0K+hX0K+hX0K+gX0G/gn4F/fAd+HZ8G74V34Jvxjfh
G/EN+PqSfiX9SvqV9CvpV9KvpF9Jv5J+Jf3wHfh2fBu+Fd+Cb8Y34RvxDfj6
in4V/Sr6VfSr6FfRr6JfRb+KfhX98B34dnwbvhXfgm/GN+Eb8Q34+pp+Nf1q
+tX0q+lX06+mX02/mn41/fAd+HZ8G74V34JvxjfhG/EN+PqGfg39Gvo19Gvo
19CvoV9Dv4Z+Df3wHfh2fBu+Fd+Cb8Y34RvxDfj6F/1e9HvR70W/F/1e9HvR
70W/F/1e9MN34NvxbfhWfAu+Gd+Eb8Q34Otb+rX0a+nX0q+lX0u/ln4t/Vr6
tfTDd+Db8W34VnwLvhnfhG/EN+DrO/p19Ovo19Gvo19Hv45+Hf06+nX0w3fg
2/Ft+FZ8C74Z34RvxDfg69/0e9PvTb83/d70e9PvTb83/d70e9MP34Fvx7fh
W/Et+GZ8E74R3/DP9xfZ3bT5
       "], {{
         {RGBColor[0.293416, 0.0574044, 0.529412], EdgeForm[None], 
          GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxMnXWYlkUXxt9tdlnYdxewUJEyKBEEpFRsMFBCxQAVFSlFQlokDUBRwQAB
SQMUCxtRwe7ATsAETLDju3/fueda/7iv88ycyTN9Jp6651zU7cLcTCZzwy6Z
TJ5oFyFHwG5MYSZzgNBCGCk0E/YXhgmNhMbCcNMmwijzmwtj7a+lMM70QOFi
YV9hP2GoKWENEfYxb4TDayq0E34syGR+Kgj+J6KfCg31/ZHoxwUR/0bRTcIl
9kda9y4MPn4IF3+fFUSc0M+Ftvr+oSDiOEjf3xeEuaO+t4vuEDro++eCMLcv
jLRgvkM4SzhbuE3oLfQRlginCacLS03PEG43Hz932t85wgrTvsJioZf9r7Td
ucIyh3GmsNy0t+Vyh8MbpLTVFxoIA4V6NvfZWbLZK/JykeWCLC8sDDliHmx/
DZ3vFY5/Ur5kJLTLD//Y3SVM3SmTWbdXfBPHB6IfFkQYUMqGckXGlE2hsEZh
PCHk6/sx0ceFt4Xpwgxhg+lMoaAg+PgpKgh/a4UqBUGfFN4UrhSuEt4yJaxW
StsjdSKcPLl/ND/ie1YYL1wqTBM6Cgc7zsOFI4TJzmt74QrhEOFQ4XK7PcTx
dBIOE54Rxjnc9cJYm6+0P9y94bCwW6j0nCycIrwo88T8kPFzTteE/GgnW8Tf
WhBt6BvRbwuiXm8W/aIg6jf0y4JoW/Dx06ow/G0TWhcG/a4g2hPtA/9tCsOO
uk57JYyvCqLdQr8WbhCOF04QXlGapghThZctI8wvOe2YX7eMyOdrli/mV+0P
8xyFdZzDnS0ca/P1Qhebn7cMLnMclEMH4WbxThROEm50uroK96nT6i8MEO43
HSjcK1xg3t3CecL5wmphkDBYuF7oIhwrPGB/8K4VjhE6C9eZ4m6osJ/QSFjl
8PoJK4W+wrnCzcKJwknCXNNuwk1CV/PusT/Sd4vQXeghzHZajhPm2R+8uxw2
eVghnOP4Lhb2dZqGCPvYfJGwt83kqZ5Q3/HVEfayXKB1nZY9zRtgO/yMEQ4Q
WgijheY2TxcOEw4Xxprf0jJtIDR0emsLuzvd0D2E4UJjoYkwwrSpMMxyhTdS
aCbsL1xiPuZRtmtu2e/hdA9y/oj7QsdP/hcIPYWThTmW6/HCDaYnCDeaUjbf
uZ9d7rax3P36Nvfjy9w2aMO3esy43f0v7WaBeT/Y3+1uq7cI891W59sd7XWR
+/stpkvc5pc4Pvx1F3oIc133uzlu+o9ThXm26+5we7p/mW9/Pd0vX+d2drH6
xh3qG89zP87Ywjdj5By3+5vctmhvH7utwvvUfNrfMsnrDOFMYblpb2GpcLp5
twqnCKcKtwt9hLOEO4WzXY9vsz94890OKLOFLjf8L3IYvYTFpqcJS0yJb7Nl
gcw+dx7oMz5zejFvshxxt9F8zIzljJ+MefTBrYTW7oPaCAfRv3v+0srzjust
l6nunzp67DnMY8lMjydHCmdXV/jCHcJZprcLfUxvE04XlgpLhOdqqx001Jiq
777CSmGFcK5wl82lQk+hh3CO+cRR1XbdhdMc3mKht+NZLiwQvhK+FBYJ3wrf
CLcIXwibhTOEZU7TQuFr+7le+Ej4UJgtfGzzmQ4bP9eZT/pLnJZuQrHpScIV
1TQuCq8LI4UnhbXCJaZPCBOFF4UXhEnCSzaPMH+NMNz0cWGY6WPCaOFp4Slh
lClxTBZedljTJefvG2iuq/Q8KnNe9fiequ9XhVeEy53G14QrhTed7mm2w90U
uyXcq4S37G668LbNpCm/esQxQ98bzKNstrgM5rtMKIN5LodNwhzhE8v6BOFG
4Qahi8sDed+vvOzcML6PddnAO1G4WbhJ6Gp6o+vIfJc55THX7rrbjviPdzzE
f5wp4Q51fpBZ/1KNwcK9wgWm9wj9TFcJI3bLZN6vrzan70HCauEBYaDp/UKF
cLpwmtBHuF24TRhgPnF0c7pI6xjFvc5l3NN1mvzs5jZDm+jluk8dP0W41XX5
ZFP87Fw92mQf53+j8LnlBP3M8W0y70bbfWrZfOqy2clh0M52qR5tnnBrum3Q
nsqEU52WiurR5mmj5aakt5rTR56q2y3m2tWj/ZO3XZ0/4qjlOImjhuMh3N2F
8+xngmT0vPCccKnps8J402eqxVqilrBTQaxRoDsXxFoFuktBrFeguxbEegW6
W0GsUaC1PZ5Ad/e4At1DOFPjzud14ptxjHl8sccZ1gbM8UuFdZ5HVysIyvy6
ekFQ5u9lBUGZL5OuVz3fzBaEHfPHGgUxt2Z+WrMgKPNW8gdlPluh7xfyw92J
jr+K8/2K562ssWpaLoylVZ1G1iIjhEuEusrXsjrRz7PGGCoMy4+1C3S41yoj
hVHC08JoYUx+rGMuMW+d7Vg/PGW3uFvjMIgPeT1pfklBUMJjXVjDae1muZZ4
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
e9394zvmsRe2Rni8JPbpHhEeLon9O+hDJbFPB32wJPbjcPtYSezZPWo/Q22H
+T7n+w/XG/bM2GcbYLnA7296b0nsQz1g3l3CL8IOYZXwm/CrsELYLvws3G07
3LEXuVXYIiw2/bYk9rxIL+UzyJQ45qge/l4v3OzmdCHT61yelP0uljHth3GA
+vdZceV+G3WcdSL1L+25vWoe48+7li9jHnt7L3oces+8yQ7jpeLKPULK5nKX
D+Ey7lL279tdTbe/tDe/2WMebTXtz0M/LK7c84Z3ne0+KK7cYyY/8xwG7a+V
ZHJzveg/5tpuo9NNnNinfWj6jFq7qb+qH21htuT1sdvDOqG0NNoJdSK3asyR
vyuJuSxz2+9LYi6L+YeSmPtipt4wP8MP5fav2xV1kDAyVaN+MZ/GHfURu3/d
zo7U9xFVo95BD68abfGoqsH7qST6UObd1KOOoh2qRh06RPTgqlG3Oriv/bEk
3JI+6tqhVcPd7/o+TLRT1Ujf0VUjDuo6ccKjfRR47k89Jmzi21YSMmAdQD09
0GuFo9wfXe25KTKljznafdY1zsPV7qu6mE+d7WxKv3WM6SznbarHDOKeZjNp
udxm8nCVcKXzdoV5yPQYx79adWPX+jEu0WZIL9+1ZD+6XtSRjNNxjMvvWKfx
MPehV7lsSPsMl80M82i7yANZJB0T7YB5+hzLYozrFn3weqFaadQz8vaK8HLV
GBehLzmfr5r3jFC9NPxQRxuKNhCe1XdZafDo6+uJ1i2NPgB+/dJYb70ovGB5
veZwJzkeeKzTnqsa4SG71+2OPDNuvFk11m/P2914uyVdY50f8naZ43ne5YG/
N6rGOvIZu6NvIl2kdYfk36t+yIRxjLTv5bbXQ+heGmndWXSn0pAFtFZpyAla
szTiKy+NORFj3R6iu5dG/LVFdyuNfGCHmbztUhrhkj74u5ZG3ggDmZIPzq0S
LnIinhqW9SnCyR5HSWM3+znVPMq1p/NQzW4xM06TvzqlIfcaPhvLmL1naaSb
MRw+5lbqo26uH+GfK9zls1MHu37Rf6OLK/T8/aMy1Q3NOxoIH+t772yYP9H3
Ptkwf6PvFqIHCG/qu7bobsIbZUF3Fd7S9+7Z4L1eFna7CK+VBd1ZeFvfe2TD
3ddlEV5z4Ut97y/aTPhM3/uJ7stcSN+NRRsJm/XdVLSJ8K2+W2YjTZ+XBR8/
X5RFGLj7tCzCIA9b9H1gNvx8VRZxEt8Gfe+ZjTS9o+862TB/WBbyqC/8JNm1
r6Y+Ufhe3weJthG+0XcL0QOELfo+ULSl8Iu+DxE9WNhRGrSj8GNphNFW2F4a
dh2En0uDEse3pREG4W6lLKtFuN+VRpythfeUtrpK117C+/qulw3zB2WRXszv
lgWf/Lyi751Ea2XjLP53wjZQGuERB3cCtlaPc+dLzce8qSzkTRm8WhZlSFgv
l0V4NbNxxv97h0td6Cuc43pwrs2U93k2I+vzbd7Vbs8WvlOYbURbC9/r+6Bs
mLfqu1U2ym9bWfBbuW7h7yzXLWgfpw/a2/m/QOhnefW3mfwMF4a5vPs5TeTn
TOEMy6u3zczNmaOfJpSb9vJ8/QzznlbaqoqWCL9KtodWi3qwTval2eA9oe8i
0ULhEX3niuYID+j7b+Ev4X7TP4X7TP8QHi4LtxnhQX3/K/wjPFQWdphfKos8
kK7V5hPuo0JeNuJ7TN/52TA/ru+CbJjX67taNtK6pizSCG+tvqtkI93P6rtM
tLrwYlnEg2yeKQs7/D9fFjLKCs+VBcXPC2XhFt5TZSGn4my0XcphqPB1abSn
5tXifP+fwh/ur88UznCfzn2A3u5/0bmf7X75LPNqmX+m+276wb7u0/vaD+MG
dwn6u98/z+72st0FHm8G2h1j4+DSuK9An71IuNX99EJhgfv0ecJcj6OD7J90
LxOWlsadBugS9/u32v9ptltcGmv0xY6jjtPSz/079Hz3++c73ctLo2+in7ij
NPqsHx0P7Zy+hD2Jn83jHsUP9kN6NwubhFuEL2wm3Ls9fsw1f6Pz8Z3DXeKw
6f/mC1/af2/HQbqOUFnOrBZ3XM603TKX2Z1OL/mk7/vG+d5iM3KhTnxl+X7l
OG61W3g9Nd49Uj/S2N15IE897Yd09TCFR1871Xd02ptyB4h6drjoYcLvpUE7
ud+HP8l9N3Six4DLqsVdio6+/zPVffQE36v4rTTCoC9Afk1EG1cLOUIbVYs9
ItzRZ3BXhnQQP3dc/iqNNnCP7X6zDGgf+1eLuzJ/2x1l1rRaxEEZNKsW5jmS
z+/1Iy76I+5ZcYcJORIG7g53+Ux3/qFXOQ7uSo10mxxtM210jM2MVWNtbma3
3Nmi3jAW7nA9+tVm9se2uy6uNH+7046/Ec4DdLjlBR3msQq5jnfZkMYrLd8r
nbcDzR/n8Xic09e3tvqjBnFXCXkdWS3q5p+uo4e7PIhnqMfvy12ujIEjPGYw
p7hYGJKNecYl5nFOi/0k9qnYv3zI+5nsXz7tPUT279fZXO42T1ufUBb9Jv0l
8zv6C/qJS21Hv3tZWfShuBtXFn0ufTbnA9Y73FGOBz03+6zo09O+K5R92tW7
qN+sF3p69safsf9h5qf9VWjad4VyriLt16b927WOY7zTSJrGOl2MexPLYpwg
3Rd7HGLcu6QsxhXGw6FlMSbBG2I+Y90I8xmLhpsyXg0zxU/e7uoPG8Y4OcBj
J9+jy2I8ZpwZVBZjIWPsQFPcTSmLuRFzmUkeO0nrZNthnloW8x7cjXGeCHek
8KTzMLgsxmPiuMhpZ0y+0BQe5zXYX0HmnMvYbnM6U5LOmED/9p4TZTPWel/O
iKQzJtB7rBe+37wWdkv9Yt+XPfcLvXc4xnWwoe3YX2d/eIjdsdfL2Yq7rW9+
wOH2czyrXP7swbD3ks7cYKa+sIbAzB7mSueP/eC7bD7HdsjgPMcDL53RJ59z
VCd/rxtu2HMe5LR0cBlQVg2cdniNXF+HOo4dlilhsw+UzpX8Yh55+M28dL7n
D9dp8sTexQOWPTr4dL7nX8viL/u51/7SGZbfHW4664A/9m5Hua00t+wxs2c/
3OluZj5tqKkp7bWJ6XDn9UHXi7ou7/7O/2qX036WAW2UO6LNJKemZXFndP+y
MHNnFLsmntN1FU7wPK+n0MNzuxPNKzD/eM9Z4Xf3vBbazfM26EnZmGMeLXqU
538nO1zmo8dkg8e8tYvQ2fNXKLz93P7pGxq5bWNu6PZD29rXfPqGfUxpZ3ub
4o557bGOI99pP85z3OPMY059pOgRQgOHTd/ws9BBdu2Fn8qCtsvG+m+wMCgb
a+CLhAuzsTa+0Lys1wGnZmPdNVAYkI31GJT1Rn2HAW8/z3MZP/bxGHKR58eE
cYrn1qdYjr8rPYeJdsrGPB4Zk4cfyyKNbYUfyoKyXtqh74NFOwq/6vtQ0UOy
sYYg34cLv5VFePBYV2BHHL+UhVv8by+LMJBLR+sM0PXWt8zoR3+uHu2zfVnc
X/9J+LF63DvfXj34d5rC407sPi437p3/4HUj92X3ddne7jDgfajx+hD17fXK
4n77DofLXdv9XC/wf5Bom7JYr7YSPbAs7ulSn3DHPV3qfuOyuK/b2HWNu+vN
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
i26bOn6A3SFj1oKsA2m7zc1L5+3Qz43Mhi4bfTl7Wns7XPbJ0IGiY+PMHzrK
dAYQms7fQdFxpj02/Kezfej8aJ/oXtHLnm07zJwprO1w+5qP+WLnCb0758vQ
radzf9Am2crzfBWWKfsB6E5oE9TNPMsePWn1bOXeJ3sLaX8x3+WKnrGWy7mG
zcebj86GelPqsNI+X1m2cm8VffYoyw/5cq6kqWU6wunF3NvxIPehzh956+Ew
iIO6lXXeqC+FztupjhMe+5HojtP+ZH2XU9q/hHeBywRd9X3Z2M+E/6DLlbJ6
yJQyX+2w4N1r//hZ4fKjfO5xecO7y+VHvVhpPub7HQ9pfMCUcBkPud/CvZzX
s9FWGa9ey0Ybxvx2NsYt2sAb5jN2vWnK2PWWKe7SPZnBHmMH2vxKNvoO+oy7
nUbq7DvZaFv0zatsR34eyUZbot49mY32QHmudVlifsJliXlNNuoi5j67al5T
L94U5Gx8C4/NE2SfVz/uKfV3OVA2jFG0UcaVx7NRvwnrKcdJG8UPd5xGeOzn
nhJ3mB5zvcHPo04vZuYIF9sdc4chNqc7UZjRWTCmpXtTwxxHuiv1/7tTrgvI
gvNm9E+c/eIcHWcSGVc4Q83ZQ84gol/mfke6lwadZf0ydwmmW4d7pc3opGfa
z9vmp3tvM8xjzPnHekf049wN4a7Iauud0UNzX4F7C9z94Kw+dxsm+94A9wde
s06f+yazfVeAOwOc8U/3LqZYj3+d3eGPOxjTrFuf5bhfsdupDnea4+ZM4Fzr
sJ/2ebr0jvUYn1ub5vOFB/t8YQebH/M5tfTG+TCfk0vnGjv43GI7m9P5xXY+
J3eIz81d7rAxp/fTOXv3vM8xcsYxvRON+Umf8eMcYHqfHXN6V508POEw4K13
PjiHl96YJizefZ3odD1jPryXbEfa0d0i73Tv4cWqlfcqXqpaeZ/j5aqVd16Y
13LXhDs06OnQ7T1rO+6srFWbOrx+2HP/hDs2Y11v0Jehh1tvu3GuX+gK092d
w+2OOnGs47ja/o5ymR9t/V9605w6t8R6anTS6UxqT+8HUCeoj+m+yqtVK+84
dXGbOMrhpvtOnV3nujgd3KNBr4f+L52JZI420XZtLQPm++x5skf0tGXAvtB6
y4/9onWWAfKe6LbxsfOMXNGXP2O5fip59q0f9ujXuQ9DO0GfDv85t5nLHBa8
CTY/5zKZ4PaETrN91cq3IdqZT3pbuw3BR/dMX9DJZUMbRrd7qNsY/HT3C5ru
fh1sdxMcHvJauJvGiQZxHnSmz4TyPcNnQo9wX7W8tPLcNJT9Ls4pL3bZcl55
kc2cj15mP1vNT2exl5rH2VrO4HKel3OznNnFzLnmWx0Wdre4vmx2P4E5nSGm
/+ij9G+qH30b52Y32S3zdPbnVnoef6fN9L932Pylw2Zdy1nqhY47nbfGzLnf
r8zn3Cz7YdRrzgB/7fSmc7rEzxndrc4rdZC+n3VCOlfN+eZL7a61sc0y4yzx
N5Yl53i3WH6ctYZPOXCm91vLnvIhPM7w0vcg03ROGXqAy5J0c046nffFPEFy
y2sQ9unMcTqDDE1nmZs53DEOL513hqbzxdAD3Qc3siyQHXoCdAeEt9nlSfz3
WY7oPnjTPL1NDmWfKb2XzfvZ6F3oEzGjH+F9c/ygg4Gf3j6Hvub+GnkxxqLj
XOc+GL3Oi+5f0/vd9MfoPte7D37Z/S5jyFXuP9J58MPcHl4xP/0TA5r+fQFl
PEE/StiMG+jkXnB/j84UO8YW9LiMeaTvb9cp6jC6UcYYxpO3HfcM1x32Wdlf
HW95U4cmuA6R50NUpuvqx/j+h90ia+Yg7Pve7bq4ymHtcPuA96v58NDVEj/p
Q4fLWJveiYeucZkxjl7p8rjc5jdth/w2OO30K4Nrq/wbxDe6Yd6SJ1x0yoSX
3lmHpnflocjiLYeHLNIbUrxXMyc39hvQ61/nvRP07jPR+wtHClebHiXMYX+C
fQDhBtMThBno9+1nlnC0cIxwjf1hni0ca//Xmt9ZuB5dv3k3Oryuwq3CKcKp
wlz2NoRuwjzT7sJ09kIc90LhZPu5WTjRfm6x2x7CTQ4b3nzb9RQWmOL/OqeL
NC0WegmnCWXCsxnVP2G8cKDQSrjUtLUwRWgvdBCmCR2Fg4VxQkv7mWC3bYSp
dou7y2x3kDDRtK0wSzhaOEa4WjhSOEq4xhTeVUIn4TChmtK5XvQZoXpOUNJ9
pXCo3V0hHGLz5U4j5hnC4cIRwkxT4pvusOFdpTA7We5XCofaPEY4QGghjDVt
KawVLhFGCk+ajhKeEy4VJgjPm14mPCGMsJ+nhdEO+yn7w/ysMN7+15lPnC84
jInCG8IVTuObpqT9FWGKMFVYIwx3fI8Lw2x+WZhsdy8Jk2x+0WFjfk2YJlwu
vG5KfK86bHjPCOOc1smSXTvXj/VOL7xsTtSp5zORjiZCU+cf2szukOWBznMr
obXT2th+Rtrt/o7vQLsbZbvmll1zlxNpPcTlR1o7Cgc7HwebRz7bCu2ERTnR
FmkPS3KiTZxueRxkd8i+jc0TnMY2lmN7oYNl08HxTXbY8JY6vDOEx4ShLo9J
bgfI7nr/T/RYoa+g7jqjbjFzrunuwnmmewiDBHXnGXWbmfNtt6dwgVBH2Evo
ZzvMA4S6gpbSmYGm+O9vt/AGO7yGwiVCU6GZMETYR9hXuNh0P2GoaSPhQvvb
W7jIFD8jhCYOa5jdNhZGOuz9heG2w91ooblwgPCW6zV94QqZz7FsPhNuFG4S
Pje9WdhoOlf4Wlgo3Cp8Y7pI+EK4RZgvbLLbecJXwgL72Ww73H1rf4uF7ZlI
x0rhJ+EO4U5hm7BUWCZ8Z7pcuMvlR7ltFZbY3RaHh/l7u71N+NnhEccPtrtd
+NH0DstAy4r/14+zhV1sPkvY2eaTBF/TyMwRjhOOF24wPcHyg3Z1vnsKJ1uW
2J1o2RBWN8v1RJuRS3ehh+XYw/4XOoxTLG/oqU57H6eRPJ8mnG5ZQM8QZmei
7h9n2fSyu0UOo5flitszLYuzLIPltuttmfV2fPOcdtJ6ndA5E21srNAiE+PW
mEzUtRaOnyMWeU4HNN8ygxY4rJLM/7ep/p9vaKllU2S5n2C3hY6/2H662q7I
8sJfNad1J5cf+agp1HK+vXXw//xDy4VRmWg3zS3j6nZ3ssOrbtnhtsLyqOU4
TrddDcuyhuO707Kkfq1QeztH6CusND1XuEM4Szg7p/ItRd4i4w1B3t5LbwpC
eWuPN/Z4a493Lb/0G2b4+djvgPFm2Rd+Nwxeen8wvUd4vd19Yre8XVZHFXxJ
3Qjza8fPW2fv+Q2tWQ6L99TS22k9/XYZ7/0tcZret1ve2+I9w8XmfWA70vGN
w05vKy6yu0+dlvS+IJR31nhHcp7zw1yNOQpzK+ZfpTkxfznZFB5ztxKhak7M
N/OFgpyYk/6lcvg7E3PHXCEvJ+aCf8juz0zMR6G46+EwiIP5Y7HDPcHhFebE
G428l8jbidwn4O239M7lXKebf0zumhf/aeDfkzsLu+TF/yZ3srmrwyvKibkm
tEpOzEerOO70Blx6E667y4N4TjIPufJuHG+sDfV9Le6ucSePu3np3h60pe+J
7e97Y9zP454eb7xy74836fbyXbO9zePuHm9Spndb97S70Q7jAN8za+Zwhzn+
xvb/SVHlO7Kfupy5J/iR6y93+nhHM73/Ck1vvu7uuIc7vHR3rcl/7rQ1ddz9
nXbusR3ncqYeDLAdb91xN7Gh8/au342jrlOevC2X3s6caR7tj3fjprvOIuNe
rqO8CXii283JLgPqMm8OpjcCT7C7tx0Gcfyrzmly3Xibb7HD4727vZwm2h/3
77ijmO4jNnC6acO8/cc7hek9X/wgo7edjyUOL719C01v4kKJd6DlQRysvWgf
/2RivfWvKD9jZz2GHWbmjozxjOfMMRnLGXuZP0IZk5lHQhnDmW8yh8AP81P8
MV9olBPzDHjMN7/MxHyBOSl8zMz5mB/syMQcE/pLJuZ/zBUY2/fLibkLYe2r
708zYd5H359kwsxck7GfMZ+5JvMDzMw1mVtgZo5JeMTHHBO3xMGclHzgjjUK
8x7yvLO+XxV9LRPzY+ZG8IbkRNyk5Taht9BHuMv9/XnCKuF8oZ/wqHCx56/L
hTPt5267xd0yz3Ph3emxgrHkdofN+PGwcFFOxP+IKeE+KAwWLsyJ+TFyb+z4
9rP5YqcX8wPCQGGQcD9txub7hP42P+TwiG+13RLHPc7TBTmxbqA8v3ZZMqdh
TrRLTsjsdcZOfb+SCTmS192FPXJizcA6p9zxNBT2dnx7W76Mn7sJtS2bGkJN
ywhay/Ku7XBZK1TYHemtLzRwuhs4DvJZzzzWq79nYmxgfU87yMmJdT6U8YP1
TZnTeprTW2EZ1XVY5ztPe1o20DqWEXQvlzfp3cn05UzIhXKlnu3i8t7VeYYi
vzcykb83Rd/KhGw+zkS9J08fin6UiTy/KPpSJtLI2vGFTKQVCg+ZwSdu4iBs
wkUuhEG45Od90Q8yISMocbAm/FX0t0ys7aHI7mynnfSyPqTt4o58vyP6bibk
sSETZmSB3XuZKDPy9HYm5AfFXR/LCblc6zO26KHoG1hD3OU47hZWZeIf4++K
/15u/Fcc+n5u/Ld7g+g7ufEf77dzw8w/yLHDzy25cc6b89389/tL0a+EuT7z
yznZeabdfU6W9Txrff43/lZuhMvY/4bom7nxL/HNol/kxv/GPxfdmBv/HYdu
yo35wWuir+fG/8mxww//GP9A9MPc+Nc49KPc+P8TYRMf/00nf7jjDDX6C9LE
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
L9mo19BfszGXKaHNebwpFap5/KlqM3Osj+T242zsIbAvyD4ec0ri2ZSNOdaH
2XDHvBO7zdmYq36RjfKgvVEOpIm5F2doPsjGnAyKf+Zb72WDx7yWMPDPXIx3
VOExt+NtO8zMwUkX+WdeWYV2WR77Foc5reyFHOUyY98FPTh73ez5oAtmr3uw
7Rpax8z+FntfA6wbRq9/kd2yZz7QdoTF3gP7auyzDTF/X+uMCaO5dcdQ9sfY
M2HfkX3IMbZjbw29eEuvVcbaDvNlbjfsi7IHxl4p+6Lsf7AXy77rZNsR7lSH
DW+i/eEHPXpT5w09exOb0bs3thkdfyObb6uIfc0+7uPZs2Sv8nbbneX+nn1N
9jyXm+KHfS3OKHA2gf2nI10GN7utcB5hrinuljpswprp+oUf9sB6OW72lDjT
wDmCL9xGmStdbhmwRz3U5UAerrAdbY/9KtofdYL9KM4rcE6BfbUeDnehw4a3
yHzivsX5wF031y/aDGuVIte5k91uqpfHOor3HHnHkbUF7zPyNnDN8nhfmPeD
ccc7vLz1W6s87HDHOgS3vBPJmoy3IwmLsHnDFz+s2+DDy5bHG8G8B1xWHuFh
Li8PuxfcfngHdr7bIXSB+0co77b+kY13MHk7k3k9aSVdf9qOdy5rlMdbw+Sh
ojzCxvx3Nt6+5E1N+gveHSat9B+8oYw5pzzeW+TtydzyoLzpyNkE1tWsp1k/
kH/y19vxI7+HzWctzpmGwfbDuQfWdazzOA9xsccVzkQMMG+1+fjZ4vpEXf7a
+eZd27+cP/JAefL2JW9h/puN90N5N/Qf5w8zgz125CevPPLBW5X55UF557Kg
PChvZ1I/CI+3Nqk7UN6/pA5BkVFhebgl7m+crkXuQ+e5/OhT59rMXORvp4u5
yV8uB+Yuv4n+no150D/OB+t20koaWavn2sw86V/niXUFlLLqYoo75kCMFYTL
2pp3e+l/mTP97rrD3A1KfTnF7YD6yFqxhuvTqbajzrKOrDCvl+2os6eZwjve
6UWWJ5gip66mlNURrqPkn31W5mWsddFh8L4qaUXfQVvkLdVvLVfePN5iypvN
W015F5lxlDedeZv5M1PeM2aMmWMe497NLg/Gn9nmMf5dbzMy4z1W3l5FH0T8
pImx9y7zGAt5c5Y3ZRnbeRuad8oZ+3mjnDe/f7QdZuYHvNHMW87fm+Jnm9O+
zGXP27W05x0Om/h+dngrXJar7I79q5nWnbEXiE4RneEJpugMuVPJPVvuxXIv
k/uZ3DHlfuX55nFX8xzzuAfa1+Z0fxV3tR0GPN5c4F0G3mDgHix3d7kXu7PD
5r4md05PM4+7qNzX5T4uZyC568UdL872rfZZP866cuaV87zcM+SOIvcO071E
7ilyT5Z7s9z3rXB4xJHuABPHTo6/t88M8XbD8T5L1NXmfNvxTgDnw3kbgju+
3GfnXSTeUuIOOO8T8ZYS98d5w4i3i1rZDnct7ZZ3mrhvPsnuuEs+2WbuwPKO
Em8mcYd9inltHB5xpDO+5J/7ttxJ5j5xujPcL6fynQjyUGZ5UwZ5zgd54Mw5
71bwhkR6I4M3M9K7EvjnvDrvXKQ3M7rbT6ndwqvr+Ln7nd574v2ndP6YtHLW
mDPHT/v85SKfx+zl852YufvIWdN0pxY67z9nNznLyZnQBXZ3su0wc3eTO5xZ
n7m832cw0/1b7iTw/wTuI6T/8EDn+GzmPf8547nKZzwv8PlOeOm8aTp/Ck3n
WJc4D/yb4SbHcZLjTP//udm8ga6/pI9zww+6TnNOlvOynO/mvOzLNnMenXPq
6Xw6lPPpnEFeb5kOsR3nytNZc8JNZ80xj3BbSf/LgqYz7I87Ds7tPuNwR7us
KD/O8j5rXrqvwv0Vzp5zBj2dYYdyVn2i8wHvUtvhn/PBrzhv0xwG9xvSXRf2
VKfaDnfp3gu8K83njnR684u20dF1DXN6J46323hDgrckeIuCdxnauI3yjsNB
bk8/ZKIdYuY9Cd6VwM/nmXjzgLcONmUiDN5D4I0C3qHA3cZM2OEuvQuT3omB
8jYAd1J4UwbeT5loz7R13o8g3eSDs+WHuN3wtkQHt/sfM+GW9HFX/VD3Den+
PGbutvAeB3FwL4Y44fGmAm8rkFbeVuDtCcy8UdE6p/LtDSh9GPfDuCfG3TLu
k3GvjDtw3JHjbhx35ObbDvMiu+WeWbp7hp90R447c9w32+pw05003HG37FO7
S292IAvupXE/jXtv3DnbaDPvZVCu5IE3NVq6nNN7Ipi5y8NbJEc7/7xddqXL
YLrN85yPdM9vk+OgrGbY3Y2O///3ITNR/um9EGh6LwTKOwrprYfOrh+8nTfM
dW6EzYc6LfTpGbslrdxFIr2U35uZGC8ZS9NbBultAyi89H4f4b6eiTGY8Zm6
ONK8Ro5/aE7lWxgX5lS+0zfKchxjM/kYYncN7Za3Lni3gfcvGFf2c3jp/Y+L
7Se9i4G7/R026eBcO+fpOef+RqbyLQrufzE/IG/pHUnGHO70pTctnsrEGMO4
xJ1B5gqMXdwHZMxmXsC9Quzwn96nSO9VQPHDvULcwnsyE+ExpnFPEJkx73g6
E2Mb8a3LxHiGmTuAjKOklTtWDZ1X7gPy9gQ87v01sJx464IxmDEwvXmBmXuL
5Il0c7eROMkn9xb3try594UMiDvdI+VeaX+PXYw9fS1L7k/QrriXm+7UQrlT
W+QxhvGHNxO6efwhLPjpLiw03ZGFcgeXdsh9YMLlTih2vMfAexnc++PeIG8v
dHe4LT1OMP409zjBON/EY0y6lzzcYwt3yMfYXQv7w9zG4wfjRroXTbjpXjTm
1uZjTveTua9MO27qONMdZvJAm27i+HnrgTcgePuBNyF4G4K3N7ibyRsQ8NL7
EbwnwfsQuMVMP8f9cu5fc1eXf+zxPz36rwNyK9+ugOKO9yYIgzhI1yWWBW9q
ECdvbPCeBO9K8L4FfWgzu6UPIr3pjjKUfHLnl3Lg/Qzu7PN2BunmPQ7e6eB9
Dt6qIDzmPbxVgR1x8H4HceKO+6eEgX/uGvMWytFON+XGXJI75xNdHqSX+yt9
LBfuvpxt+TLPuMh1jrkL83Hm2szP0r80oczRmIufal6p7dI/MHu4PtV3GMyJ
0v12wqUOMofr7zwzJzvPsmBOlv7J2c88yo1+p29u5T8jz3VZ9nUe9nbaiaOe
4ySOvRzPBbmV/y8k/8wjezkP6V+kp7kskQ33hpAl7YM7tukfk9zL5V+KzF2Y
16T/UE633HHLvVz+Y3i1/fDewCSXAe8OTLb5KLvFHW8TTDGvmcuNepb+B8m8
if82Xm4z9eAMp7uW08t9p/SPVfJW03a4S+8jUMbUv6E2d3I+mH/xP8crHEd6
ZwF36f+UpI93Bo5y/njz4QjLgLcIjrSc0vsanElkXsh5U860sk7gjClnV5l7
cvaU863MF1n/pTc2oJyFZF5JGPhnvoldepMDShzMXwmDcJkrc46WcJnLEifn
c9O9Zc4VsibgjB1nA1k3bDaPuTtn7Dhzl+48Y2as41wv53mZNxMecbCG4Ixs
umP3q92xZiN/6e0TaHrXBMqZXNYGnEn9M7fyvvfbuZX3vTfkVt73xpzuqnF3
jbq+wuazbHe7y5k7b6xh+tgu3be7zbx0b5xwb3RekUV6J4XNKdYfnBXmjDPr
ot+dz3QnkPO/rG/+dh7utR3uWOf8Yx7rk39tZu3BuWTCTe+/YGbdQpy4Y31D
nKQj3VHnzCbrQM65cqaVtsjZTc54pvcj0nsSUPru9JYEPN5nYBxinOFtE/pB
zLxDQpvEnP4hSvvjfRXaG2beY6G9YeZtB8Jg7Er/H6UdM//Fjvh4p4X/rdKG
eK+Dt0R4WyT9X5a+hLdQaCv0H7zfwnjOmjXHbnGX/pPK+pX/teKWNppvu/Sv
1+McB2/FECdppV+kLlJneV+FNLZ12NzvZ7xPd0S3u+5wfjrdZ4VyTpn19leW
+y2W/WaHwRlZzszOcjm853A/dNmktwZwl+6pEgdvjDBnYR5DXeQMNOdkb3Oc
mFlncxZ2i/M3J7fyXZbZjp91+Ta7W2y3nLFN9285L7zMYeNuoe3IzyK7xV26
N0v6WD8wn2COwDrhbZvTO+DMI1YXqi4LfwsPmP4lPCj8a97DQg6bw8L95v8p
PCbkyy5PeETfuUXh7tHCsMO8Vt9VRIuEh/yYLeFeUhi8J4QRpmuElsI4Yaxw
gDBGGC20FSYJE4U2wmXCBKGF3eKute0uFYY7vMeFVrYbLxxoOs5xkq7ConBX
UBT5wR92mO9zXv8Q9hOGChcLjYRhNpOWF4TnhX3NHyLsY3qRsLxAdUH4Tlgi
bBW2CMtst024TfjB7sjniw63iWU03DJ4ybwpwivCy87PM8J6ywO6Ttiws2RX
N9I/xnZPCyOFJ10Go233lOVHPp6zzKDPWmbPOo7JjpN0LHXayU9jpxG57C+M
cjyT8+VeeEnovpPSUEd1Q+4flTmvIL6f0Xd10WrCFH2/Yj8ThOeF54RJDuNF
Yarwqt1NtN0Lwvr8CKNUeFbfZQUR7tP6ripaIjyh7yLRQuFJfReLVhHW5geF
97i+C0TzhTX54RbzY/lhR7pJU7Yg4liXH3ESx1P5EQ/hTtP3a07r5cLrNs8Q
NghvC9NN38qPukP7oT0Ndjtc7Xr2mHkXuU0+5Pr1iM3DXN9x18yyp50d5HZD
PW3n8qMeXegwiKOp3VLPBjlO+oMOwlTXtSuUvjechyuFN22+yml/0+VQQ/mu
EPoKK4UVwrnCXTavVp3ctW60rYGOh35lgCn27R0naV3stvKtcLvwo9vJncLP
wk8FcceCO7Wce+dOCOfQOffOfQvOyHP2nrsWo81rZj5+6vtsMWeKuecwxu54
h413jbkHUNdnkTkn3sTxEG4jh82Zf+5XDHZYnP8dLYzyOeMxNn+ktDZUnhoU
xvngUT4Lzl0I7gFwL2A/h4eZux2cneceQUNT4tjHbuHxBjN3GLjTsJPT29vz
Tu5InOF9iN42czeIc/GcvT/KlLPx3Hm61rwjbce+C3erOFPPmfnjvd/C2Wzu
Zt2cF/sxx9kOd9yzmmteF/vjLsCXBdEvUDc72474uCvCPQPuHXD/hHsO3Hvg
jkpf562ey4cy2MvlwDn92naLuzq241x/C4dHWe5pO+5Y7GFKHNxLGe+4v1La
mrvf+qYgxhXGH+ocYxLm+QWRhy+Em4TPhc+EG00/FW4xf7Mwz3STMNd0Y0Gc
KR/rOvGBzPUVdj3hZvMJ9waH94nwYUHUF9xdZzP+ri+I+vSh29h2t4c73CZo
JyPU1t7fK8Kn7e2wu0VuT+R1ofB1QchgjuP8WJhtShwLzCf/PRXmI3tFGi51
30xfi9u9C6N+E0dH9x/IZj+PjRs9TjB+kk8oPOJkvMQ/+d7X4ycyY/zDD30A
4zflgYybud9Cxk09TjIOMd7jDll0cF/CGMX8oJXb3mD3c8iIPpH5BX1KW/eX
yK+9+0vGY+zauJwGuq/a233xhS6bQeY1tB1xzJGsft8r3DPOEwbpGG+ZMe6N
M13vuwfTPL6hc+VNNd43S/8fSv8jgqL/RQ97jXldrI/DD3tg6KPRT7NnNts8
9gXRF6PP7mo+5mMcT/pn0SyHy37aXIfFnifvGvK+IXuQvAnH23DsTaI3Rx9/
uu0w97Fb3kZk33K5/aR/FxEu+3K32NzbbnGX/quU/rM0x3lg7/ZOp4O3WtHX
oMtBv8z7frzdx34jOqb0Lx0oe63DzU//t4Hy/iP7f7zjyHuO7BPzLiXvVLIf
yVuPvPnIPuH9dsfe54uOg33E+c7DeKeJvdxLHSdm9Na81cqbrec6bN66ZO95
hfPD/s96uxttt7wbm/4VxLuF4xw27i6xHXkeZbe4Yy/2JaePfVH2OdI/nRY4
reyn3mpeegeTtReyKcytfAexwOsz3mjM9XqOtxrzvBbkrcYcrwVJE3o0dGak
o9hrI9JX5HUh5cp69TunHT68ZbZjPZre9XvP5Y3uGJ0x+xCsV9L/haDoR2kD
6BlZ29AG0D+iO6QNoEdGf3yNw4N3re2IY6bd4n+p42fte77L/G6XB3lKb+5C
0SvD5z3QX11vWAP/7vrxp83TnMb0HyRo+ucSFJ0o5wZoN+mfQotcNpPNpyyp
d3853PSmMPJN72P+lVP5virre95o/Me89FYjZt5qpKwwU+fQEbDupw5ut/kO
27HOXunw4KW3TdNbpz+4LNNbrsT9Vw2lVXigRuzBPOC0D3Y6SNdxHmMYW473
OIf5BI+jmLt6fMXMGqCWaM2CmPtDmV+e4zGPOSB355iXP+o1AHPP/zV17vFf
T/cDf1e+RUyfz+f9mdJFQhltMsMUc8v9km4qKWl0oVJJbi0KqTRrE5nbXEpF
LHJJWg+XZfPbxWWE5raxuSuUcovf6/k7z/Po98d5nPv99nqd87pUw/RsSHcq
ZR1vndyZx2lzl/b2nuZ+7uP9jX+IsCY4WS/jKattmGENCZ5tow2cOynwmg/b
pzJbG0Ybd9Qe2pB45P5gWw+J9EvapzbDR3i1OEF3bXCCw4StZ8pjNtm74ifa
wBBdxYumymMG7gS+BR/eDHGOg7xPiDvYMO6YbqYlP3xsl1jHafYbnBU+vSni
YYfalhnCLuA84FXwKYI7gVfBd7fSfk40bKWwL2mfEN593DyH29er7M8qy73Q
tKTb3/pp3+nCN8zNoIaEP893fO82DvyvH3BKQ8LlerqmtnG+mU9wtgFh+ru2
Blve9oaRn3V0apiBrifsU1x/g4zb2vKog3V6mmU1dz1RHzhhX/1ZhwFnJ3+S
j+rnr3KF/rHGZ10Ey9w/Wb8O+xV6gtbC/tAjtGqyRW50S/GA7RwD6h7t/mNP
NnU82HPgcqzRVvaPt4k77Cf27cYxvqc7Nrc1JJiRsoELb3G8btU/2LVzp2M0
33L7mpY91tLy2Gfg05wFnA07GMY4Nnbfsl/B83dwjMGfW1kG+Gdr9xk4dkvL
aLB/lAte2sZ9CZ7a1r3bxDqpA/y7XUOKGxF78+X2qd7NnmcPhanVE8/NX+SF
WBLmvjC/C/NumHfCzC8Tz8tHYRaUiRcG/pe75YGA3+FOw0h3W5j3w7wXZqF8
M+S5y7TwSNxqPHXcHuYD88yzng/LRBMIzT209tDXQ2cPvyV0gNDB419kedSx
WlpJ6BAPk/448wHMlDb5DsumPuiSZ5lusTwT9OcW+/3fMDeF+U+Yt8PcKz8H
/Bf3aJPnt2H+HeZfYa7XfjPM7+VB2ShfEHxKmU8Iezt5g+AR2kaeIcLgK4Lu
FJp++nlDhL9lHTfaFvy/CfPPMGvCzAnzWphXw1yjTdx1Yd4I83qY2WFeCfNy
mJvtH337tWUQN9e2k+da81EuNLHwBtAmaDKZk8wHgN2xuoW+dhtpkKFFbi6N
bdPqFvrcBmlMM23u1tL/NpPG9DHpd/HDiwEf1BRpOaHpbCOdKfPctrqFDhja
2oelvYUGF7ptaGKh44ZuG9ruTMeN3VKa4kJ6XOinSQs9daaZhh4XWmrC6A/0
x42k2YUGuYn0uvB3MW/MJXS68EuwFqERhc8EXpnMdwEfBvTh8GkwptCHwz+D
H/pweHLww5sBjwd54LuAH4Ny4dOgDPg2oH1l7EkHnwZhpIO2ljrh44GuFZ4c
eFygR4UnBD90ufD2ZL4fbPh7oNElH3HQwZIPPhjot4mnfZk3hvmBPhY+H/oJ
fSxh+KGzhR+G+jIP3tbyBcIfuL08f/D+wRd4SZl4A4mfUqZzifhLtYmb6llF
3BVl4v+DD/CqMC+E+UeYK8M8G+aZMDMNez7MNMPIMz3Mc6a73DLgQxwT5uEy
nY193CecAQM8pzjb+npGEHeZ+WhTf+M52/ppc46erE2e0Zb9f/CkNvBlb+th
f8+wvbTvF54dnBm/DLM6zIthzi8TbyP8kBeUaXzxX1imM+Vx+9oyxnWHeipr
x7Bb1VOfsYmb3THWSdsYoxYxPuHuHO7nwz3ZeaDui8q0vil3onXCj3lumBVh
Hg0zXnt5mEm2l/PsYm3yjzP+kTBjtZeFOUebcT/PsuH5nKBNHfBjwOPBHh5Y
pnuCs/zEMp1Z15n/uzDfOsbY3HX3h/kqzJdlut+45zZZJ8x531nHVuFuIr8p
fKf4aW/jsBvVU/+Ix0/bCSP/0nB/bR3M5Tf6WRfwvpbyvLLGW8i3Cv8qcQ/a
RvKwprmPq/KtsleaySNLGcQxNk3rqX3MA/H4e5Tp7mEsflWmM/6lMFdrs27O
tn20d7hjwR01TJv7bUSZ7n/iTi3T3c9Y9yzTPcRdd4pjz344yTDq7lWm9Us6
9hjrjn6eUab7kjv2TOvBP7RMMARwwena3OezyrTG2c9n2V7mcIjxwBSnaQOP
DNYGBvm59VDuIMPow6RY2x1ibT/XIvH8wOMCrwt8P9wD+E+QnwA+guPkKbgm
zPGG4e8hbwL8CIeGmRlmRphjKkkuNfKp9wtzSZjJYQ4OMz3MlZW0JpY6B8da
NnmONt/sMEeG+VWYq8OMq6R7iDvn3Eq657hz9g9zqXUcZT7yHB5mVpir4C+w
jF+GOcww2trdMNLtaxt/wdkfZlKYi7kTDMN/ZiXxMcDPMLyS+BfgoRhZSbwO
8DKM0CZumPHkOauS+JhId4ZlwAcx1j5x946qJB6gB0wLXwk8Lb0riecGXo+T
KokXhHHvGuayMFO5c8JMcSwOcR4Y617mg1fkZ479tDAHaV/BHWUZ5D/QsMvD
dNOmjgmVBK8w7pmPi3s783G94/xxr69xLOEFe8rxw17lPP3ZOOb8VfPAW8Ld
zB3L2nrNuEWGccfCO7LedJn/ZK3zBFzypPO0Sv+FlQSHAVtdoP2Y/YR37GnH
62nbdL7xwF8TtYHXztOm/xdZzxOO2V8s6+z/N28Lbe8653iD7WYegGWB2dlb
wI6Zd+d1+8xeetM45vw/5oFnCBgF2ORmx544eMjecw5uMx7/nY7Nx849dYI3
ZL4jymINfm77WJesNXh3WK8bjcs8SLTpPuMz7w525jHaZJ7My0Qd860f/zmV
tMaBSUdXEi8ba32MYfiB0ZCxMVnYCxkjFwlLXWoccNkk44DJfqEfXAjeu/HC
eZONy7Jy4NcDTh+nH1gZuSZnCsNRD3xbwPTIIzlPmBiewCyjBfs0YVx42OBR
A++aYN3A0UPN08XysrwcbPj2O1v2BOHd860v87zBAwcsP9z2Zfk4lAvfI3xs
mQ8SGz61zF8NfJn5q/GzLonPvJjYmV8TG144+D45+ymXPUkYeEIbxwa5MMwt
PHiUC0wNbyOyWoC/kdGSZd6MsN2tzUe7WSPwBJJ/Z/ORBxgdnkh4Izs6P/iB
5UdZx67G44d/ro1lg2ec4ByA65yof5DrnnU3uJLOCPynuSfxD6mkMwX/qaad
596Fh48zd3wl3S3LXZfgT5nHdLPpwIHgV4dPfaBlsLcGuFfZi6dX0rlGfUMr
6fzC/3PPBfynmI88/dzPnKkna3PW9rc84voaxhnQR5tzApwNXkp4LsHb+tk+
cEp4huFNp2/wK8IrST/g4cy8m9jEZV5HxpS9Do8l85f5HonL/JbEZb5N6mac
qJ9yt3Vs4O8Hd+1pftYjvJcDXWf9bevWtpF0zc1Hu1mb7LnBrl14NTMf5wDz
140fVN3Cw3mK+2SQ9XGHsX/YN+MD/mkZ8M+zAf/cG+4+4V4d7mPK9I7AG0D3
MuEYwF9HG8abwZHClMCSRxmG/wjDyNOtTHgU+NCBZcLN8B9ueeBnB5UJByPu
4DLhYOBqe5YJ1gef2EMbfKIubAcc19Wywf86lwlPIM9hlg2ed6g2+NPPLJv6
DjGM+rqUCUcCZ9q7TLgN/r0MA69CZnKnsDuGaSbsC5y7tTAu/m3KhLPhR/b1
7mXKg4zoXcPepUzyliljtzBraimsQ5lkLxNGutL+AWs3LxPOSbn7lQkfBg/7
cZnwKNr6I9sIHvZDbcZiX9OCL+5TJhyMPAc4ZuDTPzGeuP3LhFdTx0+Nx//9
MsHWjHu1TLgW8P4OZYK/iUOGA/K7ke2NfIZH9COHYbl+5DM8qn+MaZH//eNK
gl2AKbL8a+RhI5e4EmW3KJO84u3D/l6YncqEk4CvjLYM5Hlned9LlT+wwvqQ
pfAH/chYWKl/lPnIg8xhZItnGdvYyB0/y/KIG25YljuOjZxy5J//oEzz3T7M
SNvXpky4zRm2G/z/ZPvD2wFvA9trE9eyTDgPY7ptmd4UmPtWZcKLiNvOMoir
uUaYj4pzQrntHBtwuB3LhP8Mde2CV49xzYH7gUu1to2ka2s+2k2f2HPjXJe8
U4xyHY8y/+7Gj3VNjzFdJ8OoD5nw7Gf2MXLU93LNIhN+D+sZ0jzuhzAL1dOF
vq471bcxMcx52DvGntkl7olwn9E86edYHObn2ner32uh+YcadleY07Wp48ww
95p/YJh5zVOZp6rbA//6WjqbOLc21NLZgf/zWjqn8A+yjeT5rJbScubt7VoG
7kYeO3uVc2WvSoK/ga+7GI9/Yy2dR5Tb2b5OCNM+zMgwIzT3hVkSZrj278MM
06Y/ncKMDXOO/fw0zCeOB/Y6x+Az4xYYttZ+rFWvyR5hzg0zPkxHyxsTZtcw
o8OMCtPWuhnLnWwf7eoQ5uwwZ4XZPcw429TOePLsYhmk29O+Ut8PrJM8u1kn
9SGz6GnPg09raYw5+9fV0lnGWYXs/XauX2TXt3I/IaO+pWcVcvJ38DxDrn5b
9yjy7Vu7V5Cr38Y9gS4A7gbWK3Lvd3QvIke9hXsX+fY1z0X0I5TuS/QjcBZz
L6FbAZs9gK4B1j5x9Knq3kVfwM6eH+gI2Ml9jO4AwvCjl4G2cweilwGb+j6p
pfFgLJD5z1qj3d/W0p3N/byplu5C1tkXtXRH4v+ylu5j/FuV6e3shDAf19J9
wJ2DbDFs7hNkizHexCHHgzDuEHQlYHPPoGsAm3XfxPKOD9MozHFhjg3zdS3B
CsAXm2upjcAU39US/EG7G8r0hkWbvqmlePIUlkG6r2qpDPrQtEx3MnkaWyf1
3RCwzSEB27zQIskjZR0xh8j54V5Bdj7/HB3qMQf19L/RKeyO9fTPgb1bPf2f
YO9aT/8o2LvU07sa+drX03/XT+tJJhz/J8RTLu9txO9UT2/PbcJuXU9vuti8
w/JHtEfYP6in/6h9w/5JPf1LYe9TT2PJuyb/MPzJkHb3enobaxd223r6pyGM
PvBeRhj18d5H/e2UXYcMu58qnww5ZV2VT4acMuSKzfVuA5ZBvhbneNbj8S/j
kCP0lnHI5+F8Z40j34X1wbpAXhDrkv10u2GskVsMIw//e/vVU59vsgz2EPPM
3xXwKP+EyFnrpswz2niQct2Q70a7bzQfbeLfjvgDle1H/w5Qxhuy3sjD+phj
Hcc7rvj5h/xxxO+tbD/mk/bxH8k8ELewU6zNdjHnsa5WhHtouD8J9/3h7h/u
deF+Ktyjwv1puN8O98xwbwj3x+GeE+7Pw70p3LeEe2O4G+0e5YZ7U7i/H+4V
4f4y3NuG+/5wfxHuNZH+0nCvD/fmWNvzYm2/Hu6/hnt8uF8J97xwHxvuF8O9
OtyTwr0m3M9G3omR97NwL4vwwRH+UrjfDPe0cP8z3E+Ee0S4Xw73+nDfEO7X
wv1+uGeH+9UWSUbTe87rLVFm9yjz4wifGe4u4f6wRfov7RLjtFc9/Sti/yhM
/0izOcp5J9IMDXezSP9ui/TvSPwP6+k/E7tzPf1rYu9ZT3/DzAnl8vdJGHtm
TpTTNcr5KMoZFe5quN8L96Xh7hjuD8LdJtxPRL3/CneXcK8O91vh7hjuv4b7
3+GeGO42kf79cDcL970R/ka4u4b7zXC/He5quJeF+81wnxju9eH+b7i7h/v9
cP+nRZJt9b5jhJyjj9wP17mfwCeQz4VsryyvCxs5Xsj0WmQcsrjmW0Yf9xj7
I8vtYv/1Ngw/stWQi5dlrWFnuV/YyPRCXthd1jHQstmvA9yftB35Ztwx3GnI
NPub/kG2kTadYj7ynOw+Z0/3twzWSF/DaHc/w0iH7LW/Wy6y4ZBnx787sv2Q
8YdOHeSkoXcEPSfIcEP/B7pHkNWGXpOsF+VJ47JuEvIgt22V6SZaBnD/VPvE
vY08au4B7oAjHBvagd4d4Pp7LAPYHbi7p+PNWYjsQGQIZtmEc2x31uWDbp+T
TMt5iWzBuc5/D8PwDzUt85FlEVLuFNsIjIAcuWccL/AS7uwvnAPu6Y+cZ/QS
Zb1D2C85juCfa5y3teYBF9rK+5l1t8448KUm3p/gSA3CBeBvjbx7GSNglBcd
s5f0QzMBXJV1E2E/79iA92b9Qq/aphnGZ51C2Fnv0LP2eZb1vOC4vG5ZSxwD
4BrwycbCF8xxU2EH5g94HfidtQ7sCKy0UHud4/6Zccz5RvOAEwJzAKf83nqI
Aw/8yjlYajx+cN1C+GWxdYJDgF9utizWYDPhFNYlawo8j/XKOwJxd5uPNrGu
iecNgPWNzRsDaxybPOC+31oH+PR3+vk74v+B//8TK+k9nbd2/nmgiYFWYr1r
b7H13aX/G/uf2479kGO0yHR5HBc5jgv0M3b3OJYbLPsex+5ex/Jby3vYftP/
x237w45lI9fccseVsEdqW/rPeDS4Rlc6TozXHx1jxvqx2paxe9J1sdJ5YL1Q
9qPO4VL7zLze5zwDpwOHAJ+ApwLzAOeA83KGA/8As7PX2HvgsYSRDliftMAh
wPrAJJQFLM9+IU/GDd52Dd1vO8C12R/5TQj7NdcL/VvlemQs8z5YYrvBzdnr
5Acvp620C3yFsw7Yl/OMMjj3wNPZU/SH9wHqwc+e54xgfDkPGCf84EKMB3Ab
bxzgJfSJ94Z2+nu5Npmrnq5r/LwrtDUd7wtt9PP20Fr/SMtjXHmP2NG4/O7A
2JzkHqJccMFPXb/gNhsdm4yTcOdmnAQ/ODppWfvgMWtdv+DzG1y/4FKfuN7B
+de7lsGv1rn2edvo5PjyDtLB9vHe0dE43vDAz/KbJXZ+S8MGF+XNBvwPPJC3
nJp5wJ2AHWj3QOOJA69j7DOeh026Ac4xZeV3Jfx9PD/YH7wBtXJMeafZzbaO
dlzx88bU0nRDbCN+3pxYf6yd3s4t5fa1bOL6Gb+964A7gbUOjsg8cE8x95zn
xGU8FhgAfAoYHzgcOBC6l0yPhp3p77Chm8k0bcDq4F+8PfMGDc71a8t6zXhg
+leMJ+51w8CjwH2gH8h0iNjQCQDnQ7cDPQO4wK36PzAMWgdwioXmf9d2kQ7c
aoFx4A7QGkBzwN/7S56/660HugRwn3mme8N2QbMB3AvdBPQTvKeD54L/8rYN
vg7Oy7s5a5p1yts26/hg+wkOfYz9Pkr/LPN1d8yONO5qy8b/tnUyB9Msm3Lz
ezp1v2kbM20jdqZ5/K3tnm5b2JfQ4bDm2B+ZzinTPY02boZpqQN6iLNN96Hj
zRhl+hXavtpxwc+7P2cuZypvlpx5nNnAOsBJwD6sS848zkHoZ3gD5/8AGpsp
+v9qGP8Umc6MOGh1LtEPDdRk/ewTYBVgF84p4BngHvYrsBswHHuScxc/e5gw
YFD2IfnIw3nAPgDGy+9WlJvfrfBzPlJ2frvCZi/9zfayFp5xzlgL/3DOWC/Q
WvFXwPs/NEL8EfBnkGmq+C+APot/AP4DVhpGusdMy18I9F4XWtaLrifm4HHj
icu0XNw/mZYL/3LDmJ9nbSNr5Hnnnrb+3X7Qh+eMJ+4F+0F9T9lG5gAarXPt
Q6Y5w5/pzOgP5ynjzVmzv2uCcz+/beFnnXL2c39MKZLsKmRWXVYk+VbIrJqq
TdxVRZL/9Y8i6UJAHtafwswqkoww4i61DOKmFUnOFPK0Li+S/CnKnWkZz4f5
ZZHkcJH/t0WSc4ecs2uLJJcKeVdXF0kGFulmh3mlSLKvbiqSTL23w8wtkkw0
ZKFdp03+G41/K8z1lk26Gwyjvl9ZHnVcYXtp65VFks9FHx4tkpxKZG0+XCT5
bshLW1EkWZzELQs38tSIe6RIstjwo6MdeXnI1VtepDKIu6dI8uY2FEmX+0b9
Mxyb58I8ZD3I1bu/SLL8kKt3S5Fk//03zM3ajMV089HuJUWSzUfdvyuSDD7y
PGh5yAJ8QBt5gfdZNnmWGkZ9vymSHDHkis1xTpA3do02cfn9gnssv31wd/G2
QRj+THPJGt/TtwzO+z18B8Sf3z4oi/cm7iHuJd4+KI87hzcp7g/uGWg3n3Fv
NZZOkT2RaR85g5tKL8gZAG0iNHTQn0GX93fPD+gXl7mPvzMffmgfV3hmNJLe
kTqaSAdJ3N6+0dDWfX3HpH37+HbG/bmLb6P5DRU7v61i5zdXbO5q3k+5v8lz
QJH24ZQivV3y3sp92819xX7tqk26nX2fJX9732Hx7+R7KP7dfTPN76nYzEF+
e6UPnXwXJl1b31Xzmys2ZeX3XM5d3nOf82xr45svee4okmxEZCXOK5KcR/y3
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
y5c4TpQ72b5S1r3WAxz0oPmAxR7Qpt3/C2w5nnk=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
OxqCtwRVi81kkF1fGtPdtjfgf4YpwF8=
             "],
             VertexColors->None]}]}, 
         {RGBColor[
          0.3740118327288224, 0.19753878700168623`, 0.6426991928208116], 
          EdgeForm[None], GraphicsGroupBox[PolygonBox[CompressedData["
1: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
IQ==
            "],
            VertexColors->None]]}, 
         {RGBColor[
          0.45460766545764475`, 0.33767317400337243`, 0.7559863856416232], 
          EdgeForm[None], GraphicsGroupBox[PolygonBox[CompressedData["
1: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
            "],
            VertexColors->None]]}, 
         {RGBColor[
          0.5352034981864671, 0.4778075610050586, 0.8692735784624348], 
          EdgeForm[None], GraphicsGroupBox[PolygonBox[CompressedData["
1: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
2qY2/3/Uxl/9
            "],
            VertexColors->None]]}, 
         {RGBColor[
          0.6020370632764945, 0.5889682294235138, 0.9103699528787895], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNnHm41eP6xldlrbXX3msJsXdFau8tTkgnIVM/YxNSJESDjCVKkqRC6qBU
uyRTGTIlSkgUUhkakFQazY4pVMhwHKrf/em5v1fnj+d61ztPz/vM31V+cd+z
+1RPpVJjM6lUDaXnlaRSuwtqCioEvQVXChoIegl6ChpmU6mP1f4TwbDiVOpo
wTGCStVd5T4HCa4R9BXUd78rBPmiVKqT4BxB7Vwq1UNwkaDc8zDHU4LugosE
dVV3ieBiwQHKX+056riM/gdmYy2fCv6h358p/Vywu+Y4T3CuYKnK91K6p+Cg
bLSlXSONda2gn+AfTll3ro7mqkilHtf4NdXnfI+1JBtj7CEoeOxOznd2u6nq
3817aJSNtXwhKNVY3QXdBL8oP03wNKn32kNQ5vOg3QiNtUzwnmCC4DTB6YJ/
Cd533W2C5c6/nY09s66u6v+k4AnBtNoqq4hxDs7GWr4UrBNUCcYJurgt+12b
CXyg7i71aeu5xwlaC9oInvZ6LxacrbvPCYoFi7JxXqzjSdV19Vk8Ieji/P7G
hcvBJUEf3+uBxhfy96r/mYL2gkOysd5/CxZn46yZ426fxxmCewTt3GfvXOyf
PU10fTvf/QW+p5llqVSz8jj/Z7yPSwS3aw8fCJYL/qu5TlHbkwXjld8gWC/4
MxtlJwn+k430RMH9qvtS8IVgguBjwUfFsXb2wNlztg2U1hd8r9/NlB4u+Etw
alHMd6v6vCt4hzVoTc8LXhD8LZgleFEwXHXvud19nvPz4sBp3gA4/qfaPef+
47z2dYI7BR8KVgmqXLZW8K36/lP9mgjuTcYT3OV9sH9wh32A1xOV/1TwieBv
5VsWxR7udhn7v8dj0I53QD/W10s4uUznf7zaj1DdMu+Hc24jaCtYLLhJcLNg
idNbBDu0n5cELwu2C2Y7v81nQz6Vj/o5gjvUZ4XvlffSQvB/gl+z8Zs13O6y
EwQjfZ/c67/U532v7zbjBfktog/9K1OpVzR+tXzMM1dQPR8p5UN5D4K3i4Ne
QjcPyO7aD/sb5nte6r0tdR30DLpGn7t8HqcJNmYCX5oK7vB6WWvSn/H+Mr6A
K9A5cIGxbvKcrGmNysf4na83DRgv+Ig3L5iQiTWT3i2oVP8Nrr/V9P5YQQO9
sV6CntBwwZXO/6x2x6rPMYKfMpEebZw5Q9BOkNW6O/iNw3PgPecKipQ/y3UF
l3UyTzrf7TjHj7zG35SfLpghWK38/qqrJ1iqO2qsOzpH5bVNr6CzZU6hzyXm
RR0FdU0DoAV1nNLnw0yMt59gf+3tCsHlglKPAX3Le43MtY/LoHV7CDp73RXq
09tnVN9nxlit84HH4PUW0aX+5XF20ILRgjtN19KCjODCA1KpP+qKnhVSqcGm
H9CRK1ReY99UqpbKhyp/hOBIwRDXk9+o/odrzqaC74oi/Wcu7oCxuZOzBTlB
se+AMu5ko9bWrjzOoZPm+llr2ENz9dDvbfq9l373Mc6Cb98WxdhNBEv13htX
BG2GX+bNpzp6nhLzuX1y0eYcl9Hum6IY47Bc8NuC+Qv0ZqxgjOnOGJ/XKOHW
SYKTBTf6rXBGfb0u3kN7rfkHrbmm1ry37wr+NMp0caWglssuFNTznV+Wizc1
UXAP70L5q3yvDQV9BFfn4v3e7Xafue29mXh30H5w9MdM3M8R5gfUwR+2ZOKt
NBds0u+jfI/gILiY4Phqj/eyeSa880DN3dfrOMBrYX31zG8vE1TpjFqZl4/1
Obby2Xcz79xgenCX5xtterGv+l/qd5Kce0vj6MnmX9DSDyyXjHYZ7UaZpu7k
p5YjkC2a6J3Oqgj54SXLAuxncybOgP03MO9EZtnP+2Ad5dkog4Z9I3hQ8BA0
T3u4xmfxrcseFnwtmOx2Fdnox173891emgueBX06U7Cvy5BBc34b0KY9NfcF
ftvFxmPqvtJYkzwH8soDziMD3O88d/q44AnBD4JHBY9lAh8ec90fGvdZwcyS
4Jvgzn2ZOBP6PZkJujpV8FQm6O1Tlim/cFvm+877fiQTvIN0SiZkjymee4vH
Y6y9jO/s7Sy/e/bNOLwj5IP/eF3IFi9YdkFWAnemWu68X32+FHwheEDwb+ev
Vd2rglcEuyn/qvq9JpgjqKZ8qijeLu9wZHHU066GZbzPBJ+CU6obbVnmZKf0
QV79SLChKPhlNUH14uj/SjbGWy461rE8ZPBt2cD9nW8gHzIEtPi5bMh5yHcn
5uM+2Hdb0YwZ4inXqex575t2bfJBv5E7TsmH3AYfnpUN2YgzapkPGW6nnJKN
uak7OR+yGn1OzUc/2k1X3W/ZkFNYO3uoLmikNYzRGg7NBy+ZJXghF2+Kfa83
TV2oPm9kg7e3FrTJhAxP/bqikO9bua6VZcGxxUHLXvS4rYtDdqQOOjLbdacq
P8Z3AI7M1zwLsoErpMw9Nxvr5V7bWLZjLOjIqYKWmZDhPxF8bD7zejbG+lb7
/6f210TwlX43zsd+TzReINON9RjsYYLH4O6/VvvD8tGnpffEWqGJLwteMl18
yfv5piTmoc8JHhs9YBLv2bjL3APyce+Mxf4Z+//yIX/8Lmih37+WRP6EfJSB
N/2M73NNk0jnCO7z+/hccKTa/6i2mwTH6/fWkhirl2jjMtHGIcW7ZKmfzRM2
mR4gK1AGPoNXvQVXCV7OxnvaofQ4jflLSYwLTd3sd498d5rgdNP6ts5D76YL
nhGcxR0Xh44Hnf9QsEpwrMb8uSTGHW/8amvetcX06ah87Gmz4Gj93qL0J9aQ
jzLyx+SjjLHu9Xl8ZnlkXjZwoq/PjPsDL8CP74wX1/tuZvq9/mG8m+t3w93e
IBgoeNb1vwtmOOWNMeYgtwNf5xh/D1d+sOBGQVOng3y3M0yj20q2mVEe75Qx
LxVclg18Guj1nZQP+sE7n6267X7/yHTQv3nm8T+aPzDvRrX93rgJjrJn1sC+
qUMfaQEOFoeecrzzyBM/mJ+wBt4D/V/KBi5stzy00XygWT7m+aEk5MTvzZdO
T2gnYxaHPjPE891ufeg7r4nze9DyL3Lwwbqn/rmg94vcF/2DO21vefZQ1Q0Q
XCd4yP2Q9eHn5eb5/8jF++HdvFUc+gCy9tteC+M28jy0W2++Xm59Bb2FfGPV
Xe/5DvGcrA+dFrsVti50JuxP2KHAgdMsnzxreQP5CT0LHgn/f8cyIvmHvXZ0
E3RyZErq0KuxnWEDQ/9mHmxdKY+NDIT+TRnthlhfZK/cVRvLaei12NWwfaGX
Y7fCXoVuTYq9DVxGH0SPRc45jH1ng16tEawuDp0J3Ylzmek9YYuZJjpTqIyz
5X2gUzIWtHOt+yNfYRtgXGSbQ7Nh1xjtsbEpIP8w56F+V6wFHRv7xMElse7H
LF8gZ8z2npD5sDFg4+M+sB9gD8I+hB2BlDre9em+G2wK7Jt26Ac3CAZaTxjo
+4ZnnuE+yBHtnE8bB8k/ajmONU0pCV2N/CO+T/K8mdaWk0daP1jhu0J3LVge
4ix7mt5B4xL6R3qk5QLkA3h+C78h3i78HvkA/t/cujx2gi2mm839Rnmrh5vu
Qn+PMd9g7CNMRyk72vTjcNMt3jb1zcwH4AfHWt5B7mFuePQOnVmqOGQZZJpE
NyWlHbaO0wRt80FvWDv2m+OcYpfCVpGy7JVyW8bCZoDtABvFUd4fNOFY96Pu
SJfxro92W85iouU+ZAVo6Mn/Q1NJExmNFN7L/aCroNNzT6To9OAouhA6BDiL
LZL848ZH9D1wnfdKHbogbRkLuxY0EfsFNhpoAPr9LNMM3ufzvn/oCDbA09wH
uwttsWGgEw8yvqJ/3+j8SL3BTRXx9uHTyAHHWaZAtjjesuGpljHhQew1kUFI
aXeo3ydvEXsVtg9sHtitSLFbYGvDTgGdgo9dahqHHeUS57F50ZZ22M44P8aC
nrMP8P5q6dG5fTVOId5GlXVKbOXo6NhpWdftgtu8PtJ/GUeHCW7xO7lZcJNx
/Rbne5t+Q6/Ao7sE4427wwW35kN23abz256LM2LsEfmQXSkDp49x22E+0xHu
X0Nn9EpaekE6+MFr1k94J0PM+28yXoKzvINxgirj9HjnuY/Rgjv9hsc4D5+Z
53Fbud9YyyHICJdn410O9XwtXT/G9OIm14EDz/h+uPM7fKbgydOuQx79Oxdn
sck4jd19MvzAsuyDRWFPIV9Ne5+jfc8VpLAjpCMPj3zd64bO4I/BRwE9ne86
6CFyDDLFTOFts8qg75s9J7b/Ha5P5NCXredVz8ScnPuP5gesFdo11fNhf0b/
bl8cdvUOxSGHYjt6yPvoKz1uawO97UzwKfYPLuyWift8LR3080mP+3BR2Lyw
S12sNnUy0fc+z8McPZSv7bqH3Jbzukj5MtfB036z7Hiy73xUPuRP7vOKbNDY
ab6bC9GrBbUEnQV7CPYUXOCUOuTX1wXzBOcrX9PtzhPs7jxy5Hy3g168IViY
C/rY3PQSeXOB26H7DcqGDYz1Trd8erNxmT7or+ix6PHnao6C5+sq2Fuwj+Ac
QYkgL+jklHYdBcWuw6bzp/XhxC9Cvov3zVjpTNzJvHTw5wXGp26ep9T6+IvG
LXTjWc4ji/xu2f05n3FPQSPh3hjRzB9z8U4WCd72u1ns/BT1/b4obJ9FxiPu
Gnq1zfLwEPd7Kx98frtl5SKtab7WuyAdNoK/Lbd393rBiXOMj5Mtl1Szng4v
Gum3igz0q+/hJOMLdehUZ3tNgz3/m/nQM0jfMC1cKlhimrjEe/vL98YZtbXt
hLnTfjs7bezeK/iNTn6DcaKN9UL6DPI8C/OBC5xrL0FWe3s9Hft/wWVXZkNH
Wmg8y3hs5huYDd0f/f33XOjS6ArMudB10OB3Be/kQw6rYbkMWvye6xLdDBoJ
7ryj+d9NhwxX3X2wAz9sWgAtX+b+V5vmgD/4MjflAjf+NN6wv918NvDxXCbu
dmE63jW2S3xENVwP7wbHqX8jHbhO+mY6/MbIs9C9Fu6Hb7aa+T5yUHWPQf4B
3zP3zZtfmo694W9GjkWORw+8TjAgG/T9A8Fy87T3vc/bXEY+8VuzDvy3m71n
3t9M7xl73BbXYX+BLyLrgYOrBCvzwSPbuG6ky1YYd1d4HcM01jvZ8KVDAziD
t9JB/z70WMiGyIj4wR72PSELoCNgs8Nuwt1gn+CuttvGBN2+xWMvMU6Da/D/
m12G7xf+1tLjwOdame7/YXxhz+jT/X2O0CnW+HY6cKWT19THfAlcgd5Rvygd
PHu199PX/Ip28OM1roM/r3W+r/UP7i/lO+ccsXlDC//yHOyVOW/yPhZ5XMqY
Bx8N/vu36GP7GueFbLFesM6ywzrPjdyxwXXQ9zezQe//zIU9FBvqYI/3pt/k
9dl4o8P8/qAp2NP+AF8E/83FnPSvWVfya2Xc4wL34x1zl4/47dHuT/fbmgt9
4DivmzL2Mcjr4v2zJuahzzXZsK/M8bpYH3ae33JBM9CNqowX4MevuSg73mMw
Fms/03wlk4l9UAbdaZcJOYC6MzIh55H/KRd6CLwS3rskHe8Q/sr9L06HLay6
+8CDKaMddrFqrpvje2MfI2vrzZVHvAY4N884eLzpAeXYxVLuj68YvOHdD/C+
5xlH0M0b+mwYu5/gl1ycK3oSNrYdltf6ex5s2thB/1b5tnT4nxkb2oBtlLLt
gp9zMQb7f8VjX2tgDMqQsVN+w/hgGhq/sREzBnP3c9u57net3xt4Bi6Cd0ON
4+A0vh/eAbyzl/BqmfDqtXzYUpF3+N1fekRN6RH7FOLMjrfdALsVdiXsQ0/l
Yg/cYXvx/VUVQUuxQT1sfX2jU/T4K0z/oAnwS3yV+Psa6b7GlIc8NE3zttS8
+xfirQz2W7zdvAtcutxjQF+wpU32mgap7z7qW1oIOYOxd2f9Ki9Xee1CyBSU
FQpB86B9yDPwecrygmm5uGP2Bn3ADoh9d7zGaaxx6hbC9veQ93mnyg9SeR2V
36zf++p3mX7fq9/N9HvfQthviGMgRgDd/1HL2W97f9zPCa6H5yHHvK+7XZ4O
eYk4JuJkuPPZgpcEK4oiHovYK3xD+HXw82ALxn+Gr+wR03v6H2y8AD+wf9cw
P8Q3yBjEf2ELxA6O3Re7Mn5WxlpdFL72erbT77B+x51AI5AvOnh++sM7sGtj
e35Q53CMzmG/QthMpnj/2GWRK6abpxzlPo+p/QlqX68QOtmzbjdSuLpJuLpb
IXTqAeYphzhlbyuLYt+cC3IZPnnwDB85YzHnQo3fVeNXqHxtUcRM1Dc/bm5Z
HJnreePr+dab97Ct6UTT884uI46pvXB4VXnEtEGXscvhmyMOjBiyUtNeyvDb
naI1fFY3cA75dpx19bYq/7pu4CjvBb8yvugWKl9fN/Azp7muLo+98BbquR3+
PGyp2Hobqv1CtS8qhGw53nM0V/kqlZcUQufENoctFnn1LrdDL6UMe/Ahar9Y
7XNq31S/l+l3ccE+GNtukUOxDWPj7en17oypUvtX1T5bCL8K68I2fKXbVvhO
9vMeiJ/jnPB7X+Bz5TyhSRmNkS4ErfzJb/NVjX+e7rG8EGMioyAX9/abJo9c
zHpZP3SNMcCf580n/7R8dpRtCug97+ltLUuHjHa09bKppnOU3WE6BB6gE3An
nGdb0cAZFWGbX67fHStDJn3FtJ/fM7Xm07Xm+oXQy0aZLqCv3el8O8vg2ESH
+Q3ha7rVKf6l2RrnLI3ToBDn/4LxFb2BtbBn9AH2DQ4gc7M/1oYuShn3gu5K
yvmCl/iV8UPgjyR+iLeBf5JYmZ35bMzHPSNvsQ9oNTIQayGPHokehW6HfMT9
UIduTEwBdcht9OONc5bQD+QF5DzKoBXIUrxR+jcznRxs+kXcGvTscJfB5840
3cIvjS6DjRJ/5iLTV2g5Mjq0GR6BzA5PII/sRbwM9AKdB/sZcTvIZaTU4QPD
/0EsA/I39J7+yGKH+c3jKwPHaYecDq+gHbZS+hEP8rTlM3hMTb3lCeVxt0d4
nUPMc25yvp33xH6QQ5HjkLvbW87aqReaHl5vOniw6SJ6ProaOF3f9wZd6eB+
RR4DGwC65SPWy7HLnOV6dDL4FzI9eswNtnNwz2e7Hp0M/yS84FfbpNB10UfR
XeCBnAU089Gi4Gn1TL+gATPMQ+hPnAq8CLqJDgMu0P8Zj73Vdooi69O8D94J
PAcbGXOic2PjI0W/3N/7vtx85mafb3P3I4++irzD3WNzpB88Eh0PfKGujt7d
7LrxXogvmWS+i33qA3hyOnSjmz3uc6YxyMjveJ3cNXIl8iUyCDYv+q1MB02E
fkHPKl3f2/TySr+99mU6lwbRfrH3wXwvWMaHrhGzssk+R+RWYqyI8yRWYJvx
B5wdaJw533fC/YPHN7huTVHwRng/vGuQ65Z6f+wHuwv0EnkFn/BOP0Nx2OaQ
XzgX/MQ7/RiWnX/xPeJ7RwahT2OvBTwmpmaz90AszBbnW1j3AE+ILSCmipgv
+jX2O6T/oc4XdF/T6gbNr6XfM+sGD2hqmsF+EhmCPtiLJpgXnm76kcQyEE/G
fENNR6GnCV3mHIj1YC3QymdNz363jP+z3zv3wH2gq8zyPXBn6FFbjd8zjS/0
5876uU8j0z7yxDdNNv4RY0SsATEHxAz95PNK4pDI9/P9M8aBnh9dd7blOHCi
ocvAS/w60Cr23MHvjPeGbRz5FTvxKMuayFzI1djshtpmNth5+NEg28+g+wty
u/gAKTbTRe6HjRBaAk2B9ix2GTa2muKnEyqifWKPYw7WNN+0iHPkDXCu+C8P
sL7EO+Y9Qw/gfdhtscvC+wY4j5xwg9e6wPU3WB+6zu2gActs50lsf7dYd0eH
v9X2oBG2D0FPhjv/ruuHuz/1id2IFNsSdGueaWdi6xlpW8/tzid0jXZrbfuo
st1hnO0QK90vsSeRJjYhUmwq+HgrfUarXTYmv8uuwVhrXMYcGzw2/p72ekOr
KuP3Up8B+//bZw+NQb6Y77NMYnxr26eHf76W7TPQhYRmzDE9wFeH7x0ffDf7
u0rtz6vwuq90fYX9e/Xdp6t9aPTp7n7M3Vf4s7UibH740/A/JrGTpEkMIyn+
xyTmmHZdvF7G7eF9UActQxdiD/iZ9/c64BnoV6+atrEn8ughi407Octn4B38
AT6RyKTPG48T+Wy+ZZOlxrW0ZdlELp5nXE7klUR+edc4iEyzxHeFvsH75L3y
7md7D5d73+xhm++QOmTbN/2md7f+zHtFxuRtU1fT+jZ7Q+5c6HePfxN/9G2m
H6+bbyNvILtgK8JGynchyfcxpMQtcr74OPEVI6d0cB/eOb4KZBDuGL/pMtOA
61230PWD/JYGuA5coG3idyXFH4s8xndLfL+ETYNvffjmZ6rXQv4Z119i2k5s
KvHH4AJjsNbpric+dYZT2rUtC54Nv+6ldFmDsA29aPsQv7dIDuxfEb7nT8x3
JprvTHD+I/Ml8p+6HrlwVoOYg/E/twyMDv6Z68njR6xmmxe+vuq2fb1s29UO
+4EyttEhC2YtG862vYq1TvPZ9DDt5oxZM77DGrbF4VNKZ3b5/Xaz7e4l26sY
q8g0nnvFb4//PonlISWWhzdBPH5P0xViK3vndsUL9jGOXuX8i66/ym+Ifr0M
6DHJ9xCkSew/aaXfWy/XQ1/xPeMrTuIVVvpNE9N0bW5X7GA/06++zkNLaLvK
tK2P6+Z5vAGmC9d6DtaNTNHQ6650vo/LDnQ/9Gz07ZnGO86FGBdiE5KYF9Ik
FoCUGIcB7oc+D/0iFoo3c7Fx+mmv42DPcb3bHua9occ08nsipieJlSBt6r2x
RnQb4imYk7tM4n7os1y43bEivnO40f0O93kd5Dmu9Tys4wvjL7ak5aYft/ud
jzBNwQ+FL/NC+zK7Oo+9BXslvh90+W6uw95LPCVxkfhPiTcnJhy5Hd9zD+Mj
8eDEaW+wLYT31tFtJ9m/iO8Zf2OJx6IeeyxxvVWeD5n1Cc8/1fl1tvFghyn1
GNTX9vwXWfaZ5HVg9+abhSQmdIL3sN5jsD5i9IgRAxe6eE5kf2TNab5fZM+n
nMffTYz5FJ8dbYlxx/YywmeHj5u4dOLUsfvxzQDfFlzgtvTHFjLV40KXiW8n
Jh47P99W8J3FGU7ZAzZG7JrYNzv4jOmz3HdF3Zkeg/57eX3MiY1urM/uXK+L
7weKffacWVXdsOthL8B/xB5oi7+APePDR2eYbtr8q/Gf/DTRzkJ5fFNBnBl4
DE3C1vOk90nMWU3X/e4x4APETRM/Td9Wvn/ioC/wGNAz7hUZHXm8pevpU9Pr
Yq2rbPvBBgQuPO0+5/pued/dPQb4tNV3yx6wj6zL77KXrLe8hl0Lnys8NokV
AF/Rh0ZaJ1pp+xNz/+E9QWM2ux/7X+F7o13B58pY6PMrLG+io6+yjImuvtKy
J/Yg5MjEPrTWMmZfzb+1Mtb5H88JvccmtNqyJ3aZ9y0jYxNibOqwpyATM3dt
23HIr7OPCp9qJ+MI7/xDnyt4jKxPjPJhlvWJk21qWb+J8wNdTx65/1D3YTy+
XfnGOPid80ksMrF9ybccG/2Gifv60vSDGNCv/IaJ+yQedr3XSyx+8o3fR343
fNeUfLf0iese9Pxfm058lcxRHHE5D9h+vSm3y55NCi4n35ywbmLqiEMda9kF
+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
gvw=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
             "],
             VertexColors->None]}]}, 
         {RGBColor[0.6612936495541516, 0.6841770752512012, 0.91172082053314], 
          EdgeForm[None], GraphicsGroupBox[PolygonBox[CompressedData["
1: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
Ya4lJ5ALmHMdyAaHlDvuzwZXkwMY++Vsxi5juLHbGLaHPj3o2x3szkbtxj3q
3rSGo7appqWWpcbp2VHDV7v3DKmFq6mrpauJH8sLDi93P5oXWpg+X1+vJja6
NM6gZ29UadTyj2AfzkRNv08u3sG5984FV5YzyZXkzGpvarxqu2pwavlqsGqv
avpyWXNAcz85rbUz/8fC/62whmau6hydmzmr3Nw18N3l6NZCrHlY67Am4toY
c421rpG1WGuu1lqtycql5HxyPTmVWokag9qCmolai5q+Wr6ai1qFGp7anZqF
tU5rRNaGrHmqXarBqL2oYaqVqxmqFaqZWzu1Rmpt1Bqq2qc1Y2vFaqBqH2ok
PVMNRO1PzipXVQO09mMN1tqrNSC1RzVftV41SGs91pSsJVnzsfZnzdVaqzVA
a2v+j4j/G2KNzdqdNTdrbdbw1EKtkVsbVxOVy/lN/ZZyOmtH1syslVlDkhvL
WeWqcmS5kDmpuaicSC5rzmGuIac1V1VjUFswZ/0orWFZu7Jm6f9aWMO3du//
XKidqUGpPW1NubOalVqVHNpahRqm2qU1C7Vv/2fD/9VQA3dvumfdq+5RtRE5
jtxGjUTtyBzJ3EgNSa4nJ5QLyvn+D+wagdI=
            "],
            VertexColors->None]]}, 
         {RGBColor[
          0.7205502358318087, 0.7793859210788886, 0.9130716881874903], 
          EdgeForm[None], GraphicsGroupBox[PolygonBox[CompressedData["
1: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
c7a1fKNbjO1qgPpn+hXSrwCsy0SuZc5hrmHO1ZT2d2jfCJqUxN76B2P9vSD2
mFq4Grzau5r4cPpt595tYFgmcg01dLVzcw5zdzUNtQxz+G+yI8cztzuTHbmw
nFoubU68lTFaMG9zsAX7g3ScIc/O+85fEHvSvfhv7FxzIvqOBzmNYi/Zx9/c
U+ZS5uTm4uuS3Nqcz1zPHFutwJzbXFvNoF/iE/WF+jBzSTUStRFzSnNdNQ+1
DnNev50+T1/nNzTXVBNQCzDn1Ne4h927+hxrL2rSatHWYPSFvhPfxfjEd7jH
3dv6EGOjPlNfaYycl2j4avdzk9qVmr1avTWs44lGpjamhjU98Xn6umnJ2ZFj
yC08Q2rry5LagBq72r+au1q7NQD33hT6Ti6OPWitRc4sV7bmYu1BzVut2xqE
XMZv6LeT05RlgkPJnRpnolZnjc/anjU7uc4afltdHJzH3EJNSy3LHENtXg1e
7V2NXi1PTVAtUE3vMP2m6zvNUcqjdmdNz1qeNTz3ppxFruIelbvIkeRGchhr
i9b8rPVZY3Ssrxjny/IY8+n8qJlZK3tKLp8JH6rv7JEJbugZ92zLEa1dWrO0
VmkNU+4ix5HbyGGsHZkjmxtbQ7I2aA3T2qU1Qve+Mc7Y5hmw1mmN0dqiNU+5
rT5I3yPHVdvzHfjsanz6JjmTXEkfZS3Umqu1VmuiavNqnGqbavT6JmOYsWtQ
ElvlJHIRY+wUvyHrbAwmY4/gvp3ct8MaEPb11jysdYDrciO3tOZlrWtHojWY
w5m7dUtyDzUEtQNzEGun1mitzVpDtTZszdRaqTViuZE+Rt9yLIldchq5zOiE
C+rT9GVywlWZiAnGgpWZqB2osautW0PQV+rj9G36TLVTNVK1UTVUawvWHKw1
WGOwdmxN2VqyNWRrQdYcrDVYE9JXmsOYu+gz5Vpp7KyS4Fxq/9asrVVbA9D3
mqOYm+iD1ZKtmVgrUVO2lmGNw9qGNQ1rA9YQrB1YIzD3U7NRqzEHtNakBq72
/XGinatZq1U/kNR2rNFYm7HG47dUk1WL9Zuay5nDmbuZ06lV61P1pWrWxo43
eTdvlEcM8Vub45nb+c3VpswpzCWmJdqoGp/aXstEu1PDUrtSw7NWZo3N2po1
swElwenl8v1Lwpd/g30mEz7dXNIalLUnc0pzFfeke9GcxdqTOam5qDUoa0nu
UfemNSVzU/eoe9Mc1VgmZ5WrGtOcyzU4t3Oam5kzmiuao6WTPeVe8pvKheUs
chU5se/mdt7LbfnxjqxlqhmoFVjTlKurGasVy9n1pfpEfaE+Vd+nT9GX6APV
/tX81fozCTc3Bhr75Ohqt2o0ajNquNZarSlbS7bmqtalhqd2p+Zlrur/ZPi/
GOasnl1rGNYuPMPWOq2BWvu05qkWZs3CWoWamLUVayTWRqyxqE2osait1Em0
EjUltSQ1E2sp1oysFVlTsRZmTc9anjUxtRs1D7UONRy5vjmzubKcX23YGru1
dTXioUnN1VqrNRi1HWvA1n6PJdqampBakBqbtQY1N7W2yqRWrIasdmzN2Nqg
NWBrv9YI1T7VANX+1EDVTtQk1SLVUFokmoxaTPNEq1FDUTtRs7E2ao3R2qI1
0ieSmrC1YGuO1pqtcVrbtOZs7m3Ob64/MtE+zMHNvdVA3EtqbGpr7im5oDmf
uZ6cUK4rR5Qbynmt1VrDtXZrzXZmUkOzdmbNTG1VzUitqCCpHVrDtHZpDVGt
Vs1LrUvN1tqrNVRrp9Zg1TLkkHLHXklsNCYaC42R1nb9nxj/F8Ya7/8BEImG
1g==
            "],
            VertexColors->None]]}, 
         {RGBColor[
          0.7780560539956803, 0.8521418444924407, 0.9071205896328294], 
          EdgeForm[None], GraphicsGroupBox[PolygonBox[CompressedData["
1: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
RezrQvB2aqjFfAbee2sya19rYmtha2BzWXNYc1dzWmsFa2RrY2sGfZc+S1+l
D1PL0Cfpi9Q0rCWsOaw1rCnUjtQE1ALUkEZak3LsvSAvNdTW1sjWxtbY+ZEP
1XfqY6dHPk7fpgai9mNMMZaoAa1kHylcWzJ4PzX4NnNqc2l93DhrDI51GIxN
DbWUNZq1mTWVvk+NQG1AH5gbaUxqS92jWs4ay9rKmk7tTU1OLU4NTq1ETUUt
Rc3E2ssaydrIGmwyx/yNY/8KJqWGWKHP1dcaM6ylrLGsrayp1MLU3NTa+ke1
lxqY2pc1mLWeNZ61nTWf2o6aoFqgGo9amRqf2p6amVqfGqDan5qfscMYZuwy
hrzGOf3Duf0NXk0NWqEandqcmqGxyZhgLDBGWRtak1qLtou0PzU7tTo1wHfY
R2WeRSXwn9Sg9RVE2p+an1qINZO1kpqIWqGakFqQmqGxzhhlbDLmzY40RrXF
WZGWqGaoVqim6FryGftsXVNHIg1S7VGNUt/gmnOt6SOMXfpAfZ8xzLXjO+e7
5hoyt9Cn6kvNMYyd1mzWasZQc0ljkLHHnLJiYtA01DIqwKcz5y/m/gmmpYR3
uSw2ISW802p9anhqd2p+ak1qJGojak7GBmOCscAY8TljDdhWH3wG78K6PoUf
Pgk6ZwQtR81ArUBNR+1RTVItUg2yAfdwMvMmgfrVghZqTmAuoCaqVh2LtHU1
a2tna2JrYWtocyNzLHMrcyS1B2t8a3s1CHMPY6CxzxzEa1XzVuv2ms3N1ETV
Qs3R+nEeZTiP0qAvvDx2CHYwKFct1NbW3Nba1tj/RD5M3+UatReg5qnWaU/A
WGmMM7YZMz/JCjHDWPExfI3PzGcFPkoJWqwaq9qqmqy1uDmyubE1+blIE1YL
PhtpvWq0arNqvmqv5oTmgmqw+lbXvGtdHzud62jC7xqDaRkhFhrDjd3GxD0p
QYNTe9udEnJLcypzKXNM3x19mr7Md+gcz7kn++kBzsaDFqEGpPajJmGuZ41j
bWPOp3akhql2qYZkrqAGrfZszqB2as/AXoEaqrmbGrfatjmcWrIaq9qqmvII
jluZa6kEhsPfY6yaxwLvpgRtXI1dbV2N3FrjBPx4Zqg55jGvLefVxmeYFbQ/
NUK1QTVAtW41d7V2Ne9F/OYS5l0MFrqe1dg57iiQDJ+AzcJmgvEZQetXI1cb
V/NXe1IDUvtRg7I3Yk/EXog9krmglLEPzEkJuZc1gLl/XpTLmYOZe5nTqS2p
+aj1qDHZW7EGsfawx2IuY85trm1OYy5mTmwubE52JuoR2RuyB2QtZE1iLWJN
pJasxqy2rKaslqMGo/aipqMWY01nLacmY21nzWitaI2ntqMmpBakxqPWouaj
1qPmohakRqQ2pCak9qImoxajBqOWpGakVqSmpNZhDm7ureahr3EN+Oz1OWWi
Z+C9Lx09G9eoa9Nn5LNzjbg2fIbVonfQd881Y26pxqG2YY6pFqBP0BeoCah9
qSGpHamBqSWpOak1qSmZW6t5qHWYY5urt49yVXN2aw9zdHNzaxBrb2t+a31r
cGt3a3xre2t4c3lzfnN9c3q1HzU4tTc1IH2HPljfqw9RizKnN5efGNX6alpq
Wdb8amNqANb+amTW9tb01vLW+PryHdZiKcGnW+urEagNWPNb+1jzWOtYA6lV
qDmoNahZ6CuPwY/Gg8/03dTn6Gt8R9V+1LjUthpG2okaj9rOskjLUbNRq1HT
8V3wnfNd851QW1GjUZtRY1EbMuYYa9SI1KLUYNRe1KR81415xjrfebUpNQm1
CDUqtRw1KLUnNR21OTUetR01OnsfahJqEfZA1IKMqcZSNSG1KzUitSE1rGZZ
wYfqO5tmhdhmDDF2GOPUoqxZrVXVpNTarMmsxdTclmaEmGgsXBL56kLsiozg
s9dhW2Cbg7Xw1thibBHIhs/NCD5JXzQn8kWLsAszgk9Sa1SzUqtSczQX0Ofo
a8wJ9OVqampp+vQ+kaaolmiNqPZ3Jj1olUMjrVLNUK1QzdJaXE1SLdKaPCcj
aH5qfR0ygpaqhql2qaaqlqWGq3arpqVWaY1uba5m+UakYapdqvHaG7WHau/U
Hqm1ohqM2os1Y07U47a3bQ/cWlwNWO3Xmtxa0BrQ2s+a8B3G72L8TmNkVuiV
21O3l74/6rXbU7eXbs/d3pE9JXtJ9pDs3dsjtzduD1+t2ZreWl7N2dpWzUet
xxpXLd8eg70FNf0W0TPzWflM7eXbg7f3bk+/MOrJ2ItxDahdWaNbm6th2Tu0
52uv1x6i2pU1r7WuGtaH0TcJfotgT39RtGZcK64Jv03wGwO/LfAbBXsD9izs
VdgjsNdsT9hesD1nv0XwGwS/PfCbBHtDrlnXqj2iWPTNg986+I2E2pganNqb
GpnalxqS2pEa2ILoGwi/ffCbCXsv9lzstdiD8dsCe6z2Vv3GQK3EmG2sVjPZ
E2l6anlqYvZW7enay7XHqpamRqg2qKZmL9Aeqb1Re4J+22CP3t78U1Hv2B6z
vWV7yOYGrhHXRpuoVrImsRaxZrK3b4/X3q49frUAa35rfTUBtTI1S7VKNTN7
SfY87XXaU9JX+o74bugz9b36EH2HPrg4+qbBbxmKIq1TjVJtUs3T2tEaztrN
GtLetT1re9X2sO1d+82K36rYw24baaRqo2qiuZFP0ZfYA7QXbs/cXrk98QFR
D9Den5rhmqiHbe/aHrjvjjW9tbzvkNqrGqnaqBqsvV17vvZ67fHaq7dHb2/e
nv2ISGNVW1XTtfeoBqn2aA9SbVTNU61TjdRvIdQc1Rr9JsJerz1Ze7H2fO3F
26O3N29P3t6/3wj4bYDfAKg9mIObe6tBFEcaqNqnPtReuT1ce7f2zP8PbNZ/
5g==
            "],
            VertexColors->None]]}, 
         {RGBColor[
          0.8312724902807775, 0.8698881079913607, 0.8832796738660907], 
          EdgeForm[None], GraphicsGroupBox[PolygonBox[CompressedData["
1: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
z1qvWo2lVtAz1yufn3rNahy1jZ7zS+4x7i3gxUxoJXNAcz810595rhsY5/Xm
HPA6YDZ1Z4Ha5mLc08m9HczPhPZQo6hNNqRaQs2v1ldTvEadQdQdqMeaiVzY
HM/czpy4Bv3kghyQFId2VzOqFdXw7nXGJGORe94DtFODcSTg/qKIde4x7i3G
PLWFOaW5pBpD7/Zt+n0rEx6uWk/NplarTr1qNZTaSc/a3Msc1dzUHMzcRY9P
b88cxtg4jn7GFkSM1LvQ09XL1cPoRj+fEpv26QlkYu83hzV3VQPoves56TXp
wd9LeTPKm7qHuzeAdvC27hFVkVs6h86dOaZr23fiu3CNm6vrIegdmLPrnXlm
5VmVHppz5Zp1rTpnuWlMMZa4hrulnoNegx7NbZQfoa/D4NaiOJvRE9QL9IzG
XFNPRy/HnHOBbTDWruboVXFW5hmRZ0OembkXuAcY+90TXOt+U35LrnmfVU9Z
L9ln1gsxJzcX1xNxr+hL3epM7Bl+C34zfit+E/+mrBe8J/gX/PPCeAfO/WeF
8S7co92bfSd++35TfkvGAPcm9yT3IvcotYF7mHuXGsG9V82gVnAP9lmXMtYl
VfHM5iZqarW0OYreuHPiXOiRL6S8B+XdwXPZ8C70+PT29DC6lEQdf+tcErmT
OYq5iTmUZ3t6onqhnvEtTTWZWkwN51mfZzqe5Xjmd4px3sU4f6UGzoS3qces
t6zHOYZ7jjC3h8Fo+B2Ms5RxNnYPq4pcwRxA7W/OoFdizmWupWfit6SmVkv7
TemF6dHpzemJ6QXqEekN6Qnqnegh6R3poegVq2nVsnrGniV5RuzZsGdKakdz
AnMBNaSxx2fyWYxBetN64nrhetR6eXogeh96enrPnqF6dqoHrXes567Xrofs
WZlnjp419k7PWj3T8izLM1e9fD1svWs9fbW6GlVtqmY/lA0Nr3Y/mI1Y6B7q
3tkx/XaMUcYmvyG9KT1HvUY9Kt+NZ0qeJfmOPFvzDNGzQ8/YPAvwDM2zM88E
XGt9GHfv4lhz5h5qZLWxOYjaR42oNlQDuXerIdQO7uFqUzWTWkmNqtYzZzJX
UvP57o1Bxh7XgGcTejR6M55R6I2Yk5uL65EYq4xRxiZjlrmZmlWtao5mLmZO
YC5gTuZZlzmUuZNnXnrj5mjmZnrkal01qVpUzWsuoMent2dOoNZTo6pN1Xzm
iuaQ5o7mjJ6teobq2alnrHq9erh6t3q+7i2ucde2e4y5rR6F3oQ5rrHDmGGs
MIbonemx663roeklmjOaK+opGouMOcYaY5K5rWvCtWCO696gR6s36x5xKPWY
9Zb1TPWG/Z8G/5dBj9hc2jNKzybNqc0FzXnNdc0Jza3MEc0NzbH0Gjzz96xf
z8HY4pmeZ3nGGM8ejeHGbs8g9fLNMcwt9PT1Vjyz8axGj8W9WU2gFnCPNnc2
BzX3NIdWi6px1bZqUteiGkFt4JpUq6nB1d5qNrW2Gk7tpuZWS6gp1ZJqCr15
PVG90Lmp9+6ZiGchevCefeiJ6oV6BuLZuJ6dXp1n5GpFNaFaUM1o7m5MM5aZ
w+st6hnpFekxqh3V4GpvNaRaV82p1lTzqu3UNGoZNZ5a3ZzBXEHN7lmFHrre
uWcWan1zbnNtNb/egDm1ubQegd63nrNesx74ztRT10v3jEXv3zMKzyY8A/Cs
RI9Zb3lPelajp6yX7JmNuZqe+vQ0Z5uUetR603rKnlXoieiFeGahF2COaW6p
J+BZsXuMe4tnxsZ+zyQ8i3AP0KuokWovPQu9Es9wPLtJUq2oZlYrqxn1jvRM
9UrPS3MjczZzNXOk/wOOGnj2
            "],
            VertexColors->None]]}, 
         {RGBColor[0.8844889265658747, 0.8876343714902808, 0.859438758099352],
           EdgeForm[None], GraphicsGroupBox[PolygonBox[CompressedData["
1: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
s1kzW7NaM1q9nJ5br62n+z95Jnv8
            "],
            VertexColors->None]]}, 
         {RGBColor[0.941176, 0.906538, 0.834043], EdgeForm[None], 
          GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNnHuc1tP2xx/NM82leZ5xmZkyQzUzqThObh1CJ9VxCEklhFSKbpKQlEsX
kpBukiTdXCpSScjlhDiEfqHjJLdKHELKNbnV7/O2Pt/X9Md67fvea++99tpr
r7W+38peV3QeVCuVSrXKT6VyFF6WTqWqBNWCZxunUucenEo9XJxKbVF8hOKP
KH57RSq1vVEqtT6TSg1V/APFJyierzadBB0FacGZgvaClOA0QTtBYRP1p34W
q589OZF3qmBceSq1rTqV2l2USg1RfIPiHyo+VfFdiler/wWKF2msUxSfpXFr
HZJK1c+mUiXqc6n6XKI+C9RXZ+PxquocpjqLVefduqlUi8pU6ofaqdQglT0t
eEpwWG4qdbXgKsHjSv8q+EWwRLBL8LNgreY+QP0vUP+1lT5L0EGQ57mSnnBg
KrW/8Hy5MJVapnHLNG4fjfuK2vZU2/lqu0HxIYovVDzXfbBGS5XfXvkPKf9l
rUmR8uqwVoKzPZ9tqjNOdR5VnQZK9xP0FfyucaYflErdpfyGSvd32b6C8wVd
BQPUtrbazlKdCqUvEfQW7C+4UHCBoK6gp6CHoJHqv6g+71H9topvVHyG4iUq
u0jQTVDmut0FzVTnDdWZrjpvMG/FJyi+j8pO995Xgofx26g616nOJNWppfQZ
rldf+/is8Fyq/J3qc4riixTPMR1RL6U6M5X/mPIfVp22ij+o+H6eB3Puqfzf
1f/9yj9I6Us95/pesz6C74XDBNWZojoHO496W5U/RvmTlf+u4oMVn6h4PZVd
7DVaahqBPl7RfmXSsWdH1EmlPtf+fyFYmxNryjr9VfmfKe9/giPrRPlWQbM6
kUeb9arXQDRYX9C1IJUqFuwreFj5OwTbBQvBW/CdYHVOzJl9ni/41vUect1v
BK/nxB5T73j19a3O+HeCBe6DNkfVCVy+FByu+KeFgWsL1d+RH21W1tM6V0Xb
99SmYW7g2khwuWCgoLHgCsEgwR+qc4rCfwp+T0d4suC3dIT/EKQEpwnaCfak
IzxVsDsdIe1Z47YK2+TGuaQd6Vk6a1XVgfNin9GdgtdyYj2KBQ9wZgRfQxea
y36C/QXL0oEH/Z3vNaYMfpAyLisE+xjHF3OCp8DbLnQfBwjWak06V0X836qT
TQcdPCr4UfCDYJHgJ6cfM46kz1ObrPcYHsSYzPtB7xt4P+k81nJVTg0/mCP4
EjoVvKH8A3yO1yhemo4zOtvlXwhmOfxc8GZOlNPmEeMIPc0VfOV+X8qJcZjz
E+nYP9ZruXEh/WpOrDFznuc1pn2XEq2LzuNTKj/EtAB9tNd53KpzdJ/O0bmK
f6/4zOI4c/BZ9nBYfc23JPZwkOI/lsQ4l7qc9RuiNd8gHn6h6LCL4isUP0Dx
m1Q/vzTOBLzvcZ/RLcKln/pZkRO8Y6rgLkFT0c947d3nWv926meR+tmeF7xh
qXHqp/w1yj9W/Zfo3hkmesvRfdRc+dOV/6bqH61xV5QEjYxXfP/SOHOXeb1Y
vwEOobtLPA/ookT9DFM/N6uffMUHKt5d8Wnq56DS2NuBpgP6+lH3V1fVOVF1
Lk8H3VDWVG3HK/9h5c9R28alsc9bVb+98svygucu87qMU/1tyh+heeVrXgM1
r411gr/e7TXaqXW7QfN6Vv2ca3qCjt7VurVQ/atV/4GCOFecCfb89JLY936q
s0ZrO1Rn8xy3u5+9U/4G5d9XGHfSXNNyiXCeobb/UtvmqjNddeqoThfFVyh+
tuL1VedB1VlJHeE8XTicURR3Bvs5JR13DOFkeInqLFKdQUVxv07z3LYJz6vU
zzOsj/pvrzrTNJcfFe+q+HN14k6+x222a62uqoo5blDb7mr7tNo2Vf/jVb9x
UcgukwQTBac4nMC+6J56RW0eF53PKwhew3p1UdsVantXUcg+k92eM8m9yn18
iua7piTOPfctdwB8fabOTgv1+UBx8IMu6ZAPCoT3i1qnlwSFdSJcJfhAckgr
3WE7JYfUqRN5yCdzC+KOASd4FnvMXnGm2Zvz0iH/QX/Q8iL10U5n9g6N2ygd
9EfZPOW3Uv7tys9X/y8UBh6HpEPGot524dCZeqozpyB4H2MfqLJe6bhTyzWv
p9TPNNUpT4dsQllt5c9T/lTlv6g+uil+p+L7Kn+R4ncXh6x6mc/ZU6rTWfnj
kSsU9lF6rOJTVL+Z1m1ecdzT53jtZguPc43TENXZV3Vmq06e5rKyMObzo2ig
q2jgetWZrv6aq9/bioP3nee1e1d1WqjOMQWxf/DxBzw3+Cz39lTV2aVz90B+
zO1Rl5WI9oap7csFIb88YJ7aUjSwqiT4cW/zDNpsVT/tqwJvZK/5po9uphHG
zlefA1Vnlupcon6+Kok7aoTmWK45zhH+C9RPkeq8KnwuUJ3NJSHLjNEcG2qO
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
p2kIX4oJTvPe2OTvbxJfjQk+67yTeDMnPpe8VQaZLp7yWec9De8bprHKK8KP
uoPi35aHje9U40i/3KnIiciI2HqeMZ3h04JMhjyIDY6zl/hWECIXYIfGVo1d
OrF/c86weZ9g2seGzZmkHnbylj67id8G/WKDpg98ChJ/F9byReHcqyJsnNjg
oWnOCvb1VqZZ7H1HmWdgmzvaPAPbPHWph83+RPMDbOzHmk9gfxrkMzdPY51c
ET7eMxVvVRE+37xjh3g9EjsW5+8w52EHw67PXOEZiY2NfhM7GXazHeYpic2f
EDye1VjdKsKHHNy54+F32NwGu6/E9kYaWz5rwx5iwzzFtIN/BbyMNUq+teAN
hN8ab4zkm4mTXTbR5cl3GKf6PKPv3m0/14HCLVsR/vDImsjKS43Ls6YV3ihp
3yWs079MN+0tc1HWRf3sLA9bc+IvSPsB5mHIOH1UJ78i/O+T7z3Au6/HRJb/
zWcGvouPFPMmjc2SPPjubtM36/KLeXEb0+gNXt9JGuvoivDLhy5vdBlv9D22
JfbxmMj+vI9T5rP9jS9r0VP91KqIbwf4LqWN8ebbldZOj7PMQvrPf7UUxn9a
0E10M+9Jvp2mrNR6LfRcBwreRnclaFVPvLcy4tRZo/D/BGv1pu5cHXa8uspf
q7y30C3luxx9Un7k0Vcz9bOM77zyQme00LbeeraPkVdmnRJ4zPB32NiKS/Lj
Xz6MzT+AjsuPf/7sULxFfqRLjHs32yL383+j8AUu9r+cRrrsNc+D//qM8XwI
b8kL2+j+/t/UD0o/khc402Zf/w+KcfmXz/y8+LdRN9u0vlf6RIUn8A+vvAiP
5/9ceRG2cJx2C/LC5km/r9oOe4D/XUU/Cz12D68Tekf8LfDVwP+C9xV+R0ts
68c34knb+p92epffQrxXeGs97jac+WVOD3B/pPGVwGcCPxrsmvwvoGli13Qa
X8rF7negxwSnXzwObz7sxfiaJL4bK4wTukv8IPHZPM624pHey5G2AXezb+OD
e+leH9pL90q6rumlh9d5gderhW3Zo7wfD9rf8ajCGBMfsTz/G4Bvs861/hVd
6xbzXPjr8bZxj/Ze3uw03xw39/8vkm+PmxfUfHv8t4Ka+TC/lTojbavj/238
d+Av/ib278J1rOkN+zZ27qOswz3L+OFHdR7/YRK0Ur1b3eYi03pyXkv3Ojdl
e61N3b3OVj2f6WH+58KRe/1zgXR34bmlSvKOfUwZ83zr9M82f4Ded/j8sd6s
e0LL37qM7/Nb5sX/r7q7jHbddfa3VAYO7O8BnsOB1pVfbJ10D7dLdNOkW3qd
xrjfMT636LZ7u32iv6bN/cb3HPu7EbLPg4TD95VxPqGJbd5P9vXN/Bo/CMLE
P+J18wvoD3/cxPf2G7eHHvEZTXxsd7jeWuM81ryjl3HNCocplRGn3fEFNf/w
a1FQ8z+D4/wt8Fvug73H9+Ejn0948TjBbYL66nNeZcRvMr85wfgfZ54z22sA
PbV2O9qf5JD+b3a7E81vvvPcRrsP+k3+/dHJ//wYajpa6X9rDPV/MYY4/bz/
8zHE/xTpbL+Phd4r9gx/jo89N3y2NjqN79cmp+FP3LuJzzXhr+Y7f7jsfcsT
vA/gSbtdhr8nMhmyW+L3SRr/TmRHZEO+EVlmHVVtn0F8YuGV3OW7zCt/dXqJ
8+hrDP+uaRjjwuf2ydb4p6eyNT7je4wTPlzIi8iP+HJ95TR+kF87jd/oNqfx
N0WuRdZL/M+wdeCLg78OvDbxRaMMX7TPnV7keTPPRzxXZFL85uB32FtmG5fE
Z+0Lt1/ouozNPvI/JP6LxP7ynyTS7Dv/T6rtsjP93sj1O/VMl53ldBP7yyT3
yRX2m8lxO94tt9p/P/FdOsn++Uvsz5n4d/S1D1DyjxvuKf59w/9xkn/hEFK2
yf9zSf5/08Tjz/e6IiPn+73Iu/E2j4kvEnII/9eh7wl1dT9XxrcB/D8lbdz5
dw7/eaIPzgUh6wI//8Q2ujz3zVostl9qH9tIetu39XaPmfhPETLWvR7/E9v2
Nu9l6yNkTo+5D/rtYR79J//1/JD98UX+xrTV3ueN84ePKr6q+NSe6bNHGTpN
fD6T71bvcRl+cZPc5hzTDXSH3+Bkl51r2pqVqfEl5TzjTzjF9c7w+Ikf8V0u
S3xJE9/SmZkaH1LCxLd0hmn5Su8/e80c8A9eb/w2OA1O7zvN2B84jd2Cf0wi
l5zn8wne2CS/tE9oM70hllUHbXX0mKwL77THfM54vy12Gp34EqevMl7Jv80I
6aeHzzY0mHz/TPpin1XS8PpGfv+xfodma74JaJqt+SagSbbmm4DGfl8yP9qh
L4e3kkdfzJk8dPysCzp9dPwb/DaDh/JN0wSn1/v9Rpo1pS76ftaRPmj/X7/3
qPeQaQ064zsp3ie8q9irT813mkneWFYVvrfoE/mfBboebMCsN/m9va7Jd8yP
el26e82g63fdN2Pzxpvr/eNdBA+dl6nxXWb9frV8Cq+/0OeBehe5v+Q774dc
dr77oF/+P/R3yyNv+87k7hzqf5wgSyUyCnWQ2fj3Ef9C4p4l5D9K3L+E/ENp
lO2Tq22fP9+y1y3ug/EKzF/+/FdXYdjb8AWYZZr93N/QrLb/VZ75MnxotmVt
6tEXcwCnNnkxPv9y6uLvERJZb6b9Ofiv4lCP10r7taoqbKpjjRfzG+p6fBuy
UXV6VYc8izz2lm24vJf4lyT/b0Tee9v2XWQQ1gJcXrKPJ213mdcvrV3z/ynS
/Bezjn1Gr/M/MlcZvxeNxzD/X5N0It8wRtayDzLQcLd7yenZlhN5251vXLPG
l/83trRcy9qN8Brjo9HMYw/1vrF/rM9K3RFtK8N/kW8ujrSMzfcRR1n2/tE2
fHg/a883IXwbhC/NX/1GIN3MtMV3Mof7/YDtvK7lZdbyQMu/yX9F8YVmPl+4
3672+9jX6SNMq/Mta3NXFLsea8S+1bMMnvzDi7vlfPvFz/V3megmX/Yazfa3
bTfYf42yVV5r9uooh8Pt63G90+f5mx3aH+H9Y01v9BrTF3tZYD/tl1yHfnaL
3m6qDtq5wP774Ddzr7Xcadyhoa7GnfF+MX2xR7ealqGVI933MJ8B+mDtk3/k
QaOsy1r7MST+PfgnfO45QBe7fMaSs946r4YHnOTx0DmU+f3GmULWX2uo67fc
ds3xquqQnbfY32dGnRqdxRrL0I/s9f7d4fcY9P+OedWnbkc/vAm2+712q8vf
8puK/t60bL7QMsQtxonx5pk3f+W3ST2/M6EDdEl1fGce7T2n3jHec2Sl5/wm
yPjs8Tbjncv3jZwPxkT38Z1pr5V5zWyXQ9Pge6DftPA2xmHfWIMf3P4ey+/I
8cyp1O/N4a5LG+ZZ4rdoQqPgCa+kDnuJHPt8nRqZ919+6yQ6ne/8tnvUe7BR
Z79XZdAXZynrs3eMzwbnJnmXcu6PNe+Gr8BD0U3w/kCncKPbDBINfF8VZwZf
rnX2ieGNOMrtX/Z5os5u/l1UGfQ313vFnqxVfufKaLvA5559hm9ythibN+ho
94sein8qX2C9xgjjdJ73bLbX/GKvwYnWf7EHif6L9H7uA/6RyMecpznGiz3s
oDfsuspoCx+a6zH+HyxzVaI=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwtmH9U1XcZxz+C1xC5YETc773o5YrXq3MejjmOxzYPZ9HODjMih2ROjRya
oTOmaObUyKE5dI7UkTFn5HQRm0SOOIY/IqdGTskckqEz2pxnhxyHsxjHQ8vD
6fWcd3+8z33e3+fH5/k8n993UumzReVxzrnIKOdG83sky7ncoHOfT3TunbHO
Xf2ic8WZzv0j3rlbYABeAX8f+Z+gd4Jzc2LOvZLi3EFQA++b4tw+5P3gCPw+
/GXkWvA+vmvTnXvC59wocId4ZZn/jwVmTXbuCu0vGOfcOFCH/+AUxbIYw9hv
xf6DeOVwmFiJEefWEOv7oBY+Gv6MT99W4juQQZ/w3Qm66F858bfQv4fADuL3
YrM3RTmfQ1+C/qlE1eAE+vH072foDoAm+JiY+mLf1sIv4V+D/FMwRG47yGGf
T31sQZ5APs8irwWXsI/i/3Ns60AL7RUGlcvH1LsbfXZMOqvpZnj3FMW2HF8n
fg4x1zFYD4CV6M+ifylFOSyFn4DvSdG3JmzTab/cpxzmTHKuNeDcsTHOfQpy
sK/BvhrbXaAI3gR/MUUxzlDvR2nzPWp90wAvydRY2ZzIxb5uinx3g3z4kSmS
LcZebCPpytXGrAP/eZmaSxbzLPahmGprNSkgv4vkd4Xc0j9HrZBryL+K3LeD
I+hzPefeRbcLnIOXwIMJ+pZO2/WMdziZ2oAu9OXoH0H/KfoeYhUT8xqxMmij
ifpPo/4fUftsxqAI+wH0GdheQ78fno3/Mfhy0AIv9BTLvlUwX5NDzn3IXH0V
9BO/DP97xM/Ffzr5tGQol2awn/aygxrro6AL/3L8Tyc5tx40wafBY8jloAoe
ho9Ffpv4pbQ/Qvyv0PZ/iD+MfgP699BP9jsXR/x68nuD/j4NSuEj8Odp68tg
FvwK/AvIl9HnwXs96f4Nr4KHg1r75lMEH0C/ZKx8kmi/OqC+7QSD8Br02xNU
42H6vyGg2i4Heeh7A8r1LZBFvHZPbVmOVejDnsbS+lQBT/ZUaxuD2/BKT32x
MU7Fv9lT7tbmdGLXRjQ3doB86n2Hek9iLt2g3h7+tQHlYnO+ELkN+13Y7jZ7
eAu82qdvefAm+As+fZsLb4Dv9OnbGPha+I+QK20+Uv9c6v9kksbIoV+NfqtP
NnG2Fsjnul9zMgn9xoh8fwzC8Gr48z7NcQ9eBd/m07cZ5N8YUK1tTaQib43I
12xmwg9G1PefgNnwwxHJlvNa2k9ijb1FPVaBz1iLK9Bv8SnHPPLvZbyfY259
CZyDl9CfV5LUp6X4D2fI12pain4kqLloPklR8sd+BNvH6WMR+oGg1oLt4X20
V0R7m2jrObCI/nQHtPc8wvi2MZ452I9j7S0AA9gvish2M9hPvGziP5ikNdYG
z4F/Df4yqEFuBgW0HQ8GyGcj+db4VfMh4pVEFMv63IJ/YUhrzWJOpzY76OML
KdoDV0907gL70a+RG0Eb/lkR7d3rQIzYu2njaWIvA0nkX818rGQudoAZ6Pei
L/XLpof2ikPK1dboHPSH0K9AtxxE4DuiivUdUArvgD+DvBoshZ+NSl5l7ZFr
I9+eYC6NArOQD0QVy9rcRH2HAqrtduCRXy35HSW3j8Ee8kkgn95x2mMew78R
/5X4fhcMY7/Bxo+x+BDMQ9+M/nt+2eTCj0Rla31YCD8VVW5lYD68NSrZfCqI
lxzUXmd7yCzyuxLQ3voimIO+1VNuD6GfAW/0VMtk+FlyjRJvPrG+4ddYp8K/
7teYxyHX8+0B5A/oz236VxmSbHP4FHI4Kt9CMDhZc8bmiu25HcjT0T/pVxsR
6nuGPuxLVo37ybeMfGYnaIzT0G3CvgTbb9v4km9xUHPXataDfbHtr9gusf0Q
29oMjdVJ7K/C18DX+ZVzCLkyqrG3mK3k40WVq/Wxk3zzQzoLToA76LZlKJbF
GGRu1lDPr1LL/9qdB/s+8jkwTmM8B94KfxB5va3vNNZpmF/O3rfBCLwKfhH5
z6CA/lz0VPuFoJmzejpr4HHO7xrQif187M/HK8Z1+GL4hXh9uwsvh3cg/wnU
UY80T3PxMhhCvymstszGI7/aoOaa5diMfhb6s+j+aHc8+IqwYlkbi8iv29Nc
2QImcJ84jP4yukugDfu5YfXNYgzT/gZPY2Fr4HX008KK3Q5m0H4j7Y+h7UJw
kP6m09+RePU5CX01+vZE2RzEPxyW7x/AGvLp81SrerAI++6gan0abMXeYX8a
21NWL+IXEf86scOM1wh8M3wlcjOowP7eRNmeBJuIP+Spr+dBGfr+idK1Wfv0
ry+gu1KJ3YeIl5uusbI29mKfFlauZ8Ae7BM82TaAJvg0T/IA2ET+Q0HlHs98
20P7CUH1ze5Id4m/Ml25W87ziN9DPr8n9gmwE54YVlvW5wLiXQyqtjYnS9Df
nqjczaeBWOMjurvbHTWOfOrpzyrm8yTQj39ZSHPfzphlVhv254YU7dGH4Pfg
Tci/AQvhx+G/SpFNHvwQ/KjdncF4+Gp4PfIv7Y0C74cfS1GMKLwSfhj5NRCC
b4jJ1r5lw6tj0h2xMwN+G/5mimJsgF+J6ex4A9xkvTaGdDbamfQw87Wd+lyh
73+xelHP4jTVzuZcKfqP0HchvwtmwlvDsu0ElcTviSm2tZmK/kBYc/8dkEq9
moN6O51nzg4yfjVByfbmmYP//phyt5o0wN1U1a7ZzjvyyWdMTo7WG+M+5+NC
7A+h+wUYhBfAX03Rtz54XkxvP/vWif/SdL3tLMZt2q+k/dcS9aaKYL95it5i
dua2kP/sTL0tbth8IZ+GmMbKxrAR/YxM6XpsD0AfJt/jKbrTHIcnTlXuvwWn
4GlTJZtNO7lMi+jsrgCPEe8i9fprvMagEN4Fvxqvb2PwXxZTX22OZFHP9qDu
Rv8i/0XY3wprbMynjfma42lvsz2/Fr1Hvn+3tQ7i8K8PytdqUEc90oJay3bn
+YS5UcwcWcTc+Ba4Cy+MSl4IuuCz4QvsbmXnDXwuvNivb/fgi+FP+RXD3jZ2
x7W7rb1xetHnof+mXz5d9hYM6Kz4Hbhtd9GA1toNeDJnS0VUZ9tSO3/INz+o
t9FG0Em8mVHlYmdmEWN5E597yXpjp1KP5oDOdjuT7mO/DPvFfuWYhb49oLeA
rfEEfNdE1dYSO8/trRSVbD711DMrU2NvNT1HviUB5Wpv7E7i5Xvau+yM7rTz
MF17qb3BriI/bG8S5B+AW3aWwTci/9D6Dy+ISLY7ah3jlRbS3md3zEvoc9Cv
9ynGBXh2RHPJvu0mv+RMjfXfwB1886MaO6v5dewfjahta3MN9p8wf67Fa43b
fxUH0zUW9p9FDvW8mqG3i91B7C5YG9Lbzu6EMfzfDGsvsDMvF/uODL0tbQz6
Ga+yoMbKzqyN2H+GfXe82twGH52pXO1bAnxPWHuH3QH+B7tlrPU=
             "],
             VertexColors->None]}]}}, {{}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1HFknGccB/BnZyrqTE2adVl7S69ZdyJqJqZmzpypU6cqoqqNU6fi1Oki
aibqVESdqqiqqqpTpyYqqqqqqiJORcSpqIqIOXWiTpyoioiKs0/tj+f9PH+8
v8fzvs/v+xzM/Tl48YsQwlmP1wdCGOoM4er3IXR1hXCXfXzEJKsc5DJHuM5x
tjnFWk8I+W9CaLHE6MEQptnPBWbYZIEd+0K4zgRnmGaNebZYYjSunv1cYIZN
FtjxrXomOMM0a8yzxRKjh9SznwvMsMkCO7rVM8EZplljni2WGO1Vz1X+9V0I
G7zGyA8hlNnFJ+zjPJNc5SA3OMLIfu8Z4+Y9nGQfpzjAO0yywjRnOMhnHOYc
R7jIUb7lOOucZJNT/Mg73GGFuw5bi3v4jN2cYy8XeYRveZR1pthkhh95ijs8
x1364gL38BK7WWQvSzzCmzzKe0zxH2b4mKf4guf4ihf4mpe4wiIbLLHFm9zi
PYYfrcXdfMxOvmCMr5hg1D5Hffe2fz7MNaa5xAG+ZA+nGeUtbjvLK1xjgUss
O+sIi2zogSyrTLLCGCfY1kM51pniLOMsM8IiG3owyyqTrDDGCbb1cI51pjjL
OMuMsMiGDGRZZZIVxjjBtgzlWGeKs4yzzAiLbMhgllVOyuamjI7yHYc/Z5Vp
PucAH7CHNxhlxLhsvr03hDFuMM81ZrnKIS7xOOf5O1/yFz5hP6cZZ5n7eItf
8Rq/5BV+iskXP7DA98zxX57mG57gAv/gLH/lU/7EhzzM+9zP2/ya19nBCbbd
a39zkxe5zvN8xzNc5knWeIxV/sbn/JmPmOADxniXnbzB3bzKwMvc0pdjbDHP
BrNc4fHO/+/Z/wD9SNg+
             "]],
            "230"],
           Annotation[#, 230, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{5786, 8196, 5780, 8202, 5792, 8208, 5798, 8214, 5804, 
             8220, 5810, 8226, 5816, 8232, 5822, 8238, 5828, 8244, 5834, 8250,
              5840, 8256, 5846, 8262, 5852, 8268, 5858, 8274, 5864, 8280, 
             5870, 8286, 5876, 8292, 5882, 8298, 5888, 8304, 5894, 8310, 5900,
              8316, 5906, 8322, 5912, 8328, 5918, 8334, 5924, 8340, 5930, 
             8346, 5936, 8352, 5942, 8358, 5948, 8364, 5954, 8370, 5960, 8376,
              5966, 5972, 8408, 6004, 8440, 6036, 8472, 6068, 8504, 6100, 
             8536, 6132, 8568, 6164, 8600, 6196, 8632, 6228, 8664, 6260, 8696,
              6292, 8728, 6324, 8760, 6356, 8792, 6388, 8824, 6420, 8856, 
             6452, 8888, 6484, 8920, 6516, 8952, 6548, 8984, 6580, 9016, 6612,
              9048, 6644, 9080, 6676, 9112, 6708, 9144, 6740, 9176, 6772, 
             9208, 6804, 9414, 7010, 9408, 7004, 9402, 6998, 9396, 6992, 9390,
              6986, 9384, 6980, 9378, 6974, 9372, 6968, 9366, 6962, 9360, 
             6956, 9354, 6950, 9348, 6944, 9342, 6938, 9336, 6932, 9330, 6926,
              9324, 6920, 9318, 6914, 9312, 6908, 9306, 6902, 9300, 6896, 
             9294, 6890, 9288, 6884, 9282, 6878, 9276, 6872, 9270, 6866, 9264,
              6860, 9258, 6854, 9252, 6848, 9246, 6842, 9240, 6836, 9234, 
             6830, 6798, 9202, 6766, 9170, 6734, 9138, 6702, 9106, 6670, 9074,
              6638, 9042, 6606, 9010, 6574, 8978, 6542, 8946, 6510, 8914, 
             6478, 8882, 6446, 8850, 6414, 8818, 6382, 8786, 6350, 8754, 6318,
              8722, 6286, 8690, 6254, 8658, 6222, 8626, 6190, 8594, 6158, 
             8562, 6126, 8530, 6094, 8498, 6062, 8466, 6030, 8434, 5998, 8402,
              5786}],
            "230"],
           Annotation[#, 230, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1HFklGEcB/DnJJOTpFatuta16swkmSQ5OcnJSVaSzMnKnJyaJJmczOQk
kyRJTk4ymSRJkslJJieTJJOTMzlzJkkmOfVJfzzv5/nj/T2e931+3yd+cujw
2UgIod/jXSyEIytDuNIZQvuqEO6wm4+YZIV9/MhBznGYLY6xujGE3OoQmiwy
Gg9hnD2cYoYN5tm2JoRrTHCCaVaZY5NFRjepZw+nmGGDebZ1qGeCE0yzyhyb
LDLapZ49nGKGDebZtlY9E5xgmlXm2GSR0c3qOcML60KY51VGtoRQYjufsJtv
mOQM+zjPQUbWe88YNu/kKLs5xl7eZpJlpjnBPj5jP19xkG85xA8cZo2jbHCM
33mbv1nm4q3W4jI+YwdfsYtvuY0fuIs1pthght95lL95gov1xWku43l2sMAu
FrmNN7iLd5niA2b4mEf5gif4mqf5juf5iQXWWWSTN/iTd/mHD7gkYS2u4AvG
+JoJRu1zyHcv+Of9nGWa0+zlS3ZynFHe5IKzvMxZ5jnNkrOOsMC6HsiywiTL
jHGELT00wBpTnGScJUZYYF0PZllhkmXGOMKWHh5gjSlOMs4SIyywLgNZVphk
mTGOsCVDA6wxxUnGWWKEBdZlMMsKR2Xzh4wO8Qv7/2WVaT5nL++zk9cZZcS4
ZL7QHsI5zjPHWWY5wyOc5gG+4V6+5E4+YQ/HGWeJq3mTS3mVi3iZvzbIF78x
z68c4Gce43se5BT3cZK7+ZTb+ZBbeI/reIvLeY1tHGHLvXaRP3iGczzFLzzO
jzzEKvezwj18zh18xATvM8Y7XMHrXMIr/KMfL/Enz7HJHOvM8hMPrPx/z/4F
Tt7Y4Q==
             "]],
            "207"],
           Annotation[#, 207, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{5785, 8195, 5779, 8201, 5791, 8207, 5797, 8213, 5803, 
             8219, 5809, 8225, 5815, 8231, 5821, 8237, 5827, 8243, 5833, 8249,
              5839, 8255, 5845, 8261, 5851, 8267, 5857, 8273, 5863, 8279, 
             5869, 8285, 5875, 8291, 5881, 8297, 5887, 8303, 5893, 8309, 5899,
              8315, 5905, 8321, 5911, 8327, 5917, 8333, 5923, 8339, 5929, 
             8345, 5935, 8351, 5941, 8357, 5947, 8363, 5953, 8369, 5959, 8375,
              5965, 5971, 8407, 6003, 8439, 6035, 8471, 6067, 8503, 6099, 
             8535, 6131, 8567, 6163, 8599, 6195, 8631, 6227, 8663, 6259, 8695,
              6291, 8727, 6323, 8759, 6355, 8791, 6387, 8823, 6419, 8855, 
             6451, 8887, 6483, 8919, 6515, 8951, 6547, 8983, 6579, 9015, 6611,
              9047, 6643, 9079, 6675, 9111, 6707, 9143, 6739, 9175, 6771, 
             9207, 6803, 9413, 7009, 9407, 7003, 9401, 6997, 9395, 6991, 9389,
              6985, 9383, 6979, 9377, 6973, 9371, 6967, 9365, 6961, 9359, 
             6955, 9353, 6949, 9347, 6943, 9341, 6937, 9335, 6931, 9329, 6925,
              9323, 6919, 9317, 6913, 9311, 6907, 9305, 6901, 9299, 6895, 
             9293, 6889, 9287, 6883, 9281, 6877, 9275, 6871, 9269, 6865, 9263,
              6859, 9257, 6853, 9251, 6847, 9245, 6841, 9239, 6835, 9233, 
             6829, 6797, 9201, 6765, 9169, 6733, 9137, 6701, 9105, 6669, 9073,
              6637, 9041, 6605, 9009, 6573, 8977, 6541, 8945, 6509, 8913, 
             6477, 8881, 6445, 8849, 6413, 8817, 6381, 8785, 6349, 8753, 6317,
              8721, 6285, 8689, 6253, 8657, 6221, 8625, 6189, 8593, 6157, 
             8561, 6125, 8529, 6093, 8497, 6061, 8465, 6029, 8433, 5997, 8401,
              5785}],
            "207"],
           Annotation[#, 207, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1HFklGEcB/CnzOQkyapV17pWXTNJJpOcnOTkJDNJ1slkTk7WJJmczOQk
kyRJTk4ymSRJkslJJieTJJOTMzk5k2QmOemT/njez/PH+3s87/v8vs/W0+f6
h5eFEE56vNscQn9bCFe2hNC2LoQ77OIjJlhmHz9yiN84yiYnWImFkF0fQoMF
RraGMMluzjDNOnNsbQ/hGuOcYooVZtlggZFO9ezmDNOsM8fWDeoZ5xRTrDDL
BguMbFPPbs4wzTpzbN2onnFOMcUKs2ywwMh29ZzjhU0hLPAqw44QimzjE3bx
DROcYx8XOMQQ9Z4xat7BcXZxgj28zQRLTHGKfXzGAb7iEN9ymB84yirHWecE
f/A2f7PElri1uIrP2M5X7ORb7uIH9rLKJOtM8weP8TdPsUVfnOEqnmc78+xk
gbt4g728yyQfMM3HPMYXPMXXPMN3PM9PzLPGAhu8wUXe5R8+4Iqd1uIavmCU
rxlnxD6HffeSfz7AeaY4yx6+ZAcnGeFNLjnLy5xnjrMsOuvAPGt6IMMyEywx
yjE29dAgq0xymjEWGZhnTQ9mWGaCJUY5xqYeHmSVSU4zxiID86zJQIZlJlhi
lGNsytAgq0xymjEWGZhnTQYzLHNcNn/K6DC/cOBfVpnic/bwPjt4nREG45L5
0toQRrjALOeZ4Rz7OcvDfMMDfMm9fMJuTjLGItfxJlfyKpfzMn91yBe/M8ev
HORnHud7HuEMD3Ka+/iUu/mQ23mPG3mLq3mNrRxj0712kT95lt94ml94gh95
lBUeYpn7+Zx7+Ihx3meUd7iG17mCV/hHP17iIkfYYJY1ZviJh9v+37N/AZ86
14Y=
             "]],
            "184"],
           Annotation[#, 184, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{5784, 8194, 5778, 8200, 5790, 8206, 5796, 8212, 5802, 
             8218, 5808, 8224, 5814, 8230, 5820, 8236, 5826, 8242, 5832, 8248,
              5838, 8254, 5844, 8260, 5850, 8266, 5856, 8272, 5862, 8278, 
             5868, 8284, 5874, 8290, 5880, 8296, 5886, 8302, 5892, 8308, 5898,
              8314, 5904, 8320, 5910, 8326, 5916, 8332, 5922, 8338, 5928, 
             8344, 5934, 8350, 5940, 8356, 5946, 8362, 5952, 8368, 5958, 8374,
              5964, 5970, 8406, 6002, 8438, 6034, 8470, 6066, 8502, 6098, 
             8534, 6130, 8566, 6162, 8598, 6194, 8630, 6226, 8662, 6258, 8694,
              6290, 8726, 6322, 8758, 6354, 8790, 6386, 8822, 6418, 8854, 
             6450, 8886, 6482, 8918, 6514, 8950, 6546, 8982, 6578, 9014, 6610,
              9046, 6642, 9078, 6674, 9110, 6706, 9142, 6738, 9174, 6770, 
             9206, 6802, 9412, 7008, 9406, 7002, 9400, 6996, 9394, 6990, 9388,
              6984, 9382, 6978, 9376, 6972, 9370, 6966, 9364, 6960, 9358, 
             6954, 9352, 6948, 9346, 6942, 9340, 6936, 9334, 6930, 9328, 6924,
              9322, 6918, 9316, 6912, 9310, 6906, 9304, 6900, 9298, 6894, 
             9292, 6888, 9286, 6882, 9280, 6876, 9274, 6870, 9268, 6864, 9262,
              6858, 9256, 6852, 9250, 6846, 9244, 6840, 9238, 6834, 9232, 
             6828, 6796, 9200, 6764, 9168, 6732, 9136, 6700, 9104, 6668, 9072,
              6636, 9040, 6604, 9008, 6572, 8976, 6540, 8944, 6508, 8912, 
             6476, 8880, 6444, 8848, 6412, 8816, 6380, 8784, 6348, 8752, 6316,
              8720, 6284, 8688, 6252, 8656, 6220, 8624, 6188, 8592, 6156, 
             8560, 6124, 8528, 6092, 8496, 6060, 8464, 6028, 8432, 5996, 8400,
              5784}],
            "184"],
           Annotation[#, 184, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1H9k1GEcB/AnmZwk6ceqa12rrpkkkyQnJzk5yVSSOZmaMydrkiQnMznJ
JEmSk5NMJkmSZHKSyckkyeTkTE7OJMkkJ9dr+uf7ev74fh7f7/P5vJ/O08NH
zy4KIWQ83nWEcGRVCFdiIaxcE8IddvEREyyzlx85wG+8yCbHWNkUQrY9hAYL
jHSGMM5uTjHNOnNsWxvCNcY5wRQrzLLBAiOb1bObU0yzzhzb1qlnnBNMscIs
GywwskU9uznFNOvMsW29esY5wRQrzLLBAiNb1XOG56MhzPEqWyxyZTyEJ+zi
GyY4w17OcYCthfc2OCfrDo6yi2Ps4W0mWGKKE+zlM/bxFQf4lkP8wIuscpR1
jvEHb/MPS1y8zV5cxmds5yt28i238wN3s8ok60zzB4/xD09ysbkY5DKeYzvz
7GSB23mDu3mXST5gmo95jC94kq85yHc8x0/Ms8YCG7zBX7zLv3zAJV324gq+
YJSvGWfEdw7573ln3cdZpjjNHr5kB8cZ4U3O6+FlzjLH6YWe6nVL7/OsMcMy
EywxyhE2zVA/q0xykjEW2TJ7edaYYZkJlhjlCJtmuJ9VJjnJGItsmf08a8yw
zARLjHKETRnqZ5VJTjLGIluyl2eNGZY5Kps/ZXSIX9i3kFWm+Jw9vM8OXmeE
rdUhXLKe5zDnmOUsM5zhEU7zIN9wH19yF5+wm+OMscjVvMmlvMpFvMzfG+WL
35njV/bzM4/zPQ9xivs5yT18yh18yC28x3W8xeW8xjaOsOleu8CfPMNvPMUv
PMGPPMwKD7DMvXzOnXzEOO8zyjtcwetcwiv8ax4v8ReH2WCWNWb4iQdX/b9n
/wG6z90k
             "]],
            "161"],
           Annotation[#, 161, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{5783, 8193, 5777, 8199, 5789, 8205, 5795, 8211, 5801, 
             8217, 5807, 8223, 5813, 8229, 5819, 8235, 5825, 8241, 5831, 8247,
              5837, 8253, 5843, 8259, 5849, 8265, 5855, 8271, 5861, 8277, 
             5867, 8283, 5873, 8289, 5879, 8295, 5885, 8301, 5891, 8307, 5897,
              8313, 5903, 8319, 5909, 8325, 5915, 8331, 5921, 8337, 5927, 
             8343, 5933, 8349, 5939, 8355, 5945, 8361, 5951, 8367, 5957, 8373,
              5963, 5969, 8405, 6001, 8437, 6033, 8469, 6065, 8501, 6097, 
             8533, 6129, 8565, 6161, 8597, 6193, 8629, 6225, 8661, 6257, 8693,
              6289, 8725, 6321, 8757, 6353, 8789, 6385, 8821, 6417, 8853, 
             6449, 8885, 6481, 8917, 6513, 8949, 6545, 8981, 6577, 9013, 6609,
              9045, 6641, 9077, 6673, 9109, 6705, 9141, 6737, 9173, 6769, 
             9205, 6801, 9411, 7007, 9405, 7001, 9399, 6995, 9393, 6989, 9387,
              6983, 9381, 6977, 9375, 6971, 9369, 6965, 9363, 6959, 9357, 
             6953, 9351, 6947, 9345, 6941, 9339, 6935, 9333, 6929, 9327, 6923,
              9321, 6917, 9315, 6911, 9309, 6905, 9303, 6899, 9297, 6893, 
             9291, 6887, 9285, 6881, 9279, 6875, 9273, 6869, 9267, 6863, 9261,
              6857, 9255, 6851, 9249, 6845, 9243, 6839, 9237, 6833, 9231, 
             6827, 6795, 9199, 6763, 9167, 6731, 9135, 6699, 9103, 6667, 9071,
              6635, 9039, 6603, 9007, 6571, 8975, 6539, 8943, 6507, 8911, 
             6475, 8879, 6443, 8847, 6411, 8815, 6379, 8783, 6347, 8751, 6315,
              8719, 6283, 8687, 6251, 8655, 6219, 8623, 6187, 8591, 6155, 
             8559, 6123, 8527, 6091, 8495, 6059, 8463, 6027, 8431, 5995, 8399,
              5783}],
            "161"],
           Annotation[#, 161, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1HFklGEcB/CnTE6SZK261rXqWpNkkuTkJCcnmUwyVyZzcjIrSXIyk5NM
kiQ5OclkkiRJJieZnEySTE7O5ORMkkxycvpM/7yf54/393jf5/f7PpuHzvaP
LAkhnPB4tzGEo+0hXNkUwuqOEO6wm4+YYJl9/MghfuNFNjnOSlcI2bUhNFhg
ZHMIE+zhNNOsM8e2dSFcY5yTTLHCLBssMLJFPXs4zTTrzLFtvXrGOckUK8yy
wQIjW9Wzh9NMs84c26LqGeckU6wwywYLjMTVc5bnN4Qwz6tsscjV20J4wm6+
YYKz7OM8h9hafK/TOVl3cozdHGcvbzPBElOcZB+fcYCvOMS3HOYHXmSVY6xz
nD94m39Y4tJue3EFn7GDr9jFt9zBD9zDKpOsM80f7OcfnuRSc3GaK3iOHcyz
iwXu4A3u4V0m+YBpPmY/X/AkX/M03/EcPzHPGgts8AZ/8S7/8gGXbbcXV/EF
o3zNOCO+c9h/LzjrAc4xxRn28iU7OcEIb3JBDy9zjjnOLPZUr1t6n2eNGZaZ
YIlRjrJphgZZZZJTjLHIltnLs8YMy0ywxChH2TTDg6wyySnGWGTL7OdZY4Zl
JlhilKNsytAgq0xyijEW2ZK9PGvMsMwx2fwpo8P8woHFrDLF5+zlfXbyOiNs
rQnhkvUCRzjPLOeY4SyPcoaH+Ib7+ZK7+YQ9nGCMRbbzJpfzKgMv83dMvvid
OX7lID/zGN/zMKd5gFPcy6fcyYfcwntcx1tcyWts4yib7rUL/Mkz/MZT/MLj
/MgjrPAgy9zH59zFR4zzPqO8w1W8zmW8wr/m8RJ/cYQNZlljhp94qP3/PfsP
CzrbyQ==
             "]],
            "138"],
           Annotation[#, 138, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{5782, 8192, 5776, 8198, 5788, 8204, 5794, 8210, 5800, 
             8216, 5806, 8222, 5812, 8228, 5818, 8234, 5824, 8240, 5830, 8246,
              5836, 8252, 5842, 8258, 5848, 8264, 5854, 8270, 5860, 8276, 
             5866, 8282, 5872, 8288, 5878, 8294, 5884, 8300, 5890, 8306, 5896,
              8312, 5902, 8318, 5908, 8324, 5914, 8330, 5920, 8336, 5926, 
             8342, 5932, 8348, 5938, 8354, 5944, 8360, 5950, 8366, 5956, 8372,
              5962, 5968, 8404, 6000, 8436, 6032, 8468, 6064, 8500, 6096, 
             8532, 6128, 8564, 6160, 8596, 6192, 8628, 6224, 8660, 6256, 8692,
              6288, 8724, 6320, 8756, 6352, 8788, 6384, 8820, 6416, 8852, 
             6448, 8884, 6480, 8916, 6512, 8948, 6544, 8980, 6576, 9012, 6608,
              9044, 6640, 9076, 6672, 9108, 6704, 9140, 6736, 9172, 6768, 
             9204, 6800, 9410, 7006, 9404, 7000, 9398, 6994, 9392, 6988, 9386,
              6982, 9380, 6976, 9374, 6970, 9368, 6964, 9362, 6958, 9356, 
             6952, 9350, 6946, 9344, 6940, 9338, 6934, 9332, 6928, 9326, 6922,
              9320, 6916, 9314, 6910, 9308, 6904, 9302, 6898, 9296, 6892, 
             9290, 6886, 9284, 6880, 9278, 6874, 9272, 6868, 9266, 6862, 9260,
              6856, 9254, 6850, 9248, 6844, 9242, 6838, 9236, 6832, 9230, 
             6826, 6794, 9198, 6762, 9166, 6730, 9134, 6698, 9102, 6666, 9070,
              6634, 9038, 6602, 9006, 6570, 8974, 6538, 8942, 6506, 8910, 
             6474, 8878, 6442, 8846, 6410, 8814, 6378, 8782, 6346, 8750, 6314,
              8718, 6282, 8686, 6250, 8654, 6218, 8622, 6186, 8590, 6154, 
             8558, 6122, 8526, 6090, 8494, 6058, 8462, 6026, 8430, 5994, 8398,
              5782}],
            "138"],
           Annotation[#, 138, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1HFknGccB/AnIs5URTVpd8tuWXbLTtVERdWpU3XqVEV0M3EiKj11Krqo
qjoTEacqqmqq6sypioqamqqqqFMVdSqmqmJOnagTJ6oqYurU2T7Rf97P88f7
e7zv8/v+noHT0z/92hFCGPd4EQthtCeEuf4Qdu0J4SYHeY9JVjjCV5zkOi+y
xXlWvw0htzeEJouMDISwwASXmWGDeXZ+GcIVxrnINKvMsckiI9+pZ4LLzLDB
PDuj6hnnItOsMscmi4zE1TPBZWbYYJ6dX6lnnItMs8ocmywy8r16rvJ8Xwgb
vMw2S9w1GMJ9DvIZk1zlCDc4yfb2e187J+s+znKQ8xziDSZZZpqLHOEDjvEJ
J/mcU3zJi6xxlg3O8z1v8CPL7PjBXtzBB+zlE/bzOffxJYdZY4oNZvieJ/mR
4+yQizPcwWn2ssB+FrmP1zjMW0zxDjP8kyf5iON8yjN8wWm+ZoF1FtnkNW7y
Fj/xDrsS9mI3HzHKp4wz4jun/PeWsx7jGtNc4RAfs48LjPA6t/TwN64xz5Xt
nup1W+8LrDPLCpMsM8oZtmRogjWmuMQYS2zLXoF1ZllhkmVGOcOWDE+wxhSX
GGOJbdkvsM4sK0yyzChn2DJDE6wxxSXGWGLb7BVYZ5YVzprND2Z0im84tj2r
TPMhh3ibfbzKCNu9IVyy3uI5bjDHNWa5ylGu8Bif8TAf8wDvM8EFxljibl7n
F7zM/77RA/7L83zHPN9ygv/wZ/7N41zmES7xIP/ift7lAP/gXv7OnbzCTs6w
5V67wA88y3We4hv+wlc8wSqPssJDfMgfeY9x3maUN9nNq+ziHD/J4yVu8hyb
zLHOLF/zWM/ne/Z/VqrbbQ==
             "]],
            "115"],
           Annotation[#, 115, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{8191, 5781, 8397, 5993, 8429, 6025, 8461, 6057, 8493, 
             6089, 8525, 6121, 8557, 6153, 8589, 6185, 8621, 6217, 8653, 6249,
              8685, 6281, 8717, 6313, 8749, 6345, 8781, 6377, 8813, 6409, 
             8845, 6441, 8877, 6473, 8909, 6505, 8941, 6537, 8973, 6569, 9005,
              6601, 9037, 6633, 9069, 6665, 9101, 6697, 9133, 6729, 9165, 
             6761, 9197, 6793, 6825, 9229, 6831, 9235, 6837, 9241, 6843, 9247,
              6849, 9253, 6855, 9259, 6861, 9265, 6867, 9271, 6873, 9277, 
             6879, 9283, 6885, 9289, 6891, 9295, 6897, 9301, 6903, 9307, 6909,
              9313, 6915, 9319, 6921, 9325, 6927, 9331, 6933, 9337, 6939, 
             9343, 6945, 9349, 6951, 9355, 6957, 9361, 6963, 9367, 6969, 9373,
              6975, 9379, 6981, 9385, 6987, 9391, 6993, 9397, 6999, 9403, 
             7005, 9409, 6799, 9203, 6767, 9171, 6735, 9139, 6703, 9107, 6671,
              9075, 6639, 9043, 6607, 9011, 6575, 8979, 6543, 8947, 6511, 
             8915, 6479, 8883, 6447, 8851, 6415, 8819, 6383, 8787, 6351, 8755,
              6319, 8723, 6287, 8691, 6255, 8659, 6223, 8627, 6191, 8595, 
             6159, 8563, 6127, 8531, 6095, 8499, 6063, 8467, 6031, 8435, 5999,
              8403, 5967, 5961, 8371, 5955, 8365, 5949, 8359, 5943, 8353, 
             5937, 8347, 5931, 8341, 5925, 8335, 5919, 8329, 5913, 8323, 5907,
              8317, 5901, 8311, 5895, 8305, 5889, 8299, 5883, 8293, 5877, 
             8287, 5871, 8281, 5865, 8275, 5859, 8269, 5853, 8263, 5847, 8257,
              5841, 8251, 5835, 8245, 5829, 8239, 5823, 8233, 5817, 8227, 
             5811, 8221, 5805, 8215, 5799, 8209, 5793, 8203, 5787, 8197, 5775,
              8191}],
            "115"],
           Annotation[#, 115, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1HFklGEcB/CnyUmSZNW1rlXXupJMkpyc5OQkkyRzajInJ5OVJCczOckk
SZKTk0wmSZJkcpLJySTJ5ORMTs4kySQnJ32mf97P88f7e7zv8/v+nk25s0eH
F4UQTni8XR/C4c4QLm8IYcXqEG6zhw+ZZIV9/MBBfuUFtjjG6sYQcmtCaLLI
yKYQxpngFDNsMM+OaAhXGecE06wyxyaLjMTVM8EpZthgnh1r1TPOCaZZZY5N
FhnZrJ4JTjHDBvPs6FLPOCeYZpU5NllkpEc9Z3huXQhzvMI2S1yxJYTH7OFr
JjnDPs5xkO2F92LOybqLo+zhGHt5i0mWmeYE+/iU/XzJQb7hEN/zAmscZYNj
/M5b/M0yQ8JeXMqn7ORLdvMNt/E9d7HGFBvM8DuP8DePM8jFKS7lMDtZYDeL
3Mbr3MU7TPE+M3zEI3zO43zFU3zLYX5kgXUW2eR1/uQd/uF9Lt5qLy7nc0b5
inFGfOeQ/5531v2cZZrT7OULdnGcEd7gvB5e4izznF7oqV639b7AOrOsMMky
oxxhS4YGWGOKk4yxxLbsFVhnlhUmWWaUI2zJ8ABrTHGSMZbYlv0C68yywiTL
jHKELTM0wBpTnGSMJbbNXoF1ZlnhqNn8YUaH+Jn9C7PKNJ+xl/fYxWuMsL0q
hIvW8zzDOeY4yyxneJjTPMDX3MsX3MnHTHCcMZa4kje4hFf4t1sP+Ivn+I15
fuEAP/Eo3/Egp7iPk9zNJ9zOB9zIu1zNm1zGq+zgCFvutfP8wdP8ypP8zGP8
wEOscj8r3MNn3MGHjPMeo7zN5bzGxbzMP/J4kT95hk3mWGeWH3mg8/89+w+n
BtoS
             "]],
            "92"],
           Annotation[#, 92, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1HGElGkcB/BnZJwkSXXTNu110zatc1aSjIyckXHOSiprZJw1ZWSlVpKR
tTKSleQkGRnJOiMnJ0lWRrIysk6SdUbGylhjJclKRkbqs/rn/Tx/vL/H+z6/
7+9JHB8/ciYSQsh7PO8P4eDGEC5uC2HdjyHc4ADvMsU6h/mSo1zkOXY5xcbP
IRRiIXRYZjQRwjSTnGWWbRYZ2RzCZSZYY4YNFthhmdHt6pnkLLNss8hIn3om
WGOGDRbYYZnRAfVMcpZZtllkZIt6Jlhjhg0W2GGZ0R3qOc/xeAhLvMQeK1yX
DOEeB/iUKc5zmEscZW/lva3OybqPkxzgFId4nSlWmWGNw7zPET7mKJ9xjC94
jk1Oss0pvuN1fmKVX1nj6p324gY+Zj+fcZAvuJtNptlmlu94iJ94jF95gqvl
4zQ3sMR+ljnIq9zNm0zzDrP8h4f4kMf4hCf4nKf5iiW2WGaHV/mBN/mZd7hq
0F5cy4eM8QkTjPq+Mf+77KxHuMAM5zjER+zjNKO8xmU9vMAFFjm30lO97ul9
iS3mWGeKVcY4wa4M5dlkmjOMs8Ke7JXYYo51plhljBPsynCeTaY5wzgr7Ml+
iS3mWGeKVcY4wa4ZyrPJNGcYZ4U9s1diiznWOWk235vRMb7myMqsMsMHHOJt
9vEKo+xtCuG89TJPcYkFLjDHeR7kHA/wKffxEXfxHpOcZpwVruc1/sBL/PKT
HvAjx/mWRb5hnv/zMP/j75zlfs5wD//lL/yb23iLm/gX1/AyI5xg1712lu95
kov8k695lC/5Bxv8jXXu5QP+yrtM8DZjvMG1vMJVvMjP8nieH3iKHRbYYo6v
eGDj93v2G+TZ2rU=
             "]],
            "69"],
           Annotation[#, 69, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1HGElGkcB/CnjKyTlezNbdNW097c3slKzhkZycg4WWudrJG9s8YaZ61s
ScZZa41kJUmSkZGsM5LkrJWVkayMrJNknZGxzshYJ8k6GRln9Vn3z/t5/nh/
j/d9ft/fc3ji/JnpHSGEnz1eHAhhuCeEuUMhdEdDuMV+3meSVQ7xFcf5lhfZ
5jxr8RByX4XQYpGRwyEsMMEVZthknqE3hCuMs8I0a8yxxSIj/eqZ4AozbDLP
sE8946wwzRpzbLHIyNfqmeAKM2wyzxBTzzgrTLPGHFssMpJQzzVO7w9hg5fZ
YYnd34TwkP18xiTXOMQNjrOz/V6fc7Lu5Sz7Oc9B3mSSZaZZ4RD/4CifcJzP
OcmXvMg6Z9nkPN/xJj+yzC1W2DVgL+7lE/bxOQf4ksdYZ4pNZviOI/zIs9zi
BLvk4xz3ssA+FjnAazzG20zxHjN8wBEu8SyfcoIveI6vWWCDRbZ4jR94m594
jzu/tRd3c4lRPmWcEd836X83nfUo15nmKgf5mL1cYITXuamHv3Gdea5u91Sv
O3pfYINZVplkmVHOsC1DY6wzxWXGWGJH9gpsMMsqkywzyhm2ZXiMdaa4zBhL
7Mh+gQ1mWWWSZUY5w7YZGmOdKS4zxhI7Zq/ABrOsctZsvjejk3zD0e1ZZZqL
HORd9vIqI+x8GcIl601OcYM5rjPLNQ5zlaf4jMf5mEf5kAkuMMYS9/A6d/Ey
/zuoB/yX0/yHef7NMf7Fn/gnf+QKT3CZ3/MRv+PvPMg77OENfsErDJxh2712
ge/5K9/yF77hGb7iadZ4klX+wEUe4X3GeZdR3uJuXuVOzvGTPF7iB06xxRwb
zPI1T/X8f89+BjVE2Vo=
             "]],
            "46"],
           Annotation[#, 46, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1HGElHkYB/DfGsnJOrmb9qat5qZpL1lZJ+OMnJGRs5JzrZGVNbqVtdJl
Zay1MrJWkpNkZCUjI8lJss4aycrIOknWGRk5I2NlrbWSkZG19zn3z/v5/fO8
3t/zfJ838evFU791hRDOeJz4OoQXe0M4xtfMscE8WxznOi/xEy+za18IV7mD
NxnlHcZ5n4f4mEdY5Y+s8Se+4i98wzN8x3Nc40W2OcUtzvCLaAi/8yve5l7e
40H+we/5J49ykcf5F3/m3xzmPxzle17gB07yM69wWzyE6/ySJcZYZpIPeZjz
/IHPeIxLPMFl5viWea5wnBu8xA4ju/TLuYd32M/HzLDGIb7hGNc4zeq33ttj
FiywwxJjCfdlmnUOs80pRr8JYY4pVpljgwV2WGJsv3qmWecw25xiNKaeKVaZ
Y4MFdlhiLKmeadY5zDanGN2tnilWmWODBXZY4tIBs+jVL05yg9cZ6dNz9nCe
/Vxihm85xA2OMbJH1g6G8FQeo3zCHXzALt7lp+9CuMV1XmOLRTZY4Gue5wue
5VOe5hOe5ANmeZdp3uIAr7GPRfaywJ08z+08y03fd5ofeZKrzLLJNOsc4Ev2
8Tl7ucCdfMTtrHDTfef4kTe4ylk2Oc06J/iSY3zOES5wiI84yAoznGOKN9jP
WSY4zR5OsJsdvR5xXuEgl5niMyb4kN0ssWOGV7jCC1xm2awjLLJl9nnWmGGF
cc5wS3ZG2WSWi0yyzAiLbMlenjVmWGGcM9yS3VE2meUikywzwiJbsp9njRlW
GOcMt+zOKJvMcpFJlhlhkS27l2eNs3azbUcn+I4jfMXB/3aWKd5ngjfZzcvx
//+z/wK1w9t4
             "]],
            "23"],
           Annotation[#, 23, "Tooltip"]& ]}, {}, {}}}],
      AspectRatio->1,
      DisplayFunction:>Identity,
      Frame->True,
      PlotRange->{{1., 72.}, {1., 72.}},
      PlotRangeClipping->True,
      PlotRangePadding->{
        Scaled[0.02], 
        Scaled[0.02]}], {192., -189.}, ImageScaled[{0.5, 0.5}], {360., 360.}],
     InsetBox[
     GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJx13TmOK+m6HdCErDRp0KBBgyISCSKRSJDZ94x3blO3brXvDUGAbE0hhhZD
0hAEQdwb4kKFHGLlPoSecbHrY8Tf/Pf/8b/+63/+t4uLi2F5cfF/P//f//vf
x/PPi+Hcl3iBl3iF13iDt/gKX+MdvsG3+A7v8QHf4wf8iJ/wM37Br/gNv+MP
/Im/8Dc+4uHcI774D3J88YMcX/yNHF/8nRxf/IMcX/yTHF/8RI4v/kWOL34m
xxf/JscXv5Dji1/J8cVv5Pjid3J88Qc5vvjz3AMe8YQv/pPv4xFP+OK/sL3j
5yVe4CVe4TXe4C2+wtd4h2/wLb7De3zA9/gBP+In/Ixf8Ct+w+/4A3/iL/yN
j3g494jbP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu/yTH
7Z/kuP2THLd/kuP2T3Lc/jl5wCOecPsn38cjnnD7Z27OsXf8XOAlXuE13uAt
vsLXeIdv8C2+w3t8wPf4AT/iJ/yMX/ArfsPv+AN/4i/8jY94OPeI2z/Jcfsn
OW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj
9k9y3P45ecAjnnD7J9/HI55w+2fud5Vzjr3j5xKv8Bpv8BZf4Wu8wzf4Ft/h
PT7ge/yAH/ETfsYv+BW/4Xf8gT/xF/7GRzyce8Ttn+S4/ZMct3+S4/ZPctz+
SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu/5w84BFP
uP2T7+MRT7j9M/ccx99Vzjn2jp8rvMYbvMVX+Brv8A2+xXd4jw/4Hj/gR/yE
n/ELfsVv+B1/4E/8hb/xEQ/nHnH7Jzlu/yTH7Z/kuP2THLd/kuP2T3Lc/kmO
2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bPycPeMQTbv/k+3jEE27/
zD039jmOv6ucc+wdP9d4g7f4Cl/jHb7Bt/gO7/EB3+MH/Iif8DN+wa/4Db/j
D/yJv/A3PuLh3CNu/yTH7Z/kuP2THLd/kuP2T3Lc/kmO2z/JcfsnOW7/JMft
n+S4/ZMct3+S4/ZPctz+SY7bP8lx++fkAY94wu2ffB+PeMLtn7n3VD439jmO
v6ucc+wdPzd4i6/wNd7hG3yL7/AeH/A9fsCP+Ak/4xf8it/wO/7An/gLf+Mj
Hs494vZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7
Jzlu/yTH7Z/kuP2THLd/Th7wiCfc/sn38Ygn3P6Zey/ueyqfG/scx99Vzjn2
jp9bfIWv8Q7f4Ft8h/f4gO/xA37ET/gZv+BX/Ibf8Qf+xF/4Gx/xcO4Rt3+S
4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu
/yTH7Z/kuP1z8oBHPOH2T76PRzzh9k/sOpz0T+x7Kp8b+xzH31XOOfaOn1f4
Gu/wDb7Fd3iPD/geP+BH/ISf8Qt+xW/4HX/gT/yFv/ERD+cecfsnOW7/JMft
n+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5J
jts/Jw94xBNu/+T7eMQTbv/ErvtL//ge3PdSPif2uY2/o5xr7Jmrmc9rvMM3
+Bbf4T0+4Hv8gB/xE37GL/gVv+F3/IE/8Rf+xkc8nHvE7Z/kuP2THLd/kuP2
T3Lc/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv+c
POART7j9k+/jEU+4/TO3zjj947ob34P7XsrnxD638XeUc409cz3zucM3+Bbf
4T0+4Hv8gB/xE37GL/gVv+F3/IE/8Rf+xkc8nHvE7Z/kuP2THLd/kuP2T3Lc
/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv+cPOAR
T7j9k+/jEU+4/TO3ryH94zo/1934Htz3Uj4n9rmNv6Oca+yZ3cznDb7Fd3iP
D/geP+BH/ISf8Qt+xW/4HX/gT/yFv/ERD+cecfsnOW7/JMftn+S4/ZMct3+S
4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/Jw94xBNu
/+T7eMQTbv/E7qNK/7iu2HV+rrvxPbjvpXxO7HMbf0c519gzNzOft/gO7/EB
3+MH/Iif8DN+wa/4Db/jD/yJv/A3PuLh3CNu/yTH7Z/kuP2THLd/kuP2T3Lc
/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx++fkAY94wu2f
fB+PeMLtn7l9m+kf9zG4rth1fq678T2476V8TuxzG39HOdfYM7czn3d4jw/4
Hj/gR/yEn/ELfsVv+B1/4E/8hb/xEQ/nHnH7Jzlu/yTH7Z/kuP2THLd/kuP2
T3Lc/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bPycPeMQTbv/k
+3jEE27/zO0TT/+4b8p9DK4rdp2f6258D+57KZ8T+9zG31HONfbM3cznHh/w
PX7Aj/gJP+MX/Irf8Dv+wJ/4C3/jIx7OPeL2T3Lc/kmO2z/JcfsnOW7/JMft
n+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f04e8Ign3P7J
9/GIJ9z+mTuXIv0TX+IFdl+D64xd9+c6nC32PZXPjX2O4+8q5xx7x88DvscP
+BE/4Wf8gl/xG37HH/gTf+FvfMTDuUfc/kmO2z/JcfsnOW7/JMftn+S4/ZMc
t3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9s/JAx7xhNs/+T4e
8YTbP7Hn4KR/3BfuPk33TbmPwXXFrvNz3Y3vwX0v5XNin9v4O8q5xp45zHze
4wf8iJ/wM37Br/gNv+MP/Im/8Dc+4uHcI27/JMftn+S4/ZMct3+S4/ZPctz+
SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH75+QBj3jC7Z98
H494wu2f2HO30j+eQ+G+cPdpum/KfQyuK3adn+tufA/ueymfE/vcxt9RzjX2
zP3M5wN+xE/4Gb/gV/yG3/EH/sRf+Bsf8XDuEbd/kuP2T3Lc/kmO2z/Jcfsn
OW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9c/KARzzh
9k++j0c84fbP3Dl/6R/PvfEcCveFu0/TfVPuY3Bdsev8XHfje3DfS/mc2Oc2
/o5yrrFnHmY+H/ETfsYv+BW/4Xf8gT/xF/7GRzyce8Ttn+S4/ZMct3+S4/ZP
ctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu/5w8
4BFPuP2T7+MRT7j9M3euaPrHc7Y898ZzKNwX7j5N9025j8F1xa7zc92N78F9
L+VzYp/b+DvKucaeeZz5fMLP+AW/4jf8jj/wJ/7C3/iIh3OPuP2THLd/kuP2
T3Lc/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8k
x+2fkwc84gm3f/J9POIJt39izzFO/3iun+dsee6N51C4L9x9mu6bch+D64pd
5+e6G9+D+17K58Q+t/F3lHONPfM08/mMX/ArfsPv+AN/4i/8jY94OPeI2z/J
cfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3
f5Lj9k9y3P45ecAjnnD7J9/HI55w+2fu3PT0j+eIeq6f52x57o3nULgv3H2a
7ptyH4Pril3n57ob34P7XsrnxD638XeUc4098zzz+YJf8Rt+xx/4E3/hb3zE
w7lH3P5Jjts/yXH7Jzlu/yTH7Z/kuP2THLd/kuP2T3Lc/kmO2z/JcfsnOW7/
JMftn+S4/ZMct3+S4/bPyQMe8YTbP/k+HvGE2z9z9zSkfzy32HNEPdfPc7Y8
98ZzKNwX7j5N9025j8F1xa7zc92N78F9L+VzYp/b+DvKucaeeZn5fMVv+B1/
4E/8hb/xEQ/nHnH7Jzlu/yTH7Z/kuP2THLd/kuP2T3Lc/kmO2z/JcfsnOW7/
JMftn+S4/ZMct3+S4/ZPctz+SY7bPycPeMQTbv/k+3jEE27/zN0Lk/7xnHTP
LfYcUc/185wtz73xHAr3hbtP031T7mNwXbHr/Fx343tw30v5nNjnNv6Ocq6x
Z15nPt/wO/7An/gLf+MjHs494vZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3
f5Lj9k9y3P5Jjts/yXH7Jzlu/yTH7Z/kuP2THLd/Th7wiCfc/sn38Ygn3P6J
vYcq/eO9DJ6T7rnFniPquX6es+W5N55D4b5w92m6b8p9DK4rdp2f6258D+57
KZ8T+9zG31HONfbM28znO/7An/gLf+MjHs494vZPctz+SY7bP8lx+yc5bv8k
x+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu/yTH7Z/kuP2THLd/Th7wiCfc
/sn38Ygn3P6Zu/cu/eM9MN7L4DnpnlvsOaKe6+c5W5574zkU7gt3n6b7ptzH
4Lpi1/m57sb34L6X8jmxz238HeVcY8+8z3x+4E/8hb/xEQ/nHnH7Jzlu/yTH
7Z/kuP2THLd/kuP2T3Lc/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+
SY7bPycPeMQTbv/k+3jEE27/zN2zmf7x3invgfFeBs9J99xizxH1XD/P2fLc
G8+hcF+4+zTdN+U+BtcVu87PdTe+B/e9lM+JfW7j7yjnGnvmY+bzE3/hb3zE
w7lH3P5Jjts/yXH7Jzlu/yTH7Z/kuP2THLd/kuP2T3Lc/kmO2z/JcfsnOW7/
JMftn+S4/ZMct3+S4/bPyQMe8YTbP/k+HvGE2z9z9/qmf7znznunvAfGexk8
J91ziz1H1HP9PGfLc288h8J94e7TdN+U+xhcV+w6P9fd+B7c91I+J/a5jb+j
nGvsmc+Zzy/8jY94OPeI2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7b
P8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P45ecAjnnD7J9/HI55w+yf2HvH0
j/dqes+d9055D4z3MnhOuucWe46o5/p5zpbn3ngOhfvC3afpvin3Mbiu2HV+
rrvxPbjvpXxO7HMbf0c519gzXzOf3/iIh3OPuP2THLd/kuP2T3Lc/kmO2z/J
cfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2fkwc84gm3
f/J9POIJt3/i9I/3hnuPr/dqes+d9055D4z3MnhOuucWe46o5/p5zpbn3ngO
hfvC3afpvin3Mbiu2HV+rrvxPbjvpXxO7HMbf0c519gz3zOfRzyce8Ttn+S4
/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/
yXH7Jzlu/5w84BFPuP2T7+MRT7j9E6d/8r/T9I/3hnuPr/dqes+d9055D4z3
MnhOuucWe46o5/p5zpbn3ngOhfvC3afpvin3Mbiu2HV+rrvxPbjvpXxO7HMb
f0c519gzx5nP4dwjbv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu/yTH
7Z/kuP2THLd/kuP2T3Lc/kmO2z/Jcfvn5AGPeMLtn3wfj3jC7Z84/ZP/HaZ/
4ku8wEu8wmu8wVvsPQ2em+45xp4r6jl/nru1x55L4T5x9226j8p9Da4zdt2f
63B8L+57Kp8b+xzH31XOOfYOn6N//w9y3P5Jjts/yXH7Jzlu/yTH7Z/kuP2T
HLd/kuP2T3Lc/kmO2z/JcfsnOW7/JMftn+S4/ZMct39OHvCIJ9z+yffxiCfc
/olP/dP/HZ76p77EC7zEK7zGG7zF3gvjPQ2em+45xp4r6jl/e+w5OJ5L4T5x
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
       "], {{
         {GrayLevel[0.8], EdgeForm[None], 
          GraphicsGroupBox[PolygonBox[CompressedData["
1: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
LO4RiRmY2DUSV3Czc6T7Beb4hzGDPN/FPuJ2dA203SMxRq3dXIM5n7f8jsfv
nXt6HZ7zSPv4vjsxEmMwtG8k9mBlP1u0Sdbhaf9IzMDQuX6vvOcD7IPRgyLx
AzdHRGKA3j80Ui/Cx8HW6evJrg3Th9hH3IGuR63DIzFDrcNcg/kU57Gno8JY
xu/5aFsYPSUSS7ByciQ2mJ9qH3fPcZEYhr8TIrEEKyfawtzx1tHO83PTy6e5
BhyfHYkHuDnG63NnnBmJMRg6xzpnd7rzYPEs6+Qf6zz2dIZ18s/3mnB2gS0M
3RWph3j/F0fiBG4utA4fN0XqUfi+yD7iLo/ECdxcGokr+LvENZhfZh9xVzgW
Xm+IxAz9fm0kTuDm6kh3BL1/VSTemF9jH3FXugba9ZG4otZ1rsF870hc8llx
o9fhGfaxj369PRIncHNrJMbg45ZIfDK/zT7i7vY5wc2dkbji7O5wDeY3+5zI
v8ex8PpIJGZg4kHvA27uj3SPsN/7IvHG/AH7iLvXNdAejsQYtR5yDebc8Xyn
47vg45H6G+Z2iwPXYcwTxlORGIOh/0ViD1aetEV72jo8PReJGRj6xu+V9/y8
fTD6UiR+4OaNSAzQ+69G6kX4eNk6ff2Ma8P0K/YR92IYR7rW65GYodZrrsH8
Weexpze9Dt8j3rKF0Y8jsQQrH0Vig/kn9nH3vBuJYfh7PxJLsPKBLcy9Zx3t
Wz83vfypa8DxV5F4gJu3vT53xheRGIOhr61zdp85Dxa/tE7+O85jT59bJ/9D
74Vn+M7rw1yzrh7i/f8QiSuY+NEWbn6OxBLc/BaJDVj5xT6Y+8mxxEV19TT3
we+OhdE/I/HDHfCXLT3+ty2s/Op6rPFvJJbg5j9bOOMf7mNh5Q/Xpm6tLh9r
1+taH86mrqtXeOdZXWzASlIXVzAR1xXLPK3LR1xR19nASqMuljivvK4azL/3
WXJ2ZV2xMNq/Lk7goBt+fiISK+26/k4EW1Vdfxti3qnLR1yrrhpo/eriilq9
umown6qu2jzbNHU9H5xtFX6eKYyZw5ixLq7gZvrw8wuR+JihLotGLDoMzVIX
J3Azoq53z3seWJcPLmerixlYmbuuvqff56ir/2Bi9rp0epl9UBuOB9XlI27W
uupRa666OKHWnHXVYD6grjz2NE9d69DL89Zl4XLBuviBj+F18cB8obp83DeD
6+IW5haoix/4GFqXhbMhdeloS9X13PTjwnXVgN0l6mKDfp+vrvW5Jxarqw9g
aMm6dM5ukbryYG7xunTy568rjz0tWpdO/si61oSzpeuyMLR+XT3E+1+uLpZg
aJm6dDgYX1ePwvSydfmIW6kulmBohbp4+yeM5euqwXzFunzErVxXLJyNq4sZ
+n21ujiBm1Xr4hzORtXFHvPR9hG3Sl010MbWxRW1xrhG6jXhHs5X9zo8w7R1
9TKfD+vUxQncrFUXY/CxZl18Ml/bPuI28DnBzXp1ccXZresazNfwOZG/oWPh
dUszAxMTwpiuLm42qesegbON62KP+ab2sd+NXANti7oYo9bmrsF8uWZ4J41w
7mFsXRcb9Pi2dbEHZ9vZwsf2tjC3Y11cwdAudXECNzvZB387OJa4Y+t6x7zz
XR0Lr7vXxRIM7WFLL+9pS2/u7HqssXdd/MDHPrYwtK8tDO3m2tTdz75hYUy0
hctJtvB6cF08wNOUuliFs0Psg6H97YOhA+viBM4OsiX/AOtoe3nv7PVQ1+AO
O6YuZjiLI+viCm4Or4tzmDvMscyPsI+4yd4v+zu6Lq6odZRrMD/OZwxDx9vC
3Am28HSiLUycZAs3J9vC0ym2MHSqLcydZgs3p9vC04V19TQ9fpEt98RZdbHE
fXC2Lf1+ji3cnOEa8H1eXVzB0Pm2MHeBLWuc6Vjq3lZXL9J3F3tNmLuprj6m
fy+tiyuYuMwWbi63hacrbGHoqjA2q4u5q23h5hpbeLrda9Kbl3hN1ri+rs88
eLrBdpswbrRlT9e6Bnzf7D3C1i22cHOrLc92nWOpS//y+cDnyh1eH/6+8T54
1rvqYgwO7raFs3vrYgy2HqiLJRi6zz569h7HEveO+4D3/6Bj4ezhuriCp0ds
4elRW/r0ftdjjcfr4gqGnrCFlf/ZwtNDrk3dJ+2DradsYfRpW7h8qa6+h4Nn
62IMbl62D86esw+2XqiLJZh70Zb8562jPea9s9dXXIN76+262OAs3qiLJRh6
rS7e4OxVxzJ/3T7invF+2d9bdfFGrTddg/m7PmPYes8Wtt63hY8PbOn9D21h
6yNb2PrYFrY+sT03jE9tYeszW9j6MYwr6+r3n2zp9y/r4hmOv7KFra9t6bPP
XQMuv62r72DrO1vY+t4Wtr5wLHXhgM8ZPmN+9pqwFYXf5e6sq39/rYsTev83
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
Hp+ciA1YmWidft/TteF4kn3E7et61No/EUvUmuIazPdyHns60Ouwp4O9L5g7
xBaeDk/ECdwck4gH2DrUOqwcYZ0zOjoRJ8QdZp38o3x+aMclYmbFME5OxAB8
fBzG2WGcE8aJYayciJVTrMPH8c6Ds5Osk3+s90XdE6yTP8Hvk/471TXo69Ns
x3hNGIOPMxOxBxNn2Y73ntDh4/xE/MDfvX7fvJML7IPRixNxQp9emajX6a/L
EvUx/X6Jdfr3XNeG3UvtI+6iMNZzrSsS8UOty12D+XnOY09XeR2e+2pb+Lsl
ERvwdHMiBpjfah931XWJeIbdGxKxATc32sLT9dbRzkh0v3Bet7kG99DdiXiA
lWu8PnfDnYm4gpt7rHN2tzsP7u+yTv61zmNPd1gn/z6fN738QCLG4OkNv3t6
537raA8nYgyGnkjEBpw96Dy4ecQ6PD2eiBniHrJO/qPW4fLJRPzA9HOJeh1W
Tk/UU5zLM4lYgpXnrcPKU86DuWetk/8/74u6T1sn/5NE/UePPOb12d+Lie4m
2HorEQ/w9KbPgPnb9sHQK4kYhpXXEnEIT6/bcnavWkd7wftljXdcA4Y+TMQJ
fLzk9eH+fT8/ffGRddh613kw94F18l92Hnt6zzr5n/pZ6evPbGFu9TR8ToXR
COOrRGzA2efW4e/LMC609rV1OPsuEXtwU6bqCd759/bB1o+JWIWh3xP1Ohz8
kqiP6cefrMPWN64Nrz/bR9wPrket3xJxRa1fXYP5t85jT394HTj70/amMOqp
eICnKBU/zONUPhj6JxHbcPxfIg7hif+QBRZu/rWO1kr13PRykqoGd1gzFQ/0
+19en3uC84YlOCtS6ZxdmioPFnkf6OT/7Tz2lKXSya9SrUn/tlNZOJs7Vd/Q
F71UDMBWJ5UOrwNT9Sh8d1P5iJs6FWMw1D8VV3DTL1UN5lOl8hE3TapYeB2Q
qtfhYMZUfUw/Tp+q72FrulTcMp8hlY+4aVPVQJs5FVfUmilVDea1VGfPO5sl
1To8w8Kp+ob3P0cqruBj9lQMw+tsqRhmPiiVj7h5Up0T/M2VihnObs5UNZjP
muqcyJ83VSwsLmhmYGKBVFzBzeBU9wvMzZ/qM5j5kFQ+4uZLVQNteCrGqDUs
/PxFojn9wucDnysLpVqH5zws/DwijKXCWCIVYzC0WCr2YGXxVBZtyVQ6PI1M
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
9GhTzBD3gHXyH7YOl080xQ9MP9NUr8PKqU31FOfyVFMswcqz1mHlf86Duaet
k/+490XdJ62T/1FT/UePPOL12d/zTd1NsPVGUzzA0+s+A+Zv2gdDLzXFMKy8
0hSH8PSqLWf3snW057xf1njLNWDo/aY4gY8XvD7cv+vnpy8+sA5bbzsP5t6z
Tv6LzmNP71gn/2M/K339iS3MjS3C51QYWRifN8UGnH1qHf4+s0X7wjqcfd0U
e3DTLNQTvPNv7IOt75piFYZ+aarX4eDHpvqYfvzeOmx96drw+oN9xH3retT6
uSmuqPWTazD/ynns6VevA2e/2V4fRq0QD/DE/3k7/DCPCvlg6K+m2Ibjf5ri
EJ7+tYWbv62jFYWem16uF6rBHZYX4oF+/93rc09w3rAEZ41COmcXF8qDRd4H
Ovl/hnGj95QU0skvC61J/7YKWTibs1Df0BedQgzAVlVIh9cBhXoUvtuFfMT1
L8QYDPUKcQU33UI1mPcr5CNuqkKx8DpToV6Hg+kL9TH9OG2hvoetaQpxy3y6
Qj7ipi5UA23GQlxRa4ZCNZj/57Pnnc1caB2eYXihvuH9z16IK/iYtRDD8Dqw
EMPMZyvkI26uQucEf3MUYoazG1SoBvNZCp0T+XMXioXFoWYGJgYX4gpu5it0
v8DcvIU+g5nPX8hH3DyFaqAtUIgxag0pVOMz9wufD3yuDCu0Ds95cPh58TCW
CGPRQozB0MKF2IOVRQpZtMUK6fC0ZCFmYGj9Qu+V9zyikA9GRxbiB25WLMQA
vb9coV6Ej6UL6fQ1e6E2TC8bfv7DPbtUoXrUWqEQM9RavlAN5jwDeexppULr
8J5XLmRhdPVCLMHKON9VzMfbx92zaiGG4W+1QizByhhbmBttHW0DPze9vIZr
wPG6hXiAm1UKrc+dsXYhxmBoPeuc3ZrOg8V1rJM/ynnsaS3r5G/oNeFsI1sY
2rtQD/H+Ny3ECdxsbB0+di7Uo/C9iX3EbVGIE7iZUIgr+NvMNZhvbh9xWzoW
XncsxAz9vl0hTuBmm0J3BL2/dSHemG9rH3FbuQbaDoW4otb2rsF8wUJc8lmx
k9fhGRYq5KNf9yjECdzsVogx+Ni1EJ/Md7ePuH18TnCzVyGuOLs9XYP5Lj4n
8vd1LLweWIgZmJjifcDNpEL3CPudWIg35pPtI24/10A7oBBj1NrfNZg/XIa4
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
LmzN0JGFpxk7sqwxVUex1B3aUS/SdwM6WhNG5++oj+nfgR3xCVuzdmThZraO
LDzN3pGFoUEdWZiboyMLN3N2ZOFpWEdr0puzdLQma8zT0Wc8bM3bkYWt+Tqy
7GmujmrA9+CO9ghbQzqycLNAR5Znm7ujWOoeGH5eNIzFwhje0frwt21H++BZ
F+qIMThYuCMLZ+TBGGwt0RFLMESt792zi3QUS9x6HfUB73/JjmLhbKmOuIKn
kR1ZeFq6I0ufLt5RPdZYtiOuYGi5jiysLN+RhacRHdWm7god+WBrxY4sjK7U
kYXLMR31PRys0hFjcDPWPjgbZR9sje6IJZhbzZb8Va2jLdPR3tnrONfg3lq3
IzY4i7U6YgmG1uiINzgbH0bD8zXtI27ljvbL/tbpiDdqre0azNf3GcPWBraw
taEtfGxkS+9vbAtbm9jC1qa2sLWZ7XRhTLCFrc1tYWvHjvqeft/Jln7fqiOe
4XhrW9jaxpY+28I14HI79x1sbW8LWzvYssaWjqXuQR31HD2ys9eErclhLNhR
/+7aESf0/m62sLW7LWztYQtbe9rC/V62sLW37RDXhhXY2MVrssZ+Hd0jMD3R
FrYm2ZK3j2vA5RTvEbb2t4WbA2zhbF/HDvXZc89xrx3s54a/dbuhF8LohHF4
R1zB06Ed8QYTh9miHWEdzo7uiCt4utLvnnd+jH2wdVxHLMHQKR31Ohyc2FFf
ws3x1mHrSNeGgxPsI+5Y16PWyR1xRa2TXIP5Uc5jT6d6HTg7zRZeL+iIAXg6
vyMGmF9oH/fNWWGs3hFP53TEGDydawt/Z1tHu8rPTY9f5BrwdHlHnMDH6V6f
u+HSjriCpyusc3YXOw/+LrNO/hnO4z64xDr553kvPMPVXh+2Huuoj+mRazvi
hN6/zha2buiIK3i6uSN+4OZG+7jLr3cscfd11N/09S2Oha3bOmIYdm+3hac7
bOnxm1yPNe7qiCt4utsWnu6xhadbXZu699rH2vd7fXiaJfTra8G+HsbDHfED
Nw92xAm9/4BjmT9kH3GP+2zg5tGOGOO8HnEN5tf4LDm7JxwLW893xAkcPBPG
IR2x8lRHdwpsPdnRZyTzp+0j7n+ugfZcR1xR61nXYP6Ca8PBi7b09Uu2MPdK
R4zBxKu2x/ksYAlu3uqIDVh5wz6Ye82xxP3RUR/wzt92LIy+2xE/cPOeLf37
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
v14XS8zmq3Uxxuy/Uhfb+K95jbyX3YPYm3XxRq833AP/Ht897+xt78MzfF/X
3PD+P6yLE7h5vy5W4ey9unjG/8Br5H3qe4Kbj+viirv7yD3w3/U9Uf+Zc+H1
27qYgYmvQlfUxc0Xdf2MhLPP6/o9AP9Lr5H3P/cg9k1djNHra/e40nkwCoff
eR+ek5/T/I7M78G/1MUYDP1UF3uw8rMtsV8dh6c/QzfVxdDaTXqvvOe/vAaj
/9TFD9ykmsQAs9/QpFmEj38dZ65/c2+Y/s9r5P3tfvRKNokZeiWa1AP/d9fB
cbpJ+/CeM02yMFptEkuwUmkSG/i1Jq3x7ck3iWH4KzaJJVgpNcnCXKFJcWLr
NOm5meVmTeoBx2s1iQe4yTZpf74Z9SYxBkMtmhTn7po3qQ4Wm5oUpz7XpDrO
1NikOPXrNmlPOGvZJAtDHZo0Q7z/DZrECdys16Q4fGzVpBmF7/WbtEbexk3i
BG5aNYkr+NuwST3wN2rSGnmtm5QLr+2axAzzvlmTOIGbNk36RjD7mzaJN/y2
TVojb5Mm9SC2RZO4otfmTeqB/0NdXPKzYssm7cMz/Og15nX7JnECN9s2iTH4
2KZJfOJv16Q18nZs0j3BzQ5N4oq7a9+kHvhbN+meqO/YpFx45b/hCjMwsVuT
zgE3uzTpO8J5d24Sb/i7NmmNvJ2a1IPYHk1ijF67N6kHPv+dWHrDxF5Nssx4
IvDpHDo41DY0KnRiKBPqGuoSSoUODR0SSnsNP35kN3RzHv/pqSNC3fWvtW/o
ETpSf3u/oW/oKP1jOv9v+4Q2C53k/fhH3nuHeoUK7nG4/rWYDT3dq5nreus/
MfX/vY/Qv5bn/+vIy4UO85ny7nGY/sjQcLTPsWFoaGhIaAPbwaFWoeMdW99r
x4XWCQ0MHRNaNzTI/tpeGxDaPDTaz9PG93dCqIXj/fWJaujnc6zlNfxNnTsy
1Do0IjQ8tLHtsNAmjhPbyGuctWXoWJ9pi9DJPsc+oXNCs0NbhcaGTgm1C41x
3pZew986NM5524XGh04L7RaaEZoe2j40wbEdQqeHJoZ2CU0LnRHqGJoSmhzq
EJrkvG1Cp3qPHR0n1t496Luze0wN7WRLr219Fup39VnYb/fQmT7fHqGZ9vcK
nR06K7R/6LzQuaE9Q7Oct7fvhrz9HJ8T6uQ68vb1Gvd4YOj80NwGzf6C0EWh
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
U1Oa5VPdq63PQj1cTfB+cDbRPhzMCE1PiQfstJSYOdMxuJ0cmpQSP1NDU1Li
5Az7Hb1GHrN7np8f/ma6F/N9Tmh2St+F032OvXzvZ6XEwRznwd4s1+/tOvI6
+CzUd3IdeczrXO/N/J5vnzlYFVqZ0uxfGLogJf7mOY/ZvCJ0eUpsXOAYzFwc
WpASJxeF5qfE1Xz36uI4MTi7xDXM+LLQZSnN35LQpSnN++LQopTmHrswpfm+
1LHDvEavnu6xNKVZXupeu/hd8Q56++zL/L5vD92WEg9Xh65Kic8VoStTYhe7
PCXernIMbq7zfQ30nV2bEjPXuNdRruO+YG+1a2BgTejWlDi5OXRTSozdGLoh
pe8L9vqUeLvJscFeo9cI97glJcZucS9+l2JumN8T/Hzsd18oF78LZ9Ni5p7Q
3SmxcVfozpRYuds+/NzrPFh5IHS/3+e7oXdS4ulBx+Dk4dBDKc36k6EnUprB
x0KPpjTHjzhvrM/EHqc7Tmy8e9B3ins8nhIzj7vXOJ/lPr/Xp7wf7/lp+7Dx
SujllJjA8s2Cm1cdg7fnQs+mxMYLoedTYuVF+zO9Rh6z+56fH25fcy84eDv0
Vkrfhmd8Dph5M/RGSgy84zzYe93181xH3gyfhfq5riMPbt733jDzgX3e91+h
P1Pi4+PQRynx8KHzmM2fQj+mxMpHjsHH/0KfpcTTp6FPUuLqE/da4jgx2Prc
Ncz396HvUuLjm9DXKc36V6EvU+IM+0VKHHzt2DKv0esq9/g2Ja6+dS++x3ek
xOe1PvsPKf1suNMx+Pg99FtKPPwa+iUlxrA/p8TKb47Bx9++r5t8Z3+kxNUf
7rXKddwXbP3jGhjIBDfptPZPhk2kdT7+Ad7/UuIM+6/PR5zYGq/RC7bokUqL
MSy9+HtA/J7N78vwAKPsN8Vr/K7NO9k61rZKi59y2FJanBTDFtLihjV8WKqk
lQdDzcM2S4uNetjGtOZ73bDrpDXj2LXTet/bpLUf89gi7Fpp8UePWlrz3ZRW
L9igjjw4pDf7McfUkQff1bTOBMP0wIezlmmdAz7ahN00LU6wm6TFW9u0YrDC
Wuu0+GkVdsO0ONkoLR8mWdsgrfndNq3nYaa5vy3T4p/4+ml9F9ZL6xx8J1jD
hxVy26XFEn9PYfO02MNulhZLxInBJ2ucFXY3TutMMLNdWudgLjqHDk6Ljx3C
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
w0LHZ8XScPvM9wj7cDjUvWDphKzmD5ZOtN/WvfFbud9Qz8TMrOYYlk723szr
GaGpWc36KaExWc3+WPuwNM4+LJ1qH7ZOsw9LE0Ljs2Jpon1+3rAHzLRzb/aG
4cmhSVmxNMX+Tj4LPhye7l6wNM1nhZPp9uFmhv0O7kcNP4PX9zuBiVl+/nou
3nmob078nBOanRUDZ4fOyoqJ2fbhao7z4Gdu6Dy/4+tCq7Ji6XzHYOaC0Lys
ZvyS0MVZzeNFoflZsXSh85j7c73HIY4TO8g96NvVPRZkxdUC99rfZ6EerhZ6
PzhbZJ/ZXx66IqvZx16eFVtXOgY/S0KXZsXPZaGlWfG0zH4Pr5HHTK/288PP
CveCh5VZ/fsq+RYs9jngh3+P5dVZcbLKefB2leuPcR15R/gs1Pd3HXm9fXbO
BEvX+xzMxFOhJ7Oa9RtDN2Q1+zfZh59bQjdnxcltoTVZsXWrY8Mcp4Y5fij0
YFYs3e4aWL0zdEdW/Nxln5m+2/5I96Yv/Nwbuicrfu6zDz/32x/lfuwBSw84
Bj8P+xxvhzaNmd0kJ04eDz2W1aw/GnokK04ecc0kx4nBydO+o6m+pyeyYuwJ
9xriO+NOYekZ1zD3r4RezoqNF0MvZMXS86HnsvqmYJ/NirMXHJvhNXrNdo+X
suLqJfdi7l/1Hszxa/aZ69ftw8CboTeyYuIt+3Dyju8GJt4PvZcVQ+86doHj
b/kd/x36KyuePnANnHwU+jCref3YPvP3if2L3Ju+MPBZ6NOsmPiffTj53P4l
7scezOsXjjG/X9qHxa/sM/s/ZvXvfIWlb0JfZ8XJT47BybeOwcT3oe+yYuYH
+1d5jbxLfUaeAeZ+dq+bfQd/+p3/HvotK5Z+Df2SFdu/uOZ6x4kt97k4903u
8UdWjP3hXnP9rnh/MPCP7x1+/gv9mxUzyZjlRE5zz7+gjtgax6mBCeLEYCYb
NpMTZ+mwqZx4w9ILxogTg6tcTjXMd7OwtZz4qIQt58RVKWwxJ86xhZz4IU4M
DvM59YInelRz4gpLL36msTfngqfmOe0Hb/y8acxp1luGXTcnHtYK25QTB+vl
FIOVFjnF4GedsGvnxBN1+HDGGnlwTG/2g631c+rFrPOdaJ3TO9gobKucuNow
7AY58YalBsaIE4N5zsW5YYweG+f0PrH0gqs2OX2P4KFtTj58bJaTD1eb5+TD
wBY5+XC1Zdh2Oc3mNmG3zomxrXKKwQ3xLfxeDwl1zomxbXOqgaXtw26XE0vt
c/JhaYecfOae3vRlZncM2yEnfjrm5MPJTjn5cEs/9oChnXOKwdUuOflwtmtO
PrO+d9i9cuJq97C75cTBPjnF4GePnGLw0ynsnjnxRB0+nLFGHlxxRp4BtvbN
qVfCd3BwTnwcGPaAnLjaP+x+OTGNpQZ+iBPj28G5OHeDexyUE29YesHQob5r
+OliH5662oelbvbh4TD7MNM9dHhODB1hH36OtA9PPezDTE/7zPIxoQE5zfdA
+/DTJ9Q7p/k+yj7z3tc+/PVyL2a2X06/28FPf/st3Bu/5n69PGenhMbkxNYg
7828nhQalRNLx4WOzYmTwfbhZoh9mBlqH4aOtw8nw+zDzXD7zOJY793Svdkb
lk4IjcyJpRPtt/VZ8GFxhHvB0mifFU5Ott/Oz4S/iftRMzH0SOjhnJgY53Ow
/3WhVTnN/WmhU3PiYLz99q6fkBMzk0OTcprR0x3b3vHxft+XhhbnxNUU18DP
GaGpOfEzzT5zOd1+B/emL8ycGZqRExsz7cPKLPs7uR97wNJZjsHW2fbhcLZ9
5n1e6PycOJkTOicnJi5wDIbOdQyG5obOy4mT8+3v7zXydvMZeQYYvdC9uvsO
FuXEzMWhBTlxdVFofk68zXdNF8eJ7eNzce7D3WNhTrxd4l6wtMR3DUtL7cPD
ZfaZ9WX2mf3L7cPSFfZhabl92LrSPiytsA9LV9lnvm8M3ZDTfN9kH26vDV2T
E0sr7TPfq+zD4dXuBUurc5o/WLre/hD3xh/gftTw90H4HZTfMWHpZu/NvD4Q
uj+nWb81dEtOs7/GPizdZh+WbrcPW3fYh6U77cPSXfa38R4wM9y92RuG7w3d
kxNL99kf57Pgw+Hd7gVLD/qscPKQfbh52P4Y96OGf46B/92I/10IHh7NiWFY
ejz0mN/T16GvcmLpqdCTOfHwhPOmeg0fxp52Hvw8H3ouJ05eDL2Q01y/Hnot
p/nGvuo5+Mb7MZuvhF7OiUl6PJsTYy+51xzXkTfLvdlvtuvIg5lnfKYZ7oEP
Y2/4HDD0SejjnDjAfpTT3H/q2EKvfZgTT++G3smJpffsX+i1t3Oa42/9PFf4
/r7MiVvib+XE+ps+xzyv4V/u3C9y4urz0P9y4g37WU6MfeHYEq9xVvh+32eC
ge98DuYln4+fq3kx82Poh5zm/nvnXeM1fFj6yXkw82vol5xmN8G/4Dkvfn5z
DD7/CP2e09z/F/o3p1n+O/RXTiz96Tx4/dl73Ow4sRvcg75r3OOfnBj7x72u
81mohyvOwn6wlMzrfPCQysuHmWzYTF4MlMIW82IgnVceLHE35MEM8UJerFBH
Hlyxxj3CSSVsOa/ZbwzbPNQydGxoUF5sNAtby4uHel55cFbNqx5mqCMPRunH
+WCPOvL4Fn/g98ocN+XVizleKy8fHth73bwYWCfs2nkxwRo+PKznM8LNhmE3
yOsd7B52t7xYbJVXjLncOOxGec3TZmHb5jW/m4bdJK95bZ1XHsytn9cezDJx
YjBGD/rCCT3a5MUKll4wzFmo5zk3z2s/eGsXdou8mNghbPu8Zh+7fV5sdcgr
Bqtbh90qLya2DbtNXtxsl5cPJ6yRx3eFe2qR13dnx7x6wcGuYXfJi/st8zoH
nOwcdqe82ODOyIPzjnnVww915PEt4SzUwyF15DG7e+R17/DTKeyenpXeoV55
zThr5MHMPmH3zouJA8MekBcne+VVDz/75pUHK8T3z4sn6siDs/3yyoObg0MH
5TXjXUNd8vpGch/MFmwcGjokLza6OQ/GOrs+7Try4JB+nC/pus6eiePyYgOG
ORfngKXDQ4flxcFRoT558dDHdwEzfR2DjSNDR+TFT89Qj7w46WW/7DXycu7N
uWHmaPeCh4GhY/JiurvPwXMPCPXPi5tBzoOxfq5f23XkFX2W7r6v/s5jjgf7
mZnrIfZnhV4IPZ8XE8NCx+fF21DntfIaPlwNdx6cnBAa6Xd8Tmh2Xgyd6BjM
nBQaldeMnxoal9f8nRIakxdLJ4dG58XnCO/RznFibd2Dvlu7x9i8Znmse23i
s1APV6d5Pzgbbx8OpoXOyIsH7NS8mJnuGNyeHpqYFz+TQ5Py4mSK/Q5eI4/Z
nePnh78Z7sV8nx06K6/vwgSfY0/f+8y8OJjtPNg70/WdXEdee5+F+j1cRx7z
eq73Zn7Ps88cXBO6Oq/Znxc6Py/+5jqP2VwWuiwvNs53DGYuCs3Pi5MLQxfk
xdUF7nWI48TgbIFrmPGloSV5zd/i0KK85n1h6JK85h57cV7zvcixrl6j15Hu
cWles3ype+3kd8U76OmzL/X7vjV0S148rAhdmRefy0NX5MUu9vK8eLvSMbi5
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
uqik+cbOL4mZud6D+74utMr3vsr7wd7s0NklzfuFoQtKmnHsvJJYme/YQV5j
7/189jklcXyOe+3rNXy+EctDV5TEFvbykmaUZ72mJIZYW1YSw4tDi0ri5FL7
vRy/rKS5Xu3nGeAeV5c039irSvpd5mLfC9+CS+wf7t4LS/pOLHQM/q/0WWFy
hf1+7ocPu0t8Jt7946HHPAtP2Ifd+0P3lcTGjaEbSuLhep97iNfwYeMm58HV
mtCtJc3s7aHbSprve0P3lDTX2LtDb4U2iflqXRYPd4XuLIlFetxSEld3uNfJ
riPvBPdmv5NcRx683uwzDXcP/LF+Js4BD0/6mWHuwdADJX0vng49VRInj4Qe
LokP7EMlsfGoY+O9Rv0k3yUxZvGl0Isl8feU9zvV+3C/b5b03BuXxcQLoedL
4uS50LMlcYZ9piRmnndsutc4K9/ppX6vfKMvs88cv+xzcBd/hv4oae7Z+42S
uHo99FpJnL1hf57fDXmw+F7o3ZLm74PQ+97vs9CnJc0T9pOSeKLfqyXN6ceh
j0rijx7vlDSvH7rXYteRt8C92W+h68iD47d9pgvd420/5/98Dlj8MfRDSTxh
vy/pG/GTY1d77buSOPk69FVJnHxj/wqvfVnS3Pzlu7vR9/d7SawT/8L3/bnP
scxr+Dc497eSmPk19EtJzGN/Lomf3xxb5TXOyuz/E/rb779FzMhaZb1zbFNZ
DGXCpsua8b99VmY8F2vZsphpCPtfSaxg/y2Jk0RZsTVeYz/Yol+qrPmuhC2X
xQz92I9v4islzdYcv2d8+CC3VBYPxbCFsuYdmy+LFeLEYIA1zsq73LSsbwEc
J8s6HyxVyzoHLLUMu25ZHKwTdu2y5nu9smKwwRr3BXP1sI1lccKd4cMha83L
+o7wrOzH7MPiRmV9F4g3K4vpWlnn4PvIGj6ckNuqrDvYMOwGZd0Fdv2yOCBO
jPtijbMyv23Keub9Q+eFzg3tZzvH7+bg0EFlMbF52M3KYqhtWfVwwho+LG1R
Vh48bR12q7LY2DbsNmXN945hO5Q149gdfNedvR/z2z7s9mUxSY8ty5rv7crq
xexTRx7c05v9mHvqyIPbdmWdCY7pgQ9nHcs6B3zsHXavsjjAdiqLs33KisEG
a3uWxfBuYXcti5Pdy/JhnbVd/C4P8fMw79zfgWVxT3zn0Lfx1zuVdQ6+Bazh
wwG5B5TF0/5+J3CF3bcsTg7we+O7wBpnZY4O9d6876GhIZ4J7OCy2O0f6lcW
T91CXcti4sjQEWXx18W9YOMw5xUd714Wh12dB0OHOw9OeoZ6lDXjfUNHhcaX
9efXB8ua3z6h3mXxcLTzmO9erm/uOvLK7sf5aq4jj2/VHmW9g4LPxTlgb4Cf
ExaPsc/cHxc6tixuhoWOL4vnQaGBZfEx2HmtHOceW7qOvCbfH+fm5+eI0PCy
ODgpNKqsORsTOrksTk4MnVAWG6Odx7dmpOvbuo68jd2P823qOvL4cx2/H5zh
7zfzyPMz16d4P97BwtAlZXFyWujUstgYFxpbFiun2t/O74Y8WJwUOr2suZwS
muz7PTM0o6xZx073XS/yfsz1tNAZZXFJD35/Z6anuteuriNvR/dmv51dRx7s
TvCZ2rvHBD/nTJ8DnuaFzi+LFezcsr4dFzh2gNf4rsHGOaHZZbEyx/7eXju7
rNlZ7Ofp5vu7uKzvAfGzyrrvWT5HJ6/hd3XugrKYuSg0vywOsReWxckCxzp7
jbPC06Xem3d/e+g2v3PsmrLYvSF0fVlsXBZaWhYzV4aWl8XGEveCjWXOO8rx
K8piaKnzYOhy5zHLV4VWlDXj14VWlfX3IfhdkN8BYWNl6Nqy2FjtPBi72vWD
XEfe0e7H+WDvGufxLYYJGOjjc3EOGLvRzwlzN9mHjVtDt5TFzJ2hO8pi42bn
jfQ9kTfKce5xuOvIG+z7W+397w7dVRYHD4TuL+vnDHycYntf6N6y2HjQeTB2
j+vHue4+P89dPt8priOPP/PwrednDkw8WtafadtU432HTqjqHXwR+rwsTp4I
PV4WG4+5ZrLX8OHkSefB4rOhZ8qay+dDz5U146+GXilr1rEv+66/9H7M9Uuh
F8vikh5PlzXTL7jXbNeRd6Z7s99ZriMPdp/ymaa5Bz6/R7zmc8DTh6EPymIF
+35Z346PHFvgtffKYuPt0FtlsfKO/Xlee7Os2fnKz3OZ7+9/ZX0PiL9RFv+v
+xxzvYa/1LmflcXMp6FPyuIQ+3FZnHzm2CKvcVaYftdngq2vfQ7eebYSPxsr
4uG70LdlMfCN81Z4DR8evnce3Pwc+qks7v8L/VsWY784xvz+Fvq1rFn/J/R3
WQz8GfqjLH5+dx6s/hj6oSyW/nBstXvQ9xb3+KssTv5yr5U+C/VrfBb2g6uG
is4HZ4mKfHhIh01VxEkhbL4iHpIV5cEDd0Me3BDPVcQNdeTBEmvcI78vlMIW
K5r9ZmFrFc1WPWxjRWxUw1Yq4qF5RXn8PaNyRfUwQx15cEw/zgeH1JF3keeO
98oc05tezHJTRftxj7uG3aUiNtYJu3ZFPLQIu1ZFfLCGDxvrVpQHfxuEXb+i
WWwVdsOKZqhN2E0rmm/sJhXd+24V7ccstw67cUUs0mO9iuZ4o4p6wQR15MEb
vdmPeaeOPHhtWdGZ4Jke+Dxz24rOAUPbh92uIj6w21b0vWhfUQwmWNumIh62
DNuuIj62qsiHZ9a2qGiOdq/oeZj1ncPuVNE3gPjmFd39ZhWdg28Aa/iwQm7H
ivjZMWyHinjD7lARS8SJ8S1gjbPCzB4V7c277xXq6VnB9vCcdQt1rYiZvcJ2
qoiJ/cPuVxEne1bUC372rigPVojvWxFP1JEHZ/tUlAc3B4Y9oKIZPzR0iN/B
oNDAitjoHDq4Ija6OA/GDqqoPuk68uCQfpyvwXXk8Z99PiTUuUEMcy7OAU+H
+Tlh7nD7sHFk6IiKmOkT6l0RG92dV/Y9kVdznHssuo68jO+Pc8NN39BRFXFw
TGhART9b4AOWsP1D/SpiY6DzYOxo17dwHXnN3a+P6/s5j9k91vcIE4NDx4Vm
hp4PPVcRG8eHhlbEwxDnbeg1fNgY5jwYGhka4fc3O3R2RVye4BgzOip0YkXz
PjZ0SkWzfHJodEWze5Lz4G+499jccWJt3IO+W7rHmIq4GeNerX0W6rcOjfN+
sHeqffiYGppSEQfYyRV9p6aFzqiI2wmh8RXxcXpoYkUMTbLf3mvkMTfn+Pn5
Bk13L2b8rNCsir4Bp/kce/jez6yIjbOdB/MzXL+n68jbzmehfnfXkcfMzvHe
sHWufebg6tBVFfFwfmhuRQyc5zyYviy0tCI+5joGN/NDF1bEygWheRUxM8+9
OjtODPYucg1zvyR0aUU88M/VLayIpUtCF1c0+9gFFXG10LEuXqPXEe6xuCJm
FrvXjn5XvIMePvsSv+9bQjdXxMOVoeUVMXBF6PKKWMQuq4iP5Y7BzTW+r36+
sxUVMbPCvXq5jvuCvWtdAwM3hW6siJPrQ6sr4uy60KqKeMOurIi31Y4N9Bq9
hrrHDRUxdoN78bsVcww3w/x87Leee7EPzNwRur0iNm4LramIldvtw8+dzoOV
e0J3+32+FXqzIp7udQxO7g/dV9GsPxp6pKIZfCj0YEVz/IDzYPQu73Ga48TG
ugd9J7rHwxUx87B7neyz3OX3+pj34z0/bh82Xgy9UBETWL5ZcPOSY/D2dOip
ith4NvRMRaw8Z3+618hjdt/288Pty+4FB2+EXq/o2/CEzwEzr4VerYiBN50H
e6+4/jzXkXeGz/JkRUy+6jy4ecd7w8y79nnfv4V+rYiPD0LvV8TDe85jNr8L
fVsRK+87Bh+fhD6uiKePQh9WxNWH7rXIcWKw9alrmO9vQl9XxMeXoS8qmvXP
Q/+riDPsZxVx8IVjS7xGr+Xu8VVFXH3lXnyPb62IzxU+O/vxs2GNY/Dxc+in
inj4MfRDRYxhv6+IlZ8cg4/ffV+rfWe/VMTVL+51teu4L9j6wzUwkIg/RzZU
tf+/oX98vr9Df1XEGfZPn+8fx27yGr1gix7/VcTYf+7VNtZG+c+r/FmInz0w
zHynYi1ZFQeVsOWq3k+7sFtUxVI+bK4qZrJhM1UxxBo+PNTCVqua6RZh16pq
rrFNVfFDnD1451uF3bKqd49lP/gsVLUfc1oP21jVvGKbV8UJ/YjBQLOq9oZd
zl6qivViVb3gmTV8uNokbOuqWMFuXNUs8qybV8UPaxtVxd56YVtWxdL6Vfnw
RLxVVfO6dVXPw+zTY7OqGMBy97C+dlX3wjdinap8vhH0Xreq7weWGBxuWtVZ
4ZC/14D/rt8lPtxuUNWZeMcHhj3A7/6gqnxmsFPYPatiZbuw21bFxjZVnRtW
WMOHn+2ryoObHcN2qIqPncJ2rGqO9wi7e1Wzj90tdFRoeeiKqvjYNewuVTFH
jx2qmvudq+oFM9SRB3v0Zj/4oI48mG5f1Znglh748MQz7WFmDq7qmWFp77B7
eaYPCXWuipv9wu5bFSvYfariZ/+qYvDDGvWwxV3u71k8PHRYVYx29n5wzj7c
bx8/9+VVMUFut6o46RrqEkrbHloVM90cS3mNs/I93rCq98r3mvnCZ467+xzc
xYTQ+KrmvneoV1Vc9Qz1qIqzXvab+91wRljsH+rn+TsmNMD7DQkN9jxhj6uK
J/odWdWcHhsaVBV/9Di6qnkd6F7ruY68Fu7Nfuu6jjw47usz1d2jr59zqM8B
iyeHRlfFE/akqr4RYxzbzGt81+BkZGhEVZycYL+114ZXNTcTfXfb+f5Oq4p1
4sOquu/jfY6NvIa/rXNPrYqZcaGxVTGPPaUqfk51bEuvcVZmf1LodL//BaGL
/M6x86ti6MzQjKpm/HSflRmfFZpZFTNTQ1OqYgU7uSpOznBsR6+x327uN72q
+T43NKcqZmZ6P76JR1Q1WyW/Z/x9nXtOVTzMDp1d1bxjz6qKlXMc6+S1WX6X
V1b1LYDjaT4fLJ3nc8DHwtAlVXGAvbiq+V7kWFevcV8wd2Hogqo4mW//YK/N
q+o7Mt37MfvLQpdV9V0gfn5VTM/1OQ70Gn5P5y71HSwJXeq7wC6uioOljnX3
Gmdlflf4mR8NVWvBYuiRqmy5pnfzZOiJqpi4JnR1VQxd5fr+XsOHpWudB0+r
Q9dVxcYNoeurmu81oVurmnHsLb7rp7wf83tz6KaqmKTHqqrm+0b3Gu468ga7
N/sd7zry4HalzzTIPfDh7DafAz4eDD1QFQfY+6vi7CHHxnntvqoYvjt0V1Wc
3GN/tNfu9Lt82s8zxff3eFXcE7+jqt9pbvc5RnkNf7JzH6uKJ94N72Si7cNV
cfKYYxO8xlmZo2e8N+/7s9CnngXsJ1Wx+17o3ap4ej70XFVMvBJ6uSr+nnUv
2HjBebMdf6kqDp9zHgy96Dw4eS30alUz/nborar+XMLPEn5uML9vht6oiod3
nMd8v+76ea4jb477cb65riOPb9W9fgdn+1ycA/be93PC4gf2mfuPQx9Vxc3n
of9VxfGHzlvseyJvqePc40LXkTff98e5+fn5VejLqjj4PvRdVXP2U+jHqjj5
NvRNVWz84Dy+NV+7/irXkXe5+31RFZ/fOI8/E/L7AT/P+X7f5+dnrn/2fryD
dYPddWri5PfQb1Wx8Wvol6pY+c0+nPzhPFj8J/R3VXP5X+hf328m+qVrmnVs
qqa7blnTfsx1MmyiJi7p8VdVM91QUy/4oI68Ne7Nfsw+deTB7p8+083u8aef
M1vTOeCpedhmNbGCrdX07WisKQYfrPFdg41S2GJNrPBtw4dt1go1zc56NT0P
s879rV3T94B4vqb7ztV0Dr4HrOHDAbktamJmrbBNNXGIrdfECXFifBdY46zw
tH5Ne/PudwrbsaZ3jt2xJna3Cbt1TWy0CrthTcxsGnaTmtjYoKZesLFRTXkw
RLx1TQxRRx4MbVxTHrPcNmybmmZ8y7Dtavr7F/wumDYbW8Ta5jWxsVVNeTC2
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
94D1J3zej7uOXp5jPMC+rxUx82rolSIOsS8XcfKa1/p6jlrh6R3vzd3/EvrZ
d479qYjdb0PfFLHxfui9ImY+CX1cxMa7zgUbH9hvmNc/KmLoPfvB0If2o5c/
C31a1ONfheb43OeN32PNU8XGl6Evitj42n4w9rnjRzsOvxHOR32jHIcfbzFM
wMD1ros6YOw7fyfMfe8xbMwN/VjEzG+hX4vY+MF+t/qc8LvD65zjRMfhN9bn
97X3/yP0exEH/4b+Kfo5Ax9TbP8O/VXExn/2g7E/HX+34/729/zu+qY4Dj9+
38P7Drf0NGdJLvq6RdX5cgdrhl2jipMFwv6vio35w85XxQpzjOFkwSo/WFw0
7CJVfdky7GJVPV7Dlqpex+aqs16raj/6OoVtVHFJjoWrenrxqlzwQRx+sEdu
9qP3icMPdheqqgm2ycGYX0c0q+qApxXDrlDFCnb5qrdjpao1+GBuuSo2lg67
VBUry1SNYZu5Jat6Z+2q76HXOb/WVe8B60tU8d+qqg7eA+YYwwG+q1cxw58p
rFrFIXaVKk5YZ413gbmVq3hap2pv7n6nsO2r7hy7YxW724TduoqN9cKuW8XM
xmE3qmKjTVUu2Fi/yg+GWN+wiiHi8IOhDar86OVNw25S1eNbhm0bOig0Gl6r
2Ngi7OZVbGxV5Qdjm1XFwwZx+MEG+agP9ojDjzds2ao7gG3qog4Y27bqO2Fu
u6oxbOwQtl0VM7uE3bmKje2r/GCDc8IPhljnHGGIOPxgmvOjbrjpENq1ioM9
Q3uEDvS3jqripGNo9yo29rIfjO3m+Pkdhx8cko/6WjgOv06hMT5H3mv6ke+n
p/cJ7V3FBnsfUMXD/qH9qvg4wOPFfR/4wdAhoYN9f+eEzq7isrPX6NHDQof6
rI8Ida/q5cNDXat6t4v9Gq6VPZbwOmvVOci7tHN0q+Kmm3Ml19LJ33ak9+Nb
j/IYPk4JnVzFAZY/d4OzU70Gt8eGjqni44TQ8VUMnejxyp47ruqN4Zz2rXqD
TnMuevys0JlVb8DRrgM2eoTOqGLjbPvB/OmOb+M4/FZwLcSv7Tj86Ndzfe6w
dX7oPN/54NC1VX19nv1g44JQrypmLgn1rmKjp+Nh40L7tfX6xVUM9bIfDF1k
P3r50lCfqh7vF7qi6r3kPOgt2OgburyKjf72g7HLHL+94/Dbyvmob1vH4cdb
TJ/CwBauizp4n64MDaji4LrQkCoehvgsYGao12DjqtCgKn6uCV1dxcm1Hu/q
Ofx2dO7+3vt654KHkaEbqjgf6Dr47hGh4VXcjLIftQ9z/H6Ow29n1zLQ5zXc
fvwbkPx7Wvw7WvT1TVUMPxJatBl919Q9PRl6ooqPm0Pjqtgb65jOnmMMY+Pt
Bze3hm6p4uT20G1VfT01NKWqv7GTfd9PeT968c7QpCr2yDGxirE7nIuevct+
3Z2b/Y5yHH6wPcE1dXUOxjB2t+uAjQdDs6qYwD5Qxc1DXuvhuZlV7N0Xml7F
0v0en+K5e6v65ml/Ty+f3+NV7wHr91SxPs11nOQ5xj3t+1gVW4/6Ts61fbiK
pce8do7nqJWefcZ7c/efhj7xnWM/rurBd0PvVHHwfOi5Kj5eCb1cxeWzzgU/
L9ivr9dfquLnOfvBz4v2o49fC71a1d9vhd6s+u9s/Nkofw5KL84OvVHFwdv2
g4PXHT/Icfj1cz7qu9Jx+PFOzfAdXO66qAMm3/N3wuj7HsPGR6EPq5j5PPRZ
Fbcf2G+Yzwm/G7zOOQ51HH7X+Pyom5+lX4a+qOLg29A3VX32Q+j7Kk6+Dn1V
xcZ39uPn5RzHj3UcfqOcj/rGOG6O73uxpvjknZ7p76evf/R+3MGSsb5EU5z8
Evq5io2fQnOrWPnZYzj51X6w+Ffoz6q+/Cf0t893vsjXoqlex87b1Fkv1dR+
9PU8Yf+r4pkcf1T19L/OBR/E4TfVudmP3v/PfrD7m2uC7d895jvnb6oOeGqE
XbwpVrAtm3o7UlNr8MEc5wUbC4ddqClWeNsYwzZzCzbVO0s39T30OufXqqn3
gPUFmjrv/zVVB+8Bc4zhAN9mU8zUsKUpDrG5KU5YZ413gTlqhadlmtqbu98k
7MZN3Tl2o6bYbRN2nabYWD7sck0xs0rYlZtiY9mmcsHGCk35wRDrKzXFEHH4
wdCKTfnRy6uFXbWpHl8r7JpN/ZkEv0ZsYTbWiLnWTbGxdlN+MLZ6U/GwQRx+
sEE+6oM94vAbbyZgALapizpgbN2mvhPm1mtqDBsbht2gKWY2C7tpU2ys35Qf
bHBO+MEQ65wjDBGHH0xzftTN/luE3bwpDrYJu3VTP2fmmiXsVjG3ZVNsbNuU
H4y1bSoefojDj+8hH/URTxx+9O72YbcL/R9KIE9p
            "]]]}, {}, {}, {}}, {}},
       VertexColors->CompressedData["
1:eJzt1T1L1mEYxuE/j0O0tJg09AJSfQSRlu5AmtxsjIai1h4IChFHp2gRcegD
NAYuFYhbQ5vDQ9SaOIiB0gs41JLg2Bc4r5tjuuDYr/M3+2i89GQ0DMOdi8Mw
dXpf7J07uPdp0h6MFs9fefy2ba8tjH/++NY455xzzjnnnHPOOeecc8455//7
9PuNr7f/TtqXmx/H1y9vtdX1u8+ezuxxzjnv3NN6pF+cc871i3POea+e1iP9
4pxzrl+cc8579bQe6RfnnHP94pxz3qun9Ui/OOec6xfnnPNePa1H+nXmr06W
Z69eO26bryd/7o+O2rs3F36tbH3nnPO4vdIv/dIvzrl+6Vd1T/sXznmOp+2V
fumXfnHO9Uu/qnvav3DOczxtr/RLv/SLc65f+lXd0/6Fc57jaXulX/qV3K/l
l58fru3ut+e35i+tf9hvuzu/5w5vHHHelaf9nX7pV0VP+5e0neFcv3L2Sr/0
S7841y/90q/qnvYvaTvDuX7l7JV+6Zd+ca5f+qVf1T3tX9J2hnP9ytkr/dIv
/eJcv/RLv6p72r+k7Qzn+pWzV/qlX/rFuX7pl35V97R/SdsZzvUrZ6/0S7/0
i3P90i/9qu5p/5K2M5zrV85e6Zd+6Rfn+qVf+lXd0/4lbWc416+cvdIv/dIv
zvVLv/Sruqf9S9rOcK5fOXulX/qlX5zrl37pV3VP+5e0neFcv3L2Sr/0S784
1y/90q/qnvYvaTvDuX7l7JV+6Zd+ca5f+qVf1T3tX9J2hnP9ytkr/dIv/eJc
v/RLv6p72r+k7Qzn+pWzV/qlX/rFuX7pl35V97R/SdsZzvUrZ6/0S7/0i3P9
0i/9qu5p/8I5z/G0vdIv/dIvzrl+6Vd1T/sXznmOp+2VfumXfnHO9Uu/qnva
v3DOczxtr/RLv/SLc65f+lXd0/6Fc57jaXulX/qlX5xz/dKv6p72L5zzHE/b
K/3SL8455/rFOee8b0/rkX5xzjnXL8455716Wo/0i3POuX5xzjnv1dN6pF+c
c871i3POea+e1iP94pxzrl+cc8579bQe6RfnnHP94pxz3qun9YhzzjnnnHPO
Oeecc84555zzZP8HfXV/NA==
        "]],
      AspectRatio->1,
      DisplayFunction:>Identity,
      Frame->True,
      PlotRange->{{1., 72.}, {1., 72.}},
      PlotRangeClipping->True,
      PlotRangePadding->{
        Scaled[0.02], 
        Scaled[0.02]}], {576., -189.}, 
     ImageScaled[{0.5, 0.5}], {360., 360.}]}, {}},
  ContentSelectable->True,
  DisplayFunction->Identity,
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{{3.398387662934*^9, 3.398387688002*^9}, 3.398387730367*^9, 
   3.398388982119*^9, 3.398394815642*^9, 3.398394856585*^9, 
   3.3984404891451564`*^9, 3.3984405203639064`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["thresholdImage",
  FontWeight->"Bold"],
 "\nConverts a grayscale image I into a binary image by setting all the \
values below the threshold t to zero"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "thresholdImage", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"thresholdImage", "[", 
    RowBox[{"I_", ",", " ", "t_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", " ", "<", " ", "t"}], ",", " ", "0", ",", " ", "1"}], 
       "]"}], "&"}], ",", " ", "I", ",", " ", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["invertImage",
  FontWeight->"Bold"],
 "\nInverts an image "
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "invertImage", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"invertImage", "[", "I_", "]"}], " ", ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", " ", "==", " ", "0"}], ",", " ", "1", ",", " ", "0"}], 
       "]"}], "&"}], ",", " ", "I", ",", " ", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["n4, n8",
  FontWeight->"Bold"],
 "\nReturns the points in the 4 neighborhood and the 8 neighborhood of p"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "n4", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"n4", "[", "p_", "]"}], " ", ":=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        ",", " ", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "-", "1"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        ",", " ", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "+", "1"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "-", "1"}], ",", " ", 
        RowBox[{"p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
        "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "+", "1"}], ",", " ", 
        RowBox[{"p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
        "}"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "n8", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"n8", "[", "p_", "]"}], " ", ":=", 
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
            "x"}], ",", " ", 
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "+", 
            "y"}]}], "}"}], ",", 
         RowBox[{"{", " ", 
          RowBox[{"x", ",", " ", 
           RowBox[{"-", "1"}], ",", " ", "1"}], " ", "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"y", ",", " ", 
           RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}], ",", " ", 
       "1"}], "]"}], " ", ",", " ", 
     RowBox[{"{", "p", "}"}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getN4, getN8, getN4Immersion",
  FontWeight->"Bold"],
 "\nReturns the points in the 4 / 8 neighborhood of p if it is in the \
thresholded image I"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getN4", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getN4", "[", 
    RowBox[{"p_", ",", " ", "I_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"n4", "[", "p", "]"}], ",", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"I", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], " ", "&"}]}], 
    "]"}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getN8", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getN8", "[", 
    RowBox[{"p_", ",", " ", "I_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"n8", "[", "p", "]"}], ",", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"I", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], "&"}]}], "]"}]}], 
  ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getN4Immersion", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getN4Immersion", "[", 
    RowBox[{"p_", ",", " ", "V_"}], "]"}], " ", ":=", " ", 
   RowBox[{"getN4", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}], ",", "  ", 
     RowBox[{"thresholdImage", "[", 
      RowBox[{
       RowBox[{"Take", "[", 
        RowBox[{"V", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
            "1"}], ",", " ", 
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
            "1"}]}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "-", 
            "1"}], ",", " ", 
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "+", 
            "1"}]}], "}"}]}], "]"}], ",", " ", 
       RowBox[{"V", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}]}], "]"}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getC4",
  FontWeight->"Bold"],
 "\nGets the number of 4-connected elements around point p in the pointset X"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getC4", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getC4", "[", 
   RowBox[{"p_", ",", " ", "testPoints_", ",", " ", "imagePoints_"}], "]"}], 
  " ", ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"Module", " ", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "tPoints", ",", " ", "mImage", ",", " ", "count", ",", " ", "list", ",", 
      " ", "list2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"tPoints", " ", "=", " ", "testPoints"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mImage", " ", "=", " ", "imagePoints"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"count", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"tPoints", ",", " ", "#"}], "]"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"list", " ", "=", " ", 
              RowBox[{"{", "#", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"count", " ", "=", " ", 
              RowBox[{"count", " ", "+", " ", "1"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"While", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "list", "]"}], " ", ">", " ", "0"}], 
               ",", " ", "\[IndentingNewLine]", 
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"list2", " ", "=", " ", 
                   RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"Scan", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"tPoints", " ", "=", " ", 
                    RowBox[{"Complement", "[", 
                    RowBox[{"tPoints", ",", " ", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"mImage", " ", "=", " ", 
                    RowBox[{"Complement", "[", 
                    RowBox[{"mImage", ",", " ", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"list2", " ", "=", " ", 
                    RowBox[{"Union", "[", 
                    RowBox[{"list2", ",", " ", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"n4", "[", "#", "]"}], ",", " ", "mImage"}], 
                    "]"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    " ", "&"}], ",", " ", "list"}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"list", " ", "=", " ", "list2"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "]"}], " ", "&"}], ",", "testPoints"}], "]"}],
      ";", "\[IndentingNewLine]", "count"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getC4", "[", 
    RowBox[{"p_", ",", " ", "X_"}], "]"}], " ", ":=", " ", 
   RowBox[{"getC4", "[", 
    RowBox[{"p", ",", " ", "X", ",", " ", "X"}], "]"}]}], ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getC8",
  FontWeight->"Bold"],
 "\nGets the number of 8-connected elements around point p in the pointset X"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getC8", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getC8", "[", 
   RowBox[{"p_", ",", " ", "testPoints_", ",", " ", "imagePoints_"}], "]"}], 
  " ", ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"Module", " ", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "tPoints", ",", " ", "mImage", ",", " ", "count", ",", " ", "list", ",", 
      " ", "list2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"tPoints", " ", "=", " ", "testPoints"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mImage", " ", "=", " ", "imagePoints"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"count", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"tPoints", ",", " ", "#"}], "]"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"list", " ", "=", " ", 
              RowBox[{"{", "#", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"count", " ", "=", " ", 
              RowBox[{"count", " ", "+", " ", "1"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"While", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "list", "]"}], " ", ">", " ", "0"}], 
               ",", " ", "\[IndentingNewLine]", 
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"list2", " ", "=", " ", 
                   RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"Scan", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"tPoints", " ", "=", " ", 
                    RowBox[{"Complement", "[", 
                    RowBox[{"tPoints", ",", " ", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"mImage", " ", "=", " ", 
                    RowBox[{"Complement", "[", 
                    RowBox[{"mImage", ",", " ", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"list2", " ", "=", " ", 
                    RowBox[{"Union", "[", 
                    RowBox[{"list2", ",", " ", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"n8", "[", "#", "]"}], ",", " ", "mImage"}], 
                    "]"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    " ", "&"}], ",", " ", "list"}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"list", " ", "=", " ", "list2"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "]"}], " ", "&"}], ",", "testPoints"}], "]"}],
      ";", "\[IndentingNewLine]", "count"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getC8", "[", 
    RowBox[{"p_", ",", " ", "X_"}], "]"}], " ", ":=", " ", 
   RowBox[{"getC8", "[", 
    RowBox[{"p", ",", " ", "X", ",", " ", "X"}], "]"}]}], ";"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isCurveEnd",
  FontWeight->"Bold"],
 "\nTells us whether the point p is a curve end point in the image V"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isCurveEnd", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isCurveEnd", "[", 
   RowBox[{"p_", ",", " ", "V_", ",", " ", "W_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", " ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"currentN4", ",", " ", "n"}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{
     RowBox[{"currentN4", "=", " ", 
      RowBox[{"getN4", "[", 
       RowBox[{"p", ",", " ", "V"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"n", " ", "=", " ", 
      RowBox[{"Length", "[", "currentN4", "]"}]}], ";", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"Return", "[", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"n", "\[Equal]", "0"}], ")"}], " ", "||", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"n", "\[Equal]", "1"}], ")"}], "&&", " ", 
         RowBox[{"isBoundaryPoint", "[", 
          RowBox[{
           RowBox[{
           "currentN4", "\[LeftDoubleBracket]", "1", 
            "\[RightDoubleBracket]"}], ",", " ", "V", ",", " ", "W"}], 
          "]"}]}], ")"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "\n",
 StyleBox["isLocalMinima",
  FontWeight->"Bold"],
 "\nTells you whether the point p is a local minma in image V"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isLocalMinima", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isLocalMinima", "[", 
   RowBox[{"V_", ",", " ", "p_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"currentN8", ",", " ", "isAbove", ",", " ", "isBelow"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"currentN8", " ", "=", " ", 
      RowBox[{"n8", "[", "p", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"isAbove", " ", "=", " ", "False"}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"isBelow", " ", "=", " ", "False"}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"Scan", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"isAbove", " ", "=", " ", 
            RowBox[{"isAbove", " ", "||", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"V", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], " ",
                ">", " ", 
               RowBox[{"V", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}]}], 
              ")"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"isBelow", " ", "=", " ", 
            RowBox[{"isBelow", " ", "||", "  ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"V", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], " ",
                "<", " ", 
               RowBox[{"V", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}]}], 
              ")"}]}]}], ";"}]}], "\[IndentingNewLine]", "]"}], "&"}], ",", 
       "  ", "currentN8"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"isAbove", " ", "&&", " ", 
      RowBox[{"!", "isBelow"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isSimple",
  FontWeight->"Bold"],
 "\nTells us whether the point p is simple in the image V, inverse of the \
image W"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isSimple", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isSimple", "[", 
    RowBox[{"p_", ",", " ", "V_", ",", " ", "W_"}], "]"}], " ", ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"getC4", "[", 
        RowBox[{"p", ",", " ", 
         RowBox[{"getN4", "[", 
          RowBox[{"p", ",", " ", "V"}], "]"}], ",", " ", 
         RowBox[{"getN8", "[", 
          RowBox[{"p", ",", " ", "V"}], "]"}]}], "]"}], "  ", "\[Equal]", " ",
        "1"}], ")"}], " ", "&&", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"getC8", "[", 
        RowBox[{"p", ",", " ", 
         RowBox[{"getN8", "[", 
          RowBox[{"p", ",", " ", "W"}], "]"}], ",", " ", 
         RowBox[{"getN8", "[", 
          RowBox[{"p", ",", " ", "W"}], "]"}]}], "]"}], "  ", "\[Equal]", " ",
        "1"}], ")"}]}], ")"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isSimpleImmersion",
  FontWeight->"Bold"],
 "\nTells us whether the point p is simple in the image V,inverse of the \
image W when testing the immersion threshold "
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isSimpleImmersion", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isSimpleImmersion", "[", 
   RowBox[{"p_", ",", " ", "V_", ",", " ", "threshold_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"V2", ",", " ", "W2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"V2", " ", "=", " ", 
      RowBox[{"Take", "[", 
       RowBox[{"V", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
           "1"}], ",", " ", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
           "1"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "-", 
           "1"}], ",", " ", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "+", 
           "1"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"V2", " ", "=", " ", 
      RowBox[{"thresholdImage", "[", 
       RowBox[{"V2", ",", " ", "threshold"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"W2", " ", "=", " ", 
      RowBox[{"invertImage", "[", "V2", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"isSimple", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}], ",", " ", "V2", ",", " ", "W2"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "\n",
 StyleBox["isBoundaryPoint",
  FontWeight->"Bold"],
 "\nTells us whether the point p is in the boundary point of the Image V, \
inverse of the image W"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isBoundaryPoint", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isBoundaryPoint", "[", 
    RowBox[{"p_", ",", " ", "V_", ",", " ", "W_"}], "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"V", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], ")"}], " ", "&&", 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"getN4", "[", 
         RowBox[{"p", ",", " ", "W"}], "]"}], "]"}], " ", ">", " ", "0"}], 
      ")"}]}], ")"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "\n",
 StyleBox["isBoundaryPointImmersion",
  FontWeight->"Bold"],
 "\nTells us whether the point p is in the boundary point of the Image V, \
inverse of the image W when performing immersion"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isBoundaryPointImmersion", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isBoundaryPointImmersion", "[", 
    RowBox[{"p_", ",", " ", "V_"}], "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{
             "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{"V", "\[LeftDoubleBracket]", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
              "\[RightDoubleBracket]"}]}], "}"}], " ", "&"}], ",", "  ", 
          RowBox[{"n4", "[", "p", "]"}]}], "]"}], ",", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
           "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], " ", 
           "<", " ", 
           RowBox[{"V", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{
             "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "\[RightDoubleBracket]"}]}], ")"}], " ", "&"}]}], " ", "]"}], 
      "]"}], " ", ">", " ", "0"}], ")"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isBorderingBackground",
  FontWeight->"Bold"],
 "\nTells us whether the point p is bordering a background pixel."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isBorderingBackground", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isBorderingBackground", "[", 
    RowBox[{"p_", ",", " ", "V_", ",", " ", "W_"}], "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"V", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], ")"}], " ", "&&", 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"getN8", "[", 
         RowBox[{"p", ",", " ", "W"}], "]"}], "]"}], " ", ">", " ", "0"}], 
      ")"}]}], ")"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isDestructible",
  FontWeight->"Bold"],
 "\nTells us whether a point p can be destroyed from image V (inverse W) \
while preserving skeleton Pres..\n\tthinOperator = 0 \[Rule] Topology \
preservation \n\tthinOperator = 1 \[Rule] Curve preservation \n\tthinOperator \
= 2 \[Rule] Surface preservation (To be implemented)"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isDestructible", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isDestructible", "[", 
   RowBox[{
   "p_", ",", " ", "V_", ",", " ", "W_", ",", " ", "Pres_", ",", " ", 
    "thinOperator_"}], "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"thinOperator", "==", "0"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"isBoundaryPoint", "[", 
       RowBox[{"p", ",", " ", "V", ",", " ", "W"}], "]"}], " ", "&&", " ", 
      RowBox[{"isSimple", "[", 
       RowBox[{"p", ",", " ", "V", ",", " ", "W"}], "]"}], " ", "&&", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Pres", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], " ", "\[Equal]", " ", "0"}], ")"}]}], 
     ")"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"isBoundaryPoint", "[", 
       RowBox[{"p", ",", " ", "V", ",", " ", "W"}], "]"}], " ", "&&", " ", 
      RowBox[{"isSimple", "[", 
       RowBox[{"p", ",", " ", "V", ",", " ", "W"}], "]"}], " ", "&&", " ", 
      RowBox[{"!", 
       RowBox[{"isCurveEnd", "[", 
        RowBox[{"p", ",", " ", "V", ",", " ", "W"}], "]"}]}], " ", "&&", " ", 
      
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Pres", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], " ", "\[Equal]", " ", "0"}], ")"}]}], 
     ")"}]}], "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isSkeletalSurfacePoint",
  FontWeight->"Bold"],
 "\nLets us know whether a given skeletal point p is a surface point... \n\t\
Pre: p is on the skeleton"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isSkeletalSurfacePoint", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isSkeletalSurfacePoint", "[", 
   RowBox[{"p_", ",", " ", "S_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", " ", 
   RowBox[{
    RowBox[{"{", "imageN8", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"imageN8", " ", "=", " ", 
      RowBox[{"getN8", "[", 
       RowBox[{"p", ",", " ", "S"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "\[IndentingNewLine]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "+", " ", "1"}]}], "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               " ", "+", "1"}], ",", " ", 
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             " ", "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               "+", "1"}], " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "+", " ", "1"}]}], "}"}]}], "]"}]}], " ", ")"}], " ", "||",
         
        RowBox[{"(", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "-", " ", "1"}]}], "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               " ", "-", "1"}], ",", " ", 
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             " ", "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               "-", "1"}], " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "-", " ", "1"}]}], "}"}]}], "]"}]}], " ", ")"}], " ", "||",
         "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "+", " ", "1"}]}], "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               " ", "-", "1"}], ",", " ", 
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             " ", "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               "-", "1"}], " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "+", " ", "1"}]}], "}"}]}], "]"}]}], " ", ")"}], " ", "||",
         "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "-", " ", "1"}]}], "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               " ", "+", "1"}], ",", " ", 
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             " ", "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               "+", "1"}], " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "-", " ", "1"}]}], "}"}]}], "]"}]}], " ", ")"}]}], ")"}], 
      "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isSkeletalSurfaceInteriorPoint",
  FontWeight->"Bold"],
 "\nLets us know whether the point is an interior point of a surface"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isSkeletalSurfaceInteriorPoint", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isSkeletalSurfaceInteriorPoint", "[", 
    RowBox[{"p_", ",", " ", "S_"}], "]"}], " ", ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"getN8", "[", 
       RowBox[{"p", ",", " ", "S"}], "]"}], "]"}], " ", "\[Equal]", " ", 
     "8"}], ")"}]}], ";"}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getSkeletalPixelType",
  FontWeight->"Bold"],
 "\nGets the point type of a pixel p in the Skeleton S\n\t0 - Not in the \
skeleton\n\t1 - A skeletal point\n\t2 - A curve end point\n\t3 - A curve \
interior point\n\t4 - A surface boundary point\n\t5 - A surface interior \
point"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getSkeletalPixelType", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getSkeletalPixelType", "[", 
   RowBox[{"p_", ",", " ", "S_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", " ", 
   RowBox[{
    RowBox[{"{", "ret", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"S", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], "  ", "==", "0"}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"ret", " ", "=", " ", "0"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"isSkeletalSurfacePoint", "[", 
          RowBox[{"p", ",", " ", "S"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"isSkeletalSurfaceInteriorPoint", "[", 
            RowBox[{"p", ",", " ", "S"}], "]"}], ",", " ", 
           RowBox[{"ret", " ", "=", " ", "5"}], ",", " ", 
           RowBox[{"ret", " ", "=", " ", "4"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"getN4", "[", 
              RowBox[{"p", ",", " ", "S"}], "]"}], "]"}], " ", "\[Equal]", 
            " ", "0"}], ",", "\[IndentingNewLine]", 
           RowBox[{"ret", " ", "=", " ", "1"}], ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"getN4", "[", 
                RowBox[{"p", ",", " ", "S"}], "]"}], "]"}], " ", "\[Equal]", 
              " ", "1"}], ",", " ", 
             RowBox[{"ret", " ", "=", " ", "2"}], ",", " ", 
             RowBox[{"ret", " ", "=", " ", "3"}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "ret", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getBlankImage",
  FontWeight->"Bold"],
 "\nReturns a blank image of the same size as the source image."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getBlankImage", "]"}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getBlankImage", "[", "]"}], " ", ":=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{"0", ",", " ", 
     RowBox[{"{", 
      RowBox[{"x", ",", " ", 
       RowBox[{
        RowBox[{"sliceSize", "[", 
         RowBox[{"1", ",", "1"}], "]"}], "-", "gaussianRadius"}], ",", " ", 
       RowBox[{
        RowBox[{"sliceSize", "[", 
         RowBox[{"1", ",", "2"}], "]"}], "+", "gaussianRadius"}]}], "}"}], 
     ",", " ", 
     RowBox[{"{", 
      RowBox[{"y", ",", " ", 
       RowBox[{
        RowBox[{"sliceSize", "[", 
         RowBox[{"2", ",", "1"}], "]"}], "-", "gaussianRadius"}], ",", " ", 
       RowBox[{
        RowBox[{"sliceSize", "[", 
         RowBox[{"2", ",", "2"}], "]"}], "+", "gaussianRadius"}]}], "}"}]}], 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["findSkeletalValue",
  FontWeight->"Bold"],
 "\nFinds the correct skeletal value that a pixel can be reduced while \
performing immersion"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "findSkeletalValue", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"findSkeletalValue", "[", 
    RowBox[{"p_", ",", "V_"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"neighbors", ",", "skelVal", ",", " ", "V2", ",", " ", "W2"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"V2", " ", "=", " ", 
       RowBox[{"thresholdImage", "[", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"V", ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              "-", "2"}], ",", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              "+", "2"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
              "-", "2"}], ",", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
              "+", "2"}]}], "}"}]}], "]"}], ",", " ", 
         RowBox[{"V", "\[LeftDoubleBracket]", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
           " ", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
          "\[RightDoubleBracket]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"W2", " ", "=", " ", 
       RowBox[{"invertImage", "[", "V2", "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"isCurveEnd", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "3"}], "}"}], ",", " ", "V2", ",", " ", "W2"}], 
         "]"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"V", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"neighbors", "=", 
            RowBox[{"Sort", "[", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                   "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                   RowBox[{
                   "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], ",", 
                   RowBox[{"V", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}]}], 
                  "}"}], "&"}], ",", 
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"n4", "[", "p", "]"}], ",", 
                  RowBox[{"{", "p", "}"}]}], "]"}]}], "]"}], ",", 
              RowBox[{
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
                ">", 
                RowBox[{
                "#2", "\[LeftDoubleBracket]", "3", 
                 "\[RightDoubleBracket]"}]}], "&"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"neighbors", " ", "=", " ", 
            RowBox[{"Select", "[", 
             RowBox[{"neighbors", ",", " ", 
              RowBox[{
               RowBox[{
                RowBox[{
                "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
                " ", "\[LessEqual]", " ", 
                RowBox[{"V", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", " ", 
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}]}], 
               " ", "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"skelVal", "=", 
            RowBox[{"neighbors", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"Length", "[", "neighbors", "]"}], ",", "3"}], 
             "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Do", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"\[Not]", 
                 RowBox[{"isSimpleImmersion", "[", 
                  RowBox[{"p", ",", "V", ",", 
                   RowBox[{"neighbors", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", "3"}], "\[RightDoubleBracket]"}]}], 
                  "]"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"Module", "[", 
                 RowBox[{
                  RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"skelVal", "=", 
                    RowBox[{"neighbors", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", "3"}], "\[RightDoubleBracket]"}]}], ";",
                    "\[IndentingNewLine]", 
                   RowBox[{"Break", "[", "]"}], ";"}]}], 
                 "\[IndentingNewLine]", "]"}]}], "]"}], ";"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "1", ",", 
               RowBox[{"Length", "[", "neighbors", "]"}]}], "}"}]}], "]"}], 
           ";", "\[IndentingNewLine]", "skelVal"}]}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["performThinning",
  FontWeight->"Bold"],
 "\nPerforms the thinning operation on image V, (Inverse of the image W) for \
a maximum of n iterations, while preserving earlier skeleton Pres, for \
topology/curve or surface preservation."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "performThinning", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"performThinning", "[", 
   RowBox[{
   "V_", ",", " ", "W_", ",", " ", "n_", ",", " ", "Pres_", ",", " ", 
    "thinOperator_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "G", ",", "H", ",", "m", ",", " ", "dMap", ",", " ", "boundaryPoints", 
      ",", " ", "thicknessImage", ",", " ", "thickness"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"m", " ", "=", " ", 
      RowBox[{"Max", "[", "V", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"G", " ", "=", " ", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{"H", " ", "=", " ", "W"}], ";", "\[IndentingNewLine]", 
     RowBox[{"thicknessImage", " ", "=", " ", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"thickness", " ", "=", " ", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"ListDensityPlot", "[", 
         RowBox[{"G", ",", " ", 
          RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
          RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}], ",", " ", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"600", ",", "600"}], "}"}]}]}], "]"}], ";"}], " ", "*)"}],
       "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"thickness", " ", "=", " ", 
         RowBox[{"thickness", "+", "1"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"dMap", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"isDestructible", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "G", ",", 
                 " ", "H", ",", " ", "Pres", ",", " ", "thinOperator"}], 
                "]"}], " ", ",", " ", 
               RowBox[{"{", 
                RowBox[{"x", ",", " ", "y", ",", " ", 
                 RowBox[{"Length", "[", 
                  RowBox[{"getN4", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "G"}], 
                   "]"}], "]"}]}], "}"}], ",", " ", 
               RowBox[{"{", "}"}]}], "]"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
           "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"dMap", " ", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"dMap", " ", "=", " ", 
         RowBox[{"Sort", "[", 
          RowBox[{"dMap", ",", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
              "#2", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
              ">", 
              RowBox[{
              "#1", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
             ")"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "dMap", "]"}], " ", "\[Equal]", " ", "0"}], 
          ",", " ", 
          RowBox[{"Break", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"boundaryPoints", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"isBorderingBackground", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"x", ",", "y"}], "}"}], ",", " ", "G", ",", " ", 
                 "H"}], "]"}], " ", ",", " ", 
               RowBox[{"{", 
                RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
               RowBox[{"{", "}"}]}], "]"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
           "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"boundaryPoints", " ", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{"boundaryPoints", ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"thicknessImage", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], " ",
                "\[Equal]", " ", "0"}], ",", 
              RowBox[{
               RowBox[{"thicknessImage", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "=",
                " ", "thickness"}]}], "]"}], ";"}], " ", "&"}], ",", " ", 
          "boundaryPoints"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Scan", "[", " ", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"isDestructible", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", 
                  RowBox[{
                  "#", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "}"}], ",", " ", "G", ",", 
                " ", "H", ",", " ", "Pres", ",", " ", "thinOperator"}], "]"}],
               ",", " ", 
              RowBox[{"Module", "[", 
               RowBox[{
                RowBox[{"{", "}"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"G", "\[LeftDoubleBracket]", " ", 
                   RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], " ", 
                   "\[RightDoubleBracket]"}], "  ", "=", " ", "0"}], ";", 
                 RowBox[{
                  RowBox[{"thicknessImage", "\[LeftDoubleBracket]", " ", 
                   RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], " ", 
                   "\[RightDoubleBracket]"}], " ", "=", " ", "0"}]}]}], 
               "]"}]}], "]"}], ";"}], "&"}], ",", "dMap"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"H", "=", 
         RowBox[{"invertImage", "[", "G", "]"}]}], ";"}], 
       "\[IndentingNewLine]", ",", " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "n"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"boundaryPoints", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"isBorderingBackground", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"x", ",", "y"}], "}"}], ",", " ", "G", ",", " ", "H"}],
              "]"}], " ", ",", " ", 
            RowBox[{"{", 
             RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
            RowBox[{"{", "}"}]}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}], ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"boundaryPoints", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"boundaryPoints", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"thicknessImage", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{
              "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              ",", " ", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             "\[RightDoubleBracket]"}], " ", "\[Equal]", " ", "0"}], ",", 
           RowBox[{
            RowBox[{"thicknessImage", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{
              "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              ",", " ", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             "\[RightDoubleBracket]"}], "=", " ", "thickness"}]}], "]"}], 
         ";"}], " ", "&"}], ",", " ", "boundaryPoints"}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"ListDensityPlot", "[", 
        RowBox[{"G", ",", " ", 
         RowBox[{"Mesh", "\[Rule]", "True"}], ",", " ", 
         RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}], ",", "  ", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"600", ",", "600"}], "}"}]}]}], "]"}], ";"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"G", ",", " ", "thicknessImage"}], "}"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["performImmersionThinning",
  FontWeight->"Bold"],
 "\nPerforms shape perserving thinning on a grayscale volume"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "performImmersionThinning", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"performImmersionThinning", "[", 
   RowBox[{"V_", ",", " ", "n_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "bins", ",", " ", "V2", ",", " ", "beach", ",", " ", "modified", ",", 
      " ", "s0", ",", " ", "s1", ",", " ", "s2", ",", " ", "s3", ",", " ", 
      "s4"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"V2", " ", "=", " ", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"bins", "[", "i", "]"}], " ", "=", " ", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "0", ",", " ", "255"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"bins", "[", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], "]"}],
           "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"bins", "[", 
             RowBox[{
             "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
             "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
              "}"}], "}"}]}], "]"}]}], ";"}], " ", "&"}], ",", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"x", ",", " ", "y", ",", " ", 
             RowBox[{"V2", "\[LeftDoubleBracket]", 
              RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}]}], "}"}], 
           ",", " ", 
           RowBox[{"{", 
            RowBox[{"x", ",", "1", ",", " ", 
             RowBox[{
              RowBox[{"Dimensions", "[", "V2", "]"}], "\[LeftDoubleBracket]", 
              "1", "\[RightDoubleBracket]"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"y", ",", "1", ",", " ", 
             RowBox[{
              RowBox[{"Dimensions", "[", "V2", "]"}], "\[LeftDoubleBracket]", 
              "2", "\[RightDoubleBracket]"}]}], "}"}]}], "]"}], ",", " ", 
         "1"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"s0", " ", "=", " ", 
         RowBox[{"Show", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"V2", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], 
            ",", " ", 
            RowBox[{"Graphics", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"PointSize", "[", "0.001", "]"}], ",", " ", 
               RowBox[{"RGBColor", "[", 
                RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", " ", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Point", "[", 
                   RowBox[{
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[RightDoubleBracket]"}],
                     " ", "-", " ", 
                    RowBox[{"{", 
                    RowBox[{"0.5", ",", " ", "0.5"}], "}"}]}], "]"}], " ", 
                  "&"}], ",", " ", 
                 RowBox[{"bins", "[", "g", "]"}]}], "]"}]}], "}"}], "]"}]}], 
           "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"modified", " ", "=", " ", "False"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"beach", " ", "=", " ", 
            RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Scan", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"isBoundaryPointImmersion", "[", 
                 RowBox[{"#", ",", " ", "V2"}], "]"}], ",", " ", 
                RowBox[{"beach", " ", "=", " ", 
                 RowBox[{"Join", "[", 
                  RowBox[{"beach", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{"Length", "[", 
                    RowBox[{"getN4Immersion", "[", 
                    RowBox[{"#", ",", " ", "V2"}], "]"}], "]"}]}], "}"}], 
                    "}"}]}], "]"}]}]}], "]"}], " ", "&"}], ",", " ", 
             RowBox[{"bins", "[", "g", "]"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"s1", " ", "=", " ", 
            RowBox[{"Show", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"ListDensityPlot", "[", 
                RowBox[{"V2", ",", 
                 RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
                 RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], 
               ",", " ", 
               RowBox[{"Graphics", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"PointSize", "[", "0.001", "]"}], ",", 
                  RowBox[{"RGBColor", "[", 
                   RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", " ", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Point", "[", 
                    RowBox[{
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[RightDoubleBracket]"}],
                     " ", "-", " ", 
                    RowBox[{"{", 
                    RowBox[{"0.5", ",", " ", "0.5"}], "}"}]}], "]"}], "  ", 
                    "&"}], ",", " ", "beach"}], "]"}]}], "}"}], "]"}]}], 
              "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"s4", " ", "=", " ", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{
              RowBox[{"Take", "[", 
               RowBox[{"V2", ",", " ", 
                RowBox[{"{", 
                 RowBox[{"40", ",", "55"}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"25", ",", "40"}], "}"}]}], "]"}], ",", " ", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "beach", "]"}], " ", "\[Equal]", " ", 
              "0"}], ",", " ", 
             RowBox[{"Break", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]",
            
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"beach", " ", "=", " ", 
              RowBox[{"Sort", "[", 
               RowBox[{"beach", ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                  "#1", "\[LeftDoubleBracket]", "3", 
                   "\[RightDoubleBracket]"}], " ", "<", " ", 
                  RowBox[{
                  "#2", "\[LeftDoubleBracket]", "3", 
                   "\[RightDoubleBracket]"}]}], " ", "&"}]}], "]"}]}], ";"}], 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{"Scan", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"V2", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                   " ", "=", " ", 
                   RowBox[{"findSkeletalValue", "[", 
                    RowBox[{"#", ",", " ", "V2"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"V2", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    " ", "\[NotEqual]", " ", "g"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bins", "[", "g", "]"}], " ", "=", " ", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"bins", "[", "g", "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[RightDoubleBracket]"}],
                     "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"modified", "=", "True"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                   "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], "&"}],
              ",", " ", "beach"}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"s2", " ", "=", " ", 
            RowBox[{"Show", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"ListDensityPlot", "[", 
                RowBox[{"V2", ",", 
                 RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
                 RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], 
               ",", "\[IndentingNewLine]", " ", 
               RowBox[{"Graphics", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"PointSize", "[", "0.001", "]"}], ",", 
                  RowBox[{"RGBColor", "[", 
                   RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", " ", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Point", "[", 
                    RowBox[{
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[RightDoubleBracket]"}],
                     " ", "-", " ", 
                    RowBox[{"{", 
                    RowBox[{"0.5", ",", " ", "0.5"}], "}"}]}], "]"}], "  ", 
                    "&"}], ",", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"beach", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V2", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    " ", "\[Equal]", " ", "g"}], " ", "&"}]}], "]"}]}], 
                   "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", " ", 
               RowBox[{"Graphics", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"PointSize", "[", "0.001", "]"}], ",", 
                  RowBox[{"RGBColor", "[", 
                   RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", " ", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Point", "[", 
                    RowBox[{
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[RightDoubleBracket]"}],
                     " ", "-", " ", 
                    RowBox[{"{", 
                    RowBox[{"0.5", ",", " ", "0.5"}], "}"}]}], "]"}], "  ", 
                    "&"}], ",", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"beach", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V2", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    "\[NotEqual]", " ", "g"}], " ", "&"}]}], "]"}]}], "]"}]}],
                  "}"}], "]"}]}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
           
           RowBox[{"s3", " ", "=", " ", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{
              RowBox[{"Take", "[", 
               RowBox[{"V2", ",", " ", 
                RowBox[{"{", 
                 RowBox[{"40", ",", "55"}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"25", ",", "40"}], "}"}]}], "]"}], ",", " ", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"g", " ", "\[GreaterEqual]", " ", "99"}], " ", "&&", 
                " ", 
                RowBox[{"g", " ", "\[LessEqual]", " ", "99"}]}], ",", " ", 
               RowBox[{"Show", "[", 
                RowBox[{
                 RowBox[{"GraphicsArray", "[", 
                  RowBox[{"{", " ", 
                   RowBox[{"s1", ",", " ", "s2"}], "}"}], "]"}], ",", " ", 
                 RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}], 
                 ",", " ", 
                 RowBox[{"ImageSize", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"1600", ",", "800"}], "}"}]}], ",", " ", 
                 RowBox[{"PlotLabel", "\[Rule]", 
                  RowBox[{
                   RowBox[{"ToString", "[", "g", "]"}], " ", "<>", " ", 
                   "\"\< : \>\"", " ", "<>", " ", 
                   RowBox[{"ToString", "[", "i", "]"}]}]}]}], "]"}]}], "]"}], 
             ";"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"\[Not]", "modified"}], ",", " ", 
             RowBox[{"Break", "[", "]"}]}], "]"}], ";"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "1", ",", " ", "n"}], "}"}]}], "]"}], ";"}],
        "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"g", ",", " ", "1", ",", " ", "255"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "V2"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["performErosion",
  FontWeight->"Bold"],
 "\nErodes the image by removing the curve end points"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "performErosion", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"performErosion", "[", 
   RowBox[{"V_", ",", " ", "W_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dMap", ",", " ", "outImage"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"ListDensityPlot", "[", 
       RowBox[{"V", ",", " ", 
        RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"isBoundaryPoint", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "V", ",", " ",
                 "W"}], "]"}], "  ", "&&", " ", 
              RowBox[{"isCurveEnd", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "V", ",", " ",
                 "W"}], "]"}]}], ")"}], " ", ",", " ", 
            RowBox[{"{", 
             RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
            RowBox[{"{", "}"}]}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"dMap", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"outImage", " ", "=", " ", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"outImage", "\[LeftDoubleBracket]", " ", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           " ", "\[RightDoubleBracket]"}], "  ", "=", " ", "0"}], ";"}], 
        "&"}], ",", "dMap"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"ListDensityPlot", "[", 
        RowBox[{"outImage", ",", " ", 
         RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "outImage", "]"}], ";"}]}], "\[IndentingNewLine]",
    "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isCurveNeighbor",
  FontWeight->"Bold"],
 "\nSpecifies whether a given point q is a curve neighbor of the point p in \
image V"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isCurveNeighbor", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isCurveNeighbor", "[", 
   RowBox[{"q_", ",", " ", "p_", ",", " ", "V_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "currentN4", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"currentN4", " ", "=", " ", 
      RowBox[{"getN4", "[", 
       RowBox[{"p", ",", " ", "V"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "currentN4", "]"}], " ", "==", " ", "2"}], 
         ")"}], " ", "&&", " ", 
        RowBox[{"MemberQ", "[", 
         RowBox[{"currentN4", ",", " ", "q"}], "]"}]}], ")"}], "]"}], ";"}]}],
    "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["addPixelToImage",
  FontWeight->"Bold"],
 "\nAdds a pixel to a binary Image"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "addPixelToImage", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"addPixelToImage", "[", 
   RowBox[{"p_", ",", " ", "V_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "outImage", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"outImage", " ", "=", " ", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"outImage", "\[LeftDoubleBracket]", 
       RowBox[{
        RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        ",", " ", 
        RowBox[{"p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
        "\[RightDoubleBracket]"}], " ", "=", "1"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "outImage", "]"}], ";"}]}], "\[IndentingNewLine]",
    "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getCurveNeighbors",
  FontWeight->"Bold"],
 "\nGets the curve neighbors of a given point p"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getCurveNeighbors", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getCurveNeighbors", "[", 
   RowBox[{"p_", ",", " ", "V_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "currentN4", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"currentN4", " ", "=", " ", 
      RowBox[{"getN4", "[", 
       RowBox[{"p", ",", " ", "V"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"Select", "[", 
       RowBox[{"currentN4", ",", " ", 
        RowBox[{
         RowBox[{"isCurveNeighbor", "[", 
          RowBox[{"#", ",", " ", "p", ",", " ", "V"}], "]"}], "&"}]}], " ", 
       "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["performDilation",
  FontWeight->"Bold"],
 "\nDilates the image by adding curve end points"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "performDilation", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"performDilation", "[", 
   RowBox[{"V_", ",", " ", "W_", ",", " ", "oldV_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dMap", ",", " ", "outImage", ",", " ", "neighbors"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"ListDensityPlot", "[", 
       RowBox[{"V", ",", " ", 
        RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"isBoundaryPoint", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "V", ",", " ", 
               "W"}], "]"}], "  ", "&&", " ", 
             RowBox[{"isCurveEnd", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "V", ",", " ", 
               "W"}], "]"}]}], " ", ",", " ", 
            RowBox[{"{", 
             RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
            RowBox[{"{", "}"}]}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"dMap", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"neighbors", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"neighbors", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"neighbors", ",", " ", 
            RowBox[{"getCurveNeighbors", "[", 
             RowBox[{"#", ",", " ", "oldV"}], "]"}]}], "]"}]}], ";"}], "&"}], 
       ",", " ", "dMap"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"outImage", " ", "=", " ", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"outImage", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            " ", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], " ", "=", "1"}], ";"}], "&"}], ",", 
       "neighbors"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"ListDensityPlot", "[", 
        RowBox[{"outImage", ",", " ", 
         RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "outImage", "]"}], ";"}]}], "\[IndentingNewLine]",
    "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["performPruning",
  FontWeight->"Bold"],
 "\nPrunes the image n times."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "performPruning", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"performPruning", "[", 
   RowBox[{"V_", ",", " ", "W_", ",", " ", "n_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{"n", " ", "\[Equal]", " ", "0"}], ",", " ", "V", ",", " ", 
    "\[IndentingNewLine]", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "erodedImage", ",", " ", "prunedImage", ",", " ", "dilatedImage"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"ListDensityPlot", "[", 
         RowBox[{"V", ",", " ", 
          RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], "*)"}],
       "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"erodedImage", " ", "=", " ", 
        RowBox[{"performErosion", "[", 
         RowBox[{"V", ",", " ", "W"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"prunedImage", " ", "=", " ", 
        RowBox[{"performPruning", "[", 
         RowBox[{"erodedImage", ",", " ", 
          RowBox[{"invertImage", "[", "erodedImage", "]"}], ",", " ", 
          RowBox[{"n", "-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"dilatedImage", " ", "=", " ", 
        RowBox[{"performDilation", "[", 
         RowBox[{"prunedImage", ",", " ", 
          RowBox[{"invertImage", "[", "prunedImage", "]"}], ",", " ", "V"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"dilatedImage", ",", " ", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
           RowBox[{"ImageSize", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "dilatedImage", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getCurveLength:",
  FontWeight->"Bold"],
 "\nGets the length of a curve area given the starting point p, and the \
annotated skeleton A"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getCurveLength", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getCurveLength", "[", 
   RowBox[{
   "p_", ",", " ", "A_", ",", " ", "curveTypes_", ",", " ", "hashKey_"}], 
   "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", " ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "n", ",", " ", "dMap", ",", " ", "dMap2", ",", " ", "n4Temp", ",", " ", 
      "A2", ",", " ", "toHash", ",", " ", "doHash", ",", " ", 
      "curveEndPoints", ",", " ", "allCurvePoints"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
        "hashKey", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
        " ", "\[NotEqual]", " ", 
        RowBox[{"curveLengthHashKey", "\[LeftDoubleBracket]", 
         RowBox[{
         "hashKey", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "\[RightDoubleBracket]"}]}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"curveLengthHashKey", "\[LeftDoubleBracket]", 
            RowBox[{
            "hashKey", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
             "\[RightDoubleBracket]"}], " ", "=", " ", 
           RowBox[{
           "hashKey", "\[LeftDoubleBracket]", "2", 
            "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"curveLengthHash", "\[LeftDoubleBracket]", 
            RowBox[{
            "hashKey", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
             "\[RightDoubleBracket]"}], " ", "=", " ", 
           RowBox[{"getBlankImage", "[", "]"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"curveLengthHash", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{
          "hashKey", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          ",", " ", 
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], ",", " ", 
       RowBox[{"Return", "[", 
        RowBox[{"curveLengthHash", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{
          "hashKey", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          ",", " ", 
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"A2", " ", "=", " ", "A"}], ";", "\[IndentingNewLine]", 
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"curveTypes", ",", " ", 
               RowBox[{"A", "\[LeftDoubleBracket]", 
                RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}]}], "]"}]}],
             ",", " ", 
            RowBox[{"{", 
             RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
            RowBox[{"{", "}"}]}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"dMap", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"A2", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            " ", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], " ", "=", " ", "0"}], ";"}], "&"}], ",",
        " ", "dMap"}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"A2", ",", " ", 
             RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], ",",
            
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
              RowBox[{"PointSize", "[", "0.02", "]"}], ",", 
              RowBox[{"Point", "[", 
               RowBox[{
                RowBox[{"Reverse", "[", "p", "]"}], "+", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.5"}], ",", 
                  RowBox[{"-", "0.5"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], "]"}], 
       ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"n", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"toHash", " ", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"{", "p", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"doHash", " ", "=", " ", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"getN4", "[", 
         RowBox[{"p", ",", " ", "A2"}], "]"}], "]"}], " ", "\[LessEqual]", 
       " ", "2"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"curveEndPoints", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"getN4", "[", 
          RowBox[{"p", ",", " ", "A2"}], "]"}], "]"}], " ", "\[NotEqual]", 
        " ", "2"}], ",", " ", 
       RowBox[{"curveEndPoints", " ", "=", " ", 
        RowBox[{"{", "p", "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"allCurvePoints", " ", "=", " ", 
      RowBox[{"{", "p", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", " ", 
      RowBox[{"True", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"toHash", " ", "=", " ", 
         RowBox[{"Join", "[", 
          RowBox[{"toHash", ",", " ", "dMap"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dMap2", " ", "=", " ", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"n", " ", "=", " ", 
         RowBox[{"n", " ", "+", " ", 
          RowBox[{"Length", "[", "dMap", "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Scan", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"A2", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", " ", 
                  RowBox[{
                  "#", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
               RowBox[{"n4Temp", "=", " ", 
                RowBox[{"getN4", "[", 
                 RowBox[{"#", ",", " ", "A2"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"dMap2", " ", "=", " ", 
                RowBox[{"Join", "[", 
                 RowBox[{"dMap2", ",", 
                  RowBox[{"Select", "[", 
                   RowBox[{"n4Temp", ",", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"getN4", "[", 
                    RowBox[{"#", ",", " ", "A2"}], "]"}], "]"}], " ", 
                    "\[LessEqual]", " ", "1"}], ")"}], "  ", "&"}]}], "]"}]}],
                  "]"}]}], ";", " ", "\[IndentingNewLine]", 
               RowBox[{"allCurvePoints", " ", "=", " ", 
                RowBox[{"Join", "[", 
                 RowBox[{"allCurvePoints", ",", 
                  RowBox[{"Select", "[", 
                   RowBox[{"n4Temp", ",", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"getN4", "[", 
                    RowBox[{"#", ",", " ", "A2"}], "]"}], "]"}], " ", 
                    "\[LessEqual]", " ", "1"}], ")"}], "  ", "&"}]}], "]"}]}],
                  "]"}]}], ";", " ", "\[IndentingNewLine]", 
               RowBox[{"curveEndPoints", " ", "=", " ", 
                RowBox[{"Join", "[", 
                 RowBox[{"curveEndPoints", ",", 
                  RowBox[{"Select", "[", 
                   RowBox[{"n4Temp", ",", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"getN4", "[", 
                    RowBox[{"#", ",", " ", "A2"}], "]"}], "]"}], " ", 
                    "\[NotEqual]", " ", "1"}], ")"}], "  ", "&"}]}], "]"}]}], 
                 "]"}]}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";"}], 
           "&"}], ",", " ", "\[IndentingNewLine]", "dMap"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dMap", " ", "=", " ", "dMap2"}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "dMap", "]"}], " ", "\[Equal]", " ", "0"}], 
          ",", " ", 
          RowBox[{"Break", "[", "]"}]}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"A", ",", " ", 
             RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], ",",
            "\[IndentingNewLine]", 
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
              RowBox[{"PointSize", "[", "0.02", "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Point", "[", 
                  RowBox[{
                   RowBox[{"Reverse", "[", "#", "]"}], "+", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "0.5"}], ",", 
                    RowBox[{"-", "0.5"}]}], "}"}]}], "]"}], "&"}], ",", " ", 
                "allCurvePoints"}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
         RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], "]"}], 
       ";"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"doHash", ",", " ", "\[IndentingNewLine]", 
       RowBox[{"Scan", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"curveLengthHash", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{
              "hashKey", "\[LeftDoubleBracket]", "1", 
               "\[RightDoubleBracket]"}], ",", " ", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              ",", " ", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             "\[RightDoubleBracket]"}], " ", "=", " ", 
            RowBox[{"{", 
             RowBox[{
             "n", ",", " ", "curveEndPoints", ",", " ", "allCurvePoints"}], 
             "}"}]}], ";"}], "&"}], ",", " ", "toHash"}], "]"}]}], "]"}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"n", ",", " ", "curveEndPoints", ",", " ", "allCurvePoints"}], 
       "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input"],

Cell[BoxData[""], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getClosestValue:",
  FontWeight->"Bold"],
 "\nGets the closest value to a given pixel in the image"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getClosestValue", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getClosestValue", "[", 
   RowBox[{"p_", ",", " ", "image_", ",", " ", "level_"}], "]"}], " ", ":=", 
  " ", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n4List", ",", " ", "closestValues"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"image", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], " ", "\[NotEqual]", " ", "0"}], ",", " ", 
       
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"image", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{
             "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "\[RightDoubleBracket]"}], ",", " ", "level"}], "}"}], "}"}], 
        "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"level", " ", "\[LessEqual]", " ", "0"}], ",", " ", 
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"0", ",", " ", "level"}], "}"}], "}"}], "]"}]}], "]"}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"n4List", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"n4", "[", "p", "]"}], ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
            "\[GreaterEqual]", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}]}], ")"}], "  ", "&&", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
            "\[LessEqual]", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], ")"}], " ", "&&", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], " ", 
            "\[GreaterEqual]", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}]}], ")"}], "  ", "&&", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], " ", 
            "\[LessEqual]", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], ")"}]}], "&"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"closestValues", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"closestValues", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"closestValues", ",", " ", 
            RowBox[{"getClosestValue", "[", 
             RowBox[{"#", ",", " ", "image", ",", " ", 
              RowBox[{"level", "-", "1"}]}], "]"}]}], "]"}]}], ";"}], "&"}], 
       ",", " ", "n4List"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"closestValues", " ", "=", " ", 
      RowBox[{"Sort", "[", 
       RowBox[{"closestValues", ",", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
           "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], " ", 
           ">", " ", 
           RowBox[{
           "#2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
          ")"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"closestValues", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"closestValues", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
           " ", "\[Equal]", " ", 
          RowBox[{"closestValues", "\[LeftDoubleBracket]", 
           RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}]}], "&"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"closestValues", " ", "=", " ", 
      RowBox[{"Sort", "[", 
       RowBox[{"closestValues", ",", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
           "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
           ">", " ", 
           RowBox[{
           "#2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          ")"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{
       "closestValues", "\[LeftDoubleBracket]", "1", 
        "\[RightDoubleBracket]"}], "}"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["canRemovePixel:",
  FontWeight->"Bold"],
 "\nLets you know whether the given pixel can be removed from the skeleton \
based in the filter criteria.\nCost Function has the following values\n\t1: \
Remove if the length of the added segment >= filter threshold\n\t2: Remove if \
the length of the added segment / length of the total curve >= filter \
threshold\n\t3: Remove if the thickness difference between grayscale levels \
<= filter threshold\n\t4: Remove if the curve has not been growing recently\n\
\t5: Remove if the curve does not fall close to the eigen vector value"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "canRemovePixel", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"canRemovePixel", "[", 
    RowBox[{
    "p_", ",", " ", "annotatedTopologyCurves_", ",", " ", "annotatedCurves_", 
     ",", " ", "annotatedSkeleton_", ",", "thicknessMap_", ",", " ", 
     "curveEndHistory_", ",", " ", "costFunction5Val_", ",", " ", 
     "currentGrayLevel_", ",", " ", "filterThreshold_", ",", "  ", 
     "costFunction_", ",", " ", "hashGrayValue_"}], "]"}], " ", ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"canRemove", ",", " ", "type"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"type", " ", "=", " ", 
       RowBox[{"annotatedSkeleton", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"canRemove", " ", "=", " ", "False"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"costFunction", ",", "\[IndentingNewLine]", "1", ",", 
        RowBox[{"Switch", "[", 
         RowBox[{"type", ",", "\[IndentingNewLine]", "1", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", "False"}], ",", 
          "\[IndentingNewLine]", "2", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"getCurveLength", "[", 
              RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
               RowBox[{"{", 
                RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
             "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", ">=",
             " ", "filterThreshold"}]}], ",", "\[IndentingNewLine]", "3", ",",
           " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"getCurveLength", "[", 
              RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
               RowBox[{"{", 
                RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
             "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", ">=",
             " ", "filterThreshold"}]}], ",", "\[IndentingNewLine]", "4", ",",
           " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"getCurveLength", "[", 
              RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
               RowBox[{"{", 
                RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
             "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", ">=",
             " ", "filterThreshold"}]}], ",", "\[IndentingNewLine]", "5", ",",
           " ", 
          RowBox[{"canRemove", " ", "=", " ", "True"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "2", ",", 
        RowBox[{"Switch", "[", 
         RowBox[{"type", ",", "\[IndentingNewLine]", "1", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", "False"}], ",", 
          "\[IndentingNewLine]", "2", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
              "/", " ", 
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedSkeleton", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
             ")"}], " ", ">=", " ", "filterThreshold"}]}], ",", 
          "\[IndentingNewLine]", "3", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "/", 
              " ", 
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedSkeleton", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
             ")"}], " ", ">=", " ", "filterThreshold"}]}], ",", 
          "\[IndentingNewLine]", "4", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
              "/", " ", 
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedSkeleton", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
             ")"}], " ", ">=", " ", "filterThreshold"}]}], ",", 
          "\[IndentingNewLine]", "5", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", "True"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "3", ",", 
        " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "curveStats", ",", " ", "curveLength", ",", " ", "endPoints", ",", 
            " ", "thicknesses", ",", " ", "totalThickness"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"curveStats", " ", "=", "  ", 
            RowBox[{"getCurveLength", "[", 
             RowBox[{"p", ",", " ", "annotatedSkeleton", ",", " ", 
              RowBox[{"{", 
               RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"endPoints", " ", "=", " ", 
            RowBox[{
            "curveStats", "\[LeftDoubleBracket]", "2", 
             "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"curveLength", " ", "=", " ", 
            RowBox[{
            "curveStats", "\[LeftDoubleBracket]", "1", 
             "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"thicknesses", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"thicknessMap", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
               "&"}], ",", " ", "endPoints"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"totalThickness", " ", "=", " ", 
            RowBox[{"Sum", "[", 
             RowBox[{
              RowBox[{
              "thicknesses", "\[LeftDoubleBracket]", "i", 
               "\[RightDoubleBracket]"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "1", ",", " ", 
                RowBox[{"Length", "[", "thicknesses", "]"}]}], "}"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{"type", ",", "\[IndentingNewLine]", "1", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "False"}], ",", 
             "\[IndentingNewLine]", "2", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Length", "[", "thicknesses", "]"}], " ", "\[Equal]",
                  " ", "2"}], ")"}], "&&", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"curveLength", " ", "-", " ", "totalThickness"}], 
                 "  ", "\[LessEqual]", "  ", "filterThreshold"}], ")"}]}]}], 
             ",", "\[IndentingNewLine]", "3", ",", " ", 
             RowBox[{"canRemove", " ", "=", "  ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Length", "[", "thicknesses", "]"}], " ", "\[Equal]",
                  " ", "2"}], ")"}], "&&", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"curveLength", " ", "-", " ", "totalThickness"}], 
                 "  ", "\[LessEqual]", " ", "filterThreshold"}], ")"}]}]}], 
             ",", "\[IndentingNewLine]", "4", ",", " ", 
             RowBox[{"canRemove", " ", "=", "  ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Length", "[", "thicknesses", "]"}], " ", "\[Equal]",
                  " ", "2"}], ")"}], "&&", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"curveLength", " ", "-", " ", "totalThickness"}], 
                 "  ", "\[LessEqual]", "  ", "filterThreshold"}], ")"}]}]}], 
             ",", "\[IndentingNewLine]", "5", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "True"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ",", "\[IndentingNewLine]", "4", ",", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "endPoints", ",", " ", "endValues", ",", " ", "endFailed"}], "}"}],
           ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"endPoints", " ", "=", "  ", 
            RowBox[{
             RowBox[{"getCurveLength", "[", 
              RowBox[{"p", ",", " ", "annotatedCurves", ",", " ", 
               RowBox[{"{", 
                RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
             "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"endValues", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"getClosestValue", "[", 
                 RowBox[{"#", ",", " ", "curveEndHistory", ",", " ", "5"}], 
                 "]"}], "\[LeftDoubleBracket]", 
                RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "&"}], 
              ",", "endPoints"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"endFailed", " ", "=", " ", "False"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Scan", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"endFailed", " ", "=", " ", 
                RowBox[{"(", 
                 RowBox[{"endFailed", " ", "||", " ", 
                  RowBox[{"(", 
                   RowBox[{"#", " ", "\[GreaterEqual]", " ", 
                    RowBox[{
                    "currentGrayLevel", " ", "+", " ", "filterThreshold"}]}], 
                   ")"}]}], ")"}]}], ";"}], "&"}], ",", "endValues"}], "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"Map", "\[IndentingNewLine]", 
            RowBox[{"Switch", "[", 
             RowBox[{"type", ",", "\[IndentingNewLine]", "1", ",", " ", 
              RowBox[{"canRemove", " ", "=", " ", "False"}], ",", " ", 
              "\[IndentingNewLine]", "2", ",", " ", 
              RowBox[{"canRemove", " ", "=", " ", "endFailed"}], ",", 
              "\[IndentingNewLine]", "3", ",", " ", 
              RowBox[{"canRemove", " ", "=", "  ", "endFailed"}], ",", 
              "\[IndentingNewLine]", "4", ",", " ", 
              RowBox[{"canRemove", " ", "=", "  ", "endFailed"}], ",", 
              "\[IndentingNewLine]", "5", ",", " ", 
              RowBox[{"canRemove", " ", "=", " ", "True"}]}], 
             "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ",", "\[IndentingNewLine]", "5", ",", " ", 
        RowBox[{"Module", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Switch", "[", 
            RowBox[{"type", ",", "\[IndentingNewLine]", "1", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "False"}], ",", 
             "\[IndentingNewLine]", "2", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "True"}], ",", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"costFunction5Val", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", " ", 
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                " ", "<", " ", "filterThreshold"}], ","}], "*)"}], 
             "\[IndentingNewLine]", "3", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "True"}], ",", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"costFunction5Val", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", " ", 
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                " ", "<", " ", "filterThreshold"}], ","}], "*)"}], 
             "\[IndentingNewLine]", "4", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "True"}], ",", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"costFunction5Val", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", " ", 
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                " ", "<", " ", "filterThreshold"}], ","}], "*)"}], 
             "\[IndentingNewLine]", "5", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "True"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "canRemove", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["annotateImageWithPixelType:",
  FontWeight->"Bold"],
 "\nAnnotates an image with the pixel type"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "annotateImageWithPixelType", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annotateImageWithPixelType", "[", "image_", "]"}], " ", ":=", " ",
    "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "annotatedImage", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"annotatedImage", " ", "=", " ", 
       RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dMap", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"image", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", " ", "y"}], "\[RightDoubleBracket]"}], " ", 
              ">", " ", "0"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"x", ",", " ", "y", ",", " ", 
               RowBox[{"getSkeletalPixelType", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"x", ",", "y"}], "}"}], ",", " ", "image"}], 
                "]"}]}], "}"}], ",", " ", 
             RowBox[{"{", "}"}]}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"x", ",", 
             RowBox[{"sliceSize", "[", 
              RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
             RowBox[{"sliceSize", "[", 
              RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"y", ",", 
             RowBox[{"sliceSize", "[", 
              RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
             RowBox[{"sliceSize", "[", 
              RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
         "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dMap", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"dMap", ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Scan", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"annotatedImage", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              
             RowBox[{
             "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "\[RightDoubleBracket]"}], " ", "=", " ", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
          ";"}], "&"}], ",", " ", "dMap"}], "]"}], ";", "\[IndentingNewLine]",
       "annotatedImage"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["makeGraySkeleton:",
  FontWeight->"Bold"],
 "\nCreates a Gray scale skeleton of the grayImage, starting at the grayscale \
level startLevel, ending at endLevel at a grayscale step of step, while \
perfoming pruneAmount pruning steps."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "makeGraySkeleton", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"makeGraySkeleton", "[", 
   RowBox[{
   "grayImage_", ",", "startLevel_", ",", "endLevel_", ",", "step_", ",", 
    "pruneAmount_", ",", "filterThreshold_", ",", "costFunction_", ",", 
    "eigenValues_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "maxThinningIterations", ",", "olderSkeleton", ",", "graySkeleton", ",", 
      "grayLevels", ",", "binaryImage", ",", "thinningResults", ",", 
      "curveSkeleton", ",", "prunedCurveSkeleton", ",", 
      "prunedCurveSkeletonWithOlder", ",", "topologySkeleton", ",", 
      "topologyBranches", ",", "annotatedTopologyBranches", ",", 
      "annotatedSkeleton", ",", "removedPixels", ",", "allRemovedPixels", ",",
       "dMap", ",", "thicknessMap", ",", "lastThicknessMap", ",", 
      "actualGraySkeleton", ",", "allBranches", ",", "annotatedAllBranches", 
      ",", "curveEndHistory", ",", "s1", ",", "s2", ",", "s3", ",", "s4", ",",
       "s5", ",", "s6", ",", "s7", ",", "s8", ",", "s9", ",", "s10", ",", 
      "s11", ",", "s12"}], "}"}], ",", 
    RowBox[{
     RowBox[{"maxThinningIterations", "=", "100"}], ";", 
     RowBox[{"olderSkeleton", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"graySkeleton", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"grayLevels", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"allRemovedPixels", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"curveEndHistory", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"lastThicknessMap", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"binaryImage", "=", 
         RowBox[{"thresholdImage", "[", 
          RowBox[{"grayImage", ",", "i"}], "]"}]}], ";", 
        RowBox[{"thinningResults", "=", 
         RowBox[{"performThinning", "[", 
          RowBox[{"binaryImage", ",", 
           RowBox[{"invertImage", "[", "binaryImage", "]"}], ",", 
           "maxThinningIterations", ",", "olderSkeleton", ",", "1"}], "]"}]}],
         ";", 
        RowBox[{"curveSkeleton", "=", 
         RowBox[{
         "thinningResults", "\[LeftDoubleBracket]", "1", 
          "\[RightDoubleBracket]"}]}], ";", 
        RowBox[{"prunedCurveSkeleton", "=", 
         RowBox[{"performPruning", "[", 
          RowBox[{"curveSkeleton", ",", 
           RowBox[{"invertImage", "[", "curveSkeleton", "]"}], ",", 
           "pruneAmount"}], "]"}]}], ";", 
        RowBox[{"prunedCurveSkeletonWithOlder", "=", 
         RowBox[{"BitOr", "[", 
          RowBox[{"prunedCurveSkeleton", ",", "olderSkeleton"}], "]"}]}], ";",
         
        RowBox[{"thinningResults", "=", 
         RowBox[{"performThinning", "[", 
          RowBox[{"binaryImage", ",", 
           RowBox[{"invertImage", "[", "binaryImage", "]"}], ",", 
           "maxThinningIterations", ",", "prunedCurveSkeletonWithOlder", ",", 
           "0"}], "]"}]}], ";", 
        RowBox[{"topologySkeleton", "=", 
         RowBox[{
         "thinningResults", "\[LeftDoubleBracket]", "1", 
          "\[RightDoubleBracket]"}]}], ";", 
        RowBox[{"thicknessMap", "=", 
         RowBox[{
         "thinningResults", "\[LeftDoubleBracket]", "2", 
          "\[RightDoubleBracket]"}]}], ";", 
        RowBox[{"topologyBranches", "=", 
         RowBox[{
          RowBox[{"performThinning", "[", 
           RowBox[{"topologySkeleton", ",", 
            RowBox[{"invertImage", "[", "topologySkeleton", "]"}], ",", 
            "maxThinningIterations", ",", "olderSkeleton", ",", "0"}], "]"}], 
          "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ";", 
        RowBox[{"topologyBranches", "=", 
         RowBox[{"BitXor", "[", 
          RowBox[{"olderSkeleton", ",", "topologyBranches"}], "]"}]}], ";", 
        RowBox[{"allBranches", "=", 
         RowBox[{"BitXor", "[", 
          RowBox[{"olderSkeleton", ",", "topologySkeleton"}], "]"}]}], ";", 
        RowBox[{"annotatedTopologyBranches", "=", 
         RowBox[{
         "annotateImageWithPixelType", "[", "topologyBranches", "]"}]}], ";", 
        
        RowBox[{"annotatedSkeleton", "=", 
         RowBox[{
         "annotateImageWithPixelType", "[", "topologySkeleton", "]"}]}], ";", 
        
        RowBox[{"annotatedAllBranches", "=", 
         RowBox[{"annotateImageWithPixelType", "[", "allBranches", "]"}]}], 
        ";", 
        RowBox[{"removedPixels", "=", 
         RowBox[{"getBlankImage", "[", "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "2"}], "}"}], ",", 
                  RowBox[{"annotatedSkeleton", "\[LeftDoubleBracket]", 
                   RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}]}], 
                 "]"}], "&&", 
                RowBox[{
                 RowBox[{"curveEndHistory", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                 "\[Equal]", "0"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}],
         ";", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"curveEndHistory", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", 
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "=", 
              "i"}], ";"}], ")"}], "&"}], ",", "dMap"}], "]"}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"topologyBranches", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                 "\[Equal]", "1"}], "&&", 
                RowBox[{"canRemovePixel", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"x", ",", "y"}], "}"}], ",", 
                  "annotatedTopologyBranches", ",", "annotatedAllBranches", 
                  ",", "annotatedSkeleton", ",", "lastThicknessMap", ",", 
                  "curveEndHistory", ",", "eigenValues", ",", "i", ",", 
                  "filterThreshold", ",", "costFunction", ",", "i"}], "]"}]}],
                ",", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}],
         ";", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"removedPixels", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", 
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "=", 
              "1"}], ";"}], ")"}], "&"}], ",", "dMap"}], "]"}], ";", 
        RowBox[{"allRemovedPixels", "=", 
         RowBox[{"BitOr", "[", 
          RowBox[{"removedPixels", ",", "allRemovedPixels"}], "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"topologySkeleton", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                 "\[Equal]", "1"}], "&&", 
                RowBox[{
                 RowBox[{"graySkeleton", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                 "\[Equal]", "0"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}],
         ";", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"graySkeleton", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", 
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "=", 
              "i"}], ";"}], ")"}], "&"}], ",", "dMap"}], "]"}], ";", 
        RowBox[{"olderSkeleton", "=", "topologySkeleton"}], ";", 
        RowBox[{"lastThicknessMap", "=", "thicknessMap"}], ";", 
        RowBox[{"actualGraySkeleton", "=", "graySkeleton"}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"allRemovedPixels", "\[LeftDoubleBracket]", 
                 RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                "\[Equal]", "1"}], ",", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}],
         ";", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"actualGraySkeleton", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", 
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "=", 
              "0"}], ";"}], ")"}], "&"}], ",", "dMap"}], "]"}], ";", 
        RowBox[{"s1", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"binaryImage", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Binary Image\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s2", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"curveSkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Curve Skeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s3", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"prunedCurveSkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{
           "PlotLabel", "\[Rule]", "\"\<Pruned Curve Skeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s4", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"prunedCurveSkeletonWithOlder", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{
           "PlotLabel", "\[Rule]", 
            "\"\<Pruned Curve Skeleton with Older\>\""}]}], "]"}]}], ";", 
        RowBox[{"s5", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"topologySkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Topology Skeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s6", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"graySkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Grayscale Skeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s7", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"topologyBranches", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Topology Branches\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s8", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"removedPixels", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Removed Pixels\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s9", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"allRemovedPixels", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<All Removed Pixels\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s10", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"actualGraySkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Actual Grayskeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s11", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"curveEndHistory", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Curve End History\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s12", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"allBranches", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<All Branches\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s13", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"annotatedSkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Annotated Skeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"Show", "[", 
         RowBox[{
          RowBox[{"GraphicsRow", "[", 
           RowBox[{"{", 
            RowBox[{
            "s1", ",", "s4", ",", "s5", ",", "s6", ",", "s12", ",", "s9", ",",
              "s10"}], "}"}], "]"}], ",", 
          RowBox[{"PlotLabel", "\[Rule]", 
           RowBox[{"\"\<Grayscale value: \>\"", "<>", 
            RowBox[{"ToString", "[", "i", "]"}]}]}], ",", 
          RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"1200", ",", 
             FractionBox["1200", "5"]}], "}"}]}]}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "endLevel", ",", "startLevel", ",", 
         RowBox[{"-", "step"}]}], "}"}]}], "]"}], ";", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"graySkeleton", ",", "actualGraySkeleton"}], "}"}], "]"}], 
     ";"}]}], "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["cleanImmersionSkeleton",
  FontWeight->"Bold"],
 "\nPerforms a post-processing step on the grayscale skeleton to prune it \
using the pruning parameter, and to remove surfaces."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "cleanImmersionSkeleton", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cleanImmersionSkeleton", "[", 
   RowBox[{"skel_", ",", " ", "pruneAmount_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bins", ",", " ", "binarySkel", ",", " ", "newSkel"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newSkel", " ", "=", " ", "skel"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"bins", "[", "i", "]"}], " ", "=", " ", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "0", ",", " ", "255"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"bins", "[", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], "]"}],
           "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"bins", "[", 
             RowBox[{
             "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
             "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
              "}"}], "}"}]}], "]"}]}], ";"}], " ", "&"}], ",", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"x", ",", " ", "y", ",", " ", 
             RowBox[{"skel", "\[LeftDoubleBracket]", 
              RowBox[{"x", ",", " ", "y"}], "\[RightDoubleBracket]"}]}], 
            "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"x", ",", "1", ",", " ", 
             RowBox[{
              RowBox[{"Dimensions", "[", "skel", "]"}], 
              "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "}"}],
            ",", " ", 
           RowBox[{"{", 
            RowBox[{"y", ",", "1", ",", " ", 
             RowBox[{
              RowBox[{"Dimensions", "[", "skel", "]"}], 
              "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "}"}]}], "]"}], ",", " ", "1"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"binarySkel", " ", "=", " ", 
         RowBox[{"thresholdImage", "[", 
          RowBox[{"skel", ",", " ", "g"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"isSkeletalSurfaceInteriorPoint", "[", 
               RowBox[{
                RowBox[{"#", "\[LeftDoubleBracket]", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "2"}], "}"}], "\[RightDoubleBracket]"}], 
                ",", " ", "binarySkel"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"newSkel", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], " ",
                "=", " ", "0"}]}], "]"}], ";"}], " ", "&"}], ",", 
          RowBox[{"bins", "[", "g", "]"}]}], "]"}], ";"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"g", ",", " ", "255", ",", " ", "1", ",", " ", 
         RowBox[{"-", "1"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "newSkel"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Structure Tensor Methods", "Subtitle"],

Cell[TextData[{
 StyleBox["getGradientField",
  FontWeight->"Bold"],
 ":\nGets the gradient field of the image"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getGradientField", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getGradientField", "[", "arr_", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grad", ",", "len", ",", "wid"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"grad", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", "0"}], "}"}], "&"}], ",", "#"}], "]"}], "&"}],
          ",", "arr"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"len", ",", "wid"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "arr", "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"grad", "\[LeftDoubleBracket]", 
          RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"x", "+", "1"}], ",", "y"}], "\[RightDoubleBracket]"}], 
            "-", 
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"x", "-", "1"}], ",", "y"}], 
             "\[RightDoubleBracket]"}]}], ",", 
           RowBox[{
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", 
              RowBox[{"y", "+", "1"}]}], "\[RightDoubleBracket]"}], "-", 
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", 
              RowBox[{"y", "-", "1"}]}], "\[RightDoubleBracket]"}]}]}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"x", ",", "2", ",", 
          RowBox[{"len", "-", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", "2", ",", 
          RowBox[{"wid", "-", "1"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "grad"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getGradientField3D",
  FontWeight->"Bold"],
 ":\nGets the gradient field of the image"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getGradientField3D", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getGradientField3D", "[", "arr_", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grad", ",", "len", ",", "wid"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"grad", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "0", ",", "0"}], "}"}], "&"}], ",", "#"}], 
              "]"}], "&"}], ",", "#"}], "]"}], "&"}], ",", "arr"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"len", ",", "wid", ",", " ", "hei"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "arr", "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"grad", "\[LeftDoubleBracket]", 
          RowBox[{"x", ",", "y", ",", " ", "z"}], "\[RightDoubleBracket]"}], 
         "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"x", "+", "1"}], ",", "y", ",", " ", "z"}], 
             "\[RightDoubleBracket]"}], "-", 
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"x", "-", "1"}], ",", "y", ",", " ", "z"}], 
             "\[RightDoubleBracket]"}]}], ",", 
           RowBox[{
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", 
              RowBox[{"y", "+", "1"}], ",", " ", "z"}], 
             "\[RightDoubleBracket]"}], "-", 
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", 
              RowBox[{"y", "-", "1"}], ",", " ", "z"}], 
             "\[RightDoubleBracket]"}]}], ",", 
           RowBox[{
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", "y", ",", " ", 
              RowBox[{"z", "+", "1"}]}], "\[RightDoubleBracket]"}], "-", 
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", "y", ",", " ", 
              RowBox[{"z", "-", "1"}]}], "\[RightDoubleBracket]"}]}]}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"x", ",", "2", ",", 
          RowBox[{"len", "-", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", "2", ",", 
          RowBox[{"wid", "-", "1"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"z", ",", " ", "2", ",", " ", 
          RowBox[{"hei", "-", "1"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "grad"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.398388731663*^9, 3.398388731823*^9}, {3.398393561936*^9,
   3.398393629307*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getGaussianMask",
  FontWeight->"Bold"],
 ":\nGets a Gaussian Mask"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getGaussianMask", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getGaussianMask", "[", "a_", "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"res", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Binomial", "[", 
           RowBox[{
            RowBox[{"2", "*", "a"}], ",", 
            RowBox[{
             RowBox[{"Floor", "[", 
              SqrtBox[
               RowBox[{
                SuperscriptBox["x", "2"], "+", 
                SuperscriptBox["y", "2"]}]], "]"}], "+", "a"}]}], "]"}], ",", 
          
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"-", "a"}], ",", "a"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"-", "a"}], ",", "a"}], "}"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"N", "[", 
       RowBox[{"res", "/", 
        RowBox[{"Tr", "[", "res", "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getGaussianMask3D",
  FontWeight->"Bold"],
 ":\nGets a Gaussian Mask"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getGaussianMask3D", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getGaussianMask3D", "[", "a_", "]"}], ":=", "\[IndentingNewLine]",
    
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"res", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Binomial", "[", 
           RowBox[{
            RowBox[{"2", "*", "a"}], ",", 
            RowBox[{
             RowBox[{"Floor", "[", 
              SqrtBox[
               RowBox[{
                SuperscriptBox["x", "2"], "+", 
                SuperscriptBox["y", "2"], "+", 
                SuperscriptBox["z", "2"]}]], "]"}], "+", "a"}]}], "]"}], ",", 
          
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"-", "a"}], ",", "a"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"-", "a"}], ",", "a"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"z", ",", " ", 
            RowBox[{"-", "a"}], ",", " ", "a"}], "}"}]}], "]"}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"N", "[", 
       RowBox[{"res", "/", 
        RowBox[{"Tr", "[", "res", "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getLocalStructureTensor",
  FontWeight->"Bold"],
 ":\nGets the local structure tensor given the gradient field grad_ and the \
mask width a_"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getLocalStructureTensor", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getLocalStructureTensor", "[", 
    RowBox[{"grad_", ",", "a_"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "tensors", ",", "lst", ",", " ", "len", ",", "wid", ",", "t", ",", 
       "mask"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tensors", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Transpose", "[", 
                RowBox[{"{", "#", "}"}], "]"}], ".", 
               RowBox[{"{", "#", "}"}]}], ")"}], "&"}], ",", "#"}], "]"}], 
          "&"}], ",", "grad"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"lst", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}], "&"}], ",", "#"}], 
           "]"}], "&"}], ",", "grad"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"len", "=", 
       RowBox[{"Length", "[", "grad", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"wid", "=", 
       RowBox[{"Length", "[", 
        RowBox[{
        "grad", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"mask", "=", 
       RowBox[{"getGaussianMask", "[", "a", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"lst", "\[LeftDoubleBracket]", 
           RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], "=", 
          RowBox[{"mask", ".", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"tensors", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"x", "-", "a"}], ",", 
                 RowBox[{"x", "+", "a"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"y", "-", "a"}], ",", 
                 RowBox[{"y", "+", "a"}]}], "}"}]}], "]"}], ",", "1"}], 
            "]"}]}]}], ";"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"len", "-", "a"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"wid", "-", "a"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "lst"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.398393636766*^9, 3.398393656992*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getLocalStructureTensor",
  FontWeight->"Bold"],
 ":\nGets the local structure tensor given the gradient field grad_ and the \
mask width a_"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getLocalStructureTensor3D", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getLocalStructureTensor3D", "[", 
    RowBox[{"grad_", ",", "a_", ",", " ", "mask_", ",", " ", "skel_"}], "]"}],
    ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "tensors", ",", "lst", ",", " ", "len", ",", "wid", ",", "t", ",", " ", 
       "temp"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tensors", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Transpose", "[", 
                   RowBox[{"{", "#", "}"}], "]"}], ".", 
                  RowBox[{"{", "#", "}"}]}], ")"}], "&"}], ",", "#"}], "]"}], 
             "&"}], ",", " ", "#"}], "]"}], "&"}], ",", "grad"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"lst", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", " ", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], "&"}], 
               ",", "#"}], "]"}], "&"}], ",", " ", "#"}], "]"}], "&"}], ",", 
         "grad"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"len", ",", " ", "wid", ",", " ", "hei", ",", " ", "temp"}], 
        "}"}], "=", 
       RowBox[{"Dimensions", "[", "grad", "]"}]}], ";", "\[IndentingNewLine]",
       
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"skel", "\[LeftDoubleBracket]", 
            RowBox[{"x", ",", " ", "y", ",", " ", "z"}], 
            "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"lst", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", "y", ",", " ", "z"}], 
             "\[RightDoubleBracket]"}], "=", 
            RowBox[{"mask", ".", 
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"tensors", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"x", "-", "a"}], ",", 
                   RowBox[{"x", "+", "a"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"y", "-", "a"}], ",", 
                   RowBox[{"y", "+", "a"}]}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"z", "-", "a"}], ",", " ", 
                   RowBox[{"z", "+", "a"}]}], "}"}]}], "]"}], ",", "2"}], 
              "]"}]}]}], ";"}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"len", "-", "a"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"wid", "-", "a"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"z", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"hei", "-", "a"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "lst"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.3983898113310003`*^9, 3.398389812087*^9}, {
   3.398389847582*^9, 3.3983898831400003`*^9}, {3.398389932729*^9, 
   3.398389973351*^9}, {3.398390206807*^9, 3.398390222801*^9}, {
   3.398390303325*^9, 3.398390324663*^9}, {3.398391560307*^9, 
   3.398391576377*^9}, {3.398393546394*^9, 3.398393547792*^9}, {
   3.398393661101*^9, 3.398393682625*^9}, 3.3983941263*^9}],

Cell[BoxData[""], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["normalizeVector",
  FontWeight->"Bold"],
 ":\nNormalizes a vector"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "normalizeVector", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizeVector", "[", "v_", "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"v", ".", "v"}], " ", "\[NotEqual]", " ", "0"}], ",", " ", 
     RowBox[{"v", "/", 
      SqrtBox[
       RowBox[{"v", ".", "v"}]]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["normalizeVector3D",
  FontWeight->"Bold"],
 ":\nNormalizes a vector"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "normalizeVector3D", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizeVector3D", "[", "v_", "]"}], ":=", "\[IndentingNewLine]",
    
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"v", ".", "v"}], " ", "\[NotEqual]", " ", "0"}], ",", " ", 
     RowBox[{"v", "/", 
      SqrtBox[
       RowBox[{"v", ".", "v"}]]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getEigen",
  FontWeight->"Bold"],
 ":\nGets the eigen values of a list of structure tensors"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getEigen", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getEigen", "[", "lst_", "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{"Eigensystem", ",", "#"}], "]"}], "&"}], ",", "lst"}], "]"}]}],
   ";"}]}], "Input",
 CellChangeTimes->{{3.3983904461540003`*^9, 3.3983904700220003`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getEigen3D",
  FontWeight->"Bold"],
 ":\nGets the eigen values of a list of structure tensors"
}], "Subsubtitle",
 CellChangeTimes->{{3.398390482612*^9, 3.398390483212*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getEigen3D", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"getEigen3D", "[", 
   RowBox[{"lst_", ",", " ", "skel_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "eigs", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"eigs", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
                "}"}], "&"}], ",", "#"}], "]"}], "&"}], ",", " ", "#"}], 
          "]"}], "&"}], ",", "grad"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"skel", "\[LeftDoubleBracket]", 
           RowBox[{"x", ",", " ", "y", ",", " ", "z"}], 
           "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"eigs", "\[LeftDoubleBracket]", 
            RowBox[{"x", ",", "y", ",", "z"}], "\[RightDoubleBracket]"}], "=",
            
           RowBox[{"Eigensystem", "[", 
            RowBox[{"lst", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", "y", ",", "z"}], "\[RightDoubleBracket]"}], 
            "]"}]}], ";"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"x", ",", "1", ",", "len"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "1", ",", "wid"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"z", ",", "1", ",", "hei"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "eigs"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.3983904461540003`*^9, 3.39839050854*^9}, {
   3.398393704361*^9, 3.398393704817*^9}, {3.3983937414189997`*^9, 
   3.3983938627390003`*^9}, {3.3983938943780003`*^9, 3.398393949026*^9}, {
   3.3983941085550003`*^9, 3.398394111042*^9}, 3.3983947090030003`*^9, {
   3.398395200943*^9, 3.3983952010550003`*^9}}],

Cell["\<\
lst=getLocalStructureTensor[getGradientField[slice],gaussianRadius];
eigens=getEigen[lst];
Show[{ListDensityPlot[slice/255.0,Mesh\[Rule]False,ColorFunctionScaling\[Rule]\
False,DisplayFunction\[Rule]Identity],Graphics[{RGBColor[0,0,1],Table[If[\
eigens\[LeftDoubleBracket]x,y,1,1\[RightDoubleBracket]>0,Line[{{y,x},{y,x}+\
Reverse[normalizeVector[eigens\[LeftDoubleBracket]x,y,2,2\[RightDoubleBracket]\
]]*(1-eigens\[LeftDoubleBracket]x,y,1,2\[RightDoubleBracket]/eigens\
\[LeftDoubleBracket]x,y,1,1\[RightDoubleBracket])}],Circle[{y,x},0.01]],{x,\
Length[eigens]},{y,Length[eigens\[LeftDoubleBracket]1\[RightDoubleBracket]]}]}\
,AspectRatio\[Rule]Automatic,PlotRange\[Rule]{{0,65},{0,65}},Frame\[Rule]True,\
DisplayFunction\[Rule]Identity]},DisplayFunction\[Rule]$DisplayFunction];\
\>", "SmallText"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getCostFunction5",
  FontWeight->"Bold"],
 ":\nReturns the cost of adding in a new pixel based on the structure tensor \
eigen analysis."
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getCostFunction5", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getCostFunction5", "[", 
    RowBox[{
    "p_", ",", "  ", "eigenValues_", ",", "  ", "skeletonDirections_", ",", 
     " ", "annotatedSkeleton_"}], "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "cost", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"cost", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            " ", 
            RowBox[{
            "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
            " ", "1", ",", " ", "1"}], "\[RightDoubleBracket]"}], " ", 
          "\[NotEqual]", " ", "0"}], ")"}], ",", "\[IndentingNewLine]", 
        RowBox[{"cost", " ", "=", " ", 
         RowBox[{"1", " ", "-", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Abs", "[", 
             RowBox[{
              RowBox[{"skeletonDirections", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", " ", 
                RowBox[{
                "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
                "\[RightDoubleBracket]"}], " ", ".", " ", 
              RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", " ", 
                RowBox[{
                "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                ",", " ", "2", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], 
             "]"}], ")"}], " ", "*", " ", 
           RowBox[{"(", 
            RowBox[{"1", "-", " ", 
             RowBox[{"Abs", "[", 
              RowBox[{
               RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                 ",", " ", "1", ",", " ", "2"}], "\[RightDoubleBracket]"}], 
               " ", "/", "  ", 
               RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                 ",", " ", "1", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], 
              "]"}]}], " ", ")"}]}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"annotatedSkeleton", "\[LeftDoubleBracket]", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
           " ", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
          "\[RightDoubleBracket]"}], " ", "\[Equal]", " ", "1"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"cost", " ", "=", " ", 
         RowBox[{"Abs", "[", 
          RowBox[{
           RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{
             "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",",
              " ", "1", ",", " ", "2"}], "\[RightDoubleBracket]"}], " ", "/", 
           "  ", 
           RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{
             "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",",
              " ", "1", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], 
          "]"}]}]}], " ", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "cost", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getCostFunction5Image",
  FontWeight->"Bold"],
 ":\nGets an image annotated using the 5th cost function (Eigen Analysis)"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getCostFunction5Image", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getCostFunction5Image", "[", 
    RowBox[{
    "skeleton_", ",", " ", "eigenValues_", ",", " ", "skeletonDirections_", 
     ",", " ", "annotatedSkeleton_"}], "]"}], " ", ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"retVal", ",", " ", "s2"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"s2", " ", "=", " ", "skeleton"}], ";", "\[IndentingNewLine]", 
      RowBox[{"retVal", " ", "=", " ", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"s2", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", " ", "y"}], "\[RightDoubleBracket]"}], " ", 
            ">", " ", "0"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{"getCostFunction5", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"x", ",", "y"}], "}"}], ",", "  ", "eigenValues", ",", 
             "  ", "skeletonDirections", ",", " ", "annotatedSkeleton"}], 
            "]"}], ",", "\[IndentingNewLine]", "0"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"x", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "skeleton", "]"}], 
            "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "}"}], 
         ",", " ", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"y", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "skeleton", "]"}], 
            "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], "}"}]}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "retVal", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getSkeletonDirection",
  FontWeight->"Bold"],
 ":\nGets the Vector field of the skeleton"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getSkeletonDirection", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getSkeletonDirection", "[", "skeleton_", "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"direction", ",", " ", "defaultDirections"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"defaultDirections", " ", "=", " ", 
       RowBox[{"getEigen", "[", 
        RowBox[{"getLocalStructureTensor", "[", 
         RowBox[{
          RowBox[{"getGradientField", "[", "skeleton", "]"}], ",", "1"}], 
         "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"direction", " ", "=", " ", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"skeleton", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], " ", ">", 
            " ", "0"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"n4", ",", " ", "dir"}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"n4", " ", "=", " ", 
               RowBox[{"getN4", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"x", ",", "y"}], "}"}], ",", " ", "skeleton"}], 
                "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"dir", " ", "=", " ", 
               RowBox[{"defaultDirections", "\[LeftDoubleBracket]", 
                RowBox[{"x", ",", "y", ",", "2", ",", "2"}], 
                "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"Switch", "[", 
               RowBox[{
                RowBox[{"Length", "[", "n4", "]"}], ",", 
                "\[IndentingNewLine]", "1", ",", " ", 
                RowBox[{
                 RowBox[{"dir", " ", "=", " ", 
                  RowBox[{
                   RowBox[{
                   "n4", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], " ", "-", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", "y"}], "}"}]}]}], ";"}], ",", 
                "\[IndentingNewLine]", "2", ",", " ", 
                RowBox[{"dir", " ", "=", " ", 
                 RowBox[{
                  RowBox[{
                  "n4", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}], " ", "-", " ", 
                  RowBox[{
                  "n4", "\[LeftDoubleBracket]", "1", 
                   "\[RightDoubleBracket]"}]}]}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"normalizeVector", "[", "dir", "]"}]}]}], 
            "\[IndentingNewLine]", "]"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", " ", 
         RowBox[{"{", 
          RowBox[{"x", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "skeleton", "]"}], 
            "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "}"}], 
         ",", " ", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"y", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "skeleton", "]"}], 
            "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], "}"}]}],
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "direction", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["doSkeletonCleanup:",
  FontWeight->"Bold"],
 "\nCleans up the skeleton using cost function 5"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "doSkeletonCleanup", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"doSkeletonCleanup", "[", 
   RowBox[{
   "sourceImage_", ",", "skeleton_", ",", "threshold_", ",", "stepSize_", ",",
     "showGeneralPlots_", ",", "showIterationPlots_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "sourceEigens", ",", "binarySkeleton", ",", "skeletonDirections", ",", 
      "pixelCosts", ",", "prunedSkeleton", ",", "newPixels", ",", 
      "annotatedNewPixels", ",", "grayValueSkeleton", ",", "p1", ",", "p2", 
      ",", "p3", ",", "p4", ",", "p5", ",", "p6", ",", "p7", ",", "p01", ",", 
      "p02", ",", "p03"}], "}"}], ",", 
    RowBox[{
     RowBox[{"sourceEigens", "=", 
      RowBox[{"getEigen", "[", 
       RowBox[{"getLocalStructureTensor", "[", 
        RowBox[{
         RowBox[{"getGradientField", "[", "sourceImage", "]"}], ",", 
         "gaussianRadius"}], "]"}], "]"}]}], ";", 
     RowBox[{"binarySkeleton", "=", 
      RowBox[{"thresholdImage", "[", 
       RowBox[{"skeleton", ",", "1"}], "]"}]}], ";", 
     RowBox[{"skeletonDirections", "=", 
      RowBox[{"getSkeletonDirection", "[", "binarySkeleton", "]"}]}], ";", 
     RowBox[{"pixelCosts", "=", 
      RowBox[{"getCostFunction5Image", "[", 
       RowBox[{
       "binarySkeleton", ",", "sourceEigens", ",", "skeletonDirections", ",", 
        
        RowBox[{"annotateImageWithPixelType", "[", "binarySkeleton", "]"}]}], 
       "]"}]}], ";", 
     RowBox[{"prunedSkeleton", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{"showGeneralPlots", ",", 
       RowBox[{
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{
           RowBox[{"p1", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"sourceImage", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<Source Image\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p2", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"skeleton", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{
              "PlotLabel", "\[Rule]", "\"\<Grayscale Skeleton\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p3", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"binarySkeleton", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<Binary Skeleton\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p4", "=", 
            RowBox[{"Show", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ListDensityPlot", "[", 
                 RowBox[{
                  FractionBox["sourceImage", "255.`"], ",", 
                  RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
                  RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}], ">", "0"}], ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{
                    RowBox[{"Reverse", "[", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "2", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    FractionBox[
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "2"}], 
                    "\[RightDoubleBracket]"}], 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}]]}], ")"}]}]}]}], "}"}], "]"}], 
                    ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}]}], "}"}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "sourceEigens", "]"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "sourceEigens", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], 
                 "]"}]}], "}"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{
              "PlotLabel", "\[Rule]", "\"\<Source Vector Field\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p5", "=", 
            RowBox[{"Show", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ListDensityPlot", "[", 
                 RowBox[{
                  FractionBox[
                   RowBox[{"thresholdImage", "[", 
                    RowBox[{"skeleton", ",", "1"}], "]"}], "255.`"], ",", 
                  RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
                  RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"skeletonDirections", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                    "]"}]}], "]"}]}]}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "skeletonDirections", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "skeletonDirections", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], 
                 "]"}]}], "}"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{
              "PlotLabel", "\[Rule]", "\"\<Skeleton Vector Field\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p6", "=", 
            RowBox[{"Show", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ListDensityPlot", "[", 
                 RowBox[{
                  FractionBox["slice", "255.`"], ",", 
                  RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
                  RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}], ">", "0"}], ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{
                    RowBox[{"Reverse", "[", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "2", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    FractionBox[
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "2"}], 
                    "\[RightDoubleBracket]"}], 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}]]}], ")"}]}]}]}], "}"}], "]"}], 
                    ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}]}], "}"}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "sourceEigens", "]"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "sourceEigens", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"skeletonDirections", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                    "]"}]}], "]"}]}]}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "skeletonDirections", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "skeletonDirections", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], 
                 "]"}]}], "}"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{
              "PlotLabel", "\[Rule]", 
               "\"\<Source  Field on Skeleton Field\>\""}]}], "]"}]}], ";", 
           RowBox[{"p7", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"pixelCosts", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<Cost Function\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"Show", "[", 
            RowBox[{
             RowBox[{"GraphicsGrid", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"p1", ",", "p2", ",", "p3"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"p4", ",", "p5", ",", "p6"}], "}"}], ",", 
                RowBox[{"{", "p7", "}"}]}], "}"}], "]"}], ",", 
             RowBox[{"ImageSize", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"1200", ",", "1200"}], "}"}]}]}], "]"}]}]}], "]"}], 
        ";"}]}], "]"}], ";", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"grayValueSkeleton", "=", 
         RowBox[{"thresholdImage", "[", 
          RowBox[{"skeleton", ",", "grayValue"}], "]"}]}], ";", 
        RowBox[{"newPixels", "=", 
         RowBox[{"grayValueSkeleton", "-", "prunedSkeleton"}]}], ";", 
        RowBox[{"annotatedNewPixels", "=", 
         RowBox[{"annotateImageWithPixelType", "[", "newPixels", "]"}]}], ";",
         
        RowBox[{"skeletonDirections", "=", 
         RowBox[{"getSkeletonDirection", "[", "grayValueSkeleton", "]"}]}], 
        ";", 
        RowBox[{"pixelCosts", "=", 
         RowBox[{"getCostFunction5Image", "[", 
          RowBox[{
          "grayValueSkeleton", ",", "sourceEigens", ",", "skeletonDirections",
            ",", "annotatedNewPixels"}], "]"}]}], ";", 
        RowBox[{"If", "[", 
         RowBox[{"showIterationPlots", ",", 
          RowBox[{
           RowBox[{"p01", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"newPixels", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<New Pixels\>\""}]}], 
             "]"}]}], ";"}]}], "]"}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"newPixels", "\[LeftDoubleBracket]", 
                 RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], ">", 
                "0"}], ",", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}],
         ";", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"newPixels", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "#1", "\[LeftDoubleBracket]", "1", 
                   "\[RightDoubleBracket]"}], ",", 
                  RowBox[{
                  "#1", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                ">", "0"}], ",", 
               RowBox[{
                RowBox[{"Module", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"curvePoints", ",", "curveCost"}], "}"}], ",", 
                  RowBox[{
                   RowBox[{"curvePoints", "=", 
                    RowBox[{
                    RowBox[{"getCurveLength", "[", 
                    RowBox[{"#1", ",", "annotatedNewPixels", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "grayValue"}], "}"}]}], "]"}], 
                    "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
                   ";", 
                   RowBox[{"curveCost", "=", 
                    FractionBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"i", "=", "1"}], 
                    RowBox[{"Length", "[", "curvePoints", "]"}]], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"pixelCosts", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    "&"}], ")"}], "/@", "curvePoints"}], ")"}], 
                    "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], 
                    
                    RowBox[{"Length", "[", "curvePoints", "]"}]]}], ";", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"curveCost", "\[GreaterEqual]", "threshold"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Scan", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"prunedSkeleton", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    "=", "1"}], ";"}], ")"}], "&"}], ",", "curvePoints"}], 
                    "]"}], ";"}]}], "]"}], ";", 
                   RowBox[{"Scan", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"newPixels", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    "=", "0"}], ";"}], ")"}], "&"}], ",", "curvePoints"}], 
                    "]"}], ";"}]}], "]"}], ";"}]}], "]"}], ";"}], ")"}], 
           "&"}], ",", "dMap"}], "]"}], ";", 
        RowBox[{"If", "[", 
         RowBox[{"showIterationPlots", ",", 
          RowBox[{
           RowBox[{"p02", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"prunedSkeleton", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<Pruned Skeleton\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p03", "=", 
            RowBox[{"Show", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ListDensityPlot", "[", 
                 RowBox[{
                  FractionBox["slice", "255.`"], ",", 
                  RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
                  RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}], ">", "0"}], ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{
                    RowBox[{"Reverse", "[", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "2", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    FractionBox[
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "2"}], 
                    "\[RightDoubleBracket]"}], 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}]]}], ")"}]}]}]}], "}"}], "]"}], 
                    ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}]}], "}"}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "sourceEigens", "]"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "sourceEigens", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"skeletonDirections", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                    "]"}]}], "]"}]}]}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "skeletonDirections", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "skeletonDirections", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], 
                 "]"}]}], "}"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{
              "PlotLabel", "\[Rule]", 
               "\"\<Source  Field on Skeleton Field\>\""}]}], "]"}]}], ";", 
           RowBox[{"p04", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"pixelCosts", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<Cost Function\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"Show", "[", 
            RowBox[{
             RowBox[{"GraphicsRow", "[", 
              RowBox[{"{", 
               RowBox[{"p01", ",", "p02", ",", "p03", ",", "p04"}], "}"}], 
              "]"}], ",", 
             RowBox[{"ImageSize", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"1200", ",", "300"}], "}"}]}], ",", 
             RowBox[{"PlotLabel", "\[Rule]", 
              RowBox[{"\"\<Gray Value : \>\"", "<>", 
               RowBox[{"ToString", "[", "grayValue", "]"}]}]}]}], "]"}]}]}], 
         "]"}], ";"}], ",", 
       RowBox[{"{", 
        RowBox[{"grayValue", ",", "255", ",", "1", ",", "stepSize"}], "}"}]}],
       "]"}], ";", 
     RowBox[{"newSkeleton", "=", "skeleton"}], ";", 
     RowBox[{"dMap", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"prunedSkeleton", "\[LeftDoubleBracket]", 
              RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], "\[Equal]", 
             "0"}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", "y"}], "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}], ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
       "]"}]}], ";", 
     RowBox[{"dMap", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"dMap", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
     ";", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"newSkeleton", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
             ",", 
             RowBox[{
             "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "\[RightDoubleBracket]"}], "=", "0"}], ";"}], ")"}], "&"}], ",", 
       "dMap"}], "]"}], ";", 
     RowBox[{"{", 
      RowBox[{"newSkeleton", ",", "prunedSkeleton"}], "}"}]}]}], 
   "]"}]}]}], "Input"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Statistical Profiles", "Subtitle"],

Cell[TextData[{
 StyleBox["getPriorVal",
  FontWeight->"Bold"],
 "\nGets the earlier value in the histogram table"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getPriorVal", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getPriorVal", "[", 
   RowBox[{"hist_", ",", " ", "currentIndex_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"priorVal", ",", " ", "cVal", ",", " ", "pVal", ",", " ", "i"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"priorVal", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"cVal", " ", "=", " ", 
      RowBox[{"hist", "\[LeftDoubleBracket]", 
       RowBox[{"currentIndex", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"i", " ", "=", " ", 
      RowBox[{"currentIndex", " ", "-", " ", "1"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"i", " ", ">=", " ", "1"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"priorVal", " ", "=", " ", 
         RowBox[{"hist", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Break", "[", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"i", "--"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "priorVal"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getNextVal",
  FontWeight->"Bold"],
 "\nGets the next value in the histogram table"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getNextVal", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getNextVal", "[", 
   RowBox[{"hist_", ",", " ", "currentIndex_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"nextVal", ",", " ", "cVal", ",", " ", "nVal", ",", " ", "i"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"nextVal", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"cVal", " ", "=", " ", 
      RowBox[{"hist", "\[LeftDoubleBracket]", 
       RowBox[{"currentIndex", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"i", " ", "=", " ", 
      RowBox[{"currentIndex", " ", "+", " ", "1"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"i", " ", "<=", " ", 
        RowBox[{"Length", "[", "hist", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"nVal", " ", "=", " ", 
         RowBox[{"hist", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"nVal", " ", "\[NotEqual]", " ", "cVal"}], ",", " ", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", " ", 
            RowBox[{
             RowBox[{"nextVal", " ", "=", " ", "nVal"}], ";", " ", 
             RowBox[{"Break", "[", "]"}]}]}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"i", "++"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "nextVal"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["smudgeHistogram",
  FontWeight->"Bold"],
 "\nSmudges a histogram by averaging the neighbors"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "smudgeHistogram", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"smudgeHistogram", "[", "hist_", "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "newHist", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newHist", " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{"0", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Length", "[", "hist", "]"}], "-", "1"}], "}"}], ",", " ", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"newHist", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", "1"}], "\[RightDoubleBracket]"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"(", " ", 
           RowBox[{
            RowBox[{"hist", "\[LeftDoubleBracket]", 
             RowBox[{"i", ",", "1"}], "\[RightDoubleBracket]"}], " ", "+", 
            " ", 
            RowBox[{"hist", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"i", "+", "1"}], ",", "1"}], 
             "\[RightDoubleBracket]"}]}], ")"}], " ", "/", " ", "3.0"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"newHist", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", "2"}], "\[RightDoubleBracket]"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"hist", "\[LeftDoubleBracket]", 
             RowBox[{"i", ",", "2"}], "\[RightDoubleBracket]"}], " ", "+", 
            " ", 
            RowBox[{"hist", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"i", "+", "1"}], ",", "2"}], 
             "\[RightDoubleBracket]"}]}], ")"}], " ", "/", " ", "3.0"}]}], 
        ";"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "1", ",", " ", 
         RowBox[{
          RowBox[{"Length", "[", "hist", "]"}], "-", "1"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "newHist"}]}],
    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getPeakCount",
  FontWeight->"Bold"],
 "\nCounts the number of peaks"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getPeakCount", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"getPeakCount", "[", 
   RowBox[{"hist_", ",", "s_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "priorVal", ",", "currVal", ",", "nextVal", ",", "n", ",", " ", 
      "newHist"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newHist", " ", "=", " ", "hist"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"newHist", " ", "=", " ", 
        RowBox[{"smudgeHistogram", "[", "newHist", "]"}]}], ",", " ", 
       RowBox[{"{", "s", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"n", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"priorVal", "=", 
         RowBox[{"getPriorVal", "[", 
          RowBox[{"newHist", ",", " ", "i"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"currVal", "=", 
         RowBox[{"newHist", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", "2"}], "\[RightDoubleBracket]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nextVal", "=", 
         RowBox[{"getNextVal", "[", 
          RowBox[{"newHist", ",", " ", "i"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"currVal", " ", ">", " ", "priorVal"}], " ", ")"}], "&&", 
           " ", 
           RowBox[{"(", " ", 
            RowBox[{"currVal", " ", ">", " ", "nextVal"}], ")"}]}], ",", " ", 
          
          RowBox[{"n", "++"}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "[", "newHist", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "n"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getTypeDurationGraph",
  FontWeight->"Bold"],
 "\nDisplays a graph of how long a skeletal point stays as a skeletal type"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getTypeDurationGraph", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getTypeDurationGraph", "[", 
   RowBox[{"stats_", ",", " ", "types_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"image", ",", " ", "newStats"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"image", " ", "=", " ", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newStats", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"stats", ",", " ", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"types", ",", " ", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"image", "\[LeftDoubleBracket]", " ", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
            " ", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], "++"}], ";"}], "&"}], ",", "newStats"}],
       "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"ListDensityPlot", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"#", "&"}], ",", " ", "image", ",", " ", "1"}], "]"}], ",", 
       " ", 
       RowBox[{"Mesh", "\[Rule]", "True"}], ",", " ", 
       RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}], ",", 
       RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], " ", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getTypeLengthSummationGraph",
  FontWeight->"Bold"],
 "\nDisplays a graph of the cumulative length / area of a curve or surface"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getTypeLengthSummationGraph", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getTypeLengthSummationGraph", "[", 
   RowBox[{"stats_", ",", " ", "types_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"image", ",", " ", "newStats"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"image", " ", "=", " ", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newStats", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"stats", ",", " ", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"types", ",", " ", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"image", "\[LeftDoubleBracket]", " ", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
            " ", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], " ", "+=", "  ", 
          RowBox[{
          "#", "\[LeftDoubleBracket]", "6", "\[RightDoubleBracket]"}]}], 
         ";"}], "&"}], ",", "newStats"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"ListDensityPlot", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"#", "&"}], ",", " ", "image", ",", " ", "1"}], "]"}], ",", 
       " ", 
       RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
       RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}], ",", " ", 
       RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getThicknessHistogram",
  FontWeight->"Bold"],
 "\nGets the list of thicknesses and their frequencies"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getThicknessHistogram", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"getThicknessHistogram", "[", "list_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tList", ",", "plot"}], "}"}], ",", 
    RowBox[{
     RowBox[{"tList", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", 
          RowBox[{
           RowBox[{"sliceSize", "[", 
            RowBox[{"1", ",", "2"}], "]"}], " ", 
           RowBox[{"sliceSize", "[", 
            RowBox[{"2", ",", "2"}], "]"}]}]}], "}"}]}], "]"}]}], ";", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"tList", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
             "+", "1"}], "\[RightDoubleBracket]"}], "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
             "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
             ",", 
             RowBox[{
              RowBox[{
               RowBox[{"tList", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
                  "+", "1"}], "\[RightDoubleBracket]"}], 
               "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "+", 
              "1"}]}], "}"}]}], ";"}], ")"}], "&"}], ",", "list"}], "]"}], 
     ";", 
     RowBox[{"tList", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"tList", ",", 
        RowBox[{
         RowBox[{
          RowBox[{
          "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          "\[NotEqual]", 
          RowBox[{"-", "1"}]}], "&"}]}], "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "tList", "]"}], ">", "0"}], ",", 
       RowBox[{"plot", "=", 
        RowBox[{"ListPlot", "[", 
         RowBox[{"tList", ",", 
          RowBox[{"Joined", "\[Rule]", "True"}], ",", 
          RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
          RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}]}], 
      "]"}], ";", 
     RowBox[{"{", 
      RowBox[{"tList", ",", "plot"}], "}"}]}]}], "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getPeakCountForImage",
  FontWeight->"Bold"],
 "\nGets a plot of the number of histogram peaks there are at each point"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getPeakCountForImage", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getPeakCountForImage", "[", 
   RowBox[{
   "stats_", ",", " ", "types_", ",", " ", "skel_", ",", " ", "noiseValue_"}],
    "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"newStats", ",", " ", "img"}], "}"}], ",", "\[IndentingNewLine]",
     
    RowBox[{
     RowBox[{"newStats", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"stats", ",", " ", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"types", ",", " ", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"img", " ", "=", " ", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"skel", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], " ", ">", 
              " ", "0"}], ",", " ", "\[IndentingNewLine]", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", "thicknessData", "}"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"thicknessData", " ", "=", " ", 
                 RowBox[{"getThicknessListAndGraph", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"x", ",", "y"}], "}"}], ",", " ", "stats", ",", 
                   " ", "types"}], "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"img", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], " ", 
                 "=", " ", 
                 RowBox[{"getPeakCount", "[", 
                  RowBox[{
                   RowBox[{"thicknessData", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], " ", 
                   ",", "noiseValue"}], "]"}]}], ";"}]}], 
              "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], 
           ";"}], "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ";"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", " ", 
         RowBox[{"sliceSize", "[", 
          RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
         RowBox[{"sliceSize", "[", 
          RowBox[{"1", ",", "2"}], "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "img"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getThicknessListAndGraph",
  FontWeight->"Bold"],
 "\nGets the list of thickness information and the graph of how the thickness \
changes along the grayscale value"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getThicknessListAndGraph", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getThicknessListAndGraph", "[", 
    RowBox[{"p_", ",", "stats_", ",", "types_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"d", ",", "newStats", ",", "plot"}], "}"}], ",", 
     RowBox[{
      RowBox[{"newStats", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"stats", ",", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"types", ",", 
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
           "]"}], "&"}]}], "]"}]}], ";", 
      RowBox[{"d", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"newStats", ",", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
            "\[Equal]", 
            RowBox[{
            "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "&&",
            
           RowBox[{
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
            "\[Equal]", 
            RowBox[{
            "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
          "&"}]}], "]"}]}], ";", 
      RowBox[{"d", "=", 
       RowBox[{"Sort", "[", 
        RowBox[{"d", ",", 
         RowBox[{
          RowBox[{
           RowBox[{
           "#1", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}], "<", 
           
           RowBox[{
           "#2", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}]}], 
          "&"}]}], "]"}]}], ";", 
      RowBox[{"d", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"#1", "\[LeftDoubleBracket]", 
           RowBox[{"{", 
            RowBox[{"4", ",", "5"}], "}"}], "\[RightDoubleBracket]"}], "&"}], 
         ")"}], "/@", "d"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "d", "]"}], ">", "0"}], ",", 
        RowBox[{"plot", "=", 
         RowBox[{"ListPlot", "[", 
          RowBox[{"d", ",", 
           RowBox[{"Joined", "\[Rule]", "True"}], ",", 
           RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"AxesLabel", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<Grayscale\>\"", ",", "\"\<Thickness\>\""}], 
             "}"}]}]}], "]"}]}]}], "]"}], ";", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"d", ",", 
          RowBox[{"{", "plot", "}"}]}], "}"}], ",", 
        RowBox[{"getThicknessHistogram", "[", "d", "]"}]}], "}"}]}]}], 
    "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["displayThicknessStatisticsPerPoint",
  FontWeight->"Bold"],
 "\nDisplays the thickness statistics graph per point"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "displayThicknessStatisticsPerPoint", "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"displayThicknessStatisticsPerPoint", "[", 
    RowBox[{"p_", ",", "stats_", ",", "types_", ",", "skel_", ",", "img_"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "d", ",", "arr", ",", "s0", ",", "s1", ",", "s2", ",", "s3", ",", "s4", 
       ",", "thicknessInfo"}], "}"}], ",", 
     RowBox[{
      RowBox[{"newStats", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"stats", ",", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"types", ",", 
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
           "]"}], "&"}]}], "]"}]}], ";", 
      RowBox[{"d", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"#1", "\[LeftDoubleBracket]", 
           RowBox[{"{", 
            RowBox[{"2", ",", "3"}], "}"}], "\[RightDoubleBracket]"}], "&"}], 
         ")"}], "/@", "newStats"}]}], ";", 
      RowBox[{"arr", "=", 
       RowBox[{"getBlankImage", "[", "]"}]}], ";", 
      RowBox[{"Scan", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"arr", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
             
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], "++"}], "&"}], ",", "d"}], "]"}], ";", 
      RowBox[{"thicknessInfo", "=", 
       RowBox[{"getThicknessListAndGraph", "[", 
        RowBox[{"p", ",", "stats", ",", "types"}], "]"}]}], ";", 
      RowBox[{"s0", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", 
          RowBox[{
          "\"\<Thickness Histogram (Peak Count {0, 1, 2, 3}= {\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"getPeakCount", "[", 
             RowBox[{
              RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
               RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", "0"}],
              "]"}], "]"}], "<>", "\"\<,\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"getPeakCount", "[", 
             RowBox[{
              RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
               RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", "1"}],
              "]"}], "]"}], "<>", "\"\<,\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"getPeakCount", "[", 
             RowBox[{
              RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
               RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", "2"}],
              "]"}], "]"}], "<>", "\"\<,\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"getPeakCount", "[", 
             RowBox[{
              RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
               RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", "3"}],
              "]"}], "]"}], "<>", "\"\<}\>\""}]}]}], "]"}]}], ";", 
      RowBox[{"s1", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", "\"\<Thickness Variation\>\""}]}], 
        "]"}]}], ";", 
      RowBox[{"s2", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"img", ",", 
             RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
             RowBox[{"Mesh", "\[Rule]", "False"}]}], "]"}], ",", 
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
              RowBox[{"PointSize", "[", "0.02`", "]"}], ",", 
              RowBox[{"Point", "[", 
               RowBox[{
                RowBox[{"Reverse", "[", "p", "]"}], "+", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.5`"}], ",", 
                  RowBox[{"-", "0.5`"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", "\"\<Source Image\>\""}]}], "]"}]}], 
      ";", 
      RowBox[{"s3", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"arr", ",", 
             RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], ",",
            
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
              RowBox[{"PointSize", "[", "0.02`", "]"}], ",", 
              RowBox[{"Point", "[", 
               RowBox[{
                RowBox[{"Reverse", "[", "p", "]"}], "+", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.5`"}], ",", 
                  RowBox[{"-", "0.5`"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", "\"\<Curve Duration\>\""}]}], 
        "]"}]}], ";", 
      RowBox[{"s4", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"skel", ",", 
             RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], ",",
            
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
              RowBox[{"PointSize", "[", "0.02`", "]"}], ",", 
              RowBox[{"Point", "[", 
               RowBox[{
                RowBox[{"Reverse", "[", "p", "]"}], "+", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.5`"}], ",", 
                  RowBox[{"-", "0.5`"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", "\"\<Grayscale Skeleton\>\""}]}], 
        "]"}]}], ";", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"GraphicsRow", "[", 
         RowBox[{"{", 
          RowBox[{"s0", ",", "s1"}], "}"}], "]"}], ",", 
        RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"\"\<Point :{\>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "]"}],
           "<>", "\"\<,\>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "]"}],
           "<>", "\"\<}\>\""}]}]}], "]"}], ";", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"GraphicsRow", "[", 
         RowBox[{"{", 
          RowBox[{"s2", ",", "s3", ",", "s4"}], "}"}], "]"}], ",", 
        RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
       "]"}]}]}], "]"}]}], ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["displayThicknessStatisticsPerPointSet",
  FontWeight->"Bold"],
 "\nDisplays the thickness statistics graph for a set of points"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "displayThicknessStatisticsPerPointSet", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"displayThicknessStatisticsPerPointSet", "[", 
    RowBox[{
    "points_", ",", " ", "stats_", ",", " ", "types_", ",", "skel_", ",", " ",
      "img_"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Scan", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"displayThicknessStatisticsPerPoint", "[", 
        RowBox[{
        "#", ",", " ", "stats", ",", " ", "types", ",", " ", "skel", ",", " ",
          "img"}], "]"}], ";"}], "&"}], ",", "points"}], "]"}]}], 
  ";"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["displayThicknessStatistics",
  FontWeight->"Bold"],
 "\nDisplays the thickness statistics for all the points"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "displayThicknessStatistics", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"displayThicknessStatistics", "[", 
   RowBox[{
   "stats_", ",", " ", "types_", ",", " ", "pointsOfInterest_", ",", " ", 
    "skel_", ",", " ", "img_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "image", ",", " ", "points", ",", " ", "lists", ",", " ", "n", ",", " ", 
      "trueList", ",", " ", "newStats"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"image", " ", "=", " ", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newStats", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"stats", ",", " ", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"types", ",", " ", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"points", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"lists", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"points", " ", "=", " ", 
          RowBox[{"Union", "[", 
           RowBox[{"points", ",", " ", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
              "}"}], "}"}]}], "]"}]}], ";"}], "&"}], ",", " ", "newStats"}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"p", ",", " ", "pointData", ",", " ", "list"}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"p", " ", "=", " ", "#"}], ";", "\[IndentingNewLine]", 
            RowBox[{"list", " ", "=", " ", 
             RowBox[{
              RowBox[{"getThicknessListAndGraph", "[", 
               RowBox[{"p", ",", " ", "stats", ",", " ", "types"}], "]"}], 
              "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"lists", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"lists", ",", " ", "list"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"displayThicknessStatisticsPerPoint", "[", 
             RowBox[{
             "p", ",", " ", "stats", ",", " ", "types", ",", " ", "skel", ",",
               "img"}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", " ", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{"pointsOfInterest", ",", " ", "p"}], "]"}], " ", ",", 
              " ", 
              RowBox[{"displayThicknessStatisticsPerPoint", "[", 
               RowBox[{
               "p", ",", " ", "stats", ",", " ", "types", ",", " ", "skel", 
                ",", "img"}], "]"}]}], "]"}]}]}], "]"}], ";"}], "&"}], ",", 
       " ", "\[IndentingNewLine]", "points"}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"lists", " ", "=", " ", 
      RowBox[{"Append", "[", 
       RowBox[{"lists", ",", " ", 
        RowBox[{"{", 
         RowBox[{"PlotJoined", "\[Rule]", "True"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"lists", " ", "=", " ", 
      RowBox[{"Append", "[", 
       RowBox[{"lists", ",", " ", 
        RowBox[{"{", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"350", ",", " ", "350"}], "}"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Apply", "[", 
      RowBox[{"MultipleListPlot", ",", "lists"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["displayStatistics",
  FontWeight->"Bold"],
 "\nDisplays an analysis of the statistics"
}], "Subsubtitle"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "displayStatistics", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"displayStatistics", "[", "stats_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"s1", ",", "s2", ",", "s3", ",", "s4"}], "}"}], ",", 
    RowBox[{
     RowBox[{"s1", "=", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"getTypeDurationGraph", "[", 
         RowBox[{"stats", ",", 
          RowBox[{"{", "1", "}"}]}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", "\"\<Point Duration\>\""}]}], "]"}]}],
      ";", 
     RowBox[{"s2", "=", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"getTypeDurationGraph", "[", 
         RowBox[{"stats", ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3"}], "}"}]}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", "\"\<Curve Duration\>\""}]}], "]"}]}],
      ";", 
     RowBox[{"s3", "=", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"getTypeLengthSummationGraph", "[", 
         RowBox[{"stats", ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3"}], "}"}]}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", "\"\<Curve Length Summation\>\""}]}], 
       "]"}]}], ";", 
     RowBox[{"s4", "=", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"getTypeDurationGraph", "[", 
         RowBox[{"stats", ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "5"}], "}"}]}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", "\"\<Surface Duration\>\""}]}], 
       "]"}]}], ";", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"GraphicsGrid", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"s3", ",", "s4"}], "}"}]}], "}"}], "]"}], ",", 
       RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
      "]"}]}]}], "]"}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Gets the statistics of all the images and stores them in a file\
\>", "Subsubtitle"],

Cell["\<\
Do[Print[i];
  Clear[slice];
  Clear[sliceSize];
  inputs=getInput[i];
  slice=inputs\[LeftDoubleBracket]1\[RightDoubleBracket];
  sliceSize=inputs\[LeftDoubleBracket]2\[RightDoubleBracket];
  Clear[inputs];
  finalResult=makeGraySkeleton[slice,1,255,1,3];
  finalImage=finalResult\[LeftDoubleBracket]1\[RightDoubleBracket];
  finalStats=finalResult\[LeftDoubleBracket]2\[RightDoubleBracket];
  Put[finalImage,rootPath<>\"/results/FinalImage\"<>ToString[i]<>\".nb\"];
  Put[finalStats,rootPath<>\"/results/FinalStats\"<>ToString[i]<>\".nb\"];
  ,{i,1,9}
  ]\
\>", "SmallText"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Loads the statistics from a file", "Subsubtitle"],

Cell["\<\
finalImage = Get[ rootPath<> \"/results/FinalImage3.nb\"];
ListDensityPlot[Map[#/255.0&, finalImage, 1], Mesh\[Rule]False, \
ColorFunctionScaling\[Rule]False, ImageSize\[Rule]{350, 350}];
finalStats = Get[ rootPath<> \"/results/FinalStats3.nb\"];
displayStatistics[finalStats];\
\>", "SmallText"],

Cell["\<\
finalResult=makeGraySkeleton[slice,1,255,50,3];
finalImage=finalResult\[LeftDoubleBracket]1\[RightDoubleBracket];
finalStats=finalResult\[LeftDoubleBracket]2\[RightDoubleBracket];
ListDensityPlot[Map[#/255.0&,finalImage,1],Mesh\[Rule]False,\
ColorFunctionScaling\[Rule]False,ImageSize\[Rule]{350,350}];\
\>", "SmallText"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Misc Tests", "Subsubtitle"],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{28,40},{29,40},{30,40},{31,40}},\
finalStats,{2,3,4},finalImage,slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatistics[finalStats, {2,3,4}, {},finalImage,slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{36,18},{35,18},{30,54},{48,35},{42,20}\
,{38,8}},finalStats,{2,3,4},finalImage,slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{30,52},{30,51},{31,51},{31,50},{31,49}\
},finalStats,{2,3,4},finalImage,slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{45,40}, {34,49},{31,32}}, finalStats, \
{2,3,4}, finalImage,slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{32,34}, {33,34}, {34,34},{35,34}, \
{36,34}, {37,34}},finalStats,{2,3,4},finalImage,slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{10,28},{32,26},{32,27}, {32,28}, \
{32,29},{32,30} },finalStats,{2,3,4},finalImage,slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatistics[finalStats, {2,3,4}, {}, finalImage, slice];\
\>", "SmallText"],

Cell["\<\
displayThicknessStatisticsPerPoint[{26,37},finalStats,{2,3,4},finalImage,\
slice];\
\>", "SmallText"],

Cell["DEBUG : Input 1, (28,40) , (29,40), (30,40), (31,40)", "SmallText"],

Cell["\<\
peakCount=getPeakCountForImage[finalStats,{2,3,4},finalImage,1];\
\>", "SmallText"],

Cell["peakCount = Get[rootPath<>\"/results/PeakCount1-0.nb\"];", "SmallText"],

Cell["\<\
mpc=Max[peakCount];ListDensityPlot[Map[Map[If[#>0,(mpc-#),0]&,#]&,peakCount], \
Mesh\[Rule]False];\
\>", "SmallText"],

Cell["\<\
filteredImage=Table[0,{x,sliceSize[1,1]-1,sliceSize[1,2]+1},{y,sliceSize[2,1]-\
1,sliceSize[2,2]+1}];
dMap=Flatten[Table[If[(finalImage\[LeftDoubleBracket]x,y\[RightDoubleBracket]>\
0)&&(peakCount\[LeftDoubleBracket]x,y\[RightDoubleBracket]\[Equal]1),{x,y},{}]\
,{x,sliceSize[1,1],sliceSize[1,2]},{y,sliceSize[2,1],sliceSize[2,2]}],1];
dMap=Select[dMap,Length[#]>0&];
Scan[filteredImage\[LeftDoubleBracket]#\[LeftDoubleBracket]1\
\[RightDoubleBracket],#\[LeftDoubleBracket]2\[RightDoubleBracket]\
\[RightDoubleBracket]=finalImage\[LeftDoubleBracket]#\[LeftDoubleBracket]1\
\[RightDoubleBracket],#\[LeftDoubleBracket]2\[RightDoubleBracket]\
\[RightDoubleBracket];&,dMap];
Show[GraphicsArray[{ListDensityPlot[filteredImage/255.0,DisplayFunction\[Rule]\
Identity,Mesh\[Rule]False],ListDensityPlot[slice,DisplayFunction\[Rule]\
Identity,Mesh\[Rule]False],ListDensityPlot[finalImage,DisplayFunction\[Rule]\
Identity,Mesh\[Rule]False]}],DisplayFunction\[Rule]$DisplayFunction];
\
\>", "SmallText"],

Cell["Put[peakCount,rootPath<>\"/results/PeakCount1-1.nb\"];", "SmallText"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ListContourPlot", "::", "\<\"arrayerr\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(slice\\) must be a valid array.\"\>"}]], "Message", \
"MSG",
 CellChangeTimes->{3.39838762915*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ListDensityPlot", "::", "\<\"arrayerr\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(slice\\) must be a valid array.\"\>"}]], "Message", \
"MSG",
 CellChangeTimes->{3.3983876293310003`*^9}]
}, Closed]]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Scratch",
WindowSize->{1057, 745},
WindowMargins->{{0, Automatic}, {0, Automatic}},
CellLabelAutoDelete->True,
Magnification->1,
FrontEndVersion->"6.0 for Microsoft Windows (32-bit) (April 20, 2007)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[590, 23, 42, 0, 83, "Title"],
Cell[635, 25, 63, 0, 49, "Subtitle"],
Cell[701, 27, 79, 1, 29, "Subsubtitle"],
Cell[783, 30, 395, 9, 52, "Input"],
Cell[1181, 41, 185, 5, 52, "Input"],
Cell[CellGroupData[{
Cell[1391, 50, 130, 4, 48, "Subsubtitle"],
Cell[1524, 56, 1630, 44, 199, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[3191, 105, 124, 4, 48, "Subsubtitle"],
Cell[3318, 111, 1611, 42, 199, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4966, 158, 120, 4, 48, "Subsubtitle"],
Cell[5089, 164, 730, 18, 112, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5856, 187, 448, 8, 257, "Subsubtitle"],
Cell[6307, 197, 7914, 174, 892, "Input"],
Cell[CellGroupData[{
Cell[14246, 375, 1168, 33, 172, "Input"],
Cell[15417, 410, 266192, 4426, 203, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[281658, 4842, 197, 5, 48, "Subsubtitle"],
Cell[281858, 4849, 498, 15, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[282393, 4869, 105, 4, 48, "Subsubtitle"],
Cell[282501, 4875, 459, 13, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[282997, 4893, 151, 4, 48, "Subsubtitle"],
Cell[283151, 4899, 2331, 66, 112, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[285519, 4970, 192, 5, 48, "Subsubtitle"],
Cell[285714, 4977, 673, 19, 52, "Input"],
Cell[286390, 4998, 649, 19, 52, "Input"],
Cell[287042, 5019, 1480, 42, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[288559, 5066, 154, 4, 48, "Subsubtitle"],
Cell[288716, 5072, 3532, 78, 552, "Input"],
Cell[292251, 5152, 221, 6, 31, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[292509, 5163, 154, 4, 48, "Subsubtitle"],
Cell[292666, 5169, 3532, 78, 552, "Input"],
Cell[296201, 5249, 221, 6, 31, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[296459, 5260, 151, 4, 48, "Subsubtitle"],
Cell[296613, 5266, 1260, 33, 192, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[297910, 5304, 154, 5, 67, "Subsubtitle"],
Cell[298067, 5311, 3027, 73, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[301131, 5389, 164, 5, 48, "Subsubtitle"],
Cell[301298, 5396, 916, 26, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[302251, 5427, 210, 5, 48, "Subsubtitle"],
Cell[302464, 5434, 1686, 46, 172, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[304187, 5485, 193, 6, 67, "Subsubtitle"],
Cell[304383, 5493, 852, 24, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[305272, 5522, 228, 6, 67, "Subsubtitle"],
Cell[305503, 5530, 1747, 47, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[307287, 5582, 159, 4, 48, "Subsubtitle"],
Cell[307449, 5588, 864, 24, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[308350, 5617, 366, 7, 105, "Subsubtitle"],
Cell[308719, 5626, 1888, 47, 112, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[310644, 5678, 198, 5, 67, "Subsubtitle"],
Cell[310845, 5685, 6502, 166, 252, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[317384, 5856, 171, 4, 48, "Subsubtitle"],
Cell[317558, 5862, 474, 13, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[318069, 5880, 323, 7, 162, "Subsubtitle"],
Cell[318395, 5889, 2334, 55, 332, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[320766, 5949, 149, 4, 48, "Subsubtitle"],
Cell[320918, 5955, 900, 26, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[321855, 5986, 183, 5, 48, "Subsubtitle"],
Cell[322041, 5993, 6347, 152, 452, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[328425, 6150, 279, 6, 67, "Subsubtitle"],
Cell[328707, 6158, 11865, 286, 672, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[340609, 6449, 157, 4, 48, "Subsubtitle"],
Cell[340769, 6455, 16121, 367, 852, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[356927, 6827, 140, 4, 48, "Subsubtitle"],
Cell[357070, 6833, 3442, 90, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[360549, 6928, 173, 5, 48, "Subsubtitle"],
Cell[360725, 6935, 914, 24, 152, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[361676, 6964, 122, 4, 48, "Subsubtitle"],
Cell[361801, 6970, 900, 22, 172, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[362738, 6997, 137, 4, 48, "Subsubtitle"],
Cell[362878, 7003, 862, 22, 172, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[363777, 7030, 136, 4, 48, "Subsubtitle"],
Cell[363916, 7036, 3914, 101, 312, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[367867, 7142, 116, 4, 48, "Subsubtitle"],
Cell[367986, 7148, 2180, 51, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[370203, 7204, 182, 5, 48, "Subsubtitle"],
Cell[370388, 7211, 13292, 318, 1092, "Input"],
Cell[383683, 7531, 26, 0, 31, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[383746, 7536, 145, 4, 48, "Subsubtitle"],
Cell[383894, 7542, 5166, 133, 292, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[389097, 7680, 622, 10, 162, "Subsubtitle"],
Cell[389722, 7692, 16591, 348, 1432, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[406350, 8045, 142, 4, 48, "Subsubtitle"],
Cell[406495, 8051, 2779, 69, 212, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[409311, 8125, 280, 6, 67, "Subsubtitle"],
Cell[409594, 8133, 19114, 442, 966, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[428745, 8580, 223, 5, 48, "Subsubtitle"],
Cell[428971, 8587, 4017, 103, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[433025, 8695, 44, 0, 49, "Subtitle"],
Cell[433072, 8697, 130, 4, 48, "Subsubtitle"],
Cell[433205, 8703, 2231, 60, 232, "Input"],
Cell[CellGroupData[{
Cell[435461, 8767, 132, 4, 48, "Subsubtitle"],
Cell[435596, 8773, 3099, 79, 232, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[438732, 8857, 113, 4, 48, "Subsubtitle"],
Cell[438848, 8863, 1236, 35, 179, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[440121, 8903, 115, 4, 48, "Subsubtitle"],
Cell[440239, 8909, 1418, 40, 179, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[441694, 8954, 187, 5, 48, "Subsubtitle"],
Cell[441884, 8961, 3038, 81, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[444959, 9047, 187, 5, 48, "Subsubtitle"],
Cell[445149, 9054, 4335, 110, 272, "Input"],
Cell[449487, 9166, 26, 0, 31, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[449550, 9171, 112, 4, 48, "Subsubtitle"],
Cell[449665, 9177, 502, 15, 79, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[450204, 9197, 114, 4, 48, "Subsubtitle"],
Cell[450321, 9203, 520, 16, 79, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[450878, 9224, 138, 4, 48, "Subsubtitle"],
Cell[451019, 9230, 400, 12, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[451456, 9247, 200, 5, 48, "Subsubtitle"],
Cell[451659, 9254, 2639, 64, 212, "Input"],
Cell[454301, 9320, 811, 12, 69, "SmallText"]
}, Open  ]],
Cell[CellGroupData[{
Cell[455149, 9337, 183, 5, 48, "Subsubtitle"],
Cell[455335, 9344, 4610, 109, 252, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[459982, 9458, 167, 4, 48, "Subsubtitle"],
Cell[460152, 9464, 1954, 46, 252, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[462143, 9515, 135, 4, 48, "Subsubtitle"],
Cell[462281, 9521, 3705, 85, 412, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[466023, 9611, 139, 4, 48, "Subsubtitle"],
Cell[466165, 9617, 34165, 771, 1635, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[500379, 10394, 40, 0, 49, "Subtitle"],
Cell[500422, 10396, 133, 4, 48, "Subsubtitle"],
Cell[500558, 10402, 1383, 32, 272, "Input"],
Cell[CellGroupData[{
Cell[501966, 10438, 129, 4, 48, "Subsubtitle"],
Cell[502098, 10444, 1754, 42, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[503889, 10491, 138, 4, 48, "Subsubtitle"],
Cell[504030, 10497, 2204, 54, 252, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[506271, 10556, 115, 4, 48, "Subsubtitle"],
Cell[506389, 10562, 1954, 48, 292, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[508380, 10615, 167, 4, 48, "Subsubtitle"],
Cell[508550, 10621, 1860, 48, 212, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[510447, 10674, 174, 4, 48, "Subsubtitle"],
Cell[510624, 10680, 1980, 50, 212, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[512641, 10735, 148, 4, 48, "Subsubtitle"],
Cell[512792, 10741, 2503, 70, 92, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[515332, 10816, 165, 4, 48, "Subsubtitle"],
Cell[515500, 10822, 3069, 74, 352, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[518606, 10901, 210, 5, 48, "Subsubtitle"],
Cell[518819, 10908, 2801, 79, 132, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[521657, 10992, 160, 4, 48, "Subsubtitle"],
Cell[521820, 10998, 7667, 189, 332, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[529524, 11192, 173, 4, 48, "Subsubtitle"],
Cell[529700, 11198, 663, 18, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[530400, 11221, 155, 4, 48, "Subsubtitle"],
Cell[530558, 11227, 4203, 100, 452, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[534798, 11332, 132, 4, 48, "Subsubtitle"],
Cell[534933, 11338, 1957, 55, 132, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[536927, 11398, 94, 2, 28, "Subsubtitle"],
Cell[537024, 11402, 586, 15, 219, "SmallText"]
}, Open  ]],
Cell[CellGroupData[{
Cell[537647, 11422, 55, 0, 28, "Subsubtitle"],
Cell[537705, 11424, 306, 6, 69, "SmallText"],
Cell[538014, 11432, 331, 6, 69, "SmallText"]
}, Open  ]],
Cell[CellGroupData[{
Cell[538382, 11443, 33, 0, 28, "Subsubtitle"],
Cell[538418, 11445, 140, 3, 28, "SmallText"],
Cell[538561, 11450, 98, 2, 28, "SmallText"],
Cell[538662, 11454, 155, 3, 28, "SmallText"],
Cell[538820, 11459, 148, 3, 28, "SmallText"],
Cell[538971, 11464, 136, 3, 28, "SmallText"],
Cell[539110, 11469, 160, 3, 28, "SmallText"],
Cell[539273, 11474, 159, 3, 28, "SmallText"],
Cell[539435, 11479, 100, 2, 28, "SmallText"],
Cell[539538, 11483, 111, 3, 28, "SmallText"],
Cell[539652, 11488, 73, 0, 28, "SmallText"],
Cell[539728, 11490, 93, 2, 28, "SmallText"],
Cell[539824, 11494, 77, 0, 28, "SmallText"],
Cell[539904, 11496, 127, 3, 28, "SmallText"],
Cell[540034, 11501, 1001, 17, 124, "SmallText"],
Cell[541038, 11520, 75, 0, 28, "SmallText"],
Cell[541116, 11522, 216, 6, 70, "Message"],
Cell[541335, 11530, 222, 6, 70, "Message"]
}, Closed]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
