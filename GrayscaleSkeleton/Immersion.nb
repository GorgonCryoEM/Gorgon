(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[   1084063,      21589]
NotebookOptionsPosition[   1071595,      21202]
NotebookOutlinePosition[   1072002,      21220]
CellTagsIndexPosition[   1071959,      21217]
WindowFrame->Normal
ContainsDynamic->False*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Grayscale Skeletonization", "Title",
 CellChangeTimes->{3.407087037187301*^9}],

Cell["Connectivity Functions, and Skeletonization", "Subtitle",
 CellChangeTimes->{3.407087037187301*^9}],

Cell[TextData[StyleBox["Initializations",
 FontWeight->"Bold"]], "Subsubtitle",
 CellChangeTimes->{3.407087037187301*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "rootPath", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "rootPath", " ", "=", " ", 
   "\"\<C:\\\\_WashU\\\\ssa1\\\\source\\\\GrayscaleSkeleton\\\\\>\""}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.398387709633*^9, 3.398387725028*^9}, {3.398387818031*^9,
    3.398387818158*^9}, {3.3984405071139064`*^9, 3.3984405113014064`*^9}, 
   3.407087037187301*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "gaussianRadius", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gaussianRadius", " ", "=", " ", "4"}], ";"}]}], "Input",
 CellChangeTimes->{3.407087037187301*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getProteinSlice",
  FontWeight->"Bold"],
 "\nGets a slice from the protein data set"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037187301*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getProteinSlice", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getProteinSlice", "[", "i_", "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"vol", ",", " ", "maxVal", ",", "minVal"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vol", " ", ":=", " ", 
       RowBox[{"Get", "[", 
        RowBox[{
        "rootPath", " ", "<>", " ", "\"\<data\\\\proteinVolume.nb\>\""}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"maxVal", " ", "=", " ", 
       RowBox[{"Max", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{
         "vol", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], "]"}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"minVal", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{
         "vol", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], "]"}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"Map", "[", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Round", "[", 
           FractionBox[
            RowBox[{
             RowBox[{"(", 
              RowBox[{"#", "-", "minVal"}], ")"}], " ", "*", "255.0"}], 
            RowBox[{"maxVal", "-", "minVal"}]], "]"}], "&"}], ",", " ", 
         RowBox[{
         "vol", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], ",", 
         " ", "1"}], "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{3.407087037187301*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getVolume",
  FontWeight->"Bold"],
 "\nGets a slice from the protein data set"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037187301*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getVolume", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getVolume", "[", 
    RowBox[{
    "fileName_", ",", " ", "xRange_", ",", " ", "yRange_", ",", " ", 
     "zRange_"}], "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"vol", ",", " ", "maxVal", ",", "minVal"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vol", " ", ":=", " ", 
       RowBox[{"Get", "[", 
        RowBox[{
        "rootPath", " ", "<>", " ", "\"\<data\\\\\>\"", " ", "<>", " ", 
         "fileName"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"maxVal", " ", "=", " ", 
       RowBox[{"Max", "[", 
        RowBox[{"Flatten", "[", "vol", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"minVal", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{"Flatten", "[", "vol", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"Take", "[", 
        RowBox[{
         RowBox[{"Map", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Round", "[", 
             FractionBox[
              RowBox[{
               RowBox[{"(", 
                RowBox[{"#", "-", "minVal"}], ")"}], " ", "*", "255.0"}], 
              RowBox[{"maxVal", "-", "minVal"}]], "]"}], "&"}], ",", " ", 
           "vol", ",", " ", "1"}], "]"}], ",", " ", "xRange", ",", " ", 
         "yRange", ",", " ", "zRange"}], "]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.407087037187301*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getImage",
  FontWeight->"Bold"],
 "\nGets a slice from a grayscale image"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037187301*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getImage", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getImage", "[", "imgName_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "picture", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"picture", "=", 
       RowBox[{"Import", "[", 
        RowBox[{
        "rootPath", " ", "<>", " ", "\"\<\\\\data\\\\\>\"", " ", "<>", " ", 
         "imgName"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"picture", "\[LeftDoubleBracket]", 
        RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.407087037187301*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getInput",
  FontWeight->"Bold"],
 "\nGets the input \n\t1: Protein Sliced at 32\n\t2: Protein Sliced at 20\n\t\
3: Random.gif\n\t4: Blobs.gif\n\t5: Dragon.gif\n\t6: Letters.gif\n\t7: \
Rings.gif\n\t8: XWithGraySpots.gif\n\t9: Vessel\nAlso defines sliceSize which \
is a hash map of the pixels that span the image... The rest of the pixels \
make up a blank boundary which simplifies the calculations."
}], "Subsubtitle",
 CellChangeTimes->{3.407087037187301*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getInput", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getInput", "[", "i_", "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", " ", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"inputImage", ",", " ", "sliceSize"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Switch", "[", 
       RowBox[{"i", ",", "\[IndentingNewLine]", "1", ",", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Protein32.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "2", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Protein40.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "3", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Random.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "4", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Blobs.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "5", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Dragon.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "6", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Letters.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "7", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Rings.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "8", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<XWithGraySpots.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "9", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<vessel_1.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "10", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Basin.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "11", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Basin2.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "12", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<BinaryText.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "13", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<BinaryMan.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "14", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Question.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "15", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Fingerprint1.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "16", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Fingerprint2.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "101", ",", " ", 
        RowBox[{"inputImage", " ", "=", "  ", 
         RowBox[{
         "getImage", "[", "\"\<Protein32-surfaceRemoved.gif\>\"", "]"}]}], 
        ",", "\[IndentingNewLine]", "102", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<Protein40-surfaceRemoved.gif\>\"", "]"}]}], 
        ",", "\[IndentingNewLine]", "103", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<Random-surfaceRemoved.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "104", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Blobs-surfaceRemoved.gif\>\"", "]"}]}],
         ",", "\[IndentingNewLine]", "105", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<Dragon-surfaceRemoved.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "106", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<Letters-surfaceRemoved.gif\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", "107", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{"getImage", "[", "\"\<Rings-surfaceRemoved.gif\>\"", "]"}]}],
         ",", "\[IndentingNewLine]", "108", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<XWithGraySpots-surfaceRemoved.gif\>\"", 
          "]"}]}], ",", "\[IndentingNewLine]", "109", ",", " ", 
        RowBox[{"inputImage", " ", "=", " ", 
         RowBox[{
         "getImage", "[", "\"\<vessel_1-surfaceRemoved.gif\>\"", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"1", ",", "1"}], "]"}], " ", "=", " ", "1"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"2", ",", "1"}], "]"}], " ", "=", " ", "1"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"1", ",", "2"}], "]"}], " ", "=", " ", 
       RowBox[{
        RowBox[{"Dimensions", "[", "inputImage", "]"}], 
        "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"2", ",", "2"}], "]"}], " ", "=", " ", 
       RowBox[{
        RowBox[{"Dimensions", "[", "inputImage", "]"}], 
        "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"inputImage", " ", "=", " ", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"x", " ", ">=", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"1", ",", "1"}], "]"}]}], " ", ")"}], "&&", 
            RowBox[{"(", " ", 
             RowBox[{"x", " ", "<=", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"1", ",", "2"}], "]"}]}], " ", ")"}], " ", "&&", " ", 
            RowBox[{"(", 
             RowBox[{"y", " ", ">=", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"2", ",", "1"}], "]"}]}], ")"}], " ", "&&", " ", 
            RowBox[{"(", 
             RowBox[{"y", " ", "<=", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"2", ",", "2"}], "]"}]}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"inputImage", "\[LeftDoubleBracket]", 
            RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], ",", 
           "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"x", ",", " ", 
           RowBox[{"1", "-", "gaussianRadius"}], ",", " ", 
           RowBox[{
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}], "+", "gaussianRadius"}]}], "}"}],
          ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"y", ",", " ", 
           RowBox[{"1", "-", "gaussianRadius"}], ",", " ", 
           RowBox[{
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}], "+", "gaussianRadius"}]}], 
          "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]",
       
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"1", ",", "1"}], "]"}], " ", "=", " ", 
       RowBox[{"gaussianRadius", "+", "1"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"2", ",", "1"}], "]"}], " ", "=", " ", 
       RowBox[{"gaussianRadius", "+", "1"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"1", ",", "2"}], "]"}], " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Dimensions", "[", "inputImage", "]"}], 
         "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
        "gaussianRadius"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sliceSize", "[", 
        RowBox[{"2", ",", "2"}], "]"}], " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Dimensions", "[", "inputImage", "]"}], 
         "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "-", 
        "gaussianRadius"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"inputImage", ",", " ", "sliceSize"}], "}"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.399300820164509*^9, 3.399300848289689*^9}, {
   3.3993015453566504`*^9, 3.3993015523098197`*^9}, {3.399317356035963*^9, 
   3.3993173605828667`*^9}, {3.406922250312436*^9, 3.406922262015561*^9}, 
   3.4070870372029257`*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "slice", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", "sliceSize", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"inputs", "=", 
   RowBox[{"getInput", "[", "9", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"slice", "=", 
   RowBox[{"inputs", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{"sliceSize", "=", 
   RowBox[{"inputs", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
   ";"}], "\n", 
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"GraphicsRow", "[", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListContourPlot", "[", 
       RowBox[{"slice", ",", 
        RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
        RowBox[{"Contours", "\[Rule]", "5"}], ",", " ", 
        RowBox[{"ColorFunction", "\[Rule]", "\"\<GrayTones\>\""}]}], "]"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"ListDensityPlot", "[", 
       RowBox[{"slice", ",", 
        RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
        RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", " ", 
        RowBox[{"ColorFunction", "\[Rule]", "\"\<GrayTones\>\""}]}], "]"}]}], 
     "}"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
  "]"}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", "inputs", "]"}], ";"}]}], "Input",
 CellChangeTimes->{
  3.39930001179996*^9, {3.3993008660554276`*^9, 3.3993008661960535`*^9}, {
   3.3993015585286093`*^9, 3.399301558637985*^9}, 3.3993022786738434`*^9, {
   3.3993035366506443`*^9, 3.3993035850728292`*^9}, {3.3993114115760436`*^9, 
   3.399311411638544*^9}, 3.3993116924997163`*^9, {3.4065545788194394`*^9, 
   3.4065545811006894`*^9}, {3.4065547402725644`*^9, 
   3.4065548352725644`*^9}, {3.4065562948350644`*^9, 
   3.4065563143194394`*^9}, {3.4065564100069394`*^9, 
   3.4065564107413144`*^9}, {3.4065564556163144`*^9, 3.4065564852725644`*^9}, 
   3.4070870372029257`*^9}],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[GraphicsComplexBox[CompressedData["
1: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
mOeneoNxcNXRTjJg9uOwXSX+Q5/xGmxrYO3/gf/Iftr/A/9Rbga3gFvBbeB2
cAe4E9wFjoG7wXFwDzgBToJT4DS4F5wBZ8F94Bw4Dy6Ai+ASuAyugKtgU88e
WPt/4D+qD0AHa/8P/Ef1ydDB2v8D/1G9wbqaqjdYd0r1BusyqN6gbrHqDer6
qd6g7o3qDfLCVW+QN6V6g3nFqjeYd6M6+mUMmP3G7McR/9HjG/hMrcFW+3/g
P9ouG1S/n/b/CDeDW8Ct4DZwO7gD3AnuAsfA3eA4uAecACfBKXAa3AvOgLPg
PnAOnAcXwEVwCVwGV8BVsKlnD6z9P6KDtf9HdLD2/4gO1v4f0cHa/yM6mOuI
c11frrPJde+4DhXXheE6DaybzjrGrCvKOn+su8U6OKxLwTxx5m0yj4p5DZxn
zHl/g9APbMAcp2K/8SD4iAEzzqHv/J9tlznh6+GP7x4bYv5f+JL7X3wkZr44
8B+Hv/FJi/LSz4M3BiuftkvpnWHPDFHeevlKQ++qDTWjw1eXnu/774KX48ce
DV5j8fu6zXWbdZ878+oW5Rc+OqBw8dzByr8uvn/ZFyscx1rWPG7g8iHKC8IT
DDXrvJc55+VnYzh/HOeP4/xxnD+O88f1/JZ7cL4enK8H5+vB+XpwvgTOl8D5
EjhfAudL4HxJc9nMpkd/vK5F+ej/vLmsdeFg5Z22u31F32pDlKd+csp6W9zm
OHbQDmMP2kHOlzLrTrjl4i+WtCifMOTVp1dsOljZbocoH/pRV7LpesdfPz9n
h+aFcr40/r9p/H/T+P+m8f9N4//ba+ZOuvaqjf7VonzK1rustNoZg5UfPbBr
uy8XDlFe7Yz37nutwx0fHv6pcMa88ck2K+55ebDyEeEbQ80dL/1+9xtul+dR
q1l2+Bf3rdjGcdOoY5sHmhz//W/BK6Mc3m6DHdutPD+GmB1aj9++dbUy9Kq5
/Tb/1TtY+asv/dc+Q5QnBK8bhprZiyZeft8qFT1+6bHfb/DaExWcz+D+Nri/
De5vo/f3M9+Unvnm3mr9+fzn2ZBbzjwu/m6L8nfX9N330VODlV+88M1vr7lz
iHKw+06Xy+fdb17oneP/DFaOnXyF/zNEefGyFUcuWzHUTFv4+a7HXi3PT/n9
/ealrZ/6z9b6+/rNdj9dve1PVw81xWuPKVy7cn/9/v7z9OQVo5f8+PvByju8
/eujuy6Vv2/ALH17vP8zWPmrwdv6P07vnHGW/zPU/OPye4//evgAzj/JfDJp
xyMXXT9YecuRw/23hpr/3rHnf++4Afv7z+vL37rq8yd2HKz8nyMP3WPKs/L/
n2zefMN//WGw8uTg9bD8PZPNRRcGr8HK/eFLPt8pZsmuF1yz6wVDzPtbLX1v
q6Xy/JffP8UcdskHh17ywVCzX9u/9207YUq97j8vtrtxxF92X314xDHjfwvv
XTJ1I+Unyqfd9PoLw5SvXf+8w4dv32rKYx7d9OiS+L3Epd3m4zl7H/bChcPN
FlccNGa3LWKqr/bBjvtUVhunfPv4Tf65we2Ofzz5Hz+c/I9unC9j0uFrmPIF
fw1e8vdmzTfB4+4fw8wXnwevjB7/3YxLv51xqeOfrprn/zgefemBx4zbL6ts
tyWzyTaTDl3nvWGm67bzn91moAi9bI5ZetnED9dqVbbb4cpH9m/77NBvNzK7
Xb25/1PS4x9Y75faer+UcL6KaRp5xJcPrO78Ym721Z3OnjNM+Zw5wRvDlQM1
++pGZugfDnhuysFlPd9zU/x3virj/FWz/LnxO/48Ypjy0N3mrrTv5XI+Y9bc
d/PFAxdFun//vrzuk7evvP8wc+9FR5+/6ZdGzzf3gSfGHXK3qT+/fz/evSS4
IIaZHU9NPtK6Y7/q464+Z8HMcf31+/v345Wn9Nzz4RUbKfvgvzPMrBFeaNjf
vx/fv2Sq7wwbKT+437zR8RXDlC8N5GPd/Rluthtez5f9r/vxvsA4hyuHPjpL
Pp/JZlj42kh5//Alv29ydD8NB8vvn2K2v/fcI9e9TvafEvmIi78+OPLkWcdv
NyLibrPVTav6PyOVw/v0304/6cTg1WYWXb/ead9dLveLtPvi0f0xUvn6Ix96
re/6EWbj8c1TX7u5W/cPrurMOeOVT3rt3Gv/cFJc+cwHfmy96IwJOH/WrLLf
HP+nTXmv0OhGKL88ud3/GWmWrnjTf2JmcHyf2eL7/FVdrSNN4Kqdj2VV/9cW
R/g/jn8I7v+JWRyfN2t8PvquM5ZvHHHBfH5i8e3T7xqhvPvjF9xyzfUjzeNd
F+5xy2N5HF80n3y9bm5Bb5vyPlctOrG61wjl7/7fg6/Er91Y+dDV28YNf3uk
qcYXrHbJXgU93ynnHLVkq28KOH/JbJTY7IXk+c4/cle+8dBLd45Q3nzILrcd
/srGyvuf9OVV7T+ONOfv/eN5e/9YxPnK5qR57ededP4I5Z3Xv9R056Pv178/
x4bx20jz3DYDh6+xp8Hx/eb+4Rt+dNTjI8xu21+9ZMhLTs8u+vqPx1yD/f37
96Pg9vtwhAmegl/9v37Vw+9rjX6cv9tsfcaD38W2dtffLk8O2/+Ri0Ypl7ef
98qG3zu95ftj/beEe8xO448+/ux7RinPfOP8f2++iuPEGTc0DZ/bbk7uumDR
FXp9dph9H1qn7/V9JiiHG9NTzx+Cz5xYz/71+vz7wQ3ors/bJl7x+122dXzE
fnet/cO7jiff/vTSE3cbpbzOD+/uM+xLYRl/aa/nQdSF8ya26mOXbrGlu77v
WLpO698+cjzlkAVn/nKo7F8wCz+67rhzL2lXHvf0gae+vbXoRbPvtNfXP/jh
UebUwFZPketT/r8l8/Fl6/o/7Wad59v9nyJ0/3m1y5VLb91klPKCZa9e+8Ue
7ZGvlLB/xcY5e46q5xvazXbhq6L7L3szeFXqj/ev39A/sqOsvo1R/bJL/ddI
U7+/fz1/NiZ4ELebD32XPfRNp4d8iePrvtjjxYOz/Th+ignDuc5RZmLw8dw4
uV7X/hD5/0w1o+at8fU57RF7U014ea4j+jQzdHGm6/mVRZ+m5/90k7s2Pu4T
6R+R398TxSujlS++KHiJnjCnbfbkDU9PH62cO3HjZccd02GKN29YvHlTuZ47
7X3fMVG5JdjhK8eTgkB9j4RyGIe/5Xj98JVTtttC9D3L7y+a/iXrHPCacdxh
XxGXzLHrVX5Yfsxo5YDWq3SYg8NXEecvmxtuDxpWo5X9oMCPDDrM6e/kTn/n
rhL2r2D/iu5vuWpa9/7jpZN26zD+l/1xcaOKHu/DdxefVsH5jLk/CNd+kuvD
QO83bx3WcuO0tzpMEFX0Pgjd90f5fOZ9+vDcTyf3q25903H4nL9gMo6fat7N
Bf/T0fY6GDa1Xh8UXT9XRf8//3raavfgE5D///SondlhgnBv6MXT9Hh73U3H
+RLm3PbgAh6jHMaFzzl93d2X3fT9OsLJ6H4eo1z79He3rv6k06/uOO/khd2d
UX+SXE9dpnrlw8/EvnJstylzSH7ViUuWjzEH3b+J/5NU/blh1z877HrHk4Nm
1HopHJ+z92lPp9ny0QH/iu5TfWoY8Oawv4xvR3//ZXnoRXsfbTjGHBB+ECXV
1xg+9+OlpYry6EW5637+2vFPRweBfrX+fL5/BdHZvm1jbHv1j0b1StBMajL1
+/vX1zkvz/dbFNHft5z6FLPhqXfe8syoSPciv9pJvo+p1i8PEn2qCZsVuzn+
4aiR/o+7nux1OEbZ7ifX4zQzP//P47Y9bYzy469O+GW32XL8dBOGn/u67//V
D868YLt7xyp/tXkQ0Lnve1hyh4dPXH+s2WX6k/8dtoF8vzHz4k/nrnT7Ysf9
N2w7bv4njh84ZPzPbQtSyj74H4Vju81F16/8/nz0PY617Z+hOewv10NXdL3m
Vd8hNNAC9i+ZV4KvZ52x9j6/taj6J4u+qfxrTEX5zSV37dT0kuPQ9n6oKget
sp02NcoPru437H7n2G/s+i1ex0v67vtozt79yvJ5bnDDTfkzF41Tzq4evBMz
vjntN+9K+fwkrk9H9+84c+TzY/2flOrWjx3bdoXj/UPDS9ef75BcPfufp403
x0Xts7zq4d8zOo/9iyZojV9+byyK7wvQS+aiM4KGxrjo7y5Cr5o9gsOPj1nf
260C3ZhOvzVQOXqc8pk+/dwkn1+/2TDsWIh0379t+yumbNtBcvyAeeu9Fr+p
Oy7yYfk+us3OwatroP736/wFl7fx1JP+69TofGe6PI7Q7292vOWwpeuv+r7j
C1e/+5NdnkDeh/99279X2mnpyFfGmwU/Jj5/eYx8f3FzyOnmuc2PcXzJ6Pm3
/We545v9o54op5XvCdrpFzi227zJhw/ibnu/vJdTPeQDc9i/YDJhA3y8+XK/
NbeZ+0Be9cFhh0Ee+xft5zO725x88SsnXbywoPq/Jx922X4HlbF/1faHvSH/
fxP5d8S+/15SPPjz1+92nNn1+atmnN1txgRf4AKD8/Wbm79fx3/iRZ/vs04P
xxPm92P/AdvPkZfzD5in8x9ctP/T420/xLgB3f+aR3d5Y7uTB+qP968H23/k
f19v73LOD39FHs9ysP/9Wj+boBza2h/i0f0u32ePyQYPktFp5SuCy2Q3x+sG
/5+bHIeX+QrHdpuP+rEn2Ofpv3Kq27/DcdhP05HD8QWT/eOcLTd9KW62mbDX
g7/cmFd97l+W/eftrjz2r5jfh6+4yU885YdVFpRVv2nZbjsuuqeM/atRe0U+
HxP1F02w/vxNVfcPr6s9qji+3+w0ai0/dJB5e/2R78XN8LDjth/7D5h4+EFH
n7//fdt2VNze/zsPYP9Z5vzzglfcvBN0Iy+dWa97s6LrIq787D0PtPx4/QTr
Z91uHa+X1gn2dDz7z8/c88A5WOfLv54mfjvg/0wwsdDg5XqQuKvXDL+q3//p
MZu0TPF/0qpfE/YLO/5l6Rc/L/3Csf38enG+nG33z5ho76fn+1S3/f455ePj
wSfteI2woZZXDrvZZjkOv78dy8qhP37keEjYAVFVPiJ8gDi2n2e/HY/YyX1/
/c2r+D/SDpplfeaVifr52zh5ov3813TrplmfwTpq/v0XNpP+nLD7z5TPO2n5
Hsfy+X8zYdnXE5YlzD4rjfV/0qq/tOg0/8dxORxgSeP4nFnhf0qLJsrvz5u/
BM3NsY6v/vyJHccf7fiWwf0PzXhDuBDdp45XPXTmmUuOdRxexu8nzG6bXvja
i9fI95E0Kw+9q7Zqj2O7LZqw+f9iwky+/9XCtxcWVH9n1dS4bdodD4RGUlTe
Mjn/wY3mlJWHxd467Zqnyzi/sdfVWQmzx7qdv99+/6rqb59+1+jPNX6O9pfx
fv//c/fRf9m6f7Z8/inzzNSg58LxXzqCDv20sr0PHd+2V2JK5RPH8vmE8fXU
ZD1f4z4Pe/85/v115/o/jo/f5sPjtvkwGbVXCjh/yZw0+6GDbi0lldsP2Gz5
KX+P+JVi/f4JsN9eDuPIB5ImGCUYeURJddsOL2P/atRejK7Xv1VUD8ctTqkq
dwYdqes6Dtuz+vm7uoW7hQM50d97Geuqzoue70kzNXg9grpjvn/ZcaCkee/T
IYsz17i81F2D16vIU/V9b7OtU6t8siilz0H7vvOt4Gmc/yBl/WTDBPSUaQuN
NBX5VRJ62oTh5dcpO260d0rfD+PWXxyHt+sR6Xr+JY3zFe3z/o/u+94lefG/
DhjieHb4huNQfsF9v9a3HVvfdmx9OxX1g8n3L7+/YsdPCvJ9lKFX7d9dSpkb
pwU9HRXoJnoupcz5g1cec+9zVdVf2Xg//5au1u/vzY2+F/96mvDK0RMWoq6u
f70EvWCb3JWKfId1d+eZA8KAytWFCu/7E1PmyCfuPOKJO1Gnzsw35x257nVr
POLqKNjPwXE4TvdgyvrKDv83z7k76JAY667HoHfivXNSZuQDR66y4s9u//D/
+yWOX+44tLNnoA+SOCEdbSVuledqFKfMlrhugur2/uwBJ3B8dJ2/EP2+9mS9
vtxx2Gw/IqUcjF48tV5aOaBTzknXH+9fXzYOcNfTUWsFMwIcfzSt+tNzZ7jr
acFjh2758FjHIZ7puL87iPTc9WX7nR2HX/MRju3zOm0OeyGYSCDXW6/583FB
gOE43HhRe2DTtHLYPPhnxNNN/f5+PPjm02f+5c50WnnWUb+/f8Flcny/9fsu
8PHg9yOO9eP8A+aOvRf+fHwmrdwafNHnOw4ex6v8KOcbMNPDDkfHtt8hHfUP
DuD8k8zYsMMzrWzHF+X4SeaA1cb7P46f3u44/8fxuH8ui/1zWTqKgybh/FF/
pX4/k+3fcajjuuvPm1z/ffpc9336LN+nPX6KudoEHT+ON/jmoOMfvjdtHn4o
eEl/qXy/U0zf7dfN2VPaNT5f8tWpu5TekeOnmpnBsP4Bjh8YsscDQz6V/adG
/T6Ow37ym2X/aeaNztWOOneSY9s/73jzcEJUOhrnlP5a+fummU3CV1r52WeC
V9psHL6m1e/vX5BTT7p0k7d3SZtDgtcP0L3pZmDEi/0jNksrh7/2s3Q0n2g6
zjcjGpdL1/NJcvwMc1Ti+dMHNzm2/Y+Olyx+ZsK+H6ejuHEGzj/T3H/rJste
jaWV/xP0s1+YNkH398NPY39vppmy4Zze5yanle966/iN9rrLrXN+yOx1Ph2x
qeOVD//3i7U33TrEdn6QYzsfyK0TavuDI76M6xbPNuF0iSzW1borep6X3Do3
dlwfdd/951XY/fFD9Hkc7fTQr39lnfh59j5619UxzAXdeIelo7gWdVX959c2
4UC7e569dcTaT/97edp+b+NQh0Pmi+r9FfEB4EfTpiV4beaO3yt8/d+6HuH/
ayX3PAz/X0emze2/v2Hzv3/n9t/h5oXxIZ84bm5aZaWjlju+b5t/vPzJfxzv
HpzgCfy+QVE/zFny/5d+OZkXEDf+07fl3ot67XNn7fHQE/XH++0AO+/UsZ13
Kpy2/SKTes30fYInekrPt8Hr0/x3HNt+hLSy3eaj/rtec2fQHblVTvXw/Sfz
2N+YXDjBolfZ+od7PtnxAce2P92x7Y9wz6eP1/1+qz3Xdrz9/f955NkDHL+y
9+3J3jfk+H7z1s73N4+f6fjHR1c5bMmN7nkU+vWmjsP/x/Wy/4BZ7ZgHtku0
Or7wqZ1vfXUPx4nWtf1d3PPHfk+OdwnjHMfhpibHTzLv3ho0tBx/vWWf3zRz
z5vB+/89vSDpuLrlShd+f7bsPzkaHwafJ/tPMT8+9Lszqm2Od677e6aYF5uC
jmr3PLHjd47D3Q9yHH59d8vxU82+G75/8O05xz/+YcJeDx7h+KhrD9jpGf3/
TjWzgtdajm1/l+OwnXOdHD/NXPr2WaMWTnM87OgDbztUPh//efLqLX984rwJ
jvf/4OmLiwc7Xrctt89y+f3+82WlPYc/e83vHE+bt8+3q0xzHE7LOtXx8xu2
lR94zj1/Pv7pgCPvqTi+d+iba31xnOPTe6ddMPop9/y5bPhE/xHq2M4Hcdy6
SvAEleNnmGHnrLnhF9McP7PuURs9cZl73oTDUWs43iiYvrKl4192m33V6n9z
z5sLVz5p81faHNvxEseBOv02OX6WCbtjM47D58IRjkP/eEiOn2U2DS9gx29s
d/IRL53meFH4hhw/26SOPDeRXcvx2R/9/dibt3T8bTi/yPHmAX7vnl82bnAc
zvfd03EpeN3bG7XzsE6t/7xb86zqP27R63WOee7z7T/5r+f4r7OOHbvqY3K+
OXae13qONwkHphyH4ydnOX7xxsmfzXxRzjfX9ps3Ow77mbdwHHarX+LY9ofL
+eaaYJQiv5Ljg2a899Bd2zq+yG8F9N3nns92nqNjO8+x195nr3HdFn//oFtr
H/e8/tO3V4789UM53m9PHj58+7vHOrbzBx2H81vfcs/v+eHL8T13B69e896u
lxcP0udnxoTNt48d7/PJrcOWLXOcid934ob/cfzzHo+smPa4Y7uNRfFrxlwc
dHNcJOOeMi8uGpc6PmPCaSrzxkGPR+O/mei6Hw+9x7aXiu55a59fwknMa09F
46zC6ag/R7g36td0/HLY7+nY9otKXqk8f+XvyZhLgubCSZlonmCv6k9UTnhx
lXccHx5M0zgsg+NzZm4w3fjNTDRftQ963vZzne6e9w+PCGZMZczJ5saTzI05
3X/i+5v6PzkcXzCJw4MZERnl0cF0iB0cD755s4cXrC9cNLce+GHfVidkzIMb
zbl428MLer6jN3hz0ce/OA4fS8cUlcONf7+/GnwcI9z9HbYHJrh1Ge/9p//S
72+ujTe2dusW2XHdDK7PLK7PLK7PLK7PLK5P+Txao3nUWRvHTJN57H3Rc3u4
st3GrJ9NcNdv+P/7Q9b02Q5b7B+38ekb7nq2vueuXzufJmvn/x8T1+PtvJce
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
h+HA3c7/w/lb+zkOpkE/Pt6twxQ+vj93bMeDHIdpXvs5tvGVW0dlw5Er3ljw
oeNrnr10p/jfHOeOnv7Jqns4fiL91b7LJuRsXoGOx2IdBDmf8CF++8ysdZs5
xe1/2uPXnvr4tY4vDQaavnD8a/C1vel4q9eP/fEPT+H3DeqKrud8NG9R8oBc
3ks16H+Y4PJiDg3ScM52fOszozIP/JCP2okuz8rmuY/F+bqj/BmXB2L7n/NR
+xJ5OX77NXyevJqP+m1dnontDoxj/2R0nnyU/5WE3mseHNXm/7jno/2783Z+
/My07h/WRbr2f/E+Tf5Pr/JH5y/2f3px/nyUj+Web0esdN2798Ydf3PLifPa
z3W8+46L7jnm17zxHw7+EyKP8xWj9lI+6mcrqG772RzbfrYCji9H/QT5aNym
pLodp3Ecps1XysovbBnMRHRcHnb/Hz5+rKr8yN7nH5Za7Hhe+IbjU2/bcdUH
dX5Vway8/VUjxjc7ttvZUT5yXnmDg4Med+fX3zzU8cflHzleslXwjuw/x+wU
vkSfa96dupf/4/xo1NOPzzvxVsfnXdq8y3tjnd+E82wOcesgbfb0Xm9tsaO7
H8N0u9sdB1lnt8zL2zjyFrmfCraf+inHdtsZ9fMVouvY5cnabZd595YdLju2
r6B85XXf7L7e3VIHs1P3D+3y9DE4Pha1rwumEE50HQu9O5rvUzAH3XaoHymO
Uz0cRn47pnxGNngyxXB83Mb3QwrmmGA69Y3d0GXedZQXfGsCetpc/dWf/Su3
oHzfpi/vt8+t0f4bpnR/O66UwvG9Nr9iLXf/2rzsggnTCDW/pWh2fuK8CVvd
kcbxBdO/xt69By5299N3O/1y0HVjHdt55Y7fuXOWf6lHvLyA85Vs/DGlUM+3
F6J5rEXsX47mrxai/ICS6rb/uly//7fVer4MPNtxJkzoMspX3LDaM+vHTP3+
/vVa3+/eavov2eDdcf3y98l4TCmatzFc2W477ftHFE043LZ3h+o2DnV53euH
E/w7cXws6ndy1+uJJwQvx3Y8uxj1R4/V42180IXzdZt3bvh0/+lziubRM0ZW
F/8Sg56I+iOLJvg2Nj5uIvRUlNfu5s3bOL0Yve/m3dv3kzg+HbWn3PUd9ked
XYzGWVPYv8+EzZp7i9H3kFU9ufZDibWlX2yQuy6sXxdtP/Xl7roL+6kzjm1+
T6n+eJ3PLe9H/Xcji8rV3pdOeOSnKM/uiKru7wfLf99ib6N87fzLB46b6Xir
O/Z49ZYxjsN5JYMc298v7e1i1J6fr3p4fZzp2PYryfVXts/hDYYp221H1P4v
mbAc1Aeu7kQ4bb9lNPbvivJ/Xd52GAZsUYrmnYzB/jHz7r+DC6lkMmHHYJfq
9rnSg/2TkW+VlK1vlUzQ+tt15YTuf/a28R//dVYCx6eiegUlm0c5Oqm6rW+Q
xP69ZuS1F73x4D/k801Dz5hwOuEL8vdE45DvgjtL0fMng+P7zH+/+PDcm391
1+tTM9p7XrzI8f1XbvHI98WS+SmY1/RLVo//+NFL/Igzi/PlTPzeB8ff+6Dr
l97rpZ33fGlnx//4ck3/pxTdb316vL3uc8ohnu7Y5p06tvPYnM/aeW6OZWvH
50rKdvwt+vzfce+PDSceuONOCxOyHH8bpEU849jmOVeVqy+89MM/DzXKdz6y
7KnRmzm247KOl9zw1cHfNDkON7oeQ8mE0xd656se5p9dPL9+f9/P7d8h3G6+
TeZGHvNNORovkjpPrq5K4ZSP4tfcWjYHDgkivFHQO6P+zXIUH3ZA74rio7LZ
duOt1u+9qBN6j3k7KF833uVp/vL1Kydf9lY5yheJ6/5DAnxxAo5PmI3PvH7/
937n8vxaM0GPuuMNg/S3yx2H3edfls2Vzy3qHX6ayyMNpylmJyr/8HNQSdKx
3SbNvwN7HO7u7yturvgO6fJiRgXNz787XmuH/VZN5svmqNknD330qpSer/3s
t1dNjUvh/L02T/Zbdz9bXyxH/YAub8LeD704PhvFFVLnPAO9z9xzUFCRrxzN
P8+qbvsLstg/Z3YPJyy6+zVsF05w/Vh/C8LP6x1//Mtrk3r87zPsp0jk9HzB
qO9OJzoOx32XO1516V0/9Usc7/NF783Yafgdju22ZNt127jnlvUzd5+Fz/M1
yuaRswJDLenxfWGHW6n+fJPL9fyp4+m3Pfi+uaKqHJZt2sco18ae8ITfHFBe
9/zfXdrW43jr1YJKT46DaiSnZeYr23mbju22zRz9c5PftBKW+Er+jvao/Vmx
84n/OwJ6Z/T9V6J+ldGq23nCHdi/x+YzP1iJ8m1dnvxzmx/zQVPLBOURRwUR
o+NnwjwQl1d9zOCC/zMR509F9fdcnmCY/txTMUHr9AHNn6ua1z8d6jdJkzg+
HcXXLq/MxuMV1JuoRvUUUzg+ynvqrpjymi9fuY/WK6hG82zS2D8T5ftXbDwo
8zR9fd/gBDf1Yn+Zp1Ixy/cY8dNTL2VU/1M4UOl41xU3fbdnLat8xQWn3z35
EMevlfc4cqNEFufP27ofZ1eUxwZl6LqEC2ZPny7co2LG377A/8nr8WEZl6sd
Hx2UcfnBsR2XLCjbbTnK+6zY592VJegV89++YIJ6RdmOs1SifvSy7h82H0dV
lK8Nyps89784rPNZrT+/Z6Lxwop5fPDD7665g1F9z7Agk+Pms8ef+Nhgx0vC
gS5Tfz7/+Wiv+0r0Pc1XvTsYaLpifv3+/vOxNRzwr5qbHgkKSLg6tnbbZi4I
Eyirtp2fGQa9I/q91Wheajv0uBl18K973Kz9HnETlO3ourhqgij72YWuDslp
313uP1nG4/gem9+x3f+6f4Mw952Im+P1+38JfnZCPfvPL9vv7PKkjwvS6hdV
bfx3d0L3t/2nCRwf3W/XVus5598vH694fYMlLi/bzhdN4vh0FFfJuhsp1bue
LR44YXWXx1dJHfXmdbs73vycR6Z1Pet4zOIgE8rlTawXlBn9zLHdZqP6sVUz
fORfzRcvuryLlcKOBscf/37dvb5fy/F+2wz5ao2rsso/35A9/ppiFueP7qe7
qvXcXDV3tAUOl9f9n148yv8vOP5r0F2i+e8mqpPnOIwj7nZst2VbJ+q9atSO
Katu63A5Fh8UtvUJKjhfdP/t6e5H28/p2PZzVqO8JHdcWB8ubnC+/mjcr2oO
re53wT/+4/SNV+o7r/86x+Gw/6r9yrZ+0Xxl25/lOAxjxw7Vv8u+32ZW//70
644quzqUN76/m//j+NfnJ/o/JurHa8Px3SYYHVlpmOPQ1zc30XMspvsvDsqg
HjkOx8ejcW3HlU9W2/TdtOMpwRs7mWicpluPt+M8jt8J0jguHI/zJ8yOj008
75cdHG/04W1Hzd3ImFTvGw8s/vtE3X/SCyM+vfO1HhyftP+P3zsO7XuEifLq
Erq/zbtL4HipI2BMUOVl1LFJ6Glzwu17L/x5Ncdh3v8iYxbu2FGen0/p/mEe
xqspHN8bXW/GhGVrt3J5uLb/Io39MyboFbttqLu/rU+ZqH5KRvcP63/s69i2
cx3b+y+L8xfsvNDJxtYbvi6P4wvK9r5xbOPrAs4X1bOcYMyZS1Y5dOaZ5Xq9
VqlnOc9q4J2NrY/zuXt/+Ikzp33/pOOX3u568ou/OT4rGLY70XFYBnB8v7Kt
xzS//vefCPafj7Y/wt1v4X17nKs7ZuMyY3786p1/nzFS+udc3as1H9nq1Q/O
dPdXmH/8kOPJYUehifo7XN0t29/hOGzdzx2nbJ8jju22x4Rp3yvc89Pmf5ho
fGiC7h/it3EcnzCfnBoU0HT320vDrvvLVhebKO9+ou5v+3V6cHwy+rvd/TA/
mKf8nYnyulO6v83rdmzzuh1bv07j/BkTprP+6u6HsPz9tdJv5/L8bL9eL47P
2nEI//8TZNnPfDqj+tsbTh/zwR8z2L9gff8e128cDteucGznTfjX98ynn+io
FPT41cMHpmPbT19UtvULHIfthBsd2210f2idQ1lvy9g8pk/d++E8pIcdh/NJ
LnYcpr3t1a8854LeXZ/vdFx3PwTHB82jEx3bbZcJnrK7b9sf1fGWuoeu7l7y
hPyT26/r+I9jxm/52Mx+4wc3fT8f16X723GPscq2/8fVlQuvl9vH4fxxe30f
7Di8vsv9UX/BeN3ftu+7cXyPjRv2dRx+Db390XzmCbr/82F84epedYcDAxNx
vpS5K5gwPqs/akckoaetv6/ZH9XTTkHvjdancBx+ryXH4XjA6v02D2ybNI7P
2P66RY7DryXdr3nB9fsXo3nMjm23Yb/9HFYp6v7h59TvOLw+FzsOpzP/03H4
3PuhiN/Xb+vCTOyvv298Xe6buv39rX2+OZa/1+afu/dfC9IiVjgOWk/7Hddf
f75F85XtfT+/Xh/UaYJqKFu92m9WWbH+69P2kf6DgWjbZcczLnLXv/V7xzbe
67fPl9079fhh4QS+McrB7L7kI2Nw/lhUH83dL59t9NLS7T/rj/JyxmL/brNy
MKHlMfd8CecD+8evvVPwL1eHceZXK/l7xnB83P5/Xnf3j23H9puWt6//5djc
eN3/Vx+qo7pxfI/N33u2P/r/xKEno3pP/fa5PycBPWXXT7jY3T8fdDYP3e1p
x58f/O3jr/xPdD01JfV4W0/Asa0nkMT5o/vjy34Thte/pup1z/HlQRnjlaDL
/Pt7fb8ec//Cr09JQy+ZeXe+f8KUx/uVx60cvON//7dm/Z+i7j/ur2f5P44/
XPz5B4s/d7zxuzdeOkHXsxgwQ8c/1HdFzbHdVqP5pP3RvI2K6vZ5XFV+Pyi7
+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
q0mlI67w+iWUJ0EnzW9lM3sOfcutlD/m/HwCc56CKwLz/ftygfn5pNijYG6/
jPKo3i8PjhYuOVKYIbDzXmnpKX9+L/KbaATm/CeVCE/MC29vswpfE5jHIcv+
pBLmccj53vD60vzIf4fIEMWP5qvupw/9laX7ycfpC1HO8UaBuT9Nc5+Cud0r
zad6Pz/lMRJ2zjAsjf96fGETekbkuRTnXjt3dBMY89SJ8c6iE9dL9bk9porY
J2F9ktEh0p+pyiXJaUzixfxQmx2gYwhL8wHypNC8sEZcx+fl2wLzvAzHBebz
9A6B0V4So7wPfr5E1It5pfE9iCnAklTl2aiH7iDGO+c7GSJwXv1qefUbhYg3
MVt1vYnsBjTPpRqV8uxE5mFrUnDvfm9tqfm+SXW9Fcrc6vLQkSfwNgvz/AvB
Nd20PV1ke6lU/2jjBi0KPhJ4x8BKt1IWC7xi5nbpFYHf5Qciq+r9HMRnFqL8
inalHM/JAq+PY8ybDgXHcyJOgcetYxUENvQdcifmO5eCGS3GteMCYxyFW8EY
ZyEwfj5PuJ/zPVX5VhUeL/BPv+9Pvq/4l4rxzn+X5iG0pyr+nyG0p/4n8OEm
FTusivYquMw31d65ny8wN0f18Ia3L413Hi/nEeOb55d3C8z9wbsSlvc/yvU+
8regcdLRp5SH8dJJmDcbKTDyJfpU7QVp3yjGJz83tBeYj2+PGDfeUytKteso
8FDNoW8ifGK8Zp4YlnGivcCcxyBXjF/Oa9FLYD5OWgjM9yse+fePUV7HzxOP
+UjGhiCPG9DjVOWJ+PmnyTiZ/CdCFGeSqNTHc3qKgpGHJlvBOD8YVe2bgbHg
PtwkrYdsW9bapJSjv6FZVd8Co5c9HbVsHc3Xp3NU5VbkrdssnZcaLIt7bLEo
5Xw+GyTw5m+O3PJtFvh1+rX9vV4LzP2jfrIruDkj3MoT+Jvn+7yDrzkUjP7A
AvP4lVIC4+9H43FqiPznXeHl0nrP14sJIdyfThblGF8kMOZjcSt4+vDk17HX
BL7Y4OS5vlsFTooZtWXX9wKjftijYHx/L8ZVjA5RHHae6vN70T9wpcD82DAu
RLxPXqU+9xdrLXAY35qM93rD25fGK+f/nS3GJ5ezKK6il0+pz7FbhasK/Id+
5v0x1wT+dvLijgmLBMb3i8X7fVCMB34uvCIwz6OyW4wHPp9dVuFdYnxwvrKj
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
bZdG86cF+LI2M5XyeFsp304qjUsn+bkSz1lPuh9b0yjvJvHbrkql8QxKfa7X
nxQCRqN8TjrXN4v67b2yV0Pwx1/3xiZr0mB6+fW3Ou8JwVHbrlbOFqmUD0JH
+RbSoS1b3trogS9vW9Ip34Se7EAZ8OPQhX067jeDgxPEZUB1npDZDJmcoCwD
xt2OGlmYb0YerG/S4eGlYPyMQzlwbeePPrN0zre0/fXP5l/mQJ+tH49b83YG
DD1bt1uUJQdKbbQf0/VJB410fKkZsECbumyHmA7vnB9ZamLADuxrJP6QDmV5
omw7VPJbsiv3yiAeVweN53Ti2XTS/jCD7JigtIfrg7x/yQDGJpr8iRtejmEO
YhnA2KiccW5I4cRU6di/vqb8BInpFL9USHr/DPJLlXn00smOU0TzBfGCKnq8
DPpcOuJ5zgLDs5WuiVl66PKg0xeJbTKBueGu/0YPOYy2pE4WlDk3xHfhjh4q
bno1fuvpLMpTYqJ1KIvyVpmpP8g8y3I8RBZ9bjPdn0wahzkUJ5tF+SNyiMc6
Ezgde2c75ofblwl8mbppBxa1WHgki+YpJ+3Tsyiu2Yk8nCczKU+YC+v1zqQ8
lG6ozBOlZpKfVxGNvyw6hxTR+pNJfNA6khrig9aR1EA2P8jpSWqg39zW+Tf7
6klqgB/bftWT1KCe9amepIY+r4GkhvahZpIa8jfKIamh39FCUgNTFndMSGtm
J6mBV9fznc8P2klqaH/vJKmhvD1FaA/6VIN54v06klrY72UroI6kFpqVmv7f
xAQ9SS18cf1+K/NIPUktLN3n23nmpp6kFvMerrOQ1NJ51kpSS/O6jaQWppRa
M2Qe2ElqoTQTS+wktTQ+HCS1wNhN2/V2ktTi71cB6PyjpfkwQPOhFs9hmiAw
s+natlr4bor0mE92mmlavA9P02n/qqP9Txb258s65Pc4qCWpg3v/eUr1cArZ
9MbPIybPFHLbaaZ4FRL1DXqSOtI36EnqSN+gJ6mj9cNKUkf2ecqnlKqjec9G
Ukfzt52kjuZ3O0kd+r2ddpLU4b5aun8odXjOedtJUkf+yEDrMr1/c4pjWKMj
O1uAeBB0wN2C7wXoPKwDvuy7gpS/R4d+K6khGG5hL+jIbzcEZY13kora6uDt
8gf/2dgzBFm1c8fd3a5Dvce4EOVx1SH/z48h+HzKw845n+uQH2h5CNixsoM0
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
WTPRnhDrBh6O/2sWsFX46UduYKfnTTEaYKfnc1Xc0IonyNYAOy2PsriBlfbY
pQGpdLxJ+vzMy2hEJS1wd6OybswX+IMWuHlH+v74O+soz4gb+hVc2bGujQ42
zn3Q7kyWG0I8wE0Hyac+vFf7Tfq8JXJcoJvmQyvNB26KA7XBP4wOy+Gm/uAg
+4ab/JIpntLqhnpcgQUopffj8RDSvI3STfE/LpJuyoPrIp4JN/m7C8mXrREh
mMDSUrzlRn/r6dGUj85NcZEx6Je+303+5zEUT+yGYb5bZbv3joWYQwPfPD1D
ur9Xvn+67m4sNOX6KjeYeYU44Oqu0254v96Tsw2ux8HOPwf/Wu25m+Kg4mmf
4SY7agLtM9wwZMXl6kVDkjBe7P93dR3gUVVb95deVGogBAJpJCGBFAjpmdkz
d/qtAo8ivYl0RMECoiCINEU6iIAKAkpvIiBNQZQiiIB0UKkivUl7/zl3r4nf
c758WXNnJpNbzj1l77XXOu3GfZOIdbYbdWSJFKmKT053gyfcAHlnN3jCDfj+
+c7N9SjTk3m8WuCGrlEy3z+j3VTVDgimQLffTffuykdD2vyNfLjp9i35aESP
H8mHuL/kss6dRlKlZO5EN43KTXXG7kuj2H0/mu+tdlOVHlKxJJ2kaslLh0X7
mTq3co9z6WS//LebpA1Zj/mZFC8LXn52k12W6sqkZz/9/tWz89z07r3tQ86K
9vat+H39lJvWHGvz15LBjel58bulOP7fvrne4bX0xnRD/N4kjp95Fk3Au3CD
Z1UA3pU43jf2nO4dX0jpReevrRXHN3JSgbdij0Jy//Dxp6PE/obj3DxPddOB
7bUqh64WUs+zT5erf8+Nuoqi4uvF8w0H6pfDf+8s/nu73Z8J1zNhu5Prf7cz
wvpgbsRtXMV1R/Nb7bxb8EY01p8KHb92cerKx3Wx/lTo4fGStb9JjaH/3t3q
u1ZBoW2+a2P3TI+hFQc2xt2qr9DolcceHC8ZS12WrHtylxTS6+zs9Wf/WKom
32irMB6PpR2dxQcGK2RJWZnf4qi6LTij4DrFY/2ugCdaH77GCvsdH0rg422q
QM8igeyPlVPodvaltK4/JtE3+obdMwaK/ZvYp8reNkmUkdDW83JLhd63CZGJ
9NmDh5v0fIXEq4fnvZZINQ/MbppcV6HkOXfXVyiXSGMXFi0rUULsjy0E1wA8
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
RhY=
       "], {{
         {RGBColor[0.1, 0.1, 0.1], EdgeForm[None], 
          GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxUnXf819P7/5/v/Xq9X+/d3iWtd5JVUlFoIW2hXUoyUwiljFRIqIxKKLL3
JimSFcqKj5kdyd7z97i7Hq9b398fj9v1POM68zrjec65zmk27pRBJ+cmSVLc
MEnyRA8VcgTsTipJkl2FFsI0YXehvXCG0M7mE4Xm9neCsIvNo4XaQh1hjGld
oRnxCD9nkuRkh91SGCnUFGoJo0zhHyHUsNs4oZ5QX5gu7CXsLZwmtBV2E3oJ
fyvsf4Se+v4rE+beJWH3r3C0viuESmGYaZUw3JT4ThVaC22EqUK14zjd8ZD/
KXbHbbLQyjynOE+YDxVyhFxhvNBAaCgc43w0cJwvKF0vZiItz2fCTDqw25iJ
8nhJ9GUhpe+1ouuEQn2vEX3SeXtYeCQTcT4q+piQLgm/TwlJSbg/6jJ6yDyU
0YM2H089uS4pd+In7nJ9Pyv6HPGqDre3SpJGspvgPPE9SWhq/hmun32EDsLX
4tshvC8BWyxcKZTIfr3snhHK9L0hE3FQP8RDWZSWhDtuGX0/nQme4pLIE2bK
l7w+LvQpibIgrwcLf+j7T+GsdJLsIewpnCm0t/ls2+0lTBHaCNXCqUJrmycL
rWweK9QV6gkHqaH8rnz8IUw1X1uhZ/0kua6l6lbf3eXnV7n/JoyRuY75u8n+
l5xwm+749xbOENoJuwsHCD+n5E/YX98/pcLcLR12vwqfFCfJUmGZMFj2xUKG
PCkN85WGEn13VVw/Kp6fhM76/l70B2Ga46EsuuSGHf5Ol3k3p+M05wlzj5Io
S9rV/rkR3s/CAblByc8RJVGv1NuQkqgzzENtRz0fVRLyRD0f5vaRJxxSEvWG
/HYXflU8vwkH6fv3TNRlX/vNFw4sCXfcuun7l0zwHFASfQzmU5Tulq6/Ix0/
cQ8qibaBHJ0kt12FFsKJQnObT7Yd/FeqrPsKhwufuryvFT4XlgvXCf1Lok0W
CQNLoq0Sx2DHQ1kMsDtu/YQC8xzuPGH+TOV4rbA8J8xPZKKdw0dbp/3/q++H
ac/0bcJDNvdS2yxoHfY/CrcLdwg/CLfZ/J1wi3CrsF1YKdwofCncIKwQfjLf
ncI24Xq7fW2/Nwlf2S/864WzS6JvHqk09BYe0/dfwgPCg8LrwsXCJcJrwkU2
v2G7+eRduFZYLnxuep3whSnp+F24V7gPeRTudxx/Ox7K4g+74/abcI95fnae
7hK2CJcKC4QXVNbnCucJ38p8s8uI+JHjI5yuwTZfZ7uhLhdkC7leVBL9PnJ9
RUn0R8j1vJKQ0e7OM7KLXC+2374uj+52m1sScgzP/irLFg3D/JzSN1OYlRNl
MdRxLy0JmUOu762pPq5m+PtG5lXOz/PmI587XIe4zSyJPrqj8LRwluvy6pKQ
UeR6SUnILnEsczyUxTV2x+2qkpBjeK50njC/6HI9X3jVZUFeNzufmJlbfC65
/iITc4vPMmHeoyTstmViTP1A9MNMjLHvZ8LMPOK9TJgZh94QfTMT4+troq/D
o7ivEq7OibH31Uy4bWuQJG+3Cv+MY/iFn3FreybGrV/k57NWkQbG/09EP81E
P8SYsxqzwl3mdks7xo52yzyGcfuVTMyDoJsyMR+Cbs7EPGKr6EeZmGd8nIk4
mGcQD2XBPAN33D7w+El+mHNQHvAzZv9P9B345bbUaWJ+9m4myugj1xn1udV1
jPlj2yFHn7qOkfe33D4uE94siTZKm3lWOMeyM1Sy2b1h1OXb9nu5sNF1foGw
oSTmBPA8UxL9BOZPHCfxfWgZIk0fWIYwfyT+a4QlOTH2POD5yse2I5/MO8k3
+dzqeoani/ruH9Rn/5iKuLPzkXeFhSXRXt93OyS+esxPW0VbeM/uuL1TEu0Z
nv85f5jpt2jHzDW6p2NM/k3orO/vUxE34+vnol+kYjx5T/T9VMw/sNuWirH2
U9HPUjEmQ+FhHHo3FTy9NM7+rTz9kxPj/FOyezoVY/MnqeBnvF8v+ozQOzf8
/isckhsT+5zcmB/Ahz/G9o9Twc9cZ6voR6lI+63CbamYd9wh3On8YHe78K1w
s3CL8J0pPPkKZ7XoE0JBOuiaVIyj5PuDVMyViIe4GZux+5Bw6mle3jL8M9/C
jjR9I6xyfJTZdcL1QkrznKnyv1HfdwsThGOFm4ThwgjhHttNdB6OEcYLd5nC
c6/djxNuFIaZ/yqP+f1cBuPMf7Xt+gsrhKOEo4VrbDeA+ZnyMlZp2+DyGmt+
ymi0MCYV88jNoq8KBysvRfUjL7VEZ7YM+z65UYfUH3PHTangYd6K7HxpWVnu
clnlfI90XY1x3DfbbpRlZZlwrettlNO0xGkfKOxwORLedmGly+ZKzXX6CocL
Vwh9hEOEy4XeNi8WDrO/hXY/VFhkiltN9atd1Na66Huy0EpoLVwm9HJYv6gc
GrcK+wuEzsXh/3xhP5tPFloILYUFQk/zf6Ux8MGaMWYeIXOJUCoMETI2DxaK
bT5aqBAqheFClVBDOEoot9tQh1EmXCr0cHwVuREPY+xJMu/qNB1pv/CfKDS3
29cuS8r3FKed/KdVJnsqv+31nah+H5H7o6mY799lGc+V/WOijwv/CA8JDwv/
msKTlw532uHPlnv4t7nd3CD8LTxo/i9thyz/aHlF3r+yHXV/tdLUj3mu8JfM
D5j/d7ef+4Rz5bav0Ek4z5R6OkfYR+ggzDTtKMwyhWe1/8H4l3rc/2BT3Kfe
7Xa8Q23qqJYR12+2I+7H/J8Gz6Hu53KFpZblQZZ36GDLPXSI0F7+Ple9fSE8
nI7/Aeb+D/l/APMeueG+TdgzN+iXwhmSz2eUnmHys0I4Sjha2Ed+tsv9a+ER
h8e/yCyho7AvVH52MEcTOuSGX8x75UbYXwm758b/AOl7UDwnOE2dZP+t7L4T
5qTj/5D/xbmm/CMuFQYKg4TxSucDLeMfsW1ujJ3MEXbLDcr85VH5WVA/4njU
6aVM2+TGmMo43C43/JKm6tywI6zR4rtX4R8o/7f7P3mccFs6/nsx9xD+TIXs
9BDvn4znQs/coIxtrRXO3JYhU4T1m+WrUzrGG8aZ/dJBGaPIW9r/vQfnxr84
4VLG9F+MG5Q1FP4O6Wh7uO2dG2VMPfVMR7poE4enYwxj7JqZDh7Cu1UY7fzc
Ioyy+Rzq2/5mpOM/HnOfdLRJ2nHvdLRVzH3T0T7zXT8p5+GwdLRt3HqlIy3w
HKrvHLvNc90y17hQ6Oq6n52OuU5Xj+f040s9rswTLkrFGL/U7YAxlTGM8eoj
0yUeV+aap6/KJ0/Iz42+5FRhSirG5KvMz9g+VThNWKu22Ul1N9P9zhS70R+d
TD+XinH+SvMzp1kkLHafNFQ40n0NY+kw90nYMb4ud3s9IhXj3BHmoQ86QTjR
fRn0JOEw9wHk4X3HQ9y7Ssa2K60LU9FfnuT0Mc9a6DQ96vROTsVc7FrHv8Z5
PZ08pENW+glXpqNeMV9tu/7CEmGA63nf3GjrtNuLXIfI+PnpkGnmjPvlRptm
jWY+Mu12c4HdqePz0tEe4DnXfQnmaxwn8S22PJGmRemQIczMC6cLM1Kx5kS/
Tx/PXPBsuz2qstlD9XhGKuYu+D0nFbLF2MB8EBmHj3nBZZZXZHyhcIjjow3g
Tnu73O60iQXpaG/wXOr8YZ7veXQPz69Zt+3jOTf/0PxX/1ig/kW4Q2iUr3+1
PP2XCF/VlpzsqnFO9gfX0b+dzIv03UB+XpP760I9fW8WfVUo1fczohuEOvp+
RXST0DA//BJu3fywg6d+fvAR1ku1VObNg/dn4U7hLqFEftbnRbi5+n5M9HHh
b+FB4SEW2WX/iOijwr/Cw3lh/kt4wP7+FO63+Q/hPpt/cTx3C78J9wj3CmuV
nnbNI67fbQdPTn7EQzp+NR88/zgtxN1Ofj4V/Uz4RmV2jjBJ5XazMFIYJawS
Rth8vPw3E3YRbrH7aOFW0zEFUQfHCOOF4+SvidBUOFqoECqFSbYjLOpzrDDO
9TrO/Lc5PNzay9/nSuMXwk0yD3eahjm8KmGW0r69eaT/2PyQj8bChPyoV8zj
80MmMB+TH/WKeVx+yAfmUUItobYwJj/kA1mY6PDIz1jbwXOW4v1C8U6gDMwH
z3bVS7/mIWs/OD/kFf4tysdbwlL9rw4UBglLhAE2r2SvQhiWif7iZuEWYZHM
hwqHCYtN+2aiv7hVuI01CJkHC0OEGx3GcGGFcJTDXeY48bfcfo8QbhCOtL+b
zDfC/9zHCydkYp5yo3CTcLfME4RjM9Fv3eJ07LD7KuEeu08U7jU9TrjPdFIm
9h5OFE7yv/0JNn/jMMj//fZLOh6235MzUSf0AZTpdc7HUCG3NNYgHxd2k59P
8kLWm+v7HdF3hc9VH8uF64TXVY/d1Ycs1ndb+fk4L3iq9f1RXpjb6HtrXphb
6Ps90ffzQpapz7dpS+K/1uG2lv2HecGza37ECc/1TiNl/b3bD/JBu/pfXqRv
u8wrhRsLYlw6hLmAx7HDUrEe/ZXcVtjfNuF64Qbha/PRVnaY0o6/cF7x911B
tGHiph2SduL+xn7pA741xd8R+dHHIc9dkGn5/VHomh/0J6FLYcg6/fQCmXsK
vYTLTHsLFwsHCgcJ84RuQnfhIlPcLiRcYX/3WccKE4VLhR4OlzhvF+4Q5goH
OKw55sO8X2HkkzK+xHEeTH+qtnmt0EXfxwvNhF2EE0ybCyea7ipMoo7tb4LQ
UGgkTBZaCa2dRuwakxeFXay230bf8x0n6T7VfrE/TmjicCeaD/MpQkuH+4Fw
pXCVZehq4RrhK2GFsJL+XXFVN4/vHfSPwirhS+EG+6N/v1ZYbpleKizLiz4V
u+vyYtyjbiin74RbhFvzYiy8xPnYhuw63C/Mh/lDp5H0fSvcbP5PHQ9xI/sL
hUV50Qagi/Oi/Sx2PpH7K+xvi+sbOfrI+V6SF+0MO2TqY9uRn2+cb+J+0+mF
H5m+3OG+bT7MJwstXNYnuZ5b2A057SMMlmwXCxlhiClt4AOVeY/mMc7vnh/l
S1n2yY9xnXG+V36M/Yy3B+XH2Mx43iM/xnjG/EPywy9jdc/8sIOnd37wEdbB
+cEHD216mMe/Q81HGrrnxxjPvKBTftQBddhZ39/nRVvdPz/aKHOWffOjvPDX
MT/kBvMe+VGv1PMB+eGXeUe3/KDEcWB+xEN+9soPOUMe98wPPswd9P215ZE4
aaN3Oh235UW7RSYGC0NsHiuMs1/oMXkxZ6G9HWtZHC2MsWyNshn5Pko4Oi9k
f7gwwvVNHR6SF/Om8Q5roe0OtayMdFirzDfSaT3GPCsd9rC8kPsjHR8yN1AY
ZBkcYPMy25G35c7fEXnRVqBD82KvlbH69pyQ6/7mv97uxLHIaTwsL9oHtG9e
tLPDhX550Wb62ny17QjrM+9PsjfJvuxdjNXsHWm86SB09DhZIpRm4r/5PsZY
71XfI9ybE2MU7mWeI2TMw9whLRR7DlFst6saqLxaJUnNTOxt3+2wmHNUCJXC
7plIH3unRzrscs85yu3vFKGl0EqYbNra439ToVkm/vNJ7wPCAsV7neIt8Jyi
if0x12hs8/Hm28XzC2hzz00a2R/ziRaO+1TH2cZzEfzu6nnHrva3L3MU5ePb
4pgn1chE3pk3Vdn8pdxuEFYIPwi3CbcLPwl3CHcK24Tr7e8L7ydj/sp8K4Xt
pjcKPzoM+Mcr77OU9zX6/l641XF8bb83CTtMVxXHfLDS6ftH5oeEh4WfnZa7
hLZy+7g4zhe0y8SeN3U2xeVRLfwm8z3CvcKvwt02/+IwMP8h3CfcXxx180Rx
pHOQ0nyK0vyIvv8WHnQ6/rTfB1hjNMUNeSUPlHWnTJT3d0KXTJQp5cHeL+eQ
OJe0piTOBnFmZ3pN/cvuojlFTuwTH29/7A1Pspm9Xs4ecXbpVlPOLrFfPrYk
zh896fA4A8W+KeeTOLt0syn87KkOtxv7zJz14ezPQ04X56qeKIlzRad5b42z
Sr28r9bD5stsxz8we+zsLXN2aaUpZ5duNCU+9vs5U8X5o9UlcT6JONY6vdM8
Dz7Vbg87LfAwR55sN/bMj3O53OF8kwf2zifarXMm5Ixy75qJskeW+Q/JE/KF
PTMh08j+HpmQacztM9HuMe/ltoGM75eJ+iTcmZKNy1uFbNJXfW353TsTfmkH
+2SC4sa64YPCQ8L+mUgLsvyX+wbc/vD/Bv8Qv/s/BPOftuP/5i7XFWeaWjUU
T6v4Jl23uF11z4SsI/sHZCIe5L1nJuQVWe6WCTv89ciETON2EHG7TRycCYrb
ICFdHPsQ37iN3lwc/enTouuLY++Wfz/++djzvpK+NhN73ottZv/zCmFhJvZB
F5rnMfeh9Gcfmu/qTOwl88/JPyh77fwH8v/EnjP/h/xHsud8jf19Zjv8fWI+
/H1hPv5pOHNzVyb+C9k75/+T/8jnVKdPqTwvzcRe+/xMfLPHvtL+WFO/XrjB
a/HX2bzDYazKxDr4crttc5z8s/7qOPnXfE9xbW4V/n+zHfXNvv4ljpszcKe4
XFj/Xel/2jMzIaPI7NmWY+T0LNthPiMTfSLj2DRTeH70eH6HMN18yOysTPRf
jBXnZaL/Qt5n2B1ZPscUeT/XfvHHeb2TndbzzdfZeUCGkK/ZmegHaYsXmtIO
5pgip3NNkc15psjyxcKBmZDNS0wJ9yfn486cONt1p+cQlzpO5H2Vyvm2VvF9
gdNFOta5XCjLtS4vzE/ZjrJkjH9Ocv0845zCmS68URzjMPTN4hijcH+hOPZz
HlX8j+XEfGGD7J4tjvkClLD+cR/wcE6M5YSxpTjG442iLwm7ZWJMYzxj/CPs
F4tjnIbijzH/Q9GtxTHWQT8qjvnC/0TfKY450TPFkQ7mQ7RRzMwv3i4Of8w/
3ioOM3MH+N4tjrkD9L3imJeQRvwxx/mgOOJmfCVOxmDmGfh9vzjmJVD8/eu8
PiJMVvnNbRV5ZJ8YO8qL8ym0e8bt9ZZpZHOD5Q+5+9JtboX3nFa4Paw239RM
nGWBnpaJ85jTzf+6ZQjZedp1Sxxr7Pf0TJxZO91ysMlyiTy+YnnFvNl2yOYL
bgO0lefdfs51GNRfO6eFMmrreNra7Vv3nfTXnCGdaf6Nbj/I6bPON24vOh7c
OA90kfPzkv3Stl42Ja3sfRYKRcIA05Qw0JR+/KXyJKlVIbkT3tR3Y9FGwlv6
biraRNhYHu41MDdR/9Ymvkv1faW+8/VdqO+U8K/8PiEUVIT92/puVhFhPajv
v4W/hIfLw+8/wkOmuK0RCiuC/3/63qUi+Nsp7AcUVxt9vyb7BqL1ne6RwoiK
yMcom18tD/d6wubyoHWFTeVB6wivlAetLWwpj7yS/1sUT1PF967s3iiP8mgo
vF4elLhfLg++WuYf7biflH1RReThWoVTpXCek11G5iHCYCEtDBIGVkS+e4v2
cvmSj+HCJPG9If5h+i4RjjB/scOA/1vxdhLdtyLiHCD0F76T/X4V4UaZEnbP
iih3aA9hrb5T5qMe+lREOqizw4W+wjOyL3X8H+m7uiLKf4nSVaH0PSu7p503
0vVUeVDyt748+HCbTXkJL7le+zmOIQpjQ5uIq9Bpx+1j8batiPj2lZ/H5Ke9
vr8pj7x2dB3fLKxymUFvcn2PE8ZaPo6xmTobb3Ndu4+xrB8rTKiIOM4UplkO
JtptmtLwmdJwquVggsOiLKZUhD3yPUk4zumearf/ie/4JiHH54ruaBPhHyhc
LFwkdBPmCXOFzsIFwvlCF5cd5v1sd57Q3XzwHCRc4rCov8uFy4SDhfl2W6Z4
f1W8i133l9qtl/0usHwssNtwl+WNFdEmjnNZUGdXCVdWhPwtE5ZWhDxeazMy
utzmgXZf4rq9RrhauEPpya9W310R8k08Kyui/dzieqV+bhduq4g2Sl2NNsXu
VptvNU9fp2ux6/sO81M3jwuPOQ/3CvcIJYr/riZRZ/2crqtc37jf7XqG3iWs
lt/a4nnUdY/dncKzsm8u+7UVIVt3Om7qeF1F2CMHq50O6pJ2sJH6FW83YQ99
f18edU89/1Aedd/Z9bBD+Npl+pnwqcsMu+0ur2+Fbxz3T8KPzj/0B5cZ9HvX
E2F8ImxT/F2U/m0V0Ya+cXy32u93Lt/vHMdS831cEfX3lfBlRfDvWam8CJ2F
C4TzhX2Ec4QZwt6m04X97H5eZeRhH7t3st25QkdhljCzMuLYqzLiWOl8f2XA
h1sH+yW+fR3GLLsR59mVIYuk/aOKaBtvCK8L7wkt5L6r0FPl8XWTkBXq+Rfh
Z6FlU8lQdfh5W+Zmok2FtyqCNhG2VARtXBlxVIu2Eeboe5PwivCB0Ep2LYX3
K4IS95sVwdeoMtrnm04fMv2+0/iO0rVXdXzT/l8VNldEf/CazRc7T5hpz1sc
Fu37LZtp92/bTJ/xP5uvdPqIb4vieqtJuN3pMkC2aCtbhQ8ros18aB7yOlWY
IrQVTrN5N+F0m2epDG9U+k90WZ9UGd+U2XHCRGREfmYKx1dGGUMnuawn2V9D
YYIwvjLkspPrfLnCPkm8dSpDZvezTFG+Jzu+HOFQ4ZDKkPd9LWsDxXeJ+Pvr
u0gYUBnfv5dHP0uf/ZO+9xftStsqD0pb/a083OmbfymPPv0Ayqw8KDy/loc7
binicxzjFe9w0WGVMQZstqzcWx5xE/aFlp2X3T47Wt7pAzq4ndFeO7ttEdaN
tBXn4RrhauEqxfWg8niRvo+2+wrhKNMbhDXy82p1fJO+JeZvJ5zhuqT8FgkL
hS7CbLf5O8W7sTriulN0jsz7E67oGpkv03cf4QrhctfBQpsTm3E/RP7Pr45v
ZI4wugq5wmGOn/6MuMkz9UAZMV52Fm834SBkUWG0bxptuI1l81Rhf9mdWR1+
aIuThVMqo7/s6jy1tB1yQ/3NcRzU51ybD26kdthaPGXxPznbc/Hs/y3m7P8t
5v08f2cev4f/QbL/8Wdmdv6jT/M/CP9lrCOzTpz9NyYs/t2Otxv/a6z5ZteJ
T7BbE/Oxrpz9l4a/k+PnP2W9/sVubRX74qzLsF7DOs3vXgPif7uxw2DtuaP/
UbJr8zMzO9cDzvF/1p7+ryJvnV0e5Hlfxwn/3vabXXuYbp5fvCZFXrPr1+SN
f0nWFVhfQLcIHQ50OdDTQq8E/Rb0lAbaDd2pI+1W4XVI1iWzeptZPc6RXv8s
tzs86EENclhZ3Uv4a9hvVv9yuN1aOF2kFd2pweYvcbrQwdnN/4Sn+Z/wDJuz
ewbkrZHLeML/+Vfk35H/ev5ts2v8p5qHtS7WvNCnyDge4mbN7EPXZbXDgJ/1
2cu9Xvur1wcp6+waH/X9p9cBD3Y8/JM/Zv7VNmf/sVc7H6ybPGmZXWczsvyU
zcjB0zYjI/zTbnD+1jgs4mS9Zr7lg3/p7D/xc+ZBRvifX5/Z+a++xrLMv/EL
ljX+h/mH5t+Yf37+lbP/xrjx//+G3ViPRN6za5bQ7Hok9B3L7kbHca7jed5p
fdNhXWG/6LT8pDa1sVV8n+30kv8ZzvczLt/5Tst3XlOmXbKmTJvBzLryjQ1i
bZm1AtyzezjQ7D4DlLbIGjd9EPx/eZ2Xcr1HYVzdKs7i/Oy1YPok1sLpp+Bh
HRo7zKwXsZfGnlt2r4u9L9bBjraZ/TT21Tj/87DCv75VnAfK7rENyuxcp8uu
20FZs6jtPQvaIWvwrMVzNqjEcbJ3x3raMMeXsR3hsg423G5lThdpZU1shN12
V99+SnXMRVlL55weei+sr6Kvht4a66+sw/7i+qGt0oZYf/3Nbuh/b2kV+pl3
2S/frEfT5j50XZa6rdPe0PtC34s13N8dFv7QfcINOS53/0QY6FPhhgzCh34Y
68esI7MmzZoxa8esW7Puj04R+wC0GfQt0d+iHdAnopt5v92zewh/OB2sg7Nu
nl0Xh7J2fp3Dxu1Gx8k6N2vorLnTvyyz3+w6+id2o53T5xI37Ya0Z/W3oOg5
ZfXHsvpk0KyeWW33x5Uq562tQh+b9lHmfp12hY4cum60YXTk0IfbXWNue2G3
smjPtdyXf1Iadm3LQmcOv+jh084JA37yg34a5U6/UuG+nzZd5f6+ptLzeavQ
2yff6LahS0ee0XmDnzJD3y+rCwjN6gJC4aGc4IOHvqOGxw36jkqPS/QrNT22
0H9QZlndOCj66fShaY9v9KHFHqPoU5BZzKQVPTV0IdFln2EzOmTn2Ey62Ftj
jw29spl2a2e709020Hec5zaDztjFLnf21thjoz3Ntxv7f+wLZvcDL7Xbgea7
yHUAH3uT6O/3Mh9y2sPh0bbQH0VvlLZHOjAj4+hoopuJ7Pd0PNwJwHhGWOg2
or+Jbir69JzD7V2y804H+hp0tTmXi1uu/WbvPDjUbt2c77mub8oje2cDlD1K
xsJc89FO9nF50246uLzZr8kp2XmHQVKy884DaPY+AyjlwRhW6LzS7ju6fhhf
80t26m7mOe0Pmu8v9xnso7I3Sptjn5S92xa2w4zcj3f90cbYL2VvlDYxwW7V
zh/7rW0l/9+0ij1U+o6DXJ/I4vHmb+542JumX5vsdOxiO/zVahg6iuSnjcPO
3ldxqnk4o8xZOs5ysSbRzv+L/KPzD8k/Jfo236BTkQ4dHeh36dDVgX6fDt0q
6A/p0LmC/ih8Wl/tq1V8o2f1N7oN6dDXgv4rNGYPR3RLOnS/EvZwikP3C5pb
HHo/O9KRDnTG4MNfI+GNdPCznr5O9Kl08KGXgq4P/FD0hPKKg6I/lF8c9Amh
oDjomnSs2UOfTMeaPXRtOtbsocTRUN+vpyNu9mKJ8+l06IZB16dD9+sZ0Q3p
0B/DDjP6TF+nIz/oeL0j+q7wcjp0M9DVeNFn9znvv9GUc/2v2B09nk2m6PFs
Np3nspjv8/KXq/xfbxk6BC85DOJ41X6xf8G6Aec5P5eY/03xZtBlTke9oVOE
ntNhrhPKsklx1Ntbwi7sZaUjP+itkaf3hKbF4f626wwdJ+oGnTfc30+HPtsH
oh+mQ38PutXygZ4VPOuUnj+Ul4/03ShXac1RGnNCH44wPrAMkW/0BtClo+yf
FeoWR3lRTge1kZ/Gkl/91+8lTBfOFvYWZth8oHCxcBFrBqbzWFcwncu6gukc
YXdhmnCGsI9wjsNqL5xptyWKs5finq3vPR3nWeylCOOFY4QOwkzz7yucK8xi
/0R8fcX/g8bWo0Sbton4vy4LHuI8TfadZT9C39+VRf46Cd+URVgdhR1lQeGp
LYwWRtltluOuKYwsj3C+LYsw4D9YmC9cwj5VbpT9FqG+0z6OvR1hrDCmPHQg
n1N5P58OPcnnLWvoSr5gGUdn8kXLeM3ioMhpreKgtInaxUGR/TrFQanLr6qS
ZIWwUqhXHHWLXK+RnPzaMr7RpaT+SUc9p5H00d/399i2q8wnCSey1yQcK0xg
r8mUuqnjPFFejYWJ9tdEOM7mdq7/04XdTE8TmgqT7O9rpfVG4SahueM8Qajl
eqDcp6seZzWONFFms9w+yQf6Y+iZtcoN3X7uKmAP+Kri0Llkr/dKm9n7XWwz
e8NLiuP+F/ab0b9FH5d942vshv4Te+aP58Q+Mzqr6MiiE4Xd6pzYe8YOvdut
jhP+t21HuOxtTxdmFMc+NvGg18u+9CKnifNq6Mei88r5tSNs5gziEJtvsDs6
tZxHQ892RHHs2Y4URhXHmbVhduN8GPq96Mi+6ziJj/NqJ9lthcNDf3el6TCX
C/uynK/Z4LSjh7qr/q0OaRU6xxOKo99nzHm4ptK9S9xbMF7mBnY7XmhWHH0h
aUSmkeXj3FfSFx7rMBo7btoGbWJscfRT9ZzPGuafaL/wn+CwGTc6KG3DlbYz
XBbEQ1sZUxzthLA4E4HeLLq2zzpPM13fA5xnzj7Md30/Z3d4ON+A7jS61C84
DPR0kS30udHvHe0461gO+jvcF+33fPtlrGWMXeYyRpf6WlPqe5XzTJkxj0B/
En1QxvtVws3pmHdA0af8we7oj/5oeodwr9r+Ny3j+3t9r64f41ZTyfBbqqu3
c2LOcovjaJYbdv8TdskN+o7QJDf6Nnia54bduzkxtl2RDt21tzzOoNPGHIG7
kLiTibnDaTa3zo02ik7sWrtzl9I6U+6XesqUe6cYr2a4nTNf4M6p6R47iQfd
uKft92z3azPdRzxjv/DvmhvpfU9okRuU+7QYI9E/RB/xbss08sgZzPE2c67z
GJvvsTsy+KDlD930W133yNoDlnvcbrEs4nab3ZHrh8xHO7zX4dEmOL85yfy3
2++44jirOs7p6GfZYV7GfAEdRXQW//F8hPnBu66TRZ5DkL+rPbdY7DxvL4tx
knF+q93Rg/zIFP1L7iDIs7zeJNn5omXoajM3nOp6XST7LS1DZ7plrsuV8zBl
ETZzii/LgjLOf1IW40Fbxhl9Pyw8JDwm5MouR3hc33nlYX60LOyS8vD7r/CP
eaB/C4+UhTtuDYUJwnjhQbv/JRwvPCDcL5xoftxPMMWtgfmOsRm+P4X7hD+E
34U3ymJcZDx8syzGP8xbymL8w/xaWcxjmAvU0NiVp3lIsb5/b61vmdfIfbWQ
Xx75vK0s5jLfO31/Or5v5f/XRqp/fd/r+H+jPBTGT7jp+62yGFOJu77TPk6o
K4wVxgg1hBHCcKFEOEIYImRMBwtVdh8mtBImC6cIlbY7WigTjhSGCtXCVGGK
UOwwBgmthVPNX2q/xFfOXM389ZxG0pc230DhGuVptPJboO+Wjv9koY7zMZqy
F451HbewO3K0qyl129yUuj1Z4V2ncCfpO+V4Bgg9ZX+YcIC+awojXUa1Hc8o
oZYpbm8LzTx/eb0s6p86frUs6pn5VM2m8lutvOo/sYp9v6bxzf5Z3crYBzxG
7g2axr77PeWxn8Ze3N2m7NfdZcp+3bUK/zPhU+Fg8X7VJM4ELLMd7Wmp6cfC
O8rT1kaR3uuEL4TPy2Ifr15lpKNQ8RcL6crYm2X/skFl7O828n4m+6itvR/F
3i3u9Svj3ECe9744x5DrPUzOIuR434yzBoTNviJ7wPAR91rvNbKf+Yfy0bc6
/OcpLUdWh/1NZTEvZy5/oyl91UpT+pVbymJOz3z8ZlPm9bOFl4WXhFvdnvC3
qSzm4sxbXykLynwfv7U936xQm6rbONrphWXhD/fNZVG38BNuLf8TVMtvpk18
z3Ec8Mw1D+Z5ZSEfmFc5jTvcZmj/9HPLXT/U8Qrnj/7yemGb62+U83yz2xZ8
j7l90D/S/21Snb/bOtI42e64nVYW/c0Tbiv4pR+dajvSwRkK1jlY4xjpeEgv
/cFNrocF5XEOj7Npl5XHWTrMN5fH2S/OQ11qd87ufaDymdomzuudIvpq4/h/
45+KM2ic1+JfkTNwnH27tTzOnXBe7ELbca7tHPvdUB7/ithxTnC+4+FM3G3l
cU4F/jvKY1+c/fAl5XF+i/NiMxwG58j41+RMGOfFdihds9uEn7NEt8q8WN8L
y+PM3TvCFaacAbzT7ZI4bnc8xH2L005ZLGWcc9yXm4/y6lke5Ug5XeK0c47v
YlPOEk5Q/HsoHYPKQxYHl8f3sbI/rnGYGTP6CoeVx9h4qHBIeYwN/Kvzj87Y
AOUfnX6C/zHG3VzzwYPM8a+OG3K2R3n8oyOPUNymu8wor8Tx9CmPsRbauzzW
A0g75xxZA9jsep1nO8w7/J+3SujhMqAOD3JZUAaM54TXqzzGv4PtzrgHJW+M
jfDjxtjey+XKWA3Fjf9G5HKVy26Z62SU6wm3tm4btAPW6U+3+VS1o6mNwrx/
WbRt+oMD3LYxz5P7pY2ifQ9xG6afZlxZIlyDP7nf1Tr6JMa3Ze6nB9sv5jbu
C2jTN8r/U62Dt6vjhHeo+wL68qPdD9JPjHYfR78wzG0UN8bJ2+zGGMvc4fay
GP+YWzCXeUBxvdA65hSMxzc4jiMcD/kZaz7C2iC/tzSKMXe9vlc1innSQOeJ
PHeQbHZpHOsHa0UnSYYfsLwsdBtC5hbZPNbt5zbL0xVuK71NL7McXOY2g8wu
Nv9Zbruc8WQN4w6HxXrEra7j25SGoW2iDxjjeHBjbeZO87CmwNlfzvy+Iv8n
tonzwqxzMB4zDrMewVlh8sIaxz12Y/3ivvI4FzPRFLcR7jvpN8c7DOJbp/DX
N474WAfhbDFxnej4iYM1kiftxhrZuvI4G3uGKW6c22Dvij2r9oWhh49uejt9
f1oQOvTZM5TZM5XQ7HlMaB+fHenqs0Ccy+phntk+Q4Qb5wM728xZVM6kcj4w
o/n90+oO1qOCy1qI6BNCiv860XVJnCX8vk34z2MdJQl/twtjhXEsf8r+qSTC
+q5RtAHkn7OFnOPk/OaQnIivJCfOknGu6SCfMetu8yW2O9jn0LrZbb7tyNtD
jWL+zVg41+dm8JfOifSSjjkuD9wYI0/ymEn+6ePp63PQD5Dfx5IYz1d5vMzO
UWiHO1z/uH3nNpqdj9zqNpWdu+D2lds0/Nn5HP1Ddg5EWB+7neG2ze2VdvuF
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
V5y78IbIbBX75HPFvdxtgDd4+JfgH2V1VZxd4KwE6zG1hNpJvP+DO/++t5ry
7z7M7QNxG25aQ7hOsresbYQz2mHUEdZXxTkDzgiMsN+aSazfcT6Rc4ojbUfc
vBE0wul7vCr2Skkf9xYf43rdLPNcYR5zHNOLquKe43H2t6EqziJwBuE2p531
nttN8feo3E6pij3brM4DaXrMdsT9jNNOWL87vdTdpqo4J0E62NfnH5J/SvbI
36oM8zWlMWfiX2ej/6n4f3rJlP+kJXbn/36pKWsby0xZ/7jWlH9y9q74x+Zf
7WWHwT/WRZobfFsda1BXy9zPcdMGGnqc7u91PtYQ+SdG5pBB9kb4n+d//UKP
84zx7Lnx38j/4mX2izy+4jhx22x3/o9ZE7/E87yJnhew1nCN0vaH0nax56Pc
r8b3646T/+xXHQbpeMN2/Ne+UhVniSjrl6viHAnm56vizApnSVi/5Owq51Q5
z81ZkJHC+ZLJ89vG91p9XyiMQR6qgnJGgPuRWRdjnYx3roZb/sYqD3WFekmc
N4TWT+JMXB273Sv+iVVxPuJGhwE/58qHOx3cwXyU43jNcsq8h3Ucxt6nhEHJ
f09Lon6f5DeJ88qc72VtC3fecmfdC7qes1IeJ1PCQFP4Oa+BDNK/83/MW+C8
y816/AMeF5m7M/4z9rM2RniM8RepbOa0jbMS9zlPnFtBH3qY80PfwZmMoe5L
htiMTFH2nPO433ycl1msMBe2jbMkG6viHA/nel6sirM+mJ91G53psZmwOQ/y
nO2o45fMR92/4DqHn39u3jinH+e/nLxivsFhcDZkhtIwq22cL2MOyJjUz+MA
lLNX6Kgf7XxeYzv8D3ad0Icudj/OOHalKWGtcDzwM4851P44H3SO55rHWHY4
P/e40jOzWZQdZ4O4u5O95PdV78dXR7/dPSf2kDmLcY4qeh+hg3ChJjldhf2F
OaYHCDPt3lGYZbqvsFA4RDhUuELoY/P03HiblndTZwtdHO4M2/Hm7eXy19s8
59iOt23Pzo13c+E/Lzfer+Wty01qEBdrEKon/2cJewh7CmcK7W0+23Z7CTOE
vZ23c3PjTU3COt/hdRbmCd2E7sIY+asj1BUusDvpnusywN/FwoHCQcIlprwl
Oys33ugljrNy4w1g8nC1wuon9BcuEroLBwrzhG42X2y7g4SnlceZymOVvpup
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
xr0LTXHjXn3Sm33bAZp9zwHK3O3WJOZPlAt3Dv5gM/dI/mjzXUmM64zzdycx
fmO+J4nxG/O9rkPM3K33t+uYey1/clg3u+wpa+6sY7zP3sX7j3nudDzwcEdi
4nkB993leC7wVBJzU+Zi65OYFzL35N0L5ljMX3ivId9zrnVJ+KX+brS8bHe9
Mp9ijvlsEnNQ5qfc8UgYxEc/jjtuTycRD3FvSMJv9k50KOk4U/LdXtijRtyL
wHjIfsp+6tO+k933wraUxq+0/Ahf6nuvdJi/4jx/Osyf67u96O68+cgZb9EW
wnupoLvyRmQqaHPec+TMumg+70KiC5COsHbXBGW4JgUp3tmUfUa0WHgqFTTN
u5z6LkmH29ec6U8H/2epiL+dsEDh3KNwTnB8J6bj+y7ZP98y3jQ9T9+zhXH6
/gT9A9G2wsepoNW8TZkK2kb4gHPr6cjbF6koD/L8aSrihH9rKvy25h3MVFB4
jkrHO5Y3CGMVf3vFuwGdBdE5LSONdYQxwmihLv5srpeONGKeJf+r5H+Uy+5w
oa+QZ3qYkGt6qPCD4ugi2tlpWCreo0V/lH3XdLj9rO8DRPcXfkoFxe0gxXWK
/Felo676OT7qZqAwQNiUirSS9h367piO+ticinTjNlVhHKywNsruQNGe9SPM
/qIzWgbv46nIQ67reJDjmC/3Y+pHfVP/g+32jfzvm474vtP3fqKdhGfk/0b5
H2aZO8l1T3nx5uzNlhXed53hOuZd0SmW15PNQ/2fZjfqlndjeU8WWeeNV95+
3dP0LNf96eZBPk5xWMjjNPPvYb9nWm7OtFvvdLwre5llZbL52zhdpwo90/HW
LW+rd0vH2/FzXWe8Qc+b9D3sztvxB5vylvwVKo/7WsZ393S8OQ//3i4D8tPa
8Ux2/c10GR3geIijl9NIOg5Jx3uvV1jOFtkM/2PpeF8eeeGNV96C7Z+ON14x
I9O8Hcz7v4fbnfdh+5ryXuxhpoSLnC0x/2jzUZe0h9sd1krlcV3LaF/IzVLz
PCC7hfVDbmhDd5iHeuVN2dWuN94P5t1gZIU3bR90eTzu/CATD9vtFOfvEdfx
I3b7PhXtDFm8u368hXyHZWKN40MO1jq+KY7/8fTON4nXWkZ4Yzj7LvFTdkPP
nP6dvv+XVMgB9fMb7cp1O9FjG2PdpCTmKMxZ9vX8gPn+sXZnbDzO7vB0tHv2
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
OGy2097qcUi5vnH4JvM7cyo6Ppn70HV6ckWsu+e5ToluUXCiU3OO+57/DeyJ
mK8pB2ObcXCIxsRRDYL/NrHOV4Q+0bPkd3LLiDPZ+fNNZ/kd3iB4dYvib1X8
3nVCf/t0z9e7a+1+qDZ07qO3+kWvzUMsN/mq50rkKZd57nzD9PWWp0Susk6l
9sMtQ0771wYh54lcJ3MrGLnOXb1Os4YzHy93WszlK0wjA/pMy4j/dYOQU71z
px0ypSs8p7/qvFtXhlw78uzIn+9kuVkekyEnfLTlhLuaRk69jmWMn9e3Z9SG
mzkYWflEvh/8vOdo5Otf9Jz9sulT9G3d2khvgOMmcv/gZ+1X1/K67JuQHX7L
ZUUmH1n8RAYbmWxksLeYRsYeOXxk7hMZWuo/zXGR7UbmG9nvRH79K3+zu/dV
7I8mOg1kk9t6X0UfTHUafI+875KW0c605TaXb4K/Q7aZvddK14G2Pb422nWx
2uGpynDfInx3ZchZTxaeVRkyvJOE29eGTO8s1zvRKwBGZr274pxbGXLT450n
+k2QUUYmmbLNcFza6Dr5NauNOD8gO1wZffyL8KDasElD3tiiQZ747cqwG4TN
oI3mxV0sn42c9gGWA0YeOJEVLqm7Q79Ccd0dOhiKLKfN+EAGGzlj+gzdLuh0
2aR8+tVG+okuhrqWRSYueTB+0PWAvDJ1QrcLemJoG3S+oLuFvkQ/C/1J36Iz
BZo+Q1fL/2yyuL8TvS9g+pm+RS8M8T5z31Nn+hVdM+RB25MPedPntAFh8Bf1
4HvamnJRN/qG9ktk3MHIxPdUXV+uDP7M13xyS22cAwjDngx2dhrLf3JtnAOo
M7YizvLYQKY9kXcHJzoAwPQjfEMfHu4+Y/4gHeT1kdtH7h+ew4ZSIusPJgwb
Sr9Whg6PnZ3nme6Pk5x3Ip8PHyTy+dDMd/X93dlK58XKmH+Ys0iP/ktsG2Dr
AHl+ytLZPIT+gtPMH+SZ6Dk4w2HwEGeek81nxE10D5zqMM45pJ3YXgBjK2Kg
2nN9bbiZ47A1hL0bxgD2hka57bBHNNrtgj2axM4SOLETBR5h3sWO0CDzGee0
ge6HsU4LnrvWYXs7bmKD6zqHwSuDnRb9Oc7fH+UyYnMHu0DYi8GmDPZ51pgG
Gttew0iHY2uGcYwdnsTG1F11d9iYutPp0f+3u57HuA1oly7Ok+8Pc9zE1tZI
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
hpNx/D87yWXxHeX+P1RMkoY=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
WZBlnfFJrt846W2TckbxzPc3vWdjruvBHsbbletcktZQueoZIcdGlbPW3o3M
dW5de6i7TmdGZ0V3nnLvP+b6LY9y8HrboztGd4ve+CjWenfItppirsp1bWN9
Xk53zmtL2Dk25db0m2JLI4t81yrGdBf3zzza3FnJPuwL0JuVL6Pct5JjzYpJ
KRalmLNiy1NAWYZjzJprQpF9L815cKFzEMo9qM/FhY7RKDajPudQ7s9vt1Mu
quS7Vne47m7duWfgnQKz4H1Tyb5zzULXlQ+t2EOHIseOFYN4Cd67pZZVfbaD
d3WR20rGmWHnFJVLVI7xQIF9avnS8lEV+78tZN9B8UblvlaG7WspB/ZJgWMA
Ok/yWWUbN6P+6DTbyHo7MTvss6g3FMrtLwnbd5IPdUxnv9CxkpcqWddKB0v3
SudWL7SNJ9tOb2x3FjknoFyAfJC7GK8j4z2W5pip3sb9VGxfQG/kdLcrB63c
s+545aLb5fqtrHLSXZG9VDGZFPsc42o4JqVY1M4Uvz1ZVOBYqvLZ+5Dl21Ln
OvZqzaEPlpaX9f1CHygtL+ubLvQcNTfF4BRLH59v21c+X3HIMQPFClqkOVZT
DUxLccxGbwtXxvzWV28Md9Pf16XuezeoVMM+k3ylSIrffjxZ4Fiu3oAod9qn
wG9BlEPVW6JNec6F603RDNZjfK5tHemTEPzB8Pcn+U4awn7Mre1cnXSkbBO9
KdJbItkow+HPr23dqW9eb4nb5ztXoDfFk5XrZ/ymqV7jFdBP6I14qn/rXsMx
K8Wq1sP/gPbX5jt2LBtWb99H53tuegMv3+HNfL8d+Tc/K985376W1kxvS37J
d196Y6JcsmxU2abKKcuWU85YuWLZdLI9zihmnGkbpI5yyfDPS/CdsirHb/70
1m9ivH0jvdHR2xz5SNvYizcKrcuUE2uT6zeQevuoN74t6O+fHL9FVZ+1S+xT
yZfS/whcIX8v5FjQmDT7antyPJZ8tsSQY0L1yvVrK8qRkM+KzvwnjP0lMuxi
7E+kU/k+3ixyrFk2/S74X5X6rKiObGXl4JV7l80sXXK01LlC6ZS72dv+efbF
dAaahiyjZNM3rdzoF6UeSznS0lz7PPJ19KZE/2vQOtf/i6D/OZCtXZZr31U2
t3L/D1e1L6E3AIo1poY8P+mPV0POcUjXKKezi/1cX+Bckc7M/wFstkPO
             "],
             VertexColors->None]}]}, 
         {RGBColor[
          0.2241733962264151, 0.24550325471698112`, 0.2671391981132075], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
0Lwbfe5W5v4NWIWdtsq/i+xutAf+EPhwhvmoMyHzU8rpzxSbXxicb/mt5BzE
XhYR1zVjL1kxs/Wy869y/lMLLWcZl291DdU0miJPc8ZY7M+0tMVnsnWPw+dt
+HSCzzBon/DazkURyyeVS85gfyvQQ0v2eDpqb17vvVrMfJvsQxvmtWOUMncs
v20d/qzQakyqL2XkW+6qu9GKufd6bWcf+93rdaFi4C3Qf4xvrQ+8HfgT4L4x
qweJ/gi0B1KW6yX5/Qia9dBMDVneq5y3ImZ2XDa8Rcxspd6a4tn5IYtpVRsr
D1l9TPe0qd/Vofxe4fB77HeHx127uV+9GHvRw4dRs6Gyn1vg0wQ+D8LnSvhX
AGcrpgrZXdE9GZltObPy5aEhqxeoVvApvxfzd2/PQY9nm51XDe+ikNXx9ir/
83e3Gfwl4PuAX8yZ7M+xnOev/NJrRE+BX5ljNnYX8mwLW82qCufelTvwFndg
J/jPwlbX2iGdh60eNYS5U3PsrIcDv+z1hz/h3cb9Vyt0c+r/7RtzD4ftLBrA
f4775S3Qn1JNDP1/BPxjzM5iK/AZ4CPAB4Hrxg3uqPqJ1xOU09/hufkg4Gdz
7A0OBH4qx95mIfRXu617jztchb+Xc4fPxoyveD7O7yT3s/Oh+Yl7Pq+O1TNK
41bTWAD+BPgF4DewlzVhqylVKGaD5kJo9gGf6/T/C/35rLWqjuV5bTzXOxG1
mqliuSeQc67XfHR+yxnLGMPhEUqb3VN99AOve8yG50FkmAHP14GPAb8O/GPU
fKr86QR4rskx33QG+Aq3dTdxF25hLIT/XOb+wNwXmbsUmoM5lgv/BtzMbfVJ
4L+5zTwK3Mht8rURy121l2755rPlrxVv3u8xZxJdtvZ6YFfW/KbQ9tUwYr5c
fry2agOeD96bb/mA+PzIWo3dbuuur3C9HAJfBv4N8HfC827GO+Afj1scoxhG
drFdxGyj6rs3eo1X9aESjx96wuNBf5sp8vL7yM8LyXkbAvcBbgR8kt/j/L01
y95xtMjolQ+1S1u8sY31r0iZ/bkD2m6Mm6GfCb46+MvB3wlucqnh94BvBn4z
+BPAO9xePck5tGTkcBYj+W3OCNUxO1uDcS4jLBxndgg+IeDcAoNb89u1zOY2
D1tuqbxS+WUzzzHvQ4b7GbdB3zfXapGqQz7Mb8xrkj9ELEdSftQK2hGlVkvZ
hIxNUmYzW8FvjNedCqEpSpreLuX30VKrC70H/SxGf+jn8BtLGfwGci5kDEHO
IuRt4PWHr6FpBU1leH4BbmaZ+VzdxZ2eU88A31u1jDpmv3Z4Pp4Prp7XK5LA
aeCfs6wu9VmuzZ8HbmCZrat73drvdgm4cq+N1GZfJ5GjLjKc5rdzymzyTPbU
i72FodnotRPVUOaBfxL8EPAvwuMFl2008JPAdwIvgk+R10N2Aa/0HHAZcyd5
HSwFbanXbU7nWtysmFk1hole35Df7u++ew+/+wpMP4PgcyF8zmRie/jtx99X
wWddlt0X3Zsh4IfqfoMbzrwRjM5+nzr7/RoG7mbk6Ag8qsD2IPmzwpYDK66o
4bSi0Tk8X2D7vRG4n8u2mHWWM17IMvu0ym1U67jlNsprlNNc6H5hdNL0KB0+
BvxKqckpfgOdp3Q8xvWs3Ohaz48qha3mqHqIfNQ17qd2w2MT9N2hHxOxmF7x
vN7ThWX2psbwu95teKO45VqSR+/vIn9HVwG38Df4KPwGM+6B5+MRi/UV57eM
m4/UurLB77kdPgjt8VI7B9UtfvS8uAkyF3vNUzUn1YEKq9ve1vu5ybdscNl+
h8cpeE0AX868uqr5MvfbArvTus96T7P8bl8J3KjMzkr3+kK/29nMuydlc79T
7SVmtZd1Bebn5OOkv19LbC+qCT3sdZ6fkmYHZQN38fuRbBzwF8BbXCeT4LGl
wPyp/OpWh7+F5nO/e8PQW+1i2+8hcIeTtucl/G4ptTuzu8D8pXzlN7yFqbyF
eryFtQXmq+SnlEPf43n0l9zNa5DzaGVbU3Jo3YIE54AfSfEuBgB/W9/6bjcx
7xbGVvZYA/w/wQfgQ8CbgGsB90rZOf11RjGr16g+IJvXI2x2LyNh8zVX8cU4
jzEeiFqNWHlQImF9NfXUpPtyP7tn2VNGxOqFu8LW61Kfq1vcahOqS6jXt9Xj
qzz4zHE+nwNPY0wCviNuPULlho8mrL+oPU6LWvyn2O+HsPU5FGupBzjZ+4Bn
0e1wr/VdF7GcUzmFeqrf5Ft/ZxJ8dnqNWvYv6TZQsdVEj6/mEk8t8DqY6hyl
XuuQ7pMJ0//xhNkp2ajewHuUN2Van+RV75XUZ97TXv/cnms6kn4251qerBz5
btbPYWQiwz549HH+T+dYnCf9q3+j/rb62pWlp/oGj1dNmFGIbJehs0JGU+5A
wN5He29COo57D1S98creHw8S1pdSTyo7bnGeYjzlf4M9t6rC/1f13vqwpMUT
8omq0Y4ttjqt8mzFoIo/q6mGzbrdMqyfVpgwnc+KWU1Z9WTxU89ePJWDfuE2
X7WBtl4fUD9G9QjVItS3UY6q/FS+KzNs/ku9nQXeG3olavm8cvNx0PT0Hnen
lPk/+b7Ho9ZPEn1ZntWbVGsa4TVs1bJbRK1upZpVp4jVVlRXqY/Mi5E5jQ6H
ZluMrvj8Q/kUtzOykU+UmZ3sAf22+tbbuiFq9SbVmhqC3+98dkI/3W3CH7z3
vSF77+qr7EpYb0Vv95aEvV/ZTtl32c+bItarUJ9C9Zu5XsNZU2A2RfbkgwKz
g5JN/mpkmfmsooTdM92xvsC1S+3e3o2cS5GzRQ2L+4577imb+rrXtJ9nXqbL
8zNrrvZe2z+gGQlNNWjuhM/iYruTigdPhSwmfBx5f/Gel+xfdsRsoPqx13l/
dDL4TPAp8M+Du6DUbIJyi/0ek+t7h0P51j/NSphMkufNqNWMVBc6LNvpfdIj
wMeAHwDumbC+o85Fsqq2qtry5JjlSMqPHgXuCbzjXLPBf/i5vB+2XrtyIvXb
3/X8qCTPao6qN14G/ZGQxVOKKw96Pr4x1/avvS9h/WeSFs8k+C1w+6Oa4qlc
i5F6e89BvYfT7O85t2+Kbda5T1XsPyVl8X8X4OneI9A+1S8SfmnI4nXF6tMU
A6bsnkvH+3JNz+p9zff70zNtPTPVyt7MtT6Z3qB84yD3j8pXlLco71Yt51ih
1XM25VlvVX3VT0MWT0oP5xWYL5Qf1Fv7yPEfh6xmIf2oFn7We83KNet4vqk9
jfBvZpQj9fK1FYtllhlPrXOxv+HOzLvKazuKldXzU/x8NzoPu41VD7DE42rF
9U285zs913qQqpeeZI0aKatLrEJX5cUe16iO7ja2j8fjim/vLbWz1DkOZF+V
U1ZrGxK2nr3u4VHOsIX7C+Wv6zyH1Xkc89rczoT1UfX21cde6+9rFvMGuv6V
u7T0XvCcUovhFKuoL9TG+0fTSy0vUk6kvmKnYust1oxbDq/8fTY0j3g8qfi6
kd/Jsaoven9cvUnVy1VjH+q5qXLkUv7/Za/zL4haTVbvTvnxurTlyLJnpR7D
9IhaLVXxw1fgG3pO1D9q9VbVWtWL3pq2frRyrHM9t3otavVf1X71zcj1Xut+
KWQ5mGh2oOfPUxZv7OV3j3LjqvZ9RHnEvpHQtxVJ/xZLNdfhXnfVNzXd/Bub
2VGr88qPzM+z3rnq21XyrZ6rep16O897jVr1pO1eU5pSar5cd2xk3Gq74v9A
2L7Z0vdaqlU/6/XqYSGrHahuoG/QPo1bv1h5/x+FlvsvrGd11b9qquArCq2+
0ajU7oruyYMx6/coltP9OpKwO6b7pHqb3uZ90Iwqsbq0vlNrmLYzVU1xp+fp
n4csh5etvgs9POW+YF/I8lid1xvwfyJpNQTFWWdyLdZSrPFnrsUbikdGu/2f
zV7v85qJznaFf2+gGKFqxOKEmTGzubK3Y+JWB1cNXLWKBr5WFfi95Gc0I2n5
g3KH0zGrr6m21gs973Y9S096w9KVbOcUt5/9wlZjVX1Vfm9pwnyfvi0a7t8p
tU3a9xZ6X/Ibw9x3dAnZd4Sqka7PtW84ZM+bJu3bEdmQKYpn/HsYneEYr+Go
drLN6yTKEf/0vKxx0vyB3p1svfqw6i2uzrHapeqWPWLWV9DZ6V4/6Hf7NPyH
h8wuygYu9G+cpibMd8pvrk5ajUbrrvAer9Y4ji67otNl2IRThXYXdQ/VR417
r015zAVl5mtGAh9Dzt5ZVrM863XLnJT5GPmXNqxX3XOHM/AcETJfMS1p38eo
JqBa4AKvB6rHWOS1977o5GbPX5JR65erP66cpmba8Kq5NvL8+j/wv917B+qJ
VQlZX0x+Y7/Hsc+z7jt+T6blWD1XtVzVdGd4XXd60u6TaJSjD/Gc7kCO1ZRV
j1kTsb6yesr61mOzf++xtNB60upHfwd8q9e9Vbtq57UsxeNHSsxf6Dua+fWs
D1jBOpeUWe55X4HVv0Q/NGyxi/yF8iHpVOeoWssnXqtXXNndv5s6EbOasurJ
y/xbD/mpyUmrxUjnf+Ulfs9VV1L+oe8+5A9z3V6VJ+1t662pZ7LX85f/Azpm
adU=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
c2nNyTWX+S/6/N/yyGk2VtQ4iR0ZMzJ2s476tXkRw1nAPQ8k+QvGm8yVmG2c
vWXkTBydxLCMXRljOos9NiuxR9Qp91LfO8l/NmZlbKwgO2KN9u9yrlck8Sxj
lOYWG3My1mSO8e/g7CTeaAzJ3A1zAucnORxzkxwOczfM0fDs1DNiz4YfT2KN
nll6VmnMsTrP+s38cVAtiXUZ0zKWZcxLX86YiLEQfbpaRWHTaMvULIqzBM8Q
PDvwTMGzbs/APfv2zHt0ZpyBe/Y9Cl4vM9aoa7NuZthS2ljaVtpU+qL65Pri
+qT65v+LWWWEj26s0Bxqc6eNGR5jLmQSz70B9G4eOZ/64vrkxnr3ZUXs2Ta/
FobNoq3yS2HY7iW8t7gobHhtK3OwzL3SxmpYFDbV/2ypoohNO2fOlTFqbS1t
Pm09ba5fs+IMxrMXY5jGBtvQ9sQWESM8gjF/wjiWgxqZcdb7IXxZSZz5aisu
41kfVIXNqG2nzaetp41nbsGU5GzaHAPPboypGkv1DEfbU5tQW1Ab1FikMWxj
18Yk+yU2qLanOn8n7y03NwHsgO9JbEBtv93wz8rjPwX+l2AFvA564c70sKW1
qXfyXYdnxVmVZ1bm0gzm+s/VI6dGW3184utdl/hG+nz6evpIc8zpy41cWnNq
9f30MfUt9QH/m/hU+lL6TJ5tpTOWZi3jjMuzH898POvxDGgR9/zULOSFPsG4
orAxtS3vKYrcHX0mfSVzeObkRU69ufQv54WtNZ1xTysMm+uo4vDR9M2qEl/G
HBFjT/o05r6bI2lupDnw5ubuZJ53ZEeO7p/Gs7Mj99x8J/97YQ6z+Xj+B8Pc
x7a8u0155ECa2/8R/MPyyPE/NfF5rk58sH30//z0yO1zjjfx/CVJfrsyydio
MVZjq8ZIjY0aMzVWaozUWJIxI2NFxpT0TfWR9Y31UQ+WxpmaZ2kHSsM2HqLt
UxQ2srawPq2+rDaxvrU+t762Pra2uTa2trU2ekNlbFbsTdfI9GZhw2u7T4Mv
zIozOM/eFmSFba7Nra2tje7ZZnWuVWsZZ5z69sYIjA3o45sbbQ61udPmSBvb
M+ZnrM8Yn7arMT9jfdqw5kJfStvu5ZETbS7o6tzIpTKnyliaNq+2rjE1Y9XG
4Iy9GbM2V9z/zPhfGXPGzY3rlvxfxBw5Y8/GpI1FG4M2VmbMz1ifMbOVuZGD
au6pOdieLXmG69mtZ0zGKo2xGVszZmms0BjatUnM0LNNz3A9u/WM8w3Wwhfp
ETs0hmgsQR9b39qYgraCe9y9rc1gbMeYjbEaYzzGbrrBuxZFDGessr0wfAPt
MW0VbRhtF20Wc+3NATf325z78UnMyFiRMSH/G2FOvrn4/kfCXPIhuZELbE7w
d7RrnR65WJ7Jn0k/v02P3FJzTI39n07dacVxBnAyuDI9YgnGFI6Hd0/2rzEP
Yw/tktiEMQjPJg5SHkiPMwpj/55ReDbhGUBT+tQ4J3LzzZlX9iqTlcXLEttU
G0vbShvV3A9jpMZGZyaycndJ5N4qM88rj/8w+F8C/1Og7zyTOXy+Knzol2h7
b/PIRTQncVXis+mrGVN4knJzYfj+xgD0HfUp9SX1If0vwRfZkdtvf98pjBxi
fUl9SnOH3yoM304f75XC8AH1/eYVhi+oD6zvq0+oL6yPqm+qT+xZjzFrY9We
+RRWxBmsZ68FFWG7atNqy2rDrmWsZzDm0/2vQm7kaqzJjNxofY7PkpiNsZoV
SWzHmI6xHGM8nZj/C5P8dn2IsazjUVlxlu+ZfrkxVHN4QZl7iHu2NotYjjbU
pvTIiff8wjOZh5x7cLP/ycgN21ubWVtZG3wsdXNz478N/sfB/wKYc26uuf8J
MNb0hD5+UcSctLX1UfRNtLkP8a4mGXF25hna/wc04HbH
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwt2Hu4yFXWB/BfOUgi5Bw5jpxzhOMcimneaup1l6ZXN2pSo0ZR3kjHtRsz
yKXLVDO5pAuhcktoKjUupTQSEkkpk+eNJtfjksklNE/vZz97//F91lq/vffa
a6+99tpr/4p6D+xefnqWZS1Oy7LK6OT8LFvcNMvegjvxN1bLskUNs2xdSZat
hbfwr9fMsm3a9utTATvwFfrNKMqyr+HdOlk2tSzLpuNXwCE4CHN8m6NtCX4v
7IGZvj3v2x56ttKzl54v0N3ko+Y6DD/AAXPvMO/r+NdgPqwpibYcKsiyW/A3
wxv4GTWyrLXx/65v/jO0o63ImwrNUZplfWpn2YP4z+Bz/TfCBugc9Bk76dws
u7RJll0C0/Anq2TZtedlWX7zLKsPP5n7R/POYvtya5jG/v3oK+RSbSPoGQ4t
8cX6bTHPt+b9PxiO72v+D/X9wph3jD2rOMtWkjdY97/Y+R1sxu/ii5p09Et2
bWZjDfJHxv0I/4b5xs2n42Nt7fS7Q7/n8KvhK3pW0fMdPe+jW8jz9P/AuHnG
/IDODXvi+9Xa8/Qbic4mf8/O/eytgJH4e9i8Fd1RGu0fgf86+JA9n8BY6/zG
/Bvxm+itYk2V4T363wrxQGc7umubYxj6Qthf40/RdxKewz9B7zZjzzauJqwu
i7E0GP9QXXsGf4PVYvUm/V+HF4zZYPzv8BvzsuxTWA+bG2fZ0wJ6gn3rZM86
wjX4y86mR9uN+hRr74Y+QG4mRubZ77nQEj+rKnu1XQ6XwT367MzJshMhHq3z
EMzBL7DuoyUxLkMsZuY4Qu5hvjvw3cw3D72JPImOEXT1Ne+D6ETyXb7fp30Y
LIFZ+hc3yLJGzaiCY3zV/Mwsq+7bWeTq8GU6J1Xwn6U4qay9MrmneD3bGjaJ
2T/gfw/H+Ppd/ZbDYfhZ/3vN3T4vrqktOoB8q/F96Vlhvj5oT/Jx/U8ZfxI+
SLH0P2y+ka1t2DoVvYr8mPH96bnG2v4XfZTcFC2CQuhFnmqu+/FDoLp+T/t2
H35DbpaVhD2ATfg1lfigEb/ROxd2mGObueqwYZm9ecCZ/jtamzy9XpY9fH6W
jYZZ+Kus+zM6mtO1jp7N+I3wirYx+nTVPg//MvzINyP4ajgcw3e15+fge+O/
0K8XWod8s3G363+EzbehPcijfD8V/GvMcXQk+Vo2fYSugu74Cm1jAiXvg/H4
X7H9Q/w1+L3au6IryRPEz1ewBbaLn6fE0l7fHw65y5iR6B7yVmtpYW1l8A2+
whp/Mf+j2h6BHP1uo7d/w5i3Q0yGPNkPP12/9vr8x9pm41+Enfa0jr3+b3te
135/T/6I7hX25THrXYauCr4siDkm5JX29L0mz9xG12o6zjHfSvRWcidtn+mz
UPt6tCM51zle4Xy+B7kh7zuz6/VfC2vgDuPy6Lgk3C8pf/8NvZj8sTWeb/7G
8An+Q+utoKctPblyQ2u695F36t9d/26wB/8NHZdaz9nWdpG1dUAvIc+RK1rq
fyEbxqCzyU+iC9EF0Cro1vYmu7qx63R2LcW/ASu0X6H9Su0zwnrI7dFnU+5a
Qm6HX2D+i9jxq5AX8JPZclzbJG2P6fcjeoz8NlyK7+DbM+hicuvgW2MmGjMP
bUV+V7ydFHcn4Hi9GMN17MvvQh6DuviBztb59rgICmGYcTn2vh4+D3JhkG+n
6P2BHw/Ax3x5mfGH8B3RU2hTeo6jHchPwmC6u4mDcvQJ8m7zv8WeN2Ev/gm2
LNe2BP4O/2gc4+YIHW3xbeAYvi69Zfx/un1oaT9aoaXNYg0xX8zNkle258d6
YgHdO+jeDt9CW3M8yPbmYW3WVII+UBLvypnGzDD28/x4b/bw/SC/7bTOCvSm
EA9s2M+2hezai+4ONtF7OOWL5eY7il+M7kcrYA901rYlP9YmoR6ZhX/ZXLfI
R03lpSaQg68sN7UWj4NgIFwnJo/a0/nGjDdmHDwM+cbOYvtMuM46VrLtFfwu
Y3bAQ+J5hrE78V/Kf5vhc7hQXKyrxWfo1+SvYAtM8O25MKcx5TANX07HrsJ4
f4c7+4AxOwvjnk1JawprC/v3iP5joZ4xtxg/PtRphTFWQ3weCXcqHSv1P1P8
Vwtn1rgb6Nho3Z/AUGsfwA8b8HtgPH4cHMBvPzvWTNene/fq82L9lMcX1yd/
jOSjXPzF2nKDT/W7HP9f8LG5lpq7u/mqmns1+dGyWP+EmudD9BHypLJYc4Q6
YwM6kTycru/TvbEdfYj8AuTyW01+q4U+3zzmlvnic4SzsC435plhzv2zqe47
gA5tEvPXUujBH5tKYy47JJb26X+3uPoT/iCME9P9xfZKMT4ZHUt+VhxOCmca
GqcarTMdB9lwnC370E6l8e4oTbVHt/rxHhliTHmoUc9S+xk7OOjQ9rK2l+Cn
dAf1qhfvqXA37UuxXsjG86Ah3EV/Xu1Y42TpjmhRP9Y7O9h4mK1fV+cX+reH
NfBj35Sru/JnP3xFXjxL4fw8lOqYDvr/rP8p6IxfxM6f1Ggz1GzT4R38evVa
sfHn0XOYvmb4IujC9odhNDRlxwL+rqVPTW01oHpRrO/OYf/t7K+Fr4evAxMK
Y/4MOXNKyqv3oUNgMMzw/Q7fFrFhLRs2syHH/i4k3y4eWtv7VnBXqtHC2b3e
3O3E0JB0jpfWjzVHqDNGpXt4kvEv0TeRvq2Bkv8Dvehe4iE1Hv2ZnGvM2HTf
L0frhhrK/lVN+aISeoJ8uH58q4T3yZJU24S6p4mYaCw2ChvFGujXfL4m3X+7
0YvI+U1iHgu5qx8f/pP/+uXFWizUX1fiq9ijkegU8jPQPdW9vfE18TWgDGbm
xFq3f6rTSlLdOzwv1q2hVr0W38jYXLQH+Sb4hS1d9R+L7xTiA38nOqZxrPP+
gj4FXVPN9y6fPcA/98MI/CP8WGbtb1r7G7AbJvBBb+v+0rq/gH74W/jin/hy
fH98f3RrqKnRp+GvcIw8ula8d75i16d8dTQ33kEF2mdrnwWN8HX0+8781bSf
AW+E94r968KWdWwYy4Yq8tIV5D9rfxGG0HcmXY/ju9u/IroK4eZUCw/SN8eY
dcZ2QAeS+9H1EsyEHPJx5+708LauH/kX0dPCHOgP9vMQ3BB4bfvMc6n5LoH1
+NXmH10/1oWhFrw61ZA9tY2GUXDcOhZbR2fzD2kabamK75Qf69DrU106rn6s
SZflxpoy1JGl5lmK/wC2QSV72dK39/F1Qvygv9bvNbQ2+S20HnqZb9Pwb4ZY
EIsd5KD2sNmePxNyo/M4y3l8BUale2mmfDFJzjlDznkbndEs3u/3woBQq5bE
uz68pXeleq5Fw/iuLrOWW62tJ1yAr+oeedz3ytqP6NcRfYx8NzoNnQrN8I3o
W9wgzh3mewd/nflv1zYl1UtN8L2gKnSBK+AJbUfpvYFvR6WYHY52JzdoHP0V
fPReipFXk7+Cjxaku+W3bK3G1jPyY1yF+NrHhhxrqwRF0EbufJ7Ow3TXtocH
0efIh/Srob2R9lL0YKij8mOshvismmJuZvBN+ucwCJ1Bfjs37lPYm3PZM65S
PFcN0xm4u1E8Y33obM8fw91bA9De5PPNfSUbhlpvB7RxcXwLnkhv0qP58V0Y
/PSkudqZt2vyWajFF6bad3dBrMu/R69Hr4NXU407rCzeNeF+mZtqoJX58d9F
+F8xCT+1WqynxxlzjTGLCmJtPUz/RbAQ7ku5e1xZrGtCLfN++s9xszWutcY1
UDvd/yGHz4DpMLA45vN2DWMchdjphL/ceh4Pbyjy4/inQlxB1iC+vcN7u0qq
Zwf6fk+qT0PsluMv4PN14f6B1vje9nRNiB/yePg03Ut99e0DveGFklgbtm0Q
3y/hzdIx7cv8gvg+CG+Ch/Fdg//oWZbu2LfDXpF36/8d3Cm2PzB+F/4QrMd/
AkfSXV9SEO/vcGef9L1ZQXxnlLtLtrlLGjSJb47wv+NU+ud1vGH893FmQawb
Qq1QO8XmU/br7vTPsA/6JLkr+if0j3Bd+scU6toLSmOunpxq3AGNYn4POb0o
3X0TGsR6KtRQz6Rc8Udz1TN/HozC/7ZGfPuG92R4Q1aqH9/BDbSPTT4ajeaT
H/R9oX6/WNth9AFyZ+v7jVw1UZ76XL7qRH5V2w9wCO5P7+U2+TG/h5zeMf3H
aiGXDbKOgXBBelNejD5EfhDapLfdUPxF6V15YahRyCfOjf8Qwn+DD9MburO2
sdrGwFXpnbkqnJX0n2k2+o+SmNe7hLspP94z4ezXM2Yovw3it2VoHrmcjqmp
7ivC31sYffcH/jiNX0YWRD/eWhD9GnyZS+6J/z1UCTkVuuCX2N9rGsbzEM7A
onTe/2r+P0Mxf7zOrr/gWxfGNYd1VqQaN7xbin0vZkvf0viGOZfcB3rD5FTf
hffrULqXseXbgviWnaQtV5+6cFuqwaebZ2X4JwUvpzfgG3TW0PcsuCfVCZXx
d6b6YT6aE+psY+akt9wr6CryXHQtugYWpvdo+A8+JeWfifnxn/hdYnGwWBwE
5SE+nct+DWL+DDnz3lT7jymIMRji7g58jvUstpYN5E9hKP5+/vt/7imohQ==

             "],
             VertexColors->None]}]}, 
         {RGBColor[0.33152332075471697`, 0.3656383584905661, 0.389215], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
sjdr3OZMzrY4XvwL6JdCl1vf8kbFJJNrmC3c6LYoBM2cIvNlxxMW6yvOL0aW
RSnzZQuAe3u+1h5feT++cgO+cjxjm2Qbf8XaFR5vdwb3aZGttx3wNuB2wOWM
XcrY22qzNyGzp7KljzNvCprRzHs9/cGEyTA4bjme8ruHwGdmm9/Mof8SmgPQ
1ATeCbwFeB59C+hmA+8C7lJk+K70dd1frwB/M78XgT9Bf8jz/dXg2/D7LfAP
0kezzU/fjQwNvI6heP+1kMX8vaHJkv5BM1GxecpqF7XBVyaMTzXgpQmb61n6
u2ltgduwDx1ilpcNAh4PfBH4C3jvo+2Gf1vdr4TFDyOgmQZNdfZtC7iOfNtY
z85btIo3bwX3Pd9+rWd+JurxbdDI4gzFGK+j10PdLs3PtHqfan0pdH6y21Xl
auUeg53knn7FPV3CPb0vbnGGYozHVe/hWy/wVQk7M52XYqVTnv+K323OUzWq
ix53VdE/4vHteOjv8NqR4p1xXtP4K/3VtIn45b3IO9/v/kL6gnyDrxFtymiG
hy3OUzxwMmS+WX45DM3v7Nsp9i0javNprl8bW+1JdadlMdNL6eSeTKs5Ktfu
xp71ili8ejjT6p6qeaqGMcTrLcPgk55v+9k3afZXtvcoPPfBcwU85zB2rtui
Pyu+8HzwY8at8NrUMvoP822flZfs97v5BvhpUdvn9sVm62Xn14B7klYKvmWm
7YX2oQx5Qvnm12TL5W9kz4uhPes1tK/CFlMqnlTe08dj+4kx00XpoWqx6R5/
KtYb4fZWOdnDMcvLVGc6kLL6iWznniKzn/KN37l/Uc5a5Xlrk8Zmi2WHW4TN
VspO/ga+r5+F8rmeHoerVneV1+tui5qPkX85z/cLfqZdWceDEYv9/g5Nue+J
7HrMfYHy73/l2J7PY67cfLPtqtls91xvDDo5BNm+Sbf9Xu66XZY0Hyn/uJux
L7hfUOxQ5vFDCj6feIxXCLwnZDZ2bsLskWxRfq7lgcodVPfq67b0Gub5ET6j
4TNTNeF889HdYmZnZWPlA791Pz6Zffvec9tZ0EyCpib7cE+22VzZW91vxR/S
ye7sT++I5V2l4NPyLZZQ7Xyn11cjrHdivvn0H5CxQ67FwM+y7v4e8yg2ucHj
k4WeEyheVQ7U1X2H4oKOzkexzzC3M/KNzyfNPyo+GuoxzNCU1YVVE1bONMp9
TSVr2uo+Qr4to77FdIqJ/uqxjeLfFZ53zIe+0m3jYfpNfu/eBV4C3B34Afah
L2NWQb8I3Nsx2zfZhn8VmC4p1ivz2G9VjtVupDOvJsyOy4ZfAO7guV4PePaJ
WEw7N2zxrmLdQzG7/5JB9UjFx4qNr2V/KvIt5tH7Q01/g2gD/mXXbeWmu91O
jkaWNz3uUhzXwmOhSVGzHbIbzyD7q+47FPus8HjmVKbV4lUT6JC0eFGxovxV
tvss1QUnuQ+SjV/mdl41uR8aWk3pxpTFUrJdZQnz0/LRx9mbO913Kz4t9Rj1
iZj5Kp3F8qj5D/FckLT4Vec+lnWt8piwWcxyb933kcUWEyse1vvDijx7gxjE
/MM83/8lYX5RPlF293XXMdWD53hNWHop2y8dls3T+4HsnupDvbxG9GzK8m3l
2noraOU1XtVgqoWsDqM4tChusejL8HnY19gZGVt7vDcB2Z/0WEgx2s0epymn
qfC8JlJs8aJixZ/g0QN5Nl9qNTnVYVWXk8+/Mdd8+WjFPoUW4x1MWsyqePVk
2HJd2bpxUXvbkA6cSpjvl9+fEjXfLNs1DfzZQjsvvV/95vmsYpzTHp80Bt/X
37mmsN9LvG6jfGV60nKW54qsJqI7qPe35r4/stlXRc1uz4WmT7bd1TpRexOS
n1VdcKq/lfwGPAV4rd6bcqy2qLqi/NiKfLPbWwrt3Ut10bN6KwlZbHMC+mEh
e0/RHerjuYNqlmP87UB3aITnIHoXnep3Qe9dlzSyekL7HHun0RvNHuZphtzb
2YeHYnaWOkflgv/2d8PJjH3Ja2Wy/coNZP/XZ1vuIX/XLd/8q3SsFP4vep1Z
8X65x8B6w9zr75h6Rx0ZsjeXTaz32oTVP5UnjfJ7oRrPds+jlUMc8TxCsfx4
j7cfgc8Cr4HfAW6ax9g96Rtk27rkTzZ53jcnZrZPdk91svWev/eHz/Ne9/4l
2/I65XR6i5vo73Hj4vY+J/jypOVyytdei5m9lq1eG7a6m+oMyqFPe+4sX33M
bezhHHs/kz5sDVtNSnUA5X/1PDfMUlyXae/I5xpajVu2aFCO1bJ1XxpEzW/J
13SSjfRcOD1peZpytEpoR/hZH4iZP5Av0DthF9c95WGTPVdSfU5vvbojh6Dp
5rq6gXEb3Y/syrO6tuqcese7PWRvUrrTzaJ2r5U7zvM4oRc0s/2949qY1VIV
a6nO9IPXmu6N2xubaq/vNra3Rr0zpjNPsonF7Q/Cp9zfUxS/7Hb+ys8Ger1R
b/UrPU7Qe+NgfxfTu7fe4fT+9Rbyf+s1VcXX5wosbmzKWQzONd9+JmL1F9Ve
RuTZu5r819xG9sajGux7jS12Udyi98mjXiu+S/7Rcxy9H3byd5kbcu0+6y7r
DUzvOXrHqRWzGq7qt2eg/dnfK5WjJ3PM7ulNdWiOnWOnmOVO8lnKpbYW2lx6
S5/nb9yH0IEFnuMvCVuNTDUl5YslRZYzbuHMP/T8XbngUc/RVGfdH7bY+LMi
qzUo7m0Dz+u8hqPayQaPbxVHzPJY4kzY4gzFGMpHCzz3VO6i+oVylqoce8PW
+7Vy9y88f5ffUs1Kd/YFxvV3H/10zOIb+VP5h588Nywutrdq5a3rYqaj0s/N
8It7bvhmwnJR2Xndp8/8fzOmxCxuUMyg//t4xWtiytGXZpsNka+4xe/C4mKr
DSmPaBm12o1sr97zb0tZ/PYYuhH3+Fn/f7EvZf+DoXrhAq/d/T9QOUAF
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
HWvDNbKdNfAAvx+qFWswvSzusW0a/L9cX8j1BeA/pbHWzuBa85xYc65N16xr
1TVan7oWXDsLnAx/0evZsVZds6Nz4hl9tr8mz/YgeCB5xgtdF5S9bAdvDZrA
K8A58PNdI/CpoAt8EmVHyvPARPiV7luU14Mr4O/x33k5sbf4flWpq+eeAarA
7+H6Jp79I3A3/PFkD3PvGp/shTmU2bmxJ7r3uaZdy+6B34JTEz3TM6YkN/Zc
99ri3Nh73UPdO92Dv+Z/X4XPA1/Bl1EezAkt1D4W8vsHfn8PFsAHUl5LeQ0Y
AO/vM1PeDfr5LcpiD/X9rqgde0tt/qdWbuwx6bmx57vXpyV7vXu8e/vm5Cxw
D3Lv8UxQ29aG1HZU43auOsecW85Z92bnsHPXPdq58SqYl8yRS2lT4DOBnjnx
LsPhj5TFO91fFmPgu9/nuFButQ3Pvr52fPtcx7ws5oDvMhU+pSzeaWdpfFO/
pXN2lP9P3TwwMjvmpnPQueccdS46p53LzsnxtFlM20VgHHys7wBfAB6Dr/BM
yA7tXB91tvYc6JbM37+XxTf2275cFt+yEF6QG9+0PDe+od+uLDe0jr2JraLm
4bd8zTmQE990WjLnnevOabUJfWp9aTUKz6pSrjUuizPLud3UNVEWc3xcTqwp
19JY153ndU7MBeeEc8U15NpxzjiXX3CPK4s5PT2ZI86NZ8ti7P2Gfju/wUxQ
n2sng+c8x5I56Nx7PVm7j4IRyRreBDaCDeAj8ERJ+HD6bo8nvrA+rL6rPrG+
7zDPkJLwgT/Adn0SG3YC2Jgf2pMamtqZGtRGNfGCsN214e+izR354c/qLz7F
fVv4vRlMhn9C+8cLwjbXRt9K/TTqp3oNfj+4DN4L3Af/nH19K2f3J+Az+A6w
Eb4BbIfvAh/BPwQ74XvBFvhmsAe+D2yHbwNflIdvpc+jr6OPpW+lBqf2po/V
h/8dx/+OBb3h26ibkPgT+hiTqe9H/Y1gUn5oT/sT7U8NakdB+BD6Dtvh2bRp
SNtMkJUfWp82tba0ml8eddleA7n5oVXW0F5NC81SrVKNS21LzXIM7dbQ7j0w
uiK00b2JtqlG+qyxEepvAc/AR1KupHyJb/EXML5++Jj6luPgCwoixmFsY36i
tc2gnF4Qmpva5mKwKNE41b7U5NTi1MAK6TuX/8gBBb4L9dvgW30n+MlgI3wD
qAf/EXRNCy1V/3QZ9zzEtQfB0vzQqtRQ1U7VrObz3T7wm4PX8kLLVlNXS1fT
fj0zfJ5hSXyrfXr4bPpqavYHuOdX7v0F/Aw/BI7AD4OD8Kfpo79+NHgKXp1y
Jc/yDqgGr2OMA/4+qJ1o9XMTLVrNXq1TjU1tTc3zEP3up98fwcHy0P7V+NX2
jQHou+vT68vrw99ePzRHtcbB8He5b2XiT8wB2+jjfX6vBVvhGbTbzLNsAg3g
X7sGnPvgK/h3rgHnPvjW+U+5n3IJfS2uG7EWY0rGkoy5GFsyRmBswBjTe7R9
iXvmgn/BqzGWQ9NCG1cjN7ZkDMvYlTEmtQM1CbUINYRxaaF5qnWOVfukn3fo
559gdl5oq8aojE2psRpLMgZk7MeY0r5kz3av1ocpY04U8a6FoBReDPLheaAI
PpXz4RrOgz5gCvwSyu76JzUjJtnVswJcDM4HXbQpaDcedPY+bSV85AOgN7w9
dX+lHAXOhVdQzuLaTFBeGtpcBfX5tUKjG8jvGvw+AQzQH2oUOSPmihyCP8V9
E0AD2l4HGnpegyyQCeqBwfpUNeOZ++sPUVcd9INX1j7k/le4dhi0pG4pv5eA
FvAvKC8pDa3Q51H72k7dssTfN/ZtTNpY9K4klmwM2djxh0ns2pivsV5j2MuS
mLmxcjW83g1Dg1R7vLphxHaNeW9LYrzGro0JGws2hm2s9j/GnEsiZmss1Ri2
sWtjqsbe16tZlEQM/g31woYRWzfGbq7LD4zb940i58VYtzF9Y/nPJ9qjGqPa
ohrkjiTGa2zXmLuxf3MCzAUwB8BYhpq9Wr0xjYNJDo65N+b07KI8nvGqDnbC
d9BmYqInqTGpBXVLYhlqQl2Yd1cz70rYSz81/us+Tt2boDK8HdfOAx1AW9Dd
kmttQDf4ufRzA+gL2oGm1JVyrTFoAq9uP5SVQLWK0F6MyRiLUYM5Sv1i6heB
X+F/ghXw5eAP+BHwGvxVcNjrrLnj7NPr8AqfHV4MyuHjsGuaFUesz5hfJ+qa
c+100DE/YtXGfI31GrNe1ShyFMxNWNkocpnMaTCXwZwmczee0edtHDkc5jqY
0/G/XA74dsoqjPWRE3lGMK9x5DiZ2/SKeQdc20u5B9SEnwj2wb8ANeCDwS3g
w5NiTT2VF5qPWs9keAeu/UHbY6A9PJf1MIZyNMiBt6M8G7QCbcFPtCujLAX7
zUkwNwreH9SAN6U86FwBTbLCttTm1NbUxuxOOQu7aqY+JLwG4/QuY7canFAQ
Y+039ts65u5d7mnuZe5htSvijPNsq1URWpNniGeHmpNnq3uee51nrGeXZ5pn
2eFkr3bOOFfcs80NMGZvrN4cgWep+4N2x8AzyVxwT3Yvdk54NjqGjp1npLF2
Y/DG3o25a7too2ibaMOYi2XOhLkS5mQ597URtQ1dAz9SvlAR2roau3PROetc
dU46V10zrhXnrLaPNoS2gzaQc9s57Vx2jn+eF2eaZ9lnjpOxviQ/wpwHbTHX
mGtLm+xmcGl+5IaYI9KPe6aUh7al3romWSOHExvKXA1zKsylMGfDtXgq9afk
x5p0LWgzaCu4JloYq8kLLVdN94wkBm3suXlxrHXXnGvNNW8szhidsTljcsaq
jUEaezRmfSb/U1ERZ7NndJ9E81DrUIP6MT1yxsy9MQfnPL91fuw97kFq+2Po
a3RGaPyela5x17Zn5piiiBEZGxpdFLZJu2Rv0kZ5lbonG4SWq6ZrrocxWWOx
5nyYi2FOi7ks5mQ0z4+YkLa9Nr6xpze5/40GEYMyl0oNXO3bnKrZieaj1qOG
cyf1NxVFbNYY7W38nmreGPxY1bD9z6b/VvnhA7iXDgePJHuq2pKanVqdGpPa
6tTy+LZqrNpG2qDantpI2kb6ANr+2kj6AvoU+hL6BGq3q/LC1tLmUosqygtt
UU1KrVXNSa1JzVVfRB9D30KfZEB5aFZqVTfDe4CVSb6lMa1uiUalNnVxok2q
SapFqlHqu+jT6Mvow+i76NPoy+jDqG2p6arlqnFlq3Um+rn/MTk3YpTqtw+D
ZuWhWaql+fxqaWpyanFqao3BqNzIpTWnVq21Ff/TMi80V7XU1vBz8kJT1XZT
M1Yr1oZTy1NzVmsuSrS4WpQ1y0OTq1YeGrbaddXysN3V3NXateG1rd0j3Ru1
sdWC1QjVBq9MbFdtWm1ZbVj3Un1EfUP31L35YZNri+/xLATDkvikMU99DW1k
bWN9DrXt69Qek/jt4ETzV+sflBe+qTa/tr4+qtq9Gr/avhr+mLyIAaj9q/nf
nBeav1q0mrS+gT6Ovo0+wtbciPE4H40Zj6LtH0l805wxfeNLKiLW6/rRt9an
1JeckPie+nj6dvqgH3PufNkozkrPTH1ffQJ9AX1gfSd9Zn1lfahnWEtPN4i1
5JpS+zYmYSxCDdzYhxq82rsxkEe5Z2R++Ib6iPri+pD6jvrkCynvrYj17hj3
UP9J5peauLEuc5DNPTbm5VnqGdw+OVN/SGwsbSttuiuoG5TYw57h/djbGqRH
LMuYlme9NrS2s2d+i/TIOTLX6Kz0sA20CbQFtBGu5/6TqL88ic8dTGwIbQfP
7Nu4Xp4e14zhefYXgoLEBjg+sQE8+7UBzZUzh9rcaXPmhmIDfJkVtrU2v7HI
c9kL22VETNLYpzFKY5PGQM3FMKfJXCZzMq7PDh9F3+S67Ij9mzNlrpQ5ALeb
61MQ8Vpzfu5MCx9Z39g6c9HMUTU31Zw0cxUHJ7lu5ixq62ijaJto85h7dhXv
fGVh5KB1ywqbRlvmYnh36venRe6nY9aab/nPssjNM0dvVqIJqgVq05i7Yo6Q
uUHmsCwDW9Mi19kcenOnFiXxYv1DtafVYFWiQU0GO3NCS1RT3JhoZGMTTcpc
9meS/CvzHY0lmkNn7pwxRbXGTYl2NSXRvtTI1MbUwIzdTjD+Vxgx3H8yJpOK
IhfOnLjOvPeMrPCF9Im0BfWh9J20CW9KbERtQ20+c9HMITR30Jy0O6mbnBW+
m3NWX7CMtqWl4ROO5H878r/ngUcLQ3tdy7U1paHBGjvumx6xb+ffC1nhU+pL
zs6KXERj6MbOzUlsypqcmBt7uXuWvunVtL2qNHzU95KcJXOV/qXdkh05juY2
6kOaW/1DYeS6m2PdpThyxMwN61wcuWvmOJrbaA6buVzmLJmrZE6XuWTmeJnb
ZU6ZuUovwGdnRM5St0SjfSzxqfuD55P4n5rsgzznz1mRS2hO4XJ+X5ad5BaB
9VyrlB2+rD7tTzzrofTI/TYH3NxNc7bM1TKH09wtczbN1TSH6/jEh++c+Mi1
s8MH1/eulR2+sT69vrw+srlYy5PcNHOyzP0yB8vcK3PAcrnnU30O/YNEG+ia
aAVqBFerwxVE7qM5kNnck8qIXFFzmtSq1bDVrtWsX000BLUDNfA+3P9lQeRa
2sf/A0i01MI=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
wr8HPt6pF98M4Z0wL72X/x8USNjE
             "],
             VertexColors->None]}]}, 
         {RGBColor[
          0.5107687264150943, 0.5363716981132076, 0.5435308490566038], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
3SwO+rkl6TxJOZJ8+bxga58lHZMUjxQz66sdN2fDzxchH9Nb3Rze61be9iN0
qX+OfWTbkMPMRn6jgpyVg6wN+WQq6biu2P06954qW8UvVXDvqmLf607WNra1
T/uEuxwCfx/4s7L27/LtX2adwyk/eSjp++vu/bhvXsK5xBrWr652zK1EBo+h
24+i25/hh+PAs/DDb4Gby9kfoc8fQ/MjaO5taT9xstS+4hzeaBM8jWrsN1gd
5BOxtyvnbeWsKnCqGSPAOcR6QZVzBtU0+RnXNZXAG6AzHJw/c9dnquyfm8Pb
zJCrj6v22+hdrkNu7VL2jc+lrKPSpWbMecFGMuBWMPLBP5WwHCXDa9L2EfIP
lzIP5i1ivEUj9g0MdtoZHvJCLjGVd/wcPsfxjjeD/8O09asJc49a+7rhafsg
+Z/XUvY7st8pspW06Q9OOGdVTrJUOhDw68A9zrn3tLYPUI4rPyAduS9tPdlX
5jvrvh8h/33If05L5wv9Qs7wAXpxMNiL8pQlQeeVox2utMzv431HM45xl3HM
vyYH+ibHddWDofbM594XIKsO3H0F8v8F41Su5a2Y9F8e4GV/yvZ1AHhPyvbW
Hb05Dr0TjI9Z/yDluPA+5yQLnYP1l78JMa4bv7/O8Z6+RdZF6aHecE7wybWs
vR70UzK7LPh56c7joS5WXjM2a/1/Hjt+RfkT8HJkcQs4nzNvYu0NxgrWH07Y
X8tXK65ekHBs7QJu95AnqF6cUOCasSn8t0Bek+HzwhLnHMo3xnDmqUDz7LTj
pfRKOfL8UudTr0GjJNSVNydcW6quXJJxHqAcQPF8fvAzktmHQW4Lko73Wq9j
389DTap85GShc5Lxha4nlTv9nXMPhDpUOns4Zr1Vff9pyM3k74/U2Ocrj9sd
crlrwPkZIz/P8u4b3uIL5HArd1iBHIawdpxvR1ifpnOyzuHlOz+usv/8ssS1
kOog6fXnKev2LvZe1Mz+pzM4J6oswzOQ7Znwfyc8vMh6l6zfbgZnni53LL6a
vTsr3GeozTo/Vm6s/GtHjWPBSe57mrvcDp2vSkxLdGTfU4INqg77KtQXyosX
h9xYsW5diGvjkfn51a6LFd9mfhd34POTuH3jj0rdi1EfRjlFTtp5hXL5AcXO
50/BTyPw78hxXtwj9FhUq70c6rhb4aVnwjXmFxnnBMoH5POaFdnvzQP3uazt
fQHz8JCHP8x77EQ+jzA3g7c8zpqS4zrjoUrXGola50/KVW5i7eKEfbL8sWxD
PrkMnEzaee0n0LuxwDT1znOL/Nb3ce6PQ900iLm01DXD3/h+kHFfM9vB5mAL
pdBMpZ0n12fdZ1G+8Tq4pZWO709xVqMCx7iJzJ+V207rOLegyLnWwKTrJdVK
F2dtw6KvHFY5rvLYdszVaec5E5LuL6i3IN/fqdr+P6beF/L5LfJZAO2TnNG5
mfPfJbXOgcfDwyF4+Edj16Yrgm5Pg07P0Ev5IXufYu+Tue6v9A7rB8tdY8hv
VEKvNu2cJwt8btp52gj2bcZW27K3HtwzeO9OTeyD6+L2w8tTzqWUR1Wz9/tp
56i/494XKnfJ87ymxLD6Fh8WuJb/KWstsrZf5V/zQj+kX63jlmLWdzWeaj7Z
2fPBRs5RPRp6Mk/Dz4dx+/KV6PLC0LOaXWAZST6KIUPbOY5UMNfwewZwDWf9
IO2ceQD3fTHUQUt485uCj1XPckvoe6gP1zHouWqjJuWuj64Anph2bXFj0r0q
2ePV2MeY4DOVly0IPnMMdN4qdK19Gfz0ibve3KqeGGMCOGvKnVMqPu7l3n9l
vMDdr+T8bcGn3dLOMVL3ki9MBXm2Rc6rCvxeqm9yQ9xPoCfvgvcsOJ2h8xx0
1uY69/l3kW1NcalpyM2Up68Mtbz6DXeFnsNeeLu8wPnPUHAOl9h/9gZ+D3g8
8HTmsqAD6r8Oirs239bWtiQ72lrruk763BPcdwJv6sF0KXX/pG+p+ybqmSg2
5mRsd7dBcx40T0KzW8Jvpvd6SP3hrHnYUOsaUnZXzjtUhdq2N3v7xR1HZB/t
i2wj8+PWJ+mS8og9Fc4l/lLsOlw5nvK+duHuG8udL8ovqae4qp37isrF1N9R
PvYoZz6Vcby4H3hpzD72WeYNGdv4iIz5E2/q/x0L9dH+AsdjxeIVfF8Zs89U
Dltb4DxWvZZV4Y3U01ofagT5rU1F9l3yu5cEP7m7yHXXf2uumPsd0r0HCxzD
FL/U01WfVHdR77B/0vm5+nCbgv2uY+8LMfO/L+b+i963Lfgdk8691xe4Ty3+
ladfXeh4VIl8UqGPpPr4hlAX38O+GUH/lVNvD32P8WXuZavukM9TLJFd7wK+
NOQ8yv0bFTv/71fimK14/aci12mSg/p5X1S6p9e62n1w5R43JJyvKFfZUmjf
J7+n3ufY0Fv7NM/xU31y8Z4JcVN+ZVSwwauAr4k7PxwGPCbufHE48LVx55m7
Cm3/sv0RrI8NOqy+0ZzQO6pK2sfJv6kP8XXIVeSPtwWf/P9l4f8Q+a6rPgm1
VRK+Lq1y//J43L0q5VpfK4cp8T2uLfL/QpSfbCxybSmd6R5zn0Jv8b765IXu
ezSA0xucu8HJRW5nJ50P6H9BY8r8/yD9D2Fq1vJRH2tSqPvkj/8Q6mXF+Ymh
r/gD3u39UIvpnEWhxyL/JF8gPxCDfqek77UuYxuQ/sueHonZpiRr2aty8zXK
sWPOe1sknK8oVxnI2q9Cf0bymxbeV7nAwErnA09kbJ+yTb3D3eV+C/0v4u7g
99S/GR3kI9tdF/Rf/mZZ8HtvF7qXqve9Oea6WjV1TsI5jXyseOkfMz9HSuxD
5T+ntXXNLLmp//dWuWP07Ixpic6SYvcXlONNYW1RqPWmZBxvFGsUNydk3Rf9
NO5cUHanPGJ+kXOJ/tDfX+48+UDCta5qrpnQmBvyOvXyVYcrB1ZPelfoS8te
uwc5qJ7T/4RU0y0sd12nmKUYNTDkY8Wl5kk52Db2/jHm+KsceUT4f9zv5YdC
Plwf82/Bwt0S8M+vcq0rv7opZlpaV/3Xtdg1oOJefYh9D2Z8H91FNei8UIeW
6X8ioa+imNo49JAHFrh+kEx+GbPcJfP/AK0RZsQ=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
+a0G+hNj8LJ7FfgRnt8o9kD3vjywEKwtibX0ruqhZWnzTk40rQVFfIcZ1lkw
vyj2Jtdw1273qCezY810rfxjdqxVNyRrvWvWLZSZAA7zrXc/jfbpx2fU9SnI
g99MuYezQ9t2/9V20qbWltaGOkzZdeRdCw7Bj4ON8A3qLfAN5GmUE9qHGoi2
uja0trM2u7a5mqBaoDa6trg+p77miMQ21gbV9tRGHkq9M6h3OhgCX8YeUZfx
qQOWwn9F2lTuTQHDMmG7ajNpK2nDHiB9NelPg/1FYRtrg2t7ayPPo55JjPko
nrUEDCTPeeTtDi6H30ob3zMu32ljwJ8BjSiTBdbAryPfHPI9Cn6TCdtPH13f
XBtQ30EbXNtbH+Jz6ulPueVV2UtADv8/pNw/QGP4YvIcaRy+tj63vtzoxFfZ
nPiKavZq9fqMVzJug7n+RN9/rB626wjqGN4sbFj3dvcc9xr3eLUSNYPcRDNR
K99AvvWNQzO/lL71AcPo21LQkX5dxLP1BB0yoTXoU+pLqjl8Rd6WjMWZ4Ev4
bvL9gXyPg13wT8E8+FzwSVHs1TOzo7/u2b34dmZi83fj+zkHdCdP16LQdxox
Pwc1C81brXsgfBZtzDTmRt9aVQstRM1BrUFNRFu4qrpXTtjEvUnrx72+oBe8
IWP8AX3ZBE4vDq3Db8ZvRc2jNmlvcu8NNVf41aQPSYcta5/VNtQU1RLVONy7
tam1pd3D9bX0wfS99Lm03fVB9D204aszTnPpf3v6/h3P8DVrwDqwFvwb3MX9
K7QlwJ0lsba7pruWu8YfIM/j9OsxsB/+PukL0uFL6Q/kUvd67v0J5GSFLTqR
em4rCZvUujsntrBtzCW9f6OY+34DeZR5nrIbQVP4Jup/PB2xJNv4K/+fSEfs
zjRtH21ebV1tIPee+uSplx170Cr6uBPsACvBWOp8KCvene/wJMqNz4qxcEz+
x/991LMXfAv/Z1bYcNpuX2SFr+Ccc67pMwxrFGPmWA11HS2Jb9ZvtYblS8LG
1rb+Av4o12Vcb+dZJ4L/Fcecd67bB7/t+fyflxXf+A7uN8+Kb9Vvtrgk1iDX
niJtWZ7pSfL8ERyCv6VtnfhnA8C7/J+X+LumXeL8Zm51ARcXRSzGmJWxKmMy
aklqgmqBakoPku8D1zC+hRFgGv/f4f/bYGomtEk1Q7VCNUpjeWpSalHG9NTG
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
LIzIhE+hLzE8E9qdmptamxre/wHEQo/n
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJw113mYyHUeB/AvE8mRGcYchtHMmGFmqqfaSlSeaG0p1VYM5Q7VonSXRaIc
HaRy1pCOLR1PrVlHx0NYGVNjS8pG6K7dnqeiE4V9/Z7vb/94P5/P5/v5fj/X
9y66atxl1zcMIbwHjaBr2xCuKwthLJyDzzwmhDH5ITwJPZroo300flZ2CPfC
TBhaHMJ9DUIY3DmEH9uF8HWLEPaig8hf0DdvE0IzqNGvMWdPsjGe7YFs34o+
Qc6q5KsohJbQHB7LCuEjumMLQjilqfZOIewkH8oL4e7SEKZCLT776BDerwjh
reNCWGbMJnQbuZNxJcYUw0HjKtgYiy7kawHcjO/Pf62+y4yZa+zT6CZyM/k9
yP5s2MZHOz66sXctrGNnCJtd8RvlVFwSQhHU4ddnhHDA2DPZ7wbr8ZPVrId8
TpXfH6AXPqdVCBfRb6OfTt9CLH3IvdVrh7qtUr/t6Pnk/tq/0e+/UKTfDv1P
xdeIbTk0xY8Q37n6bcJPpc/Qryf5mtwQhncMYRiMwf9mgrcYc4V++4zph9aT
f5XP6fydBqdAl+YhLGkvV/4vOjaEkfjF0I/uUphGn0HXF39YfcrZ6QzPsDWQ
3W18FWsvgo/5Htg4hBPV6FM1+gR2w+tqdS0bzdn9Rb6N0WvINWx2Rc+AmfgB
dCfTTSbfCfvS9XW8WnZRy4Pm7VS0kjzH/M2GWbDcPM6gm699G/0KNX8XnUf+
sF2sdVLfpfhx7N1OV0XXDybgz9U/V04L5DQfPpVLqdxuSXJK+dHab8YfYWME
W8+xszmpCcwT8x7YDV/SzVHHu/AboRa/Q9vk9nE9npnusxvbxrXZS30+sFfe
h974p+yZs8VyA4yDXfyu4P8h/C/4n6F/OqfN1PkpY56EJVChzrPlc7W8RsEj
CS+3LWpUB5thu1o9r1bX0o2Er/EX6HsNvkg885I1bV3VoceR/2l+55nXKvNa
i98AQ+i2i+MDGJXEJZab2HiCjaWwGI7nNxg/LNU/hh7Rf6X196L91LuZcwhd
QX5TDdfDOuie1naQ+gxI98A0dgamZ1VA67R1bxvPrT3OnPnpWfM5fje8KMb9
MFfMa8T+An6g+s9lu6H5KMZfCeexcRsbt0JTfH2TuEYvgN4wq3Ncrz3lViWn
fnAp7FKzMrHuE/teOAF/tX1SaQ42i6UWTsIPF9MD9OPleQdUQ4G8h1lHbdQi
G74V2yxxPshXNp+t4RLoIc5DcvkbW0/D6/gtzt3x+HUp/yp6B/kF2IR/T1sD
fp9P2vh6lO9FsDytd9sO1ku59QKF+KxMa4b/EjUqho05Idzv3DhBW2nHyNdq
O558RI1+T8/W/ehhcgEbeZALS8ujvcfRfHJLfDa6hFxgfDZ7rWEVe9PZzbIO
V9HX6FeDZpJL6AqhPQyxth89ynlcGvdhsvfG5cU53Su/y+X5nPrejn5PLuQj
p2O0/WpiIzfeMYPTtXh+ZbxvlvB1WEyHYBC+KjOeGc3YaJrUtjKeH/3pLoMM
+lp9q/AFct6QnvNr0bbko/j5XawT+V3Mb0ZSK3S/tl9hAX4C3UH0B/Id+Ifw
B+DNQmc126+2tG7wG2GDeZwkjolwF36GOd1iPdTBVGtip3VSn5w3Ys7WpzXU
iXmNmHuLsRf8Edaze5rYM8XTRF2m8Psiny3Jd/LTnX4cv3fjJ8Ex2hvq1wCe
0m+y/rdrvwla63eW/rfhX+Grju+X+MvgezV5r/7fye1bmIIfY+yKDnGOk3kd
hx8jlon4ns6gHtAdftP2GZsT2Z4Aj+Pn8TWkfdyvyR6dJ98+8n7Umlur3mvg
CfwSZ+hK/ffDr/BAMt7Y+9Cawsj/hN5LXi2n79J99g26ivwG2zn0beBofTbw
0Rhd2z7yrbQ3Ir8s5gfFOs2en4m+RP5Gn270XSFHn136vyKuheKqFtc8dDX5
mPI4d8l8dfp/HfEz5DQdeiR2jF3WOd4XyR0xAU7XtkL/q4wfnswTfoCxHxbG
PZzss2S//Zt8g5jGwhioFttQcc5BB5D7Q19omhXvtjxrdqyzuE1+vOeGsXE9
G9fB8rRmk/gfD6eJ4VlxTUzqpH8ryIK5pdHGQf3PFsvJYnmDnQOF8Q78ypid
xn6R3ofbyuM5kcQ8An2PfE9hXPvJeh+drsN6uiZprFeK/23yIPQddJOxLekG
VsS3Wov0HdQkP77bBuuzhZ16yEnPnuQMny2Wc8RycXqef2ZtfmqNfgK34C9v
FN95w52Rw2BM+ubbmB/vwuT+ezt9ZyX2h6bnxRUdoq+vc6LNxM6XbH6VE+/j
tembp11JvJtnaq/Gn6jfCPwMWKj97/AyZNN10b8zf7uTOx92pG/wY+ke1ucU
+mfQFuR/WF+fwU/W2l5japJ70l4sox/sTLwQ/ZC8le4BuvthJdTof0CeHd1X
JdAtfd+NSWJM3w9HjBuN7wGjYCR8oW0hu3vkfGO6l69Dd5M/4aM63Y/voB+X
xX16ffrmfrxt3LOX8DUSMt2nzczLxcl7j91p6Rl3J9q/OL7jy83DjeahpCC+
6c9Qr7+k90EnfBfoS9eH7kIoS/s/omaHrIffYVH6jpmVE+uf1HxJev6udo/0
1SfDGlqDXwU/ymWGnKbD3em6noTu1f49TMXfpm14cjfBYJiSzulrxl/B3gBY
lxftTqCr0qeE/nL0ryXxH/QcLIPasvgnOs8eOBd6Qi4/5fZCLf0u+o+S/0t6
ptTJ81/ynOMe34tuJmeZm7PaxLnZqnaZyTyy8SNbP8B3UM3eW23jPCVzsxX/
JXsP20tZ9lQmXAlV9t0Gdtemb5Rn2V+Pb4PmobnQuiCuucP58Q+S/Dsape+x
LQXxbZe85z5I4+xI/66+99DXoyXkhvnxX5f85aapV4P8+G7cWRTvsOrK+IZM
zr6V6ZmUnE3JOXgpLE3viGr0z+XxnFt+XPxDvlMRz7zWbLyOvgat0jdulXP/
Iud+H9hlPhaZl77aLiAvwO9I9nFu/FuWGVMKHSrjP/Nkc/dm+uf7HD2JfLXY
30//i1vRUaXx/9oqmRfITP+yh5Papf+s/2g/RD5aHV6Sdy91eQFtnNwV7eKb
MnlHfqtfk3Yxh9Xp3LxbEfP5uSL+fZL/zvfoT+Q9yZmW5vQRupu8yHo9mJzL
sBj/SGb8Syd/uOTfdjAv/qsvlvOf1KAXbDd2Phs/5MT/ZPKHHKp9H7m4Mv4j
kr9DefJXIDeD57XN19ZIW1Nyhtjr0zXWQK4Nyf8DkvV9IA==
             "],
             VertexColors->None]}]}, 
         {RGBColor[
          0.7446736603773585, 0.7496235849056604, 0.7307987735849056], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
3uRxvRo9ZiPDGr6vFBh+lW8k4NEbXj3JdasipmvpeRB66+554FSB6UJ6WFxi
2FS4dCD3GhQ1nl250x+9lik3nymw/Cyc+3SlYd1IwjCN6oju1D9j97oCOa+K
WaxVp00X0kP3EusrFLPTudeNjEQL6y1yvb84Df+1nvMfR/YnGRci/xWs/cfx
8NaE9RvqNaYh2zbHzMv4vua4tIl7fOwxLhzxUKlhiUuQ6wP0tpz1f6tncT7N
+J6P3jpxlynEYE9GE7HQ2M5iXvF+DN1/ETes8gI6iKYNG7dHtr94/Y3Dp9D1
fyN3SPBfLt8fo4ZT5TMrkWe19zzCxf/1GiFsfl/c8PkC+C3yuq/afk6l8W/g
/0XlhrfjnL/H+yzl3T1elztDv8Qx5BL0l+sYRpj6aKHh6jr4bWfvePbeDP1T
GcN4t2GjWvcHYatNxeafwvgNjvOFbec4vh2QMSwu354Iv65eow9ErQar/or3
UMeQTeh+tOfq2cjfyJiSb3E2xGNNa52qbL039AvdJ3XXCY6LRpLfxhTZXabE
rQ+RbIrLH73GTcQWYyoMzz+BjH9gjEDOi9l7udt3W7FhAuEB9XMjHTf+HNMp
i+vJCcPHwsaqP2d5LX4saVj/Zz3wf63jZ2HV7ysNryo/bfUcJX3PcJ2rt77U
69eJQqsZqhfz2HuDY90F+N3mKqutp+Cxxfn0Qf5rHAP3cZzyImMQd18R9X5K
ucHzrXqaR10PE1KGpWSjevaG9pZXJe88P1dxvMdz1D/gMyxm9WtNkfVCqk1/
Z/0Wx40/IGfw3mp6wnp49e8/wXMBPBfAs4Gzzm5v/d/6pOlOelMfucJjtic8
n4tabnuD/3/v9hI+u6u16e2bhPXAytXC5tsi5tsPYMNpbsdRyP+D9/XKMQ+W
W55Rbd/awer73QnrZ4RFVSd3OVZXn62eXL22eLztfFaXGl4RVtmF3Z7xXkz5
Ka+95ah69HqRvxssKTGcpJou+4/MmO2GsNbbMVUj62P9DeRb9s6stL5M2F+x
LT9/WOspu7984fl25g+dyqzfU69XkfZ6lm94UBhRNSiWtjylHJWOGy5U7RiY
NEwpH36Xe3WMWG7/LXd/2d9brmbvm+ztzN6n5ePe611eab2r+tZ1Set5VCOU
7z9xfNWNvUcr7S3kA+Y1juWEKbY5zlyesH5GvYx4D3f+ys1DY5afb8dWDd47
jIvY243ebZSzl/hbk3Blo+dnnTklbeeqhoxyXKGeo877VuXiupTl5mrOWoUO
N+QYXjvpmK0L5/bm3L3Mv8rYm5fww9a04X5hWuH3rIxh+DroH3D6m+KGG5TH
lA8me95YlTL/kG8Ma294WhhjVAfrtdRnXQX//mnT+S7ueqXj3p7QDIDmI/Vl
zKcy39fc6k/Ca1AMnW30/jqrzN535BvqJ4SJhYe7s/dq36ueoLHE8MAdHazm
KR9OFj4sM1z3adp6Eu2dlTafkGzCJi2911admVRstWYNe8/3Xrih2N7v5EvK
08e97qh+fuk19Od6m7Caq15hg/dTd0fsjUi5ogk99ON3TZb1DYo9xV0tMk8s
MntF1df6u8pY1h90Xcl37nf/eZZ9dziGL48YX/EUhhro9UW48niVYcvRGcO+
wr1rk4aH5Od6K1rlmEr99GzHunUZe6dT3lAfOd6xpfKy8rP6x/Upq5HKvXr3
usZz9c5SoxPN9Zz1S+8Nd0ft/VR9rupSrb9R6K1OOFhy6q2rzvtc1f8DjgHe
zBiGEH7Q29L4InsD0TtovWNpvbOo11Jsqm/e6X23+qruXpv0ZlMUM7/SW1qN
10T1aj28d1D/3dLxW3bEcoryid4Ro46Za2JWM1QvjsQNS8kHjhZZD6b+K6fM
+gTVrObMr/PYXJT2WpJv/celjh8UxyMqLZZVSzs5tmyMWL5QrtBb2oXun/8H
swppbA==
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwtmnmgjmX6xx+U3REdZ3nPfs57jrMULdoIE4pUtCAqNG0a0j7tJTUtlKWF
sdWvtKlpT6G0IlFUWqZVRZapphqmBeH3+cz1/PE9z3We516v+7qv9a0444IT
z2+cJMlo/uzBMyc/SZplk6QpaAO9LDdJxlcmya2NkmQC6MD7DO8LQS70nqAl
dAuwB/QS2tZ2SJKO4A3obVVJsisvSXaC36Gb0y6h3W7oZulcrXm2yo85ZzYk
yccVSfJ8+yQZC9o5Nu+bg72cg++7y2nTLkkmg/a8z+d9HmiXrqUJz8bZWNO5
jPUQuIKxOoOF9D0NnAoWgCQ/1ujadrPGB2uS5NoMbVqwP9CWcXJpszfIgX6p
Pknm0G82eBH6dfgzj30+Al6DfhVcBX0leAW6Mf12MPZ20Cg/9irP5JV7XkKb
62h7LXgDOsP7Mt6XymPoM1n7Jez5YnAGdOts8ERetJL/PHcy9h9gD+hhrOtZ
8AwYCmbQZgXv3wJ/h/6DOSo5m9M4773BybwfwPvjwBDoaxjnZPgwBFwN3YJ5
92DeJqA5dDl7XlLGWkEZ9GU8v61LkvXgr9Cn0qeIvhlwCvR6eLkZbALrQOei
JKnriIyATtAJ+17EuAs9V+b4N222cgZbwA/Q3zDO8axtIPgaup45VzHPO6AO
eh/wLvSyveAheJs9zKHtbLASegvfp8CHm5GV1WAV7+7l2z3gHegs66h3TaAK
uivtNzDeRsa6d6/gxSz2MbMqeNKLPt3o+/meSfIZ+IX2W8pjbOc4je+D+T4I
nCrf2dOv4BewHBxcwP98+wUcBJ2w73vLQ5aVaWVrN2Puqg8Zm8Cc9zD3HHAr
dI28Y60dQTX0AYyxhbH+A/aHXsbaK+lbAZaWxdpvpN8NebEH17YZelNerHEw
azyGZ3/XDP0V53gx/S4Ca6Ff53yqkZcseK0yZMU+tlVmujLndp7bwGHQ8xvi
TD3L5zxX3v9E2x/BAuiq/JBxZbsS+nHaLkcm3wT/gK5R9vlWAqqha3g28KwH
1dnQHcq8sq4O2erdZS+/gS3Qi5CbmcjNDLAQ+lfe7eDbdvAL9ED69WWMo8AA
6DqenXjuC2qhX+Z5B8+pYHF+3MV86Lxs3MlV8P0Z+N63VZL0A3sxzwDmOQ60
hc7nWxFterZkTS1Cd3hnvavqkBHssyv7PAwMh54Oj/5eEbpOneda3ZN7cc3q
NnWQukcdt5JzPR65GAhWQB9D39MZYyToD72BMdtwVq3Bt7khS9tpu608ZCrL
OHXuFVRlQ1eqk9XF6sxJ7OFJ9vIEuD0Tul4dq25V5xfnhw1Q9xelukcdp25T
B6nr1KnqUnXeAOZ9i3mXg+Ogd7Cmuez9frA9N3jvGXu2nkFFNmTAsy+HLqhO
kj8jV6eDfOiJjNOYcRp5N6Afp90j6vymSXIsmEi7zrTrBCYUxF1/l++r8+PO
T4VHZ8CrP4Mp0Pfx7n2+vQf+D7on59eP8+sLekBPYowDGGt/cDt0D+5Fb9AL
dAfP0m8i/SaAZ7w/jNmBveWCtdC9GKM/Y93SMmTibPh6KHw9BJwFfS48OhBe
HQBGQS/kzh3IuAeABdAfFrJ+0L15knxQGLpNHabuUsfNAzdD3yQfoJfRppJx
K8DSwrB1bdArd9aHzdvMunojG/ej+zdBd2bOdfz/DegE3YvnOeBscAT4qip0
sLp3bVXInmcg75XBzszZhbkPBJ20XfCpMXxqBEqh19HnK/uCb6Bz6fc8e5sP
9lbP0acXbY8AO6FHwKsT4dkJYDj0a4x7N+/vAq9Cv8mayhinFCyDrmaf77PP
90C2JnwN77x3XZ+jPefcjnPYC7SD7sK8+4ENbVkv+j1hD7eyjlvA7rLQVcqc
sqbOkreXMPfF2eCxZ71QXZYfZ34Nz0fzQ/aUQdtqA9T99tlHGeEcnwENZWHL
57KW+yvCpo9n3m28/x1cD/0w7x+oCF9Fn6W5Np92rUAz6BzWewftpoI22o1U
Z6mrJmWDV0v1K/KDZ2PpNzvVL9XtQ7fJU3mpjpsO3tTPA9PSvTmmY7nHk1jX
8aAxvDoGdG0InaOuOQz6VM7oZM5qCDgF+nDkejTn8BfQDXox++5aFrzeCM8b
wdcjOes+2j7oH0qxT7S5AXwPPSc/bIa2Yjb0J8zxLXOtB/+EzuWZy3NvURG6
IY9xOlSHjujJ++N5X9o+7GlX1nA+axkLDstE27Npd1ZB9FnNvKezvpFgFfS1
YBPr2AiugR6nbwO9DlwHfQ3rukgflrPuB97j3Qj6DgfvQg8t4Qxq4VEOPAKz
suGT6IvM1A4w5+fQn4GW0APRgY+Cl/GtLwWTGkJHqZtuh14NMtzTQrAKeixt
j4buB86D7lceMqTs9IXuxrgH6Atom/V/adPHOw9GQV/AnZkC9m+CLmgcvtdK
5lpRET7Yntyby/j+M98ObRJ3ZwQYnt6hixljAGMdBy6CntgQPo6+zQTo1vSf
mo5/JTiyIWRY2e2j7HAOrTmHVqC/58JzJs8Z4LxM2HptlLZJm+/d1IZoO7yj
damN0DZowy6gzzT63g3Ohz4VPfA+fP2lWZL8t1nEDsY0xjLGELtY88Os/SGw
U5+jPGyqtvQx6PasvTs4HLQDo1nzkIq4O96hfZnnO+aYij7uB16vjzOQ969B
j0MOflCWwXXQ97Cml+jzIpiTCV57xp6tPH+ONWwGOfB7GeefRWeVgVJQBb5T
5hjnavCvumhzOe0vA0+BdaxlA/gWfAOK8DluZZ5bwI2ZsL2PsrZ55WGDS1Mf
TN9LH6sHz0Oz4ct+CnqXR4xjbNOrPHwH77x3XR9iIPd8MPd8EBjQMWKNF8Dz
acyhbGuTtEXKuL6pPq++rj7qB4xTBu9LwRroT4qRA+7Lwjbc+TZhO15XR2XD
hvya+pj6lvrM+yjbjLsfaNBHK4+YzljupfKQVWOmM1KZ3cgZHoBM7g82QNeD
geAR+F3H87/w9Vr2eg3YWha+8XqwLvWRrygIm6Ytuxx6Njx9lbN8BczKhO/b
g/fdC8IHXsu+9mXcfcCX0HdzZq1T/fki+u826AmgSxqvHJIfNlTbebA+NePs
yVwL0S0LwH/pfyvtbwFb62Lv+qz6qvKgGzzckcbD6jzvvmM6ljrAvXmmnqV7
1FbLQ3mnzb45Gz6MvstN2dDRtzHPRPArOu9MZKwn++gBzoA+jjMfqs4Hx0KP
o8/9+aEL1YkDWX9T1r+oaexBWzUsjUW1WT9mI2YxVvk39G7mmMpcU8Au6JVg
ObiobfBrTCZ8en350ZngtT6DvoI8/4g1bGAt34IPoXdmIkYyNvojE7GSMZ6x
nTHTg8jaFejoy8EDteG762PpW+nDG8urI9QNxvRvIJ+vgpHI5jxwCnsbwryD
wTDo7Xw7jLEOBdugp/Iuh7HagCnQfdnLTel+asFvvJvEt9vBr9Vxl9WpF6V3
+v7SsDnamvug96ZdW306dNkY0Jt9FLOPXviSE1uGbdJmaau0UUfwPZPGH/qc
jYuDR/KmEfQM1rm4NmyTNupO1tCa8VuBO6APYpzzGWcIa81pG7GgPpu+mjHh
SL4/xfcnwaC24cu151u7+vDp1J29Ut9RHfov5trInBvAZuh6+o+k7whQB72W
OY9g7oXsLUGfNmecUYxzDmhWH7IwhnYXtg0eHsWYH3MuH4Ejoc/ie2e+dwJn
Qt/BHieDvDZxZoMZ/yXO6kUwCPpv8Pi0yshlmdPSVk3uELZQm+XZPU+7+dVx
hgt5FvAcy/qe16Yw9nj2cT3YCl3BcyLPCaC8NnxRbZy2TZ/0UNZ1Eeu6EBwi
b3n3OWN+BsZCP0afHvCmO3gU+iDePce3Z0GXwtD95lzMtWgDMmnOxVxLYX34
To8w9sOl4UP1BH1KQ9bk2X36RIz1HHdxftPg/Ym0OaEuzmAacnGjeZg0nt1G
2zuVBfA79Jt8e4I2j4Nl0KfUBc/l9TDou2m3i3Y7wV3QB8HbQfD4JNAFehn9
fqDf92Ap9HTa7PDegGnQj3vPcsP30QfyLnUDXdM7dU3HiAmMBa7uGL6mOSRz
R/qcxcZEjDUbFEFfzrtb+HYzuKxj6C5jbmNtdZixhT6rvqoxxttFsUbXtrIo
fBt9LH0rfZxWrGEM5/I7svRbm7B96kB1nzbQ3JE2UVtoDknfTJ9LX0sfbShr
Ws3aVoHHmsVZ/43xbqyNM59Iv0vot4q72gH+v8r7WbyfCV6BrikNGVJ2qlNd
uZjnS6WhM5WVgwtjbGVmBTpvF9hH3YAvsIgxpjPWNLAQ+iVwN/Rd4EXoPZh/
Fe3fAU2g76oLHazu1WaNqA2ZV9aH10buYhh7G5obOYyCjpGzM1enTtJ2PEf/
Z0vDhij7Z3k36+IOTKL9Vez3SnA79H7mlOQ16Az9KHLdxBgfzINeSZt3absa
rIAej60Zi+7/Al/lS3A9/5+X5uN8t5t2Baw1H+yCzqPPd5nIxagTbyyJO+dd
uwH6A3g2Ev6NAGugN/F+Pe/XgY0p774Ca1Me1nOfNjHfcO7SiKaRa2mf+orm
XIzd9dn01Yzha2i/3piwafRpjl54irmeBM2gh9RHzs5c3eD6uBveKe+Sd6SY
Nkug39C3gz6lMO6od3OYbcDhxlpgm/qqIHSeum4BdB08b8laWoBa6EXsYTf7
2qXPBZ3Pu9acdRHPvNLInZjzMNdhDqW0JnIK5hJKoP8EdnvnQU/oMvoUg2U5
YS/68G45394EvWsiN2wMbOxrjnhOSci4sj0bel5R6CB1jzk199qDft1rYs8Z
eLpImUM/DwVHsqZ5rO0RY8hUV2lTtaXqrMcKQ8eqWx8tDFl6mLkfKguZaoYf
OKtDxDbGON+zjs2sYxP4Dvo8+jwA5oIxPnn/ozLA/qbnRG1DH7IurXHcWxQy
rSzfYw6Zd+UdIrdujl1d/KfS6K9ObsO+5hdG7KC960PbNen+TgEt+P7Xwvhm
m9sYd1ZR6AZ1xO/8fwiyfTD4rWPk4gexr5PqIyevb7EVXmypDh/D2DYxt1EX
Ma6+6TLmW1oZPuqlhSGTyuIlqa5SxpQtdZa5X2s61nLMAa/j3ZXp+rTZt7K3
Fam+0D57Rvm0ywMv0Kdbantmc15dodfznMlzhrkh6AWsaQv4D3ihLM72aL71
q44z1ldbo12tDZ9NX9gagLl/fWJ1/0babSgIG1CZxmDGXubApxfEGpx7GvSD
pWHDtF0PQI+Fj6PBqtbhMzTUh4+ub25NYTy8v1TfqVXYyI9Zx1Ws49qckPlD
aT+3LGoF1gzOY45PC8Jf+5R9f0T7l/W5wIfQP1sbSuPreY0jFvmiMmhjkp71
oQPVfT2gz6+OGMTYY2x12G59RH1Dbfi5hSGzyuqowvAFBvN+UF34BOp6bYC6
X52vbdSmaku1kQ8WxJ3yLj1QELlDbbS22Rzinbw7WL/Q+1UQumtdGmuqw3K4
T/M6RKyv/9STObuCL+FNTdvIlRrDGLuYM51aGDpNXTZFnULfxZUh+96Bo2kz
MeW/MZK5V9fg3OZgPyoIn1Vf9UPoesZ5Or1PxuT6evro+ub6fGtB+8LwnT0T
fV19dH1zfd7x8ORN8BbrHZcTtuCffPu4OmyCuaJR0OdUR85oZUnYEG3HipLg
jTKmbMkjc7XmJM1FmrPV1zucd90Kw+dTN6pT1aXqSHMzxljGVuZojC3MEZkb
MsYYh30bk8bn2jhziebMzJWZU9R2vwWWpzbc2qM1SWuR1iD1jdvSNqc0fOS3
rakx99dgZSZyBe9Bv1sTOYP+zNc7G7ZVe6ptbmCc+sqw0d5FbYi2wzvpWOY4
zG045pIOkVM2l/wG9ALerzFHC16APorxe6b22/34zZqDtQbbWIs6kTYn5EdN
aj48OD6Nh40p1RXG7FtTnWGtxz2tTGs+V2eihmvttgPYURo5e3P126F3wvNz
+T4K/FEYuVVzQOZ+zLHqy3fTz6kNn75TQcSsxqr7Qs+l39GZGN8a8TFVkWMw
t9Afui/fLq+JuW0zOS9qeNbuJqW1vJt53pQXNT1jDX1+fX1jjtOMpdKcvfqn
RXnkfM31Ni+Ps/6S8b+oiTNfRJ8ehRGbGKMs4VxKS8MWq5/mZ6IGa+31uUz4
bvro+ub6cOqm17TJqY6ytqJPoi9ijWU575aWxN3wjugL6SPpG+kTHQsm14Zv
rI+s7fGOe7e1QeZKzNGZmzNn8iHn+kA2fCf9IWvf1sytlVsDNxd+DHP3r4+c
+Ce1sSf3os59umPEJMYiT3UM38cz9Sz1gYaAUuYqAYOh1zDf3NRf0wdrlAkf
Rt8lyUSsog+q72nMouwdTft+2ZBB78b8lHfeEWvTyrSybI36iTSGMHYwRiop
DhutbS6GPrAufCTPw5jaXKA5JHNH5gTNNT9JmyfqIud8HXOOzkYuzju/uiR0
jrpmVUnYOm2CtkCbN5g5zkvjXW3Y07w7tjpyR94ZfTV9Mn0xfTZzYdZQrJ2Y
E7vLu8BazgF31kTtb7i/f8hEDdDcob8BsPZvDnF9WdgobdM6c52s6fDS0PXq
fGN9fSp9KWP+aWmO19yuOVpzYSeWRS3B+OIvaQxt7Hxucfh++rT6svqA/8vF
VUXtyJzcVsbsnca3+lTWlqxRWZuyxmQu2RqEtYcZaa3NPbo3a26fwZ+PC8I2
aw++yY2aqbXSr3PD95unHU19QGt55uDNvVvTs1bibyr8LcWyVFasKVtLVmZ+
cv8l4Su6PmvvP7O2n6qiBv95RdQIrQ1+Bp4yf8dzO3gS+kJzSGm+yTMtzERO
93rWX5CJWqY1S2uV1jStfU9OdYs18CdSH1jf93H9OPpUgUowNBN340bGuqEm
7oi5WGss1lbMyVo7siZkLcgakrWqz9O1WrO6uiZq3ta6r6qJ2GJ1KpvGGMZe
3oHiNAabWhM5PHN3U2rCV7XmZq1Nn/WgTNRErYV2gb6+Mn4T429hxlUGb/xN
gb8lkEfqbvvYVh0+jTleL47cnDz7NeWpvPQ3F+amFqS+pTkqYztzUuaijPGs
PVqTshZlDdJavzVua9vW/L0Lw1LeeSes9VgzslZkzee1NIYydlKH6nvpY+pb
6oP5W5UWqe72NyvWev2Njb+tseZrrcwalbUpa2bWqtRR6qax6d2Uh/LOO+pv
eawpWUvyNz3+Nsbf8PjbHX8jY63IHLu5dWtGxj7m1MylGQMdlBc1BmsLXcBu
xtyRiVyBOYNRqY+lb6XPk6Q5VXOpu2si1/+/mmpD5Pz1LRqzz0Z14WNYi1AH
q3utSVhrseZvrd+ai7W7xWmu3hreP9Cb0zuGb62PLf14UcSDvvO3RNbIrY37
m6L/B9DlzgU=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwt1mtwlsUVwPFNAogSxVaSkBASIQm8XNR2ClWSIK3DHWpRtFhuEoIEyii0
UBEZy0VwgDFOpx8Ui1IsYJlWwAqaECRCBaudWq1UHGoDQmSgii0V8YJA+tt5
ng//Oee8u3v2nLPn2X17TJ97+33ZIYRfoT1+UhDC9PIQLjLuo8/GspIQhvQJ
YV7nEFbQl2J6vxDG9gih5JshPEbWsCflh/BQWQit7UIYTJ+ILYUh/BNrOoaQ
6RXC7+in+RpQGsL1V5tPfszuY2yrsedwFPXmj6oI4dauITR08Ds5kv0In+vs
cZ34augrcTY/iTvGWiP2HcZGF4WwmM8HcSs97/IQBpk3EAMwO42zZ14I+3qG
sBe96JMV42Kx/DJivzKEA/QLmMnvOet28T3fPvewG8Ve1DeEQjTTG+QzTJzZ
4twm5lH0oXiF7x58T+S7lGxmXzJnsjw/uyyEteRF9gMxB35zrF1MX4iHxT9B
/CXiv5Nczv5QvT/AA2q/Xt1b6WPtswkbcQtfO/l4onsIu+XRhB/TR19lXz7a
9bYH2nULof8VIUwzvluOTTiH0/Ju4WOBuOZjHl4U57yCpA4x95/Tgz1K1WSK
Wo5Ty470EnzKx1Q+p+BF+gb+CuS9Q95XqcEnXULIZ7eRz/ntD8hhFxr7tTj3
WDdGrFPpT8a45bQGq9E/rW2LOrwhl1Z1eZX8F7uMLMUv9c4Edk96R73VS79W
oAyv81stpptQnRvCV+pQRb87P+nf2LNL0v7qGn+jT0QOfawcP89Pzimezazy
pB+Oiz2k4yPMPcZ+Vg43iv27WISH7LtHvd/Hs53o9n2ZXi++r8V1Hl9iQ+fk
LBowSd2qM8m5fC2XYE2bvF5L8y6112Z7LcoJYT9Zwq7Rh2/z+RYK6Vfrybfs
81eMsO8f+fgb/d9kNr9ZKE1rUWWvl9LzeoGsZGfzs1v8+8SfK76seA/we5Q8
gt70cnvU238D5oulkzgepdeVJvHEGA6aO5P+/ZLkPol3yM3xbOTbXu3GWDO6
LOmh2EunxdheDCXiel+sH7O3W/M/nLBmlbXb6NV6sxJz9GeD3qii14j7vLVf
4Qtsls9Q64fwczO60gfr+3pju9BYnNQ51jvagzPJmj3p2CjfWBff2DWYgRt8
d0f5+Q8/76lprjlH2KfiPZP6zmOfZA+Kd5s4M/gZJom9jf8r6B3oHchL7BPW
HUMtf69Y+yH9TFlyt8X77Az5X/aTciyU473yLSDXsnOLkvsu3nEL9UcnejGK
ipJ79A6/daO/E/uH30s4n/bhsl7J3Dh+Z3rPjDQ2F2/Ko86aEfS7sAJZ1izw
2wT6Id9tWXpnjiTfZfeJexQl90p/czLsaepXr2616raKvJv9ibG/GHsDZ9M6
xu9lYPfk/lmeSb6ddubfgQprb7Euh/5b+1xwd1xj33PkM+whvscqVGKg7/Kw
mi3jYwAfN+jdb5NL2aeif7LFbx/RT2KzGNaL4Wk0p2fQj88f8r0gK4ThZN/4
RjjLtnheGKaXB+jr/eJZI67VeDTNMfZt7I/YE53THg7dk3clviW19v/0yuRN
GI5hONgzeR+22SOTflPl5Fb2pt7J3RHvi0bkie+A+SG9M/uR+9kPGrsfa9R+
jjWL6Avsu8l+G/GdtBZ/ls8BrJbbcuteo19Ut5+6X1vcrcV66gL7NnZjfH8x
3m+7jG3z+yPquxI76eP8tlGcrTiOSm/herHPMb/VuuM4mvr9zPwzGElvsv4s
PVdcs9VkFmbgdbVabOwpY+uwtiD5L/J38hm/T7b2IP1tHML1fF+Hj4xN7ZD0
yjBnMRR3pX0zwtg4c1v4+QE5vDzp5YVqdD9Wp319rzqeUo+TmBt1ta1Ss19g
ibptEWsl/dq85E2P7/gXaR/+xu9PYR32mve4+TPNO2HOceNz6Pfg6WvdpWq0
Fxvpj33DGVYktYn1qJPLYXlM1mN9492By9O7YrxvtdC31RVdipL/VDuMPY8f
GZ9m7gv0ffLbnp5NG7mX3WSPYvdFN3wPje6PFZmkL2MvVpMPR7tvcp7xDNeT
bXw2lyf9EXviS4zl90ZnNSY9r6z4rdKzM8nbGt/T2/CmsRnWv5S+azvJWvYY
e+xK/y99To5mN9n/Xev/geb0vXnZ/Ib0zqyL7xC9uzvwVXX8U/wflb43U+Rz
UH7vYBr9nNz2O5elar8EK+mr9Pq37NXITwPOpu/Ie9bcZM12a2rJQ+yt5h/D
B3jc+j3W3m6vI/QWjKdvcaaDzJ+FOhyuSHyEsuQtjO/fqrzk7OPb+7w+247f
p+/w/wHu3Lym
             "],
             VertexColors->None]}]}, 
         {RGBColor[0.917794, 0.920966, 0.881936], EdgeForm[None], 
          GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
ZcBYqhL7qV2l8pFJjn+5JjxvW+0Yp8x90E+sM+88vxhv/0k/yryk0PuBd+Le
8724Oq8z17uQPjaueLltTFg5cfJUy7Kn/R9jaPrD22LCdonrEmv5uVw63816
QXkEmNem5oq3X8BcplVqLOofY1PeaamxzabtZh5WYF5pe0bEZH86+K4W7R1x
qUTrH89YfvN9IWJOEfN43PuJOvEw5jq9Wn6AdpB+nc88l+PdCI79oH0RfVIs
Jvyd2DvvxG20rBZwD4Y19kDb8nzQw1Fhl/Xnyfxl7s99NTPx7BnLo8b6B7kd
51nnMtovYpNhxxnUjf2OT4iJdbJf5Hoeth37HvagdUQ24C7ozk25OpO5zvEX
fUV/6z5zkQXYdx2rlAP2cxnzLa4V14x7+if0eWFEvutax1D1/qex+12C+VbF
dTZPvGeLcZ6vS4Wt0JYwpj4TlTx4n+7hSu3NlxEPpFbrTkIY9Ysgz20hnaVn
V8uuzcNzUC39oC/e7jw8B/Xzw8qJjtr+sT7tDc/LOPeJziGYSzzj2IExxHjf
aVrr+1wbfVZI7I0YN2OVyT5T4jeuDXVxkNd5J/r+yPuacuriNRxkXci3TlG3
Yvb3vJvMuOAj3/flGnItiUemQW+PZCtmDjDfns5l2CfH2RVSPLHLd5prfQ+R
c6BPGmYfNd8xF+fJtT3kHH+MY3z61WnQi9klOhemfae+cI3G+jtlR//R39+I
U24zVtnM49CX7vZ+5bpwfw62jKKea3/blyH+lmfZ/B77YO1KsHbbMVY6nsNh
5ZK7Q+qL8mZssNW4yd6QxmZ/e0L6Zb0G2GeXRdRvJfr5Q1h9sN+o/SDt3RH7
+18w7yAsP9IGchhSIp+3I6R1YhveRym2v49Th8OS/ynelwjLFgcoTw7LJjfE
c0pYOW0psaWw1uyzEt23I37Ce4J1ucJT+C3f8iCmQpyCGMXva2w9uhflP1RK
fxMwxysi0q1i9F8Zlv6R2Af5/gn9n86Vj0xC/W4R4WHEeALv8cbNdDeLe6Fh
mXArxrMhx/L023f6nLb+Lvx661l353Pc/yHwkBpWXj3R+4Zt1lRgfj4rPOL4
iHtyS55wcGLgk5yvc09moZ9YWDhGIzw3DSvf3mb9o262LtU9Ia7JScwxIayY
gNj6DmO456LO+WHpRUs8XxSWvhTiOR7W2oYw3y4Rxa3Eip43HrLVe4CxTirq
Z4eFa5zAWCdz5ccbozwzLByA67PLesrYbJvxwHq93Gv95Xe+n3aezHMaYj0d
fB+I+7jAeQLvp//X+4vnG8+VK1an/rG/fc7BmKcxJ6OdJYZ6xnezCnxXi/F6
sWM85oLc3yMsy23eE6eiOu9/1/83yHcOw9yPuTTHYI7HcepzPv4yzu8FeUwu
Uf5PPK6d72lxvL2+j36Gd7YrZYMuKdI9QtpbYl7tfadruDExYnl97XOITY4w
TsZv9F197b82oJ9mxhh5z7SV8UPmjuSLeQjvj+8sF7bJnHhlkWIpnjmsissf
1RifYDy43DgNY/9TMZ318oyVPpVnpbTLT2Ku9+QqfiIukhwXNkJ92Wo9XWEZ
EyPhHas+Rbpnxfvdm3zf7DHvL8abtC9cB+rkzdCpsaXCLn7Fb/uI7OZr5oux
+dwS3UGptX3a4X3/kO/BURf+H86W+uE=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
wW/Y40dicA+2fA78yNo17b3/DvBYe9PQ3gQYB++bkKER/22Hf1voZUPvM3Sb
DiYxdxVYqt6dNUOQfzfyf4/sc8GYUusg2feBY6B/StL21RnriC43o9PV6PIG
OI75XszfwtwxYBW8bkv7VzlLveojxM+MfPesqoWXguJc18Qq6E1K97vKz+I1
HqxLn+cbkK9HuXPrr+y5gLN5PP65mvN5FRjE+Ogaf08EkyL3VOql9iN/IbIs
wr+z0P0rMAv/peL2ne4oo9jfm/2T2HsNuAt58ljfhrVngOHMn1LjOfFUrF5e
6VhUzA5H/1OTrl3rW9sWV4KNrW2TeaxtyZ4BrD1LOR/+XePuHS4C3fg+AlzM
90LQPeEa/2a6n1av1zXl3kE9X5e4z6DOnnoM9WaZjC/LdI92AfYfVG1dD8L+
l2GLC7DJYsUiGFXsnKVc9TA4BftcyPqDWbujwLn4Y3BstnNyH+jHoD8m0zxE
a2ypbSuaZ8XdI6s33pXlXl53Ht111NP3w/+D8X/vfMdAjL0BGmvYuzrmWrCi
yLVSZ1qx/VPSZ0Mx3pb1Wax/m7VvgdaMY5G/34w5Ny2ucC1TjkowX8z8Wube
B1Ow/cn488QC19ze2LZdwrlFOSab9S0j05JMQ7BHL+yRwh7DQB7zOcy/E7MM
e9F1Rty9mvQdjH4j0veL2WAvvhra4Fj9BSyF3+yEe331/M8wbmZ8SY7vgLL9
3GrfbeQDxV5Olc+WYnBco30qXyoH6S6zEMzJN89h8B9b4bvMI+BW9O1b5Vyn
nHc3su6ps7zq6TqRj1cSA6+29B0qhX6l6LcuZptVMk4wXh/zb83QX1Rh2rpj
7sO3e0SDuTdizrWfgEFtnHNXsDejzLWnD9iFPQZjj53Y4ltQXuueW722ZAjw
28tvq2KmuRf6u2tNe0XMvf9O8GyO7wC7mf8djGVuCfiT799qvXZ5zGdJZ0xn
S2cqB/vNr3LuUw68tqNromrh8Yx/Ze8fJT4bl4HP1fvx24Mxv3EUIF9bdHo3
5hh4lf1zqlwrTgClzBdGjrX3VN9qXcNVu3WnKGI+P/KcaKhXmFbsu4R6hm/R
bXvCvfgfoDvy/gX9Dwocg78SL98xv1uxA/bDfxbztxd4zc4i33l1180FGfD7
u9ZnSzb9DFv0iLv3052uD+erY9L9ie7X6oXnl7oWqCdW7lVOUy5TDu7HXC/k
3ybbxNx7fRn33VA9mHqrlvAYkekeq5m9c5KuRcqBAXmHVDr/PQS2lLrHV28/
GIwiPqaBQbmuCfK1dJau8nk1sXNJyrX17FzXrksi+141rCHpO4p6LemkXDu/
0rzEswNznZKe1x3mwYTPZFP6vUC94mHUl0PS/f9IdBsedy7eAz6p8x1cd2+9
WTXBe2Cpa6tiRLGoGFLsKCb3s7Znve/GU0ATa3vrzSxmG/ZhfEpkW6rHLUO+
VNK1UzX+F2hNLfHbkXqIaSWOccW2esQBpX6D09ubaL6ecg+m3mue8g36H1fl
2FaMHIt/9rH+Amw9LNNvXxm6I2T6DawH47+YH5rpNXr7uKXSb2V6AzmB+RZ1
3qs96g0vjdw7q0dcTf4+qNi9sO6oqv3N1c6d6gGOZe6fxX5rUE+lXHRO3LlT
OWkN9GZEfhvSm92R+OPWlH39CLgmck+iXkQ9613MLQOP5zpmOtb7DVCxeFK2
c82ilPcq56jX1puR3orUcw9Ct/UdXIsVH+c32Iay3U/gjZRzuHK3eHRG/58i
x+oQ9dMd/Oamtzb1QLezdnHKvdM5IFbiNy29ZekN43D274q893zQnfHuyN+y
eR22WVHjtzrdh9Tbrky/36kePsHaT0p9F1NPt4rzPoX5DS1859XbwZtxx5ry
+0bGixPuFVVjzmR9F9ZPYO2VYH+R3xS0VzTujbum7Uq/b9XCqwKeG2KuAUcw
7hz5LvBhzL3U81XujdRT9YbeITWmrTeTNcTywvbuTVW/v9X9NP0+pPeaHXpv
Tt/f9Zvenn9Ivwfq/rqk3HdyncWrwJHE02nEU3mhe3S9FT9b6tqiN2O9XWxu
8Fq9YZxJ/K9Mv7+p/h2p3rHcvtWd/TZkuwIZ13LeSpDvUcYzk/5WDfsHtA+E
xxZ03QyK4F9U7d5oDhjK+M5q9+aSaTu0v2nwW4R0Ooz9nSLbSjSmMPd7yrVP
OUZvI4oZxYreSPRWNDBu26ufa075DUVvJ7pTza5yzVGtUQ+ju25x0rVC/XgJ
8ifS91/ViLdY2ztd/1XzcoiHhXGfDb05KTe1SLi3VI56tMJv6rpb6w1Jd60G
7FfXzneuDugToc8mdNkIvmP+0Eq/TatnPxv/d69x760YG1jhO7voqecbiCwv
V9l2TQW2/Zik72ryQVPSNUm1SG++uot0KffboO4kuksPSnpe+f2vuN+cJb96
5Gfg9U2F38Il88HI2yGy7z5QzcYeC9L1XzZ5gv1z487t6nHrddeNrJtivkO9
3yz0VqE310bm6yPTkg1OL/P/PPS/DvXE/welfKj3
             "],
             VertexColors->None]}]}}, {{}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1nmQznUcwPGvdYQWQ7sta1lXcg21LMu6coRWSMltnZFjt5CMQoYx2NYs
yeQcx5KaCYPYtYRCYtxRk5ncGzOdGGGH7fVMf7zn9fs8x+96nuf3/GqPzOyb
USKEMCsqhMZ1QugdE8IX+kpXdVMVYkOoonbqpLd002vf5kSFuiFkc51yVcP8
HZvxWuT5Z0MopSHmqhzM6hzH5vyQ/bmSc/k373J8XAgj69kGM/WB5dXM41+s
+lwII6paPcdwLC9wKaOrhZDDivyaydzJljzNATzFQXzIpfyX2bzLHCbUdxxs
z0dsy8ccx+R422QKP+FY5nAC87mCJ3TV8hoWcBUPMJOfchJXsC3Hsw0zWIId
WWxbXfg9a/II63A5i+zjMj7hEJ7hYJ7lUJ5nOn9iCnezFVtH9l8TtVFb9It+
1evWXc22q5cLYQHPmHfxum4ptrrn1fF5+8UO7M5MTVWWeSVzuZ+XdEXnzMWs
muC7oQfmVkxTH0U38F1ibS5iKncznXc4jPc4hy1qhLCJU5nL6TzHfBazfE3f
44bOCRsxnX25nrN5nTP5G7eyQaJ95Du8zMmMaeQ7wyrcwzu6p5nmzrV8llzN
Yj5im8aOpXYIw5nNLB7mIh7jfW2zXMRdDH47+TxuzmYOR7InUyOvs87Atdxn
G2t4iN05hw/tSxrzGcs8xnMabziGJtzB3x3jXH7OfszlII5mM1ZiFAucu/PO
3V5e4H4eVJznoyv5TjPd67bxHxV6LMu80/J2TVRzcyITdMh7L1rPDG5mKybr
vs9wuLmAe/Sx6pizmK18tTPv4zcaYfkRW3tvqmZpjo7qmMraZn3bS+G7HM3d
zGYR2zsPnSOfnXkBGzlHJ1nOeayoJeaB3KHdquKcV/YZDNMoTTFv4CVdVqzP
7ZTH4nmeifyZNzx3RZu1UWPUw+MxjOE+687TEFWobB32obFtZ3GhXtZB+1hs
n3O4j3s0Ra3NDVmepxzzcc3Vl85Ne85j4GPnaaTlIn6rA1qixZqk8eqrKK9p
yxTV0m2/xShe4E2/0as6oE3mtczmDE5TmjqbEyK/Zf7hmnDXNWIPzzGbWzmU
A1VXiSp0bWnk8e0sx/ci1xvXo5e4lwlczULX7gxOZyKjeMi1fptr/Vxu5Xzu
4CLmcTH3cwkPchkPczmP8jP+wJU8wdU8ybU8zXU8y/U8xw38kRt5gRfV1H78
aU7iHbbkfbbhI7bnE3ZiCfvdlVHsxle0SM0i/y1MivzXsCWXM5U7y4RQkmnm
nspVV/MW9mAvluKrLM3eLMM+fE156mcu4CC+yad5yb5vsV/zOYVD2I+3/Lde
1zX/s5d5mVfZx3P9vaYX+zGNfdmDvdmNfZjBOZzEjziRszmBszieM9lBqUoy
t2IztmATvsiGbMr6bMx6bMjarM+arMt4JjKOCYxlPKswjpUYw2hWZjlW5FOM
ZmmWZ0mWZWBpPnbcUSxi4EM+cR7us4h3+YCLtVBrzPO5ivOYHrmX0UzzALZW
suopUUM9nsAy6m65NNNY6J4oiUeZyE2MZg4XK0OFri2TeIudOcD9WRx3mp/h
bfdlR9y4vc/J6hV5PXtwHLtwFDtwGNtwIJP5Bl9gr5j/7/n+AzTtfVo=
             "]],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{8826, 5313, 8872, 5374, 8870, 5371, 8866, 5372, 5410, 
             8897, 5413, 8899, 5416, 5418, 5455, 8924, 5458, 8926, 5421, 8901,
              5376, 8873, 5375, 8876, 5319, 5317, 8833, 5316, 8832, 5315, 
             8830, 5311, 8826}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{8895, 5409, 5446, 8918, 5411, 5408, 8895}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9201, 5877, 9318, 6000, 9315, 6001, 9340, 6045, 6128, 
             6132, 9497, 6248, 6358, 6362, 6415, 6419, 6458, 6460, 9691, 6510,
              6570, 6573, 9769, 6624, 6682, 6684, 9857, 6742, 6793, 9899, 
             6743, 9859, 6686, 9814, 6629, 6626, 6575, 9736, 6516, 9693, 6462,
              9657, 6425, 9625, 6371, 9579, 6261, 6257, 6141, 9406, 6061, 
             6057, 6012, 6009, 9321, 6008, 5878, 5876, 9201}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9765, 6609, 9803, 6668, 6730, 9851, 6672, 9806, 6612, 
             6607, 9765}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9949, 6857, 6910, 9988, 6861, 6856, 9949}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9969, 6890, 10006, 6938, 10049, 6985, 7029, 10088, 6986, 
             10050, 6939, 10007, 6891, 6889, 9969}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9984, 6909, 10022, 6952, 10020, 6954, 10063, 6997, 10061,
              7000, 7044, 10103, 7047, 10108, 7006, 10066, 7003, 10071, 6959, 
             10025, 6911, 6907, 9984}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10157, 7115, 10181, 7148, 7173, 10207, 7150, 10182, 7149,
              10186, 7119, 7116, 10160, 7110, 10157}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10425, 7574, 7647, 10471, 7651, 10473, 7654, 10475, 7656,
              10476, 7657, 7660, 7740, 7745, 7809, 10559, 7748, 7744, 7663, 
             7659, 7583, 7580, 10431, 7578, 10429, 7576, 10428, 7575, 10427, 
             7572, 10425}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10680, 7987, 10730, 8060, 10784, 8131, 10836, 8192, 
             10888, 8270, 10952, 8361, 11017, 8452, 8532, 11077, 8456, 11020, 
             8363, 10954, 8272, 10890, 8194, 10838, 8133, 10786, 8063, 10732, 
             7988, 7984, 10680}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10702, 8032, 10752, 8099, 8163, 10815, 8105, 10755, 8102,
              10760, 8039, 8033, 10704, 8030, 10702}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1n9Ql/UBwPEP6RQjLU7E0ERFRPyRG6UmKLrwNzc0Jzosbf6aZP6o3E2P
melZnOJhmM3CyJVRw1ptqSjOCJ1hZstV6trqLmZac6vlTA9FTmGv5/rjfa/n
83wfnufzPDz3PE/veQ/9dFlMCOH8DSGkpYQwKSGEKr2uBj1j3Wl+qZu6hBCv
kbpbv9BibVCp4vqEUMk6HdZg4y84gW0SQ7iX3VjIO7iKM7iN6/g/XuB5Xoy2
6xrC3NQQFnGZylWhGuvOs2vfEObcGkIXLuBCnuJTjEsKoYwdWc0h3M3X2odw
nDONm/gUL7OUF1nG7mnmz2xe5QheYyGHdHMs3sUtXMgyPsj9LOf7Om35eR7g
c6zjMv6GS1jOEVzETC5l4Gi2ONYYvsserGdvbmWzOT7N6yyP5hgbwknm+f1m
f/9rTuZOruLLXM2/8FUW6SXLk7iCE7iScczlR/aVmvb9fgPnGJ9wrPv5Cefz
UxZysV5SldJt+zkT7OdWrTXO5+Narw+N9/CMzqlLP9t1D2EUJ7CQv+RGbuN+
1ept43+yWS3qelsIt+mK9cMYkx7CFC7QA+plXMIs7mYm93I2L3EtM3qEsIZ3
spIr+TH3s4Xtkv2/2YH9+zt3TuWLfIxn+Cj/xTeY2tN9xX5s4CPsPMB9x3ju
43e6pEeNc3q5L1jBFl5l5kDXv3cIP+cGzmYpS3iUjfqD5WbuYSv38xhLWca5
fJILeQ9HR9vZd1tW8pBjTeBaNplLLi9zCuuYxF/xrHMYyF38xjmu4++Yz0rO
5HwOZifG8Ca2Y51reMq1q+VBJVrfPfrbm82fG2xziTW8wzH+w1Xs6diHOY2t
XM88cz3KnYx1Dm2cUw5n8EE+y2d4knGeU/WWP7G8jRVcygKOZftoG75mX8fs
cwpLGMPprHfM3nyM35jTal5gFmt52Zw3cjfncBmHMoXJese5/sN5r2aRhmmd
cZN7rlEHNDK6x/h2dP/qqobbLks7/baW9TqqPvbZV3c5xsOcz2rO4142qVnZ
5pcT3VvWr2d/5/ABY51XR202LuAu7VW8a3BLdH9pnpYb7+BnalCC63jcuiSe
YDL/zrN++210/fiKHtACdY6y/i37rtF92uKY8ZzFD81lEJ/kRk3SOLWYe5k5
v8VCruRypauD8XHX4Fh0DfWqa5PNxzmS69mGra7ffMvXeER/1lZt1sNaouma
qhHR9fbMSGXP6LmhU8ZfeqYc5GHWabtKjYu4mJOZc2MI//XMuugZto8fs5Rv
cBYLlKKfGX/tGXg7q9mRRTzjeTmOP47eLaow/sp7ailXMpkxPOS91uq9doTV
LOYulrCGm1jLzTzIp/kOt/IIn+V73Mb3o3clP+B2/pUv8COeVIrjnTVO4zkO
4Ne8nd8yg99xKBuZyavM5nXezWDeYzlJxRpkXMLB0fuUGdH7lUO5lVms4Gi+
yBxWciyrOJGv8yd8k/ewmtNYw3we4ExO5438zLlUmU8xl/M+5vOc74cz+sK3
RAMbeJpT/DbDNnnMZy6nciInczzzOIa5HM3xHMEcDucoDmUWMziMg3knB/JH
TI+uJftG15Z9mM5e7MseTGESk5nI7kxgEuOZyE7szDjewlh2ZDvGsS078Aa2
Z6vzbMtrjGEzW513E6+zkc28yCvcpA163riYc3W/1hjfy2wN1yLjIeyjZMUq
17qvfN9l8AiTWc8U7mQnbmGZHtI5z5IdvjNPcKzxSY7j3ziRnzKNh5gafUOy
H/uryt+t4A/ss5xvKtHyc2zPIl6w/TR+zkGs50C+xzb8Pd/1HbuOm1iiWZaf
YAGLuYaHuZp1LOKh6JuY1/kKm7mDjdzOK6xjT8eoZQ/+id24j4n81jb/1h79
USv0iPL8voQTWcgxnMdRnM1MFnBIdG78IfM4gOMTvv9m/z81+8i6
             "]],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{6005, 9317, 6003, 9320, 6007, 6011, 6055, 6060, 6136, 
             6140, 9500, 6260, 6367, 6370, 9624, 6423, 9623, 6424, 9656, 6461,
              6512, 6515, 9735, 6574, 6625, 6628, 9813, 6685, 9858, 6741, 
             6683, 9812, 6627, 6623, 6572, 6569, 6509, 9690, 6459, 9655, 6422,
              6418, 6366, 6361, 6252, 6247, 6131, 9402, 6049, 9343, 6005}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9603, 6398, 6441, 9642, 6402, 6397, 9603}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9945, 6854, 9983, 6908, 10021, 6951, 10019, 6953, 10062, 
             6996, 10060, 6999, 10100, 7041, 10098, 7043, 10133, 7080, 10131, 
             7082, 10159, 7109, 10156, 7114, 10180, 7147, 10203, 7177, 7206, 
             10225, 7183, 10206, 7180, 10211, 7155, 10185, 7118, 10161, 7117, 
             10165, 7084, 10134, 7083, 10138, 7049, 10102, 7046, 10107, 7005, 
             10065, 7002, 10070, 6958, 10024, 6956, 10029, 6916, 9987, 6860, 
             6855, 9948, 6851, 9945}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9962, 6875, 6926, 10002, 6879, 6872, 9962}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10036, 6970, 7016, 10081, 6973, 6968, 10036}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10313, 7385, 7451, 3584, 10354, 7388, 7386, 10314, 7384, 
             10313}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10344, 7436, 7498, 10382, 7500, 10383, 7444, 7440, 10347,
              7435, 10344}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10387, 7513, 10426, 7571, 10424, 7573, 7646, 10470, 7650,
              10472, 7653, 10474, 7655, 7658, 7738, 7743, 7806, 10558, 7808, 
             7812, 7877, 10603, 7879, 7882, 10643, 7947, 8016, 8019, 8089, 
             10746, 8023, 8018, 7948, 10644, 7885, 7881, 7816, 7813, 7751, 
             7747, 7667, 7662, 7586, 7582, 10432, 7579, 10430, 7577, 7518, 
             7515, 10388, 7512, 10387}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10610, 7896, 7962, 10659, 7899, 7894, 10610}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10655, 7961, 10703, 8029, 10701, 8031, 10751, 8094, 
             10750, 8098, 10808, 8160, 8233, 10862, 8165, 10810, 8162, 10814, 
             8104, 10754, 8101, 10759, 8038, 10707, 7963, 7960, 10655}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10906, 4445, 8388, 10962, 8304, 8300, 10906}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10927, 8335, 10994, 8429, 8513, 11060, 8434, 10997, 8336,
              8334, 10927}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10964, 8394, 8486, 11042, 8397, 8393, 10964}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{11052, 8503, 8567, 11094, 8507, 8502, 11052}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl13l0TmceB/ArmWBiPZaxx1Ziy4x1LIdUKJJKKWEUKUWlU3RUNag6Woqm
hyKkpZm0SC011lpLatdaSmsppZHRQU2ZtsJhMEPM557543s+v+e5z12ee9/3
ue9bd/jYvn8pFgTB4MggaFAvCBIrBcFKWSMFclmiKwfBJttKsbycVHfmCLmi
fp6j5JF6Nj+SXKlZPwj2sUB+kO7aEb8LgoGsxjS24GSm8DX252JO4y+8yaGP
GVslCIZwJJ/l80zlCA7mMA7icM6VCep5zJR16kvh+Kquv4FrVq/Xd5kbuZAT
uYCTmMXJHM3n+Ge+JIskW7bpu86t/IWVHHOEY4/kSY7gac5lyWpBMIfR/JQt
uIGteIz9eZQDeIezeZNzWb1hEOxmNe5jB/6XaWxV3Xn4R2ZyJOfyRW7ne9zK
Rcznfp7jFyziPT7gf1gvNgjq1wiCOmzInvwTx/NNjuN0ZnEVF3A11/Mg1/AI
D/A6v2fJmu4NG7OLPFTHsZBlWcBSvMRb9jnMQh7nGW7hKX7GT/kBM5jOmZzM
VD7NgewfHp+xbMpmjGQEi7EET5rrRXP+hle4jLu4hPs5nos4jjnszDGM5zhG
sQsj2YNfeRZ1eIRfS5I62rZ0JnIZ07mUk7hCDqk/4VFO4ceczFV8iq+xLJNZ
hn34nWOfkhx55LPxV0aGz5xntIfzHNM4SqJsW8nzckEqOk4VeUN/CqfLLPla
exMLeZUV3acq0sm96s40vsJ3uJjbJU8+1/4778tD+Um7hmfZUtpI0CgIerEU
X2BtZrAdtzCVhRzEm5zKlrWsGZzAE9zOh4yK8ZlnSTZq7LvPp5nD3lzC1/kj
17J+bZ9NNmQBX2I+x7J8E/NlWW5mIm+wBwvZto5noe7I1xnPBNmhzuZD3mO7
pp51XesR32YqZzODX/K2rFPf5yYWcTsjrY+f87j2fC7kSPZmfDjOsSOZyz3O
1Z1v8K5rS+Id9uIuVuWrvGRuTbiR192DaVzBFObyGQ5nHMswYClGsQJLsDKr
S0v1KA7hOv4qt2Sbdgvn+ImTGePc+9iXRZzFZNf6JZfzC65iCXOJMLc+0l9e
1H6f7/EEs3iKJdyXvepoHuAZfYuZzTEcwK4szmhGsRzXO8dx50rhu4ziQB52
TQ04nTdcc3vm8Y65vMPbnMO7vC971AnGvBXORRrZ9ysOYmnH7CcD5BvtLSwd
nl8SXcMwfihLJUe7gOXN44i6Io+xKk+yFs/yUrgPV3O5vCBPaldhBdnpHCec
aygHSXkZrF2OQ3nCtcUxk+9Kz/CzLPvM4wk+NKe56p1M4wR2ZDPGyjHfre99
p2ZyLRM4ixEs8n08LAclXt9eZsk8GSujpZ9E2vY4O0h9iQm/93LaWnDZmrCb
+7iKy5gjk2SU9lPsxhhWD9d9a88da9DO8J0ls2Wt9mDOZEPWlWvWsmbam1k6
XFP5D+veE3w8fF9Kdvh+9+4dwwmsxYB7vKuLvKsPcjNncCMzuI1zmMd53M0F
3M9DUs7+J7Qr8DQr8yyr8jxr8AJjeJF1eYkNeJWNeY3N+DObs5CteZvteI8d
+YCd+YhdmSgzpKl5ZDAu/I3A5pzP1sxie2YznkuYwFx25Ur24Br25Ab25mb2
5TbuCq9Fpmjv5TPsx9/yvHuw0vXM4DgOYgqv+m32o99oEzle5qlf5Q8sYAHz
mc8LTLZPin3Pq7+T8/q/5TmeZTfbk23vwiTGsxs7MIFt2Ymt2Z7N2YZxbMkm
/ANjw3sdPjvHPCBHHf8g6+mP1V+bj7Fm+KxYlbW4w5itstf4bawYPmP95cNn
zjLhZ4DRLMe1xqwO9zF+JTcxlxv4MYsZV9y4Iu1IfqgvWz7Rfp8ruIh3+YC3
eZ+ZMkc+0n6bI+Q5mab9LKdyIDtKW4kN5yZD9NdiCUlSX/Gbuzkvsw2PsC5X
sUx4zeHveS5kpoyTa9aol3mdr/BfTOK37MFz7Ml89mIf+VWdzt+E8+E6qaTe
wMr8gMU5iTeMnchb7M+LbM5DjODfWIwbeNR/jxmczzkyVJ3BwXyLAziV/fgm
p3AXJ3EH05nH5bzPpbzNHP6buxjjXHmsyc9YjVtZmT8b80/ZJOvD48nLkmz7
aPZgGrtwGDsxle04gK3Yl79nMhuzW6X//8/6H6aHESg=
             "]],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{8806, 5270, 5328, 8843, 5273, 5269, 8806}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9070, 5698, 5730, 9092, 5700, 5697, 9070}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9316, 6004, 9342, 6048, 9401, 6130, 6246, 6251, 6360, 
             6365, 6417, 9620, 6421, 9622, 6369, 9578, 6259, 6255, 6139, 9405,
              6059, 6054, 6010, 6006, 9319, 6002, 9316}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9566, 6343, 9602, 6394, 9600, 6396, 9636, 6438, 6479, 
             9670, 6443, 9638, 6440, 9641, 6401, 9605, 6346, 6341, 9566}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9692, 6513, 6571, 9734, 6514, 6511, 9692}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9724, 6553, 6604, 9763, 6554, 6551, 9724}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9961, 6874, 9999, 6924, 9997, 6925, 6971, 10038, 6975, 
             10041, 6928, 10001, 6878, 6871, 9961}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10035, 6969, 10078, 7013, 10077, 7015, 7055, 10114, 7058,
              10117, 7019, 10080, 6972, 6967, 10035}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10281, 7328, 10312, 7382, 10311, 7383, 7450, 7453, 7510, 
             7511, 10423, 7570, 7644, 10469, 7645, 7652, 7729, 10513, 7732, 
             10516, 7735, 10518, 7737, 7742, 7805, 7811, 7874, 10602, 7876, 
             7880, 10642, 7946, 8014, 8017, 8087, 8090, 10801, 8153, 8228, 
             10857, 8156, 10804, 8093, 10745, 8022, 10695, 7951, 10647, 7888, 
             7884, 7819, 7815, 7754, 7750, 10519, 7746, 7666, 7661, 7585, 
             7581, 7524, 7521, 10391, 7517, 10389, 7514, 7458, 7455, 7390, 
             7387, 7332, 7330, 10283, 7327, 10281}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10342, 7432, 7495, 10381, 7497, 7502, 7562, 10416, 7564, 
             10418, 7504, 7503, 7443, 7439, 10346, 7434, 10343, 7430, 10342}],
            
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10407, 7548, 10455, 7618, 7709, 7713, 10548, 7789, 7857, 
             10593, 7791, 10550, 7716, 7712, 7621, 10457, 7551, 7547, 10407}],
            
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10439, 7597, 7678, 10486, 7600, 7596, 10439}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10481, 7676, 10525, 7759, 10523, 7761, 7828, 10568, 7832,
              10571, 7765, 10527, 7763, 10530, 7679, 7677, 10483, 7674, 
             10481}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10564, 7827, 7897, 10613, 7829, 7826, 10564}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10609, 7895, 10656, 7959, 10654, 7956, 10651, 7958, 
             10700, 8025, 10698, 8028, 10749, 8097, 10807, 8159, 8232, 10861, 
             8164, 10809, 8161, 10813, 8103, 10753, 8100, 10758, 8037, 10706, 
             8035, 10710, 7966, 10658, 7898, 7893, 10609}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10868, 8244, 10929, 8333, 10926, 8328, 10923, 8331, 
             10993, 8428, 8511, 8515, 8577, 11096, 8517, 11059, 8433, 10996, 
             8431, 11000, 8340, 10931, 8338, 10934, 8249, 8245, 10870, 8242, 
             10868}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10904, 8297, 8385, 8389, 8477, 11034, 8480, 11037, 8483, 
             11039, 8485, 11041, 8489, 11044, 8491, 11046, 8493, 11048, 8495, 
             11049, 8496, 11050, 8498, 8499, 8563, 11089, 8565, 11090, 8566, 
             8568, 8629, 11134, 8571, 11093, 8506, 8501, 11051, 8500, 8419, 
             8416, 10984, 8413, 10981, 8410, 10978, 8407, 10976, 8405, 10973, 
             8402, 10970, 8399, 10968, 8396, 10966, 8392, 10963, 8390, 8307, 
             8303, 10908, 8299, 10905, 8296, 10904}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1: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
zZii///f/z+LT4m4
             "]],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{8929, 5467, 5504, 8953, 5506, 8955, 5508, 8957, 5471, 
             5469, 8931, 5468, 8930, 5466, 8929}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{8986, 5562, 5593, 9004, 5564, 5560, 8986}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9026, 5627, 5650, 9045, 5629, 5626, 9026}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9341, 6047, 6129, 6134, 9498, 6250, 6359, 6364, 6416, 
             9619, 6420, 9621, 6368, 9577, 6258, 6254, 6138, 9404, 6058, 6053,
              9346, 6051, 9345, 6046, 9341}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9565, 6342, 9601, 6393, 9599, 6395, 9635, 6435, 9634, 
             6437, 9666, 6477, 6530, 9707, 6480, 9667, 6478, 9669, 6442, 9637,
              6439, 9640, 6400, 9604, 6399, 9607, 6348, 6345, 9568, 6340, 
             9565}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9705, 6529, 9747, 6585, 9746, 6586, 9778, 6641, 9777, 
             6642, 6699, 9820, 6701, 9822, 6644, 9779, 6643, 9781, 6589, 9749,
              6531, 6528, 9705}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9960, 6873, 9998, 6923, 9996, 6920, 9994, 6922, 10034, 
             6964, 10032, 6966, 10076, 7014, 10112, 7056, 7092, 10144, 7059, 
             10113, 7057, 10116, 7018, 10079, 7017, 10083, 6976, 10037, 6974, 
             10040, 6927, 10000, 6877, 6870, 9960}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10246, 7260, 7292, 10263, 7262, 7258, 10246}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10267, 7299, 7340, 10291, 7300, 7298, 10267}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10278, 7324, 10310, 7381, 7448, 10353, 7449, 7452, 10386,
              7508, 10385, 7509, 10422, 7569, 7639, 10466, 7641, 10468, 7643, 
             7649, 7726, 10510, 7728, 10512, 7731, 10515, 7734, 10517, 7736, 
             7741, 7804, 7810, 7873, 7878, 7943, 7945, 10692, 8015, 8085, 
             8088, 10800, 8152, 8226, 8229, 8317, 10916, 8231, 10856, 8155, 
             10803, 8092, 10744, 8021, 10694, 7950, 10646, 7887, 7883, 7818, 
             7814, 7753, 7749, 7669, 7665, 7588, 7584, 7526, 7523, 10393, 
             7520, 10390, 7516, 7460, 7457, 10355, 7454, 7389, 10315, 7333, 
             7331, 10284, 7329, 10282, 7326, 10280, 7325, 10279, 7323, 
             10278}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10289, 7339, 7397, 10322, 7341, 7338, 10289}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10307, 7376, 10341, 7431, 7494, 10380, 7496, 7501, 7561, 
             10415, 7563, 10417, 7566, 10419, 7567, 10420, 7568, 10421, 7507, 
             7506, 10384, 7505, 7447, 7446, 10351, 7442, 10349, 7438, 10345, 
             7433, 7378, 7375, 10307}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10318, 7395, 10360, 7465, 7533, 10400, 7467, 10361, 7466,
              10363, 7398, 7396, 10320, 7393, 10318}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10396, 7530, 7598, 10442, 7602, 10444, 7535, 7531, 10397,
              7528, 10396}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10436, 7593, 10482, 7673, 10480, 7675, 10524, 7758, 
             10522, 7760, 10565, 7825, 10563, 7822, 10561, 7824, 10608, 7890, 
             10606, 7892, 10653, 7955, 10650, 7957, 10699, 8024, 10697, 8027, 
             10748, 8096, 10806, 8158, 10859, 8235, 8321, 10918, 8237, 10860, 
             8236, 10864, 8169, 10812, 8167, 10817, 8108, 10757, 8036, 10705, 
             8034, 10709, 7965, 10657, 7964, 10661, 7903, 10612, 7901, 10615, 
             7834, 10567, 7831, 10570, 7764, 10526, 7762, 10529, 7767, 10532, 
             7682, 10485, 7599, 7595, 10438, 7592, 10436}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{11136, 8632, 8681, 11170, 8683, 11172, 8635, 8633, 11137,
              8631, 11136}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1: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
9vw1WzGGTRnNJkV+/t3/f8vBg8s=
             "]],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{8907, 5427, 8928, 5465, 5500, 8949, 5501, 8950, 5502, 
             8951, 5503, 8952, 5505, 8954, 5507, 8956, 5509, 8958, 5472, 5470,
              5433, 5432, 8912, 5431, 8911, 5430, 8910, 5429, 8909, 5428, 
             8908, 5426, 8907}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{8977, 5548, 8997, 5578, 8995, 5579, 9014, 5607, 9011, 
             5608, 9036, 5641, 5664, 9055, 5669, 5672, 5690, 9067, 5694, 9068,
              5673, 9056, 5643, 9038, 5611, 9015, 5580, 893, 5547, 8977}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{5561, 8985, 5559, 5563, 9003, 5595, 9027, 5630, 5594, 
             9002, 5561}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9024, 5624, 5649, 5651, 5678, 9059, 5652, 9044, 5628, 
             5625, 9025, 5623, 9024}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9332, 6024, 9385, 6108, 6231, 9484, 6109, 9386, 6025, 
             6023, 9332}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9344, 6052, 9403, 6133, 6249, 6253, 6363, 9576, 6256, 
             9499, 6137, 6135, 6056, 6050, 9344}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9394, 6121, 6239, 9490, 6123, 6120, 9394}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9563, 6338, 9598, 6391, 9597, 6392, 9633, 6436, 9665, 
             6475, 9664, 6476, 9704, 6526, 9703, 6527, 9745, 6583, 9744, 6584,
              9776, 6639, 9775, 6640, 9818, 6698, 6753, 9865, 6754, 9866, 
             6702, 9819, 6700, 9821, 2241, 9780, 6588, 9748, 6587, 9750, 6533,
              9706, 6532, 9708, 6482, 9668, 6481, 9671, 6445, 9639, 6444, 
             9643, 6404, 9606, 6403, 9608, 6349, 6347, 9569, 6344, 9567, 6339,
              9564, 6337, 9563}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9632, 6433, 9662, 6473, 6525, 9702, 6474, 9663, 6434, 
             6432, 9632}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9661, 6471, 9700, 6522, 9699, 6523, 9742, 6581, 6636, 
             6637, 9816, 6696, 9863, 6751, 9904, 6800, 9939, 6845, 9975, 6899,
              6945, 10013, 6900, 9976, 6846, 9940, 6801, 9905, 6752, 9864, 
             6697, 9817, 6638, 9774, 6582, 9743, 6524, 9701, 6472, 6470, 
             9661}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9797, 6663, 6723, 9843, 6664, 6662, 9797}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10190, 7158, 10213, 7186, 7216, 10228, 7188, 10214, 7187,
              10215, 7160, 7159, 10191, 7157, 10190}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10227, 7215, 7240, 10239, 7217, 7214, 10227}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10238, 7238, 10245, 7259, 10261, 7293, 7335, 10286, 7295,
              10262, 7294, 10264, 7263, 7261, 7239, 7237, 10238}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10247, 7265, 10266, 7296, 10265, 7297, 10288, 7336, 
             10287, 7337, 10319, 7392, 10317, 7394, 10359, 7464, 10358, 7462, 
             10357, 7463, 10395, 7529, 10440, 7594, 10437, 7591, 10435, 7589, 
             10434, 7590, 10479, 7671, 10478, 7672, 10521, 7756, 10520, 7757, 
             10562, 7821, 10560, 7823, 10607, 7889, 10605, 7891, 10652, 7954, 
             10649, 7952, 10648, 7953, 10696, 8026, 10747, 8095, 10805, 8157, 
             10858, 8234, 8320, 10917, 8322, 10919, 8238, 10863, 8168, 10811, 
             8166, 10816, 8107, 10756, 8106, 10761, 8041, 10708, 8040, 10711, 
             7967, 10660, 7902, 10611, 7900, 10614, 7833, 10566, 7830, 10569, 
             7835, 10572, 7768, 10528, 7766, 10531, 7681, 10484, 7680, 10487, 
             7603, 10441, 7601, 10443, 7534, 10398, 7532, 10399, 7536, 10401, 
             7469, 10362, 7468, 10364, 7400, 10321, 7399, 10323, 7343, 10290, 
             7342, 10292, 7301, 10268, 7267, 7266, 10248, 7264, 10247}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10376, 7491, 10413, 7558, 10459, 7631, 10507, 7722, 
             10554, 7796, 7864, 7869, 7936, 7938, 4150, 8079, 10742, 8082, 
             8084, 8146, 10799, 8148, 4299, 8219, 10851, 8221, 10853, 8223, 
             8225, 8301, 10909, 8305, 10911, 8308, 10912, 8310, 10913, 8311, 
             8312, 8400, 10971, 8403, 10974, 8314, 10914, 8313, 8315, 8408, 
             10979, 8411, 10982, 8414, 10985, 8417, 10987, 8318, 8316, 8227, 
             10854, 8151, 8150, 8086, 4168, 7944, 7942, 7875, 7872, 7807, 
             7803, 7739, 7733, 10514, 7730, 10511, 7727, 10509, 7725, 7648, 
             7642, 10467, 7640, 10465, 7638, 10464, 7637, 10463, 7636, 10462, 
             7635, 10461, 7634, 10460, 7633, 7565, 7560, 10414, 7559, 7499, 
             7493, 10379, 7492, 10378, 7490, 10376}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10557, 7801, 10600, 7870, 10641, 7939, 8012, 10690, 8013,
              10691, 7941, 7940, 7871, 10601, 7802, 7800, 10557}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10920, 8324, 10990, 8423, 11055, 8508, 11095, 8572, 
             11135, 8630, 8679, 11168, 8680, 11169, 8682, 11171, 8684, 11173, 
             8636, 8634, 8574, 8573, 8509, 11056, 8425, 8424, 8325, 8323, 
             10920}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ]}, {}, {}}}],
      AspectRatio->1,
      DisplayFunction:>Identity,
      Frame->True,
      PlotRange->{{1., 72.}, {1., 72.}},
      PlotRangeClipping->True,
      PlotRangePadding->{
        Scaled[0.02], 
        Scaled[0.02]}], {192., -189.}, ImageScaled[{0.5, 0.5}], {360., 360.}],
     InsetBox[
     GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJx13TmOK+m6HdCErDRp0KBBgyISCSKRSJDZ94x3blO3brXvDUGAbE0hhhZD
0hAEQdwb4kKFHGLlPoSecbHrY8Tf/Pf/8b/+63/+t4uLi2F5cfF/P//f//vf
x/PPi+Hcl3iBl3iF13iDt/gKX+MdvsG3+A7v8QHf4wf8iJ/wM37Br/gNv+MP
/Im/8Dc+4uHcI774D3J88YMcX/yNHF/8nRxf/IMcX/yTHF/8RI4v/kWOL34m
xxf/JscXv5Dji1/J8cVv5Pjid3J88Qc5vvjz3AMe8YQv/pPv4xFP+OK/sL3j
5yVe4CVe4TXe4C2+wtd4h2/wLb7De3zA9/gBP+In/Ixf8Ct+w+/4A3/iL/yN
j3g494jbP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu/yTH
7Z/kuP2THLd/kuP2T3Lc/jl5wCOecPsn38cjnnD7Z27OsXf8XOAlXuE13uAt
vsLXeIdv8C2+w3t8wPf4AT/iJ/yMX/ArfsPv+AN/4i/8jY94OPeI2z/Jcfsn
OW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj
9k9y3P45ecAjnnD7J9/HI55w+2fud5Vzjr3j5xKv8Bpv8BZf4Wu8wzf4Ft/h
PT7ge/yAH/ETfsYv+BW/4Xf8gT/xF/7GRzyce8Ttn+S4/ZMct3+S4/ZPctz+
SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu/5w84BFP
uP2T7+MRT7j9M/ccx99Vzjn2jp8rvMYbvMVX+Brv8A2+xXd4jw/4Hj/gR/yE
n/ELfsVv+B1/4E/8hb/xEQ/nHnH7Jzlu/yTH7Z/kuP2THLd/kuP2T3Lc/kmO
2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bPycPeMQTbv/k+3jEE27/
zD039jmOv6ucc+wdP9d4g7f4Cl/jHb7Bt/gO7/EB3+MH/Iif8DN+wa/4Db/j
D/yJv/A3PuLh3CNu/yTH7Z/kuP2THLd/kuP2T3Lc/kmO2z/JcfsnOW7/JMft
n+S4/ZMct3+S4/ZPctz+SY7bP8lx++fkAY94wu2ffB+PeMLtn7n3VD439jmO
v6ucc+wdPzd4i6/wNd7hG3yL7/AeH/A9fsCP+Ak/4xf8it/wO/7An/gLf+Mj
Hs494vZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7
Jzlu/yTH7Z/kuP2THLd/Th7wiCfc/sn38Ygn3P6Zey/ueyqfG/scx99Vzjn2
jp9bfIWv8Q7f4Ft8h/f4gO/xA37ET/gZv+BX/Ibf8Qf+xF/4Gx/xcO4Rt3+S
4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu
/yTH7Z/kuP1z8oBHPOH2T76PRzzh9k/sOpz0T+x7Kp8b+xzH31XOOfaOn1f4
Gu/wDb7Fd3iPD/geP+BH/ISf8Qt+xW/4HX/gT/yFv/ERD+cecfsnOW7/JMft
n+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5J
jts/Jw94xBNu/+T7eMQTbv/ErvtL//ge3PdSPif2uY2/o5xr7Jmrmc9rvMM3
+Bbf4T0+4Hv8gB/xE37GL/gVv+F3/IE/8Rf+xkc8nHvE7Z/kuP2THLd/kuP2
T3Lc/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv+c
POART7j9k+/jEU+4/TO3zjj947ob34P7XsrnxD638XeUc409cz3zucM3+Bbf
4T0+4Hv8gB/xE37GL/gVv+F3/IE/8Rf+xkc8nHvE7Z/kuP2THLd/kuP2T3Lc
/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv+cPOAR
T7j9k+/jEU+4/TO3ryH94zo/1934Htz3Uj4n9rmNv6Oca+yZ3cznDb7Fd3iP
D/geP+BH/ISf8Qt+xW/4HX/gT/yFv/ERD+cecfsnOW7/JMftn+S4/ZMct3+S
4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/Jw94xBNu
/+T7eMQTbv/E7qNK/7iu2HV+rrvxPbjvpXxO7HMbf0c519gzNzOft/gO7/EB
3+MH/Iif8DN+wa/4Db/jD/yJv/A3PuLh3CNu/yTH7Z/kuP2THLd/kuP2T3Lc
/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx++fkAY94wu2f
fB+PeMLtn7l9m+kf9zG4rth1fq678T2476V8TuxzG39HOdfYM7czn3d4jw/4
Hj/gR/yEn/ELfsVv+B1/4E/8hb/xEQ/nHnH7Jzlu/yTH7Z/kuP2THLd/kuP2
T3Lc/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bPycPeMQTbv/k
+3jEE27/zO0TT/+4b8p9DK4rdp2f6258D+57KZ8T+9zG31HONfbM3cznHh/w
PX7Aj/gJP+MX/Irf8Dv+wJ/4C3/jIx7OPeL2T3Lc/kmO2z/JcfsnOW7/JMft
n+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f04e8Ign3P7J
9/GIJ9z+mTuXIv0TX+IFdl+D64xd9+c6nC32PZXPjX2O4+8q5xx7x88DvscP
+BE/4Wf8gl/xG37HH/gTf+FvfMTDuUfc/kmO2z/JcfsnOW7/JMftn+S4/ZMc
t3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9s/JAx7xhNs/+T4e
8YTbP7Hn4KR/3BfuPk33TbmPwXXFrvNz3Y3vwX0v5XNin9v4O8q5xp45zHze
4wf8iJ/wM37Br/gNv+MP/Im/8Dc+4uHcI27/JMftn+S4/ZMct3+S4/ZPctz+
SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH75+QBj3jC7Z98
H494wu2f2HO30j+eQ+G+cPdpum/KfQyuK3adn+tufA/ueymfE/vcxt9RzjX2
zP3M5wN+xE/4Gb/gV/yG3/EH/sRf+Bsf8XDuEbd/kuP2T3Lc/kmO2z/Jcfsn
OW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9c/KARzzh
9k++j0c84fbP3Dl/6R/PvfEcCveFu0/TfVPuY3Bdsev8XHfje3DfS/mc2Oc2
/o5yrrFnHmY+H/ETfsYv+BW/4Xf8gT/xF/7GRzyce8Ttn+S4/ZMct3+S4/ZP
ctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu/5w8
4BFPuP2T7+MRT7j9M3euaPrHc7Y898ZzKNwX7j5N9025j8F1xa7zc92N78F9
L+VzYp/b+DvKucaeeZz5fMLP+AW/4jf8jj/wJ/7C3/iIh3OPuP2THLd/kuP2
T3Lc/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8k
x+2fkwc84gm3f/J9POIJt39izzFO/3iun+dsee6N51C4L9x9mu6bch+D64pd
5+e6G9+D+17K58Q+t/F3lHONPfM08/mMX/ArfsPv+AN/4i/8jY94OPeI2z/J
cfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3
f5Lj9k9y3P45ecAjnnD7J9/HI55w+2fu3PT0j+eIeq6f52x57o3nULgv3H2a
7ptyH4Pril3n57ob34P7XsrnxD638XeUc4098zzz+YJf8Rt+xx/4E3/hb3zE
w7lH3P5Jjts/yXH7Jzlu/yTH7Z/kuP2THLd/kuP2T3Lc/kmO2z/JcfsnOW7/
JMftn+S4/ZMct3+S4/bPyQMe8YTbP/k+HvGE2z9z9zSkfzy32HNEPdfPc7Y8
98ZzKNwX7j5N9025j8F1xa7zc92N78F9L+VzYp/b+DvKucaeeZn5fMVv+B1/
4E/8hb/xEQ/nHnH7Jzlu/yTH7Z/kuP2THLd/kuP2T3Lc/kmO2z/JcfsnOW7/
JMftn+S4/ZMct3+S4/ZPctz+SY7bPycPeMQTbv/k+3jEE27/zN0Lk/7xnHTP
LfYcUc/185wtz73xHAr3hbtP031T7mNwXbHr/Fx343tw30v5nNjnNv6Ocq6x
Z15nPt/wO/7An/gLf+MjHs494vZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3
f5Lj9k9y3P5Jjts/yXH7Jzlu/yTH7Z/kuP2THLd/Th7wiCfc/sn38Ygn3P6J
vYcq/eO9DJ6T7rnFniPquX6es+W5N55D4b5w92m6b8p9DK4rdp2f6258D+57
KZ8T+9zG31HONfbM28znO/7An/gLf+MjHs494vZPctz+SY7bP8lx+yc5bv8k
x+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu/yTH7Z/kuP2THLd/Th7wiCfc
/sn38Ygn3P6Zu/cu/eM9MN7L4DnpnlvsOaKe6+c5W5574zkU7gt3n6b7ptzH
4Lpi1/m57sb34L6X8jmxz238HeVcY8+8z3x+4E/8hb/xEQ/nHnH7Jzlu/yTH
7Z/kuP2THLd/kuP2T3Lc/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+
SY7bPycPeMQTbv/k+3jEE27/zN2zmf7x3invgfFeBs9J99xizxH1XD/P2fLc
G8+hcF+4+zTdN+U+BtcVu87PdTe+B/e9lM+JfW7j7yjnGnvmY+bzE3/hb3zE
w7lH3P5Jjts/yXH7Jzlu/yTH7Z/kuP2THLd/kuP2T3Lc/kmO2z/JcfsnOW7/
JMftn+S4/ZMct3+S4/bPyQMe8YTbP/k+HvGE2z9z9/qmf7znznunvAfGexk8
J91ziz1H1HP9PGfLc288h8J94e7TdN+U+xhcV+w6P9fd+B7c91I+J/a5jb+j
nGvsmc+Zzy/8jY94OPeI2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7b
P8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P45ecAjnnD7J9/HI55w+yf2HvH0
j/dqes+d9055D4z3MnhOuucWe46o5/p5zpbn3ngOhfvC3afpvin3Mbiu2HV+
rrvxPbjvpXxO7HMbf0c519gzXzOf3/iIh3OPuP2THLd/kuP2T3Lc/kmO2z/J
cfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2fkwc84gm3
f/J9POIJt3/i9I/3hnuPr/dqes+d9055D4z3MnhOuucWe46o5/p5zpbn3ngO
hfvC3afpvin3Mbiu2HV+rrvxPbjvpXxO7HMbf0c519gz3zOfRzyce8Ttn+S4
/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/
yXH7Jzlu/5w84BFPuP2T7+MRT7j9E6d/8r/T9I/3hnuPr/dqes+d9055D4z3
MnhOuucWe46o5/p5zpbn3ngOhfvC3afpvin3Mbiu2HV+rrvxPbjvpXxO7HMb
f0c519gzx5nP4dwjbv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu/yTH
7Z/kuP2THLd/kuP2T3Lc/kmO2z/Jcfvn5AGPeMLtn3wfj3jC7Z84/ZP/HaZ/
4ku8wEu8wmu8wVvsPQ2em+45xp4r6jl/nru1x55L4T5x9226j8p9Da4zdt2f
63B8L+57Kp8b+xzH31XOOfYOn6N//w9y3P5Jjts/yXH7Jzlu/yTH7Z/kuP2T
HLd/kuP2T3Lc/kmO2z/JcfsnOW7/JMftn+S4/ZMct39OHvCIJ9z+yffxiCfc
/olP/dP/HZ76p77EC7zEK7zGG7zF3gvjPQ2em+45xp4r6jl/e+w5OJ5L4T5x
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
       "], {{
         {GrayLevel[0.8], EdgeForm[None], 
          GraphicsGroupBox[PolygonBox[CompressedData["
1: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
LO4RiRmY2DUSV3Czc6T7Beb4hzGDPN/FPuJ2dA203SMxRq3dXIM5n7f8jsfv
nXt6HZ7zSPv4vjsxEmMwtG8k9mBlP1u0Sdbhaf9IzMDQuX6vvOcD7IPRgyLx
AzdHRGKA3j80Ui/Cx8HW6evJrg3Th9hH3IGuR63DIzFDrcNcg/kU57Gno8JY
xu/5aFsYPSUSS7ByciQ2mJ9qH3fPcZEYhr8TIrEEKyfawtzx1tHO83PTy6e5
BhyfHYkHuDnG63NnnBmJMRg6xzpnd7rzYPEs6+Qf6zz2dIZ18s/3mnB2gS0M
3RWph3j/F0fiBG4utA4fN0XqUfi+yD7iLo/ECdxcGokr+LvENZhfZh9xVzgW
Xm+IxAz9fm0kTuDm6kh3BL1/VSTemF9jH3FXugba9ZG4otZ1rsF870hc8llx
o9fhGfaxj369PRIncHNrJMbg45ZIfDK/zT7i7vY5wc2dkbji7O5wDeY3+5zI
v8ex8PpIJGZg4kHvA27uj3SPsN/7IvHG/AH7iLvXNdAejsQYtR5yDebc8Xyn
47vg45H6G+Z2iwPXYcwTxlORGIOh/0ViD1aetEV72jo8PReJGRj6xu+V9/y8
fTD6UiR+4OaNSAzQ+69G6kX4eNk6ff2Ma8P0K/YR92IYR7rW65GYodZrrsH8
Weexpze9Dt8j3rKF0Y8jsQQrH0Vig/kn9nH3vBuJYfh7PxJLsPKBLcy9Zx3t
Wz83vfypa8DxV5F4gJu3vT53xheRGIOhr61zdp85Dxa/tE7+O85jT59bJ/9D
74Vn+M7rw1yzrh7i/f8QiSuY+NEWbn6OxBLc/BaJDVj5xT6Y+8mxxEV19TT3
we+OhdE/I/HDHfCXLT3+ty2s/Op6rPFvJJbg5j9bOOMf7mNh5Q/Xpm6tLh9r
1+taH86mrqtXeOdZXWzASlIXVzAR1xXLPK3LR1xR19nASqMuljivvK4azL/3
WXJ2ZV2xMNq/Lk7goBt+fiISK+26/k4EW1Vdfxti3qnLR1yrrhpo/eriilq9
umown6qu2jzbNHU9H5xtFX6eKYyZw5ixLq7gZvrw8wuR+JihLotGLDoMzVIX
J3Azoq53z3seWJcPLmerixlYmbuuvqff56ir/2Bi9rp0epl9UBuOB9XlI27W
uupRa666OKHWnHXVYD6grjz2NE9d69DL89Zl4XLBuviBj+F18cB8obp83DeD
6+IW5haoix/4GFqXhbMhdeloS9X13PTjwnXVgN0l6mKDfp+vrvW5Jxarqw9g
aMm6dM5ukbryYG7xunTy568rjz0tWpdO/si61oSzpeuyMLR+XT3E+1+uLpZg
aJm6dDgYX1ePwvSydfmIW6kulmBohbp4+yeM5euqwXzFunzErVxXLJyNq4sZ
+n21ujiBm1Xr4hzORtXFHvPR9hG3Sl010MbWxRW1xrhG6jXhHs5X9zo8w7R1
9TKfD+vUxQncrFUXY/CxZl18Ml/bPuI28DnBzXp1ccXZresazNfwOZG/oWPh
dUszAxMTwpiuLm42qesegbON62KP+ab2sd+NXANti7oYo9bmrsF8uWZ4J41w
7mFsXRcb9Pi2dbEHZ9vZwsf2tjC3Y11cwdAudXECNzvZB387OJa4Y+t6x7zz
XR0Lr7vXxRIM7WFLL+9pS2/u7HqssXdd/MDHPrYwtK8tDO3m2tTdz75hYUy0
hctJtvB6cF08wNOUuliFs0Psg6H97YOhA+viBM4OsiX/AOtoe3nv7PVQ1+AO
O6YuZjiLI+viCm4Or4tzmDvMscyPsI+4yd4v+zu6Lq6odZRrMD/OZwxDx9vC
3Am28HSiLUycZAs3J9vC0ym2MHSqLcydZgs3p9vC04V19TQ9fpEt98RZdbHE
fXC2Lf1+ji3cnOEa8H1eXVzB0Pm2MHeBLWuc6Vjq3lZXL9J3F3tNmLuprj6m
fy+tiyuYuMwWbi63hacrbGHoqjA2q4u5q23h5hpbeLrda9Kbl3hN1ri+rs88
eLrBdpswbrRlT9e6Bnzf7D3C1i22cHOrLc92nWOpS//y+cDnyh1eH/6+8T54
1rvqYgwO7raFs3vrYgy2HqiLJRi6zz569h7HEveO+4D3/6Bj4ezhuriCp0ds
4elRW/r0ftdjjcfr4gqGnrCFlf/ZwtNDrk3dJ+2DradsYfRpW7h8qa6+h4Nn
62IMbl62D86esw+2XqiLJZh70Zb8562jPea9s9dXXIN76+262OAs3qiLJRh6
rS7e4OxVxzJ/3T7invF+2d9bdfFGrTddg/m7PmPYes8Wtt63hY8PbOn9D21h
6yNb2PrYFrY+sT03jE9tYeszW9j6MYwr6+r3n2zp9y/r4hmOv7KFra9t6bPP
XQMuv62r72DrO1vY+t4Wtr5wLHXhgM8ZPmN+9pqwFYXf5e6sq39/rYsTev83
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
Hp+ciA1YmWidft/TteF4kn3E7et61No/EUvUmuIazPdyHns60Ouwp4O9L5g7
xBaeDk/ECdwck4gH2DrUOqwcYZ0zOjoRJ8QdZp38o3x+aMclYmbFME5OxAB8
fBzG2WGcE8aJYayciJVTrMPH8c6Ds5Osk3+s90XdE6yTP8Hvk/471TXo69Ns
x3hNGIOPMxOxBxNn2Y73ntDh4/xE/MDfvX7fvJML7IPRixNxQp9emajX6a/L
EvUx/X6Jdfr3XNeG3UvtI+6iMNZzrSsS8UOty12D+XnOY09XeR2e+2pb+Lsl
ERvwdHMiBpjfah931XWJeIbdGxKxATc32sLT9dbRzkh0v3Bet7kG99DdiXiA
lWu8PnfDnYm4gpt7rHN2tzsP7u+yTv61zmNPd1gn/z6fN738QCLG4OkNv3t6
537raA8nYgyGnkjEBpw96Dy4ecQ6PD2eiBniHrJO/qPW4fLJRPzA9HOJeh1W
Tk/UU5zLM4lYgpXnrcPKU86DuWetk/8/74u6T1sn/5NE/UePPOb12d+Lie4m
2HorEQ/w9KbPgPnb9sHQK4kYhpXXEnEIT6/bcnavWkd7wftljXdcA4Y+TMQJ
fLzk9eH+fT8/ffGRddh613kw94F18l92Hnt6zzr5n/pZ6evPbGFu9TR8ToXR
COOrRGzA2efW4e/LMC609rV1OPsuEXtwU6bqCd759/bB1o+JWIWh3xP1Ohz8
kqiP6cefrMPWN64Nrz/bR9wPrket3xJxRa1fXYP5t85jT394HTj70/amMOqp
eICnKBU/zONUPhj6JxHbcPxfIg7hif+QBRZu/rWO1kr13PRykqoGd1gzFQ/0
+19en3uC84YlOCtS6ZxdmioPFnkf6OT/7Tz2lKXSya9SrUn/tlNZOJs7Vd/Q
F71UDMBWJ5UOrwNT9Sh8d1P5iJs6FWMw1D8VV3DTL1UN5lOl8hE3TapYeB2Q
qtfhYMZUfUw/Tp+q72FrulTcMp8hlY+4aVPVQJs5FVfUmilVDea1VGfPO5sl
1To8w8Kp+ob3P0cqruBj9lQMw+tsqRhmPiiVj7h5Up0T/M2VihnObs5UNZjP
muqcyJ83VSwsLmhmYGKBVFzBzeBU9wvMzZ/qM5j5kFQ+4uZLVQNteCrGqDUs
/PxFojn9wucDnysLpVqH5zws/DwijKXCWCIVYzC0WCr2YGXxVBZtyVQ6PI1M
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
9GhTzBD3gHXyH7YOl080xQ9MP9NUr8PKqU31FOfyVFMswcqz1mHlf86Duaet
k/+490XdJ62T/1FT/UePPOL12d/zTd1NsPVGUzzA0+s+A+Zv2gdDLzXFMKy8
0hSH8PSqLWf3snW057xf1njLNWDo/aY4gY8XvD7cv+vnpy8+sA5bbzsP5t6z
Tv6LzmNP71gn/2M/K339iS3MjS3C51QYWRifN8UGnH1qHf4+s0X7wjqcfd0U
e3DTLNQTvPNv7IOt75piFYZ+aarX4eDHpvqYfvzeOmx96drw+oN9xH3retT6
uSmuqPWTazD/ynns6VevA2e/2V4fRq0QD/DE/3k7/DCPCvlg6K+m2Ibjf5ri
EJ7+tYWbv62jFYWem16uF6rBHZYX4oF+/93rc09w3rAEZ41COmcXF8qDRd4H
Ovl/hnGj95QU0skvC61J/7YKWTibs1Df0BedQgzAVlVIh9cBhXoUvtuFfMT1
L8QYDPUKcQU33UI1mPcr5CNuqkKx8DpToV6Hg+kL9TH9OG2hvoetaQpxy3y6
Qj7ipi5UA23GQlxRa4ZCNZj/57Pnnc1caB2eYXihvuH9z16IK/iYtRDD8Dqw
EMPMZyvkI26uQucEf3MUYoazG1SoBvNZCp0T+XMXioXFoWYGJgYX4gpu5it0
v8DcvIU+g5nPX8hH3DyFaqAtUIgxag0pVOMz9wufD3yuDCu0Ds95cPh58TCW
CGPRQozB0MKF2IOVRQpZtMUK6fC0ZCFmYGj9Qu+V9zyikA9GRxbiB25WLMQA
vb9coV6Ej6UL6fQ1e6E2TC8bfv7DPbtUoXrUWqEQM9RavlAN5jwDeexppULr
8J5XLmRhdPVCLMHKON9VzMfbx92zaiGG4W+1QizByhhbmBttHW0DPze9vIZr
wPG6hXiAm1UKrc+dsXYhxmBoPeuc3ZrOg8V1rJM/ynnsaS3r5G/oNeFsI1sY
2rtQD/H+Ny3ECdxsbB0+di7Uo/C9iX3EbVGIE7iZUIgr+NvMNZhvbh9xWzoW
XncsxAz9vl0hTuBmm0J3BL2/dSHemG9rH3FbuQbaDoW4otb2rsF8wUJc8lmx
k9fhGRYq5KNf9yjECdzsVogx+Ni1EJ/Md7ePuH18TnCzVyGuOLs9XYP5Lj4n
8vd1LLweWIgZmJjifcDNpEL3CPudWIg35pPtI24/10A7oBBj1NrfNZg/XIa4
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
LmzN0JGFpxk7sqwxVUex1B3aUS/SdwM6WhNG5++oj+nfgR3xCVuzdmThZraO
LDzN3pGFoUEdWZiboyMLN3N2ZOFpWEdr0puzdLQma8zT0Wc8bM3bkYWt+Tqy
7GmujmrA9+CO9ghbQzqycLNAR5Znm7ujWOoeGH5eNIzFwhje0frwt21H++BZ
F+qIMThYuCMLZ+TBGGwt0RFLMESt792zi3QUS9x6HfUB73/JjmLhbKmOuIKn
kR1ZeFq6I0ufLt5RPdZYtiOuYGi5jiysLN+RhacRHdWm7god+WBrxY4sjK7U
kYXLMR31PRys0hFjcDPWPjgbZR9sje6IJZhbzZb8Va2jLdPR3tnrONfg3lq3
IzY4i7U6YgmG1uiINzgbH0bD8zXtI27ljvbL/tbpiDdqre0azNf3GcPWBraw
taEtfGxkS+9vbAtbm9jC1qa2sLWZ7XRhTLCFrc1tYWvHjvqeft/Jln7fqiOe
4XhrW9jaxpY+28I14HI79x1sbW8LWzvYssaWjqXuQR31HD2ys9eErclhLNhR
/+7aESf0/m62sLW7LWztYQtbe9rC/V62sLW37RDXhhXY2MVrssZ+Hd0jMD3R
FrYm2ZK3j2vA5RTvEbb2t4WbA2zhbF/HDvXZc89xrx3s54a/dbuhF8LohHF4
R1zB06Ed8QYTh9miHWEdzo7uiCt4utLvnnd+jH2wdVxHLMHQKR31Ohyc2FFf
ws3x1mHrSNeGgxPsI+5Y16PWyR1xRa2TXIP5Uc5jT6d6HTg7zRZeL+iIAXg6
vyMGmF9oH/fNWWGs3hFP53TEGDydawt/Z1tHu8rPTY9f5BrwdHlHnMDH6V6f
u+HSjriCpyusc3YXOw/+LrNO/hnO4z64xDr553kvPMPVXh+2Huuoj+mRazvi
hN6/zha2buiIK3i6uSN+4OZG+7jLr3cscfd11N/09S2Oha3bOmIYdm+3hac7
bOnxm1yPNe7qiCt4utsWnu6xhadbXZu699rH2vd7fXiaJfTra8G+HsbDHfED
Nw92xAm9/4BjmT9kH3GP+2zg5tGOGOO8HnEN5tf4LDm7JxwLW893xAkcPBPG
IR2x8lRHdwpsPdnRZyTzp+0j7n+ugfZcR1xR61nXYP6Ca8PBi7b09Uu2MPdK
R4zBxKu2x/ksYAlu3uqIDVh5wz6Ye82xxP3RUR/wzt92LIy+2xE/cPOeLf37
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
v14XS8zmq3Uxxuy/Uhfb+K95jbyX3YPYm3XxRq833AP/Ht897+xt78MzfF/X
3PD+P6yLE7h5vy5W4ey9unjG/8Br5H3qe4Kbj+viirv7yD3w3/U9Uf+Zc+H1
27qYgYmvQlfUxc0Xdf2MhLPP6/o9AP9Lr5H3P/cg9k1djNHra/e40nkwCoff
eR+ek5/T/I7M78G/1MUYDP1UF3uw8rMtsV8dh6c/QzfVxdDaTXqvvOe/vAaj
/9TFD9ykmsQAs9/QpFmEj38dZ65/c2+Y/s9r5P3tfvRKNokZeiWa1AP/d9fB
cbpJ+/CeM02yMFptEkuwUmkSG/i1Jq3x7ck3iWH4KzaJJVgpNcnCXKFJcWLr
NOm5meVmTeoBx2s1iQe4yTZpf74Z9SYxBkMtmhTn7po3qQ4Wm5oUpz7XpDrO
1NikOPXrNmlPOGvZJAtDHZo0Q7z/DZrECdys16Q4fGzVpBmF7/WbtEbexk3i
BG5aNYkr+NuwST3wN2rSGnmtm5QLr+2axAzzvlmTOIGbNk36RjD7mzaJN/y2
TVojb5Mm9SC2RZO4otfmTeqB/0NdXPKzYssm7cMz/Og15nX7JnECN9s2iTH4
2KZJfOJv16Q18nZs0j3BzQ5N4oq7a9+kHvhbN+meqO/YpFx45b/hCjMwsVuT
zgE3uzTpO8J5d24Sb/i7NmmNvJ2a1IPYHk1ijF67N6kHPv+dWHrDxF5Nssx4
IvDpHDo41DY0KnRiKBPqGuoSSoUODR0SSnsNP35kN3RzHv/pqSNC3fWvtW/o
ETpSf3u/oW/oKP1jOv9v+4Q2C53k/fhH3nuHeoUK7nG4/rWYDT3dq5nreus/
MfX/vY/Qv5bn/+vIy4UO85ny7nGY/sjQcLTPsWFoaGhIaAPbwaFWoeMdW99r
x4XWCQ0MHRNaNzTI/tpeGxDaPDTaz9PG93dCqIXj/fWJaujnc6zlNfxNnTsy
1Do0IjQ8tLHtsNAmjhPbyGuctWXoWJ9pi9DJPsc+oXNCs0NbhcaGTgm1C41x
3pZew986NM5524XGh04L7RaaEZoe2j40wbEdQqeHJoZ2CU0LnRHqGJoSmhzq
EJrkvG1Cp3qPHR0n1t496Luze0wN7WRLr219Fup39VnYb/fQmT7fHqGZ9vcK
nR06K7R/6LzQuaE9Q7Oct7fvhrz9HJ8T6uQ68vb1Gvd4YOj80NwGzf6C0EWh
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
U1Oa5VPdq63PQj1cTfB+cDbRPhzMCE1PiQfstJSYOdMxuJ0cmpQSP1NDU1Li
5Az7Hb1GHrN7np8f/ma6F/N9Tmh2St+F032OvXzvZ6XEwRznwd4s1+/tOvI6
+CzUd3IdeczrXO/N/J5vnzlYFVqZ0uxfGLogJf7mOY/ZvCJ0eUpsXOAYzFwc
WpASJxeF5qfE1Xz36uI4MTi7xDXM+LLQZSnN35LQpSnN++LQopTmHrswpfm+
1LHDvEavnu6xNKVZXupeu/hd8Q56++zL/L5vD92WEg9Xh65Kic8VoStTYhe7
PCXernIMbq7zfQ30nV2bEjPXuNdRruO+YG+1a2BgTejWlDi5OXRTSozdGLoh
pe8L9vqUeLvJscFeo9cI97glJcZucS9+l2JumN8T/Hzsd18oF78LZ9Ni5p7Q
3SmxcVfozpRYuds+/NzrPFh5IHS/3+e7oXdS4ulBx+Dk4dBDKc36k6EnUprB
x0KPpjTHjzhvrM/EHqc7Tmy8e9B3ins8nhIzj7vXOJ/lPr/Xp7wf7/lp+7Dx
SujllJjA8s2Cm1cdg7fnQs+mxMYLoedTYuVF+zO9Rh6z+56fH25fcy84eDv0
Vkrfhmd8Dph5M/RGSgy84zzYe93181xH3gyfhfq5riMPbt733jDzgX3e91+h
P1Pi4+PQRynx8KHzmM2fQj+mxMpHjsHH/0KfpcTTp6FPUuLqE/da4jgx2Prc
Ncz396HvUuLjm9DXKc36V6EvU+IM+0VKHHzt2DKv0esq9/g2Ja6+dS++x3ek
xOe1PvsPKf1suNMx+Pg99FtKPPwa+iUlxrA/p8TKb47Bx9++r5t8Z3+kxNUf
7rXKddwXbP3jGhjIBDfptPZPhk2kdT7+Ad7/UuIM+6/PR5zYGq/RC7bokUqL
MSy9+HtA/J7N78vwAKPsN8Vr/K7NO9k61rZKi59y2FJanBTDFtLihjV8WKqk
lQdDzcM2S4uNetjGtOZ73bDrpDXj2LXTet/bpLUf89gi7Fpp8UePWlrz3ZRW
L9igjjw4pDf7McfUkQff1bTOBMP0wIezlmmdAz7ahN00LU6wm6TFW9u0YrDC
Wuu0+GkVdsO0ONkoLR8mWdsgrfndNq3nYaa5vy3T4p/4+ml9F9ZL6xx8J1jD
hxVy26XFEn9PYfO02MNulhZLxInBJ2ucFXY3TutMMLNdWudgLjqHDk6Ljx3C
tk+Lh+3TyoMP1vBhpkNaefCxU9iOac3vvmH3SYuhndOKwcpuYXdNa6b3DrtX
WkzsGXaPtOZ797Ty4HLHtPZg9okTgzd67JIWQ/TolBZLWHrBKmehHoY4C/vB
2H5pnQ9+9k/Lh4+Dwh6YFgddQoemxcYBaeU1+G7ISzl+SFoMUUde0mvcI6x0
C3VNa/aPDB0ROjq0InRlWmx0Dx2eFg89nMfPw8NcX3QdeRn343x515HHN5q5
470yxz3diznuZb/uvfumxcBRoT5pMdHXPjz0cx7cHBMa4HcwKXR6WiwOdIy5
PDY0yPM0LHR8WvM7JDQ4rXk9znkw1997rO84sXXdg76t3GNoWqwMda8WPkt/
P+dw78dzj7APE6eExqQ1+1j+XhtsjXUMVk8MnZAWEyeFRqXFzWj7bb1GXjPf
U++0vjvj3AsOJoYmpMX9SJ8DTsaHTkuLjdOdB+enun5715G3qc9C/bauI4/Z
nex7h5+poSl+54tCC9Oa8SnOg5kZoelpMXF26Ky0OJkWOiMtfs50XifHZ6XF
03TnwdlM58HNOaHZac34+aG5aX0juQ9mCzbOC52bFhvznAdjc1x/gOvI29v9
ON9+riOPmbgqLTb29Lk4ByxdGLogLQ4uDS1Oi4fFvguYWeIYbCwIXZQWP5eE
Lk6Lk4X2u3qNvIPdm3PDzFL3gofloSvSYnq+z8FzXx5alhY3VzoPxi5zfR/X
kXeozzLf97XMeczx1X5m5voa+0+GGjPBaEZMrAqtTIu3a5030Gv4cHWd8+Dk
htD1fsfPhp5Ji6EbHYOZm0M3pTXjd4RuT2v+1oRuTYulW5wHn6u9xwjHiR3v
HvQ90T1uS2uWb3OvwT4L9XB1p/eDs7vsw8HDoYfS4gH7YFrMPOIY3N4buict
fu4P3ZcWJw/YH+s18pjd5/z88PeoezHfT4eeSuu7cLfPAUNPhB5Pi4NnnAd7
j7n+DNfxfsb4LNRPdh15zOvz3pv5fcE+c/Bl6Iu0Zv/l0Etp8fei85jNj0If
psXGS47BzOuh19Li5NXQK2lx9Yp7nes4MTh7wzXM+Aeh99Oav3dD76Q172+H
3kpr7rFvpjXf7zh2vtfotcA93ktrlt9zr9P8rngHl/jsH/h9/xr6JS0e/hf6
LC0+Pw19kha72I/T4u0zx+DmK9/XMt/Z52kx87l7LXId9wV7X7sGBn4O/ZQW
Jz+Evk+Lse9C36b1fcF+kxZv3zt2pdfotdI9fkyLsR/diz/b8XOXn8/X+fnY
jz9n8rOcGMz8FfozLTb+CP2eFit/2oefv50HK/+F/vX73CC4Xz8jnvg/5xGD
k2T8dSKjWc+HzWU0g5mw6YzmOJVRHoz+4z2YUeLEYI8e9IUVemQzYgZLrzU+
yz9+r4WM9uM9FzPyYaMpbD0jJrB8s+BmrYxi8FYJW86IjVrYakasNMvIhyvW
yGN2N8zo+eG2RUa94GC9sC0z+jaUMjoHzKwbdp2MGODOyIO9tTOqhx/qyOM7
wlmoh0nqyIObVhntDTMbZeTzvncNu0tGfGwStnVGPGycUR6z2T7s9hmxQpwY
fGwWtm1GPLUJu2lGXGHpBT/EicHW5hnVMN/bhd02Iz62DrtVRrO+Zdh2GXGG
3SIjDogTgz3W6AVP9NgmI66w9OJ7/FtafMITZ2e/Gzynv5mPnWKtY0Y87Bi2
Q0aMYXfIiBXixOBjt4zuC564s50z4gpLL3imjvuCrd0zqoGB/cLum9H+e4fd
K6PzdeKf/82IM+weGZ2PODHYY41esEWPfTJiDEsvGOCfI2YP5vrAjP7Z4j8L
kV+MvKKYOSTU2WwcHDooI1Y624efQ50HK91CXf1eTwiNzIinwxyDk+6hwz3r
vUO9MprBHqEjPcdHOA9Gu3iPkuPE8u5B36p79MyImZ7ulfFZqOf3hqNCfTJi
sq992DgudGxGTGAHZcTNYMfgrX+oX0ZsHBMakBErA+238Bp5zO6Jfn64HeJe
cDAiNDyjb8PRPgfMDAsdnxEDI50He0Ndv7HryGvyWahv5Try1vXZORMMjfI5
eN+zQ2dnxMDo0EkZMXGyfTg5JTQmIyZODY3LiKGxjrVznBpmeVrojIx4Os01
cDMhND6jmZ5onxk/3f7W7k1fOJkcmpQRN1Psw8ZU+9u5H3vs7D2JwdV0n2Nx
6JPQxxkxMSs0MyMGzgzNyIirGa7Zw3FiMHGO72gv39NZGbF0lntt5jvjTuFp
jmuY+/mhCzNiY17o/IxYmhs6LyPOsOdmxNn5ju3nNXp1do8LMuLqAvdi7i/y
HszxAvvM9cX2YWBh6JKMmFhkH04u9d3AxGWhpRkxtMSx7o4v8ju+N3RPRjwt
cw2cLA9dkdG8Xmmf+Vthv4d70xcGrg5dlRET19iHk2vt93G/yzOa15WOMb+r
7MPidfaZ/VtCN2fE0vWh1RlxcqtjcHKDYzBxU+jGjJi52f5Qr5HXz2fkGWBu
jXuN8R3c7Xd+Z+iOjFi6PXRbRmzf5ppRjhM7zufi3Ce7x10ZMXaXe3Xzu+L9
wcB9vnf4eSB0f0bMPBx6KKO5f9CxcY5TM95xYjDzeOixjDh7NPRIRrw94l6T
HCcGV0+4hvl+IfR8Rnw8G3omI66eDj2VEXPYJzPi5xnHpnqNXjPd47mMuHrO
vTp4b84FTy96P3h7OfRSRrP+VujNjHh4NfRKRhy87RisvOYY/LwRej0jnt60
f57XyDvbvdkPtt5xL2ad78RHfgcfhN7PiKv3Qu9mxNu7rlngOLFzfC7OvdA9
PvT7/NC94OrTjL5H8PCZffj4n324+tw+DHwZ+iIjrr4OfZXRbH4X+jYjxr5x
7ArHv/R7LWfjZ2NWjH3vGlj6MfRDRiz9ZB+Wfra/wr3py8z+GvolI35+sw8n
v9u/xv3YA4b+cAyu/rQPZ3/ZZ9aTca5EVlz9E/o7Iw5SWcXg51/H4Id/qcZ/
GfFEHT6c/ee863xGngG20ln1ggPuoJgVH/mwuay4yobNZMU0lhr4IU7sFp+L
c8MSPQpZ8YalFwxVsrpr+Klm5cNTLSsflppl5cND86x8+GjMyoehelY+/DRl
5cPTWln5MNMiK59Z3ihsq6zme+OsfPhZN+w6Wc13y6x85n29rHz4WzurXszs
BmHXz4qfDbPy4YTe+LBLP2qYsx3DdsiKrdZZ7c28bhd226xY2jTsJllx0iYr
H27aZuXDzGZZ+TC0eVY+nGyRlQ837bLymcWOWe0N8/Rmb1jaOuxWWbG0TVY+
LHEWfFjcMqtesNQ+7PZZcbJDVj7c8Ez4fAPoR83uoTNDM7JiYqeszsH+I0Mj
spr7XcLunBUHu2blwxL1u2XFTKewe2Y1o3u4N+wR39Xv++hQ36y42iurGvjZ
J+zeWfGzb1Y+c7lfVj6zT2/6wswBYffPio0Ds/Jh5aCsfPikH3vA0sFZxWCr
s304PMQ+8949dHhWnHQJHZoVE0c4BkNdHYOhw0LdsuLkcPtZr5EHW5yRZ4DR
I92r0XdwVFbM9A71yoqrnqEeWfHWwzVVx4mlfC7O3dw9+mTFWx/3gqV+vmtY
6m8fHgbYZ9aPsc/sD7QPS4Psw9Kx9mHrOPuwNNg+LA2xz3yfFBqV1XyPtg+3
w0LHZ8XScPvM9wj7cDjUvWDphKzmD5ZOtN/WvfFbud9Qz8TMrOYYlk723szr
GaGpWc36KaExWc3+WPuwNM4+LJ1qH7ZOsw9LE0Ljs2Jpon1+3rAHzLRzb/aG
4cmhSVmxNMX+Tj4LPhye7l6wNM1nhZPp9uFmhv0O7kcNP4PX9zuBiVl+/nou
3nmob078nBOanRUDZ4fOyoqJ2fbhao7z4Gdu6Dy/4+tCq7Ji6XzHYOaC0Lys
ZvyS0MVZzeNFoflZsXSh85j7c73HIY4TO8g96NvVPRZkxdUC99rfZ6EerhZ6
PzhbZJ/ZXx66IqvZx16eFVtXOgY/S0KXZsXPZaGlWfG0zH4Pr5HHTK/288PP
CveCh5VZ/fsq+RYs9jngh3+P5dVZcbLKefB2leuPcR15R/gs1Pd3HXm9fXbO
BEvX+xzMxFOhJ7Oa9RtDN2Q1+zfZh59bQjdnxcltoTVZsXWrY8Mcp4Y5fij0
YFYs3e4aWL0zdEdW/Nxln5m+2/5I96Yv/Nwbuicrfu6zDz/32x/lfuwBSw84
Bj8P+xxvhzaNmd0kJ04eDz2W1aw/GnokK04ecc0kx4nBydO+o6m+pyeyYuwJ
9xriO+NOYekZ1zD3r4RezoqNF0MvZMXS86HnsvqmYJ/NirMXHJvhNXrNdo+X
suLqJfdi7l/1Hszxa/aZ69ftw8CboTeyYuIt+3Dyju8GJt4PvZcVQ+86doHj
b/kd/x36KyuePnANnHwU+jCref3YPvP3if2L3Ju+MPBZ6NOsmPiffTj53P4l
7scezOsXjjG/X9qHxa/sM/s/ZvXvfIWlb0JfZ8XJT47BybeOwcT3oe+yYuYH
+1d5jbxLfUaeAeZ+dq+bfQd/+p3/HvotK5Z+Df2SFdu/uOZ6x4kt97k4903u
8UdWjP3hXnP9rnh/MPCP7x1+/gv9mxUzyZjlRE5zz7+gjtgax6mBCeLEYCYb
NpMTZ+mwqZx4w9ILxogTg6tcTjXMd7OwtZz4qIQt58RVKWwxJ86xhZz4IU4M
DvM59YInelRz4gpLL36msTfngqfmOe0Hb/y8acxp1luGXTcnHtYK25QTB+vl
FIOVFjnF4GedsGvnxBN1+HDGGnlwTG/2g631c+rFrPOdaJ3TO9gobKucuNow
7AY58YalBsaIE4N5zsW5YYweG+f0PrH0gqs2OX2P4KFtTj58bJaTD1eb5+TD
wBY5+XC1Zdh2Oc3mNmG3zomxrXKKwQ3xLfxeDwl1zomxbXOqgaXtw26XE0vt
c/JhaYecfOae3vRlZncM2yEnfjrm5MPJTjn5cEs/9oChnXOKwdUuOflwtmtO
PrO+d9i9cuJq97C75cTBPjnF4GePnGLw0ynsnjnxRB0+nLFGHlxxRp4BtvbN
qVfCd3BwTnwcGPaAnLjaP+x+OTGNpQZ+iBPj28G5OHeDexyUE29YesHQob5r
+OliH5662oelbvbh4TD7MNM9dHhODB1hH36OtA9PPezDTE/7zPIxoQE5zfdA
+/DTJ9Q7p/k+yj7z3tc+/PVyL2a2X06/28FPf/st3Bu/5n69PGenhMbkxNYg
7828nhQalRNLx4WOzYmTwfbhZoh9mBlqH4aOtw8nw+zDzXD7zOJY793Svdkb
lk4IjcyJpRPtt/VZ8GFxhHvB0mifFU5Ott/Oz4S/iftRMzH0SOjhnJgY53Ow
/3WhVTnN/WmhU3PiYLz99q6fkBMzk0OTcprR0x3b3vHxft+XhhbnxNUU18DP
GaGpOfEzzT5zOd1+B/emL8ycGZqRExsz7cPKLPs7uR97wNJZjsHW2fbhcLZ9
5n1e6PycOJkTOicnJi5wDIbOdQyG5obOy4mT8+3v7zXydvMZeQYYvdC9uvsO
FuXEzMWhBTlxdVFofk68zXdNF8eJ7eNzce7D3WNhTrxd4l6wtMR3DUtL7cPD
ZfaZ9WX2mf3L7cPSFfZhabl92LrSPiytsA9LV9lnvm8M3ZDTfN9kH26vDV2T
E0sr7TPfq+zD4dXuBUurc5o/WLre/hD3xh/gftTw90H4HZTfMWHpZu/NvD4Q
uj+nWb81dEtOs7/GPizdZh+WbrcPW3fYh6U77cPSXfa38R4wM9y92RuG7w3d
kxNL99kf57Pgw+Hd7gVLD/qscPKQfbh52P4Y96OGf46B/92I/10IHh7NiWFY
ejz0mN/T16GvcmLpqdCTOfHwhPOmeg0fxp52Hvw8H3ouJ05eDL2Q01y/Hnot
p/nGvuo5+Mb7MZuvhF7OiUl6PJsTYy+51xzXkTfLvdlvtuvIg5lnfKYZ7oEP
Y2/4HDD0SejjnDjAfpTT3H/q2EKvfZgTT++G3smJpffsX+i1t3Oa42/9PFf4
/r7MiVvib+XE+ps+xzyv4V/u3C9y4urz0P9y4g37WU6MfeHYEq9xVvh+32eC
ge98DuYln4+fq3kx82Poh5zm/nvnXeM1fFj6yXkw82vol5xmN8G/4Dkvfn5z
DD7/CP2e09z/F/o3p1n+O/RXTiz96Tx4/dl73Ow4sRvcg75r3OOfnBj7x72u
81mohyvOwn6wlMzrfPCQysuHmWzYTF4MlMIW82IgnVceLHE35MEM8UJerFBH
Hlyxxj3CSSVsOa/ZbwzbPNQydGxoUF5sNAtby4uHel55cFbNqx5mqCMPRunH
+WCPOvL4Fn/g98ocN+XVizleKy8fHth73bwYWCfs2nkxwRo+PKznM8LNhmE3
yOsd7B52t7xYbJVXjLncOOxGec3TZmHb5jW/m4bdJK95bZ1XHsytn9cezDJx
YjBGD/rCCT3a5MUKll4wzFmo5zk3z2s/eGsXdou8mNghbPu8Zh+7fV5sdcgr
Bqtbh90qLya2DbtNXtxsl5cPJ6yRx3eFe2qR13dnx7x6wcGuYXfJi/st8zoH
nOwcdqe82ODOyIPzjnnVww915PEt4SzUwyF15DG7e+R17/DTKeyenpXeoV55
zThr5MHMPmH3zouJA8MekBcne+VVDz/75pUHK8T3z4sn6siDs/3yyoObg0MH
5TXjXUNd8vpGch/MFmwcGjokLza6OQ/GOrs+7Try4JB+nC/pus6eiePyYgOG
ORfngKXDQ4flxcFRoT558dDHdwEzfR2DjSNDR+TFT89Qj7w46WW/7DXycu7N
uWHmaPeCh4GhY/JiurvPwXMPCPXPi5tBzoOxfq5f23XkFX2W7r6v/s5jjgf7
mZnrIfZnhV4IPZ8XE8NCx+fF21DntfIaPlwNdx6cnBAa6Xd8Tmh2Xgyd6BjM
nBQaldeMnxoal9f8nRIakxdLJ4dG58XnCO/RznFibd2Dvlu7x9i8Znmse23i
s1APV6d5Pzgbbx8OpoXOyIsH7NS8mJnuGNyeHpqYFz+TQ5Py4mSK/Q5eI4/Z
nePnh78Z7sV8nx06K6/vwgSfY0/f+8y8OJjtPNg70/WdXEdee5+F+j1cRx7z
eq73Zn7Ps88cXBO6Oq/Znxc6Py/+5jqP2VwWuiwvNs53DGYuCs3Pi5MLQxfk
xdUF7nWI48TgbIFrmPGloSV5zd/i0KK85n1h6JK85h57cV7zvcixrl6j15Hu
cWles3ype+3kd8U76OmzL/X7vjV0S148rAhdmRefy0NX5MUu9vK8eLvSMbi5
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
uqik+cbOL4mZud6D+74utMr3vsr7wd7s0NklzfuFoQtKmnHsvJJYme/YQV5j
7/189jklcXyOe+3rNXy+EctDV5TEFvbykmaUZ72mJIZYW1YSw4tDi0ri5FL7
vRy/rKS5Xu3nGeAeV5c039irSvpd5mLfC9+CS+wf7t4LS/pOLHQM/q/0WWFy
hf1+7ocPu0t8Jt7946HHPAtP2Ifd+0P3lcTGjaEbSuLhep97iNfwYeMm58HV
mtCtJc3s7aHbSprve0P3lDTX2LtDb4U2iflqXRYPd4XuLIlFetxSEld3uNfJ
riPvBPdmv5NcRx683uwzDXcP/LF+Js4BD0/6mWHuwdADJX0vng49VRInj4Qe
LokP7EMlsfGoY+O9Rv0k3yUxZvGl0Isl8feU9zvV+3C/b5b03BuXxcQLoedL
4uS50LMlcYZ9piRmnndsutc4K9/ppX6vfKMvs88cv+xzcBd/hv4oae7Z+42S
uHo99FpJnL1hf57fDXmw+F7o3ZLm74PQ+97vs9CnJc0T9pOSeKLfqyXN6ceh
j0rijx7vlDSvH7rXYteRt8C92W+h68iD47d9pgvd420/5/98Dlj8MfRDSTxh
vy/pG/GTY1d77buSOPk69FVJnHxj/wqvfVnS3Pzlu7vR9/d7SawT/8L3/bnP
scxr+Dc497eSmPk19EtJzGN/Lomf3xxb5TXOyuz/E/rb779FzMhaZb1zbFNZ
DGXCpsua8b99VmY8F2vZsphpCPtfSaxg/y2Jk0RZsTVeYz/Yol+qrPmuhC2X
xQz92I9v4islzdYcv2d8+CC3VBYPxbCFsuYdmy+LFeLEYIA1zsq73LSsbwEc
J8s6HyxVyzoHLLUMu25ZHKwTdu2y5nu9smKwwRr3BXP1sI1lccKd4cMha83L
+o7wrOzH7MPiRmV9F4g3K4vpWlnn4PvIGj6ckNuqrDvYMOwGZd0Fdv2yOCBO
jPtijbMyv23Keub9Q+eFzg3tZzvH7+bg0EFlMbF52M3KYqhtWfVwwho+LG1R
Vh48bR12q7LY2DbsNmXN945hO5Q149gdfNedvR/z2z7s9mUxSY8ty5rv7crq
xexTRx7c05v9mHvqyIPbdmWdCY7pgQ9nHcs6B3zsHXavsjjAdiqLs33KisEG
a3uWxfBuYXcti5Pdy/JhnbVd/C4P8fMw79zfgWVxT3zn0Lfx1zuVdQ6+Bazh
wwG5B5TF0/5+J3CF3bcsTg7we+O7wBpnZY4O9d6876GhIZ4J7OCy2O0f6lcW
T91CXcti4sjQEWXx18W9YOMw5xUd714Wh12dB0OHOw9OeoZ6lDXjfUNHhcaX
9efXB8ua3z6h3mXxcLTzmO9erm/uOvLK7sf5aq4jj2/VHmW9g4LPxTlgb4Cf
ExaPsc/cHxc6tixuhoWOL4vnQaGBZfEx2HmtHOceW7qOvCbfH+fm5+eI0PCy
ODgpNKqsORsTOrksTk4MnVAWG6Odx7dmpOvbuo68jd2P823qOvL4cx2/H5zh
7zfzyPMz16d4P97BwtAlZXFyWujUstgYFxpbFiun2t/O74Y8WJwUOr2suZwS
muz7PTM0o6xZx073XS/yfsz1tNAZZXFJD35/Z6anuteuriNvR/dmv51dRx7s
TvCZ2rvHBD/nTJ8DnuaFzi+LFezcsr4dFzh2gNf4rsHGOaHZZbEyx/7eXju7
rNlZ7Ofp5vu7uKzvAfGzyrrvWT5HJ6/hd3XugrKYuSg0vywOsReWxckCxzp7
jbPC06Xem3d/e+g2v3PsmrLYvSF0fVlsXBZaWhYzV4aWl8XGEveCjWXOO8rx
K8piaKnzYOhy5zHLV4VWlDXj14VWlfX3IfhdkN8BYWNl6Nqy2FjtPBi72vWD
XEfe0e7H+WDvGufxLYYJGOjjc3EOGLvRzwlzN9mHjVtDt5TFzJ2hO8pi42bn
jfQ9kTfKce5xuOvIG+z7W+397w7dVRYHD4TuL+vnDHycYntf6N6y2HjQeTB2
j+vHue4+P89dPt8priOPP/PwrednDkw8WtafadtU432HTqjqHXwR+rwsTp4I
PV4WG4+5ZrLX8OHkSefB4rOhZ8qay+dDz5U146+GXilr1rEv+66/9H7M9Uuh
F8vikh5PlzXTL7jXbNeRd6Z7s99ZriMPdp/ymaa5Bz6/R7zmc8DTh6EPymIF
+35Z346PHFvgtffKYuPt0FtlsfKO/Xlee7Os2fnKz3OZ7+9/ZX0PiL9RFv+v
+xxzvYa/1LmflcXMp6FPyuIQ+3FZnHzm2CKvcVaYftdngq2vfQ7eebYSPxsr
4uG70LdlMfCN81Z4DR8evnce3Pwc+qks7v8L/VsWY784xvz+Fvq1rFn/J/R3
WQz8GfqjLH5+dx6s/hj6oSyW/nBstXvQ9xb3+KssTv5yr5U+C/VrfBb2g6uG
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
4sOquu/jfY6NvIa/rXNPrYqZcaGxVTGPPaUqfk51bEuvcVZmf1LodL//BaGL
/M6x86ti6MzQjKpm/HSflRmfFZpZFTNTQ1OqYgU7uSpOznBsR6+x327uN72q
+T43NKcqZmZ6P76JR1Q1WyW/Z/x9nXtOVTzMDp1d1bxjz6qKlXMc6+S1WX6X
V1b1LYDjaT4fLJ3nc8DHwtAlVXGAvbiq+V7kWFevcV8wd2Hogqo4mW//YK/N
q+o7Mt37MfvLQpdV9V0gfn5VTM/1OQ70Gn5P5y71HSwJXeq7wC6uioOljnX3
Gmdlflf4mR8NVWvBYuiRqmy5pnfzZOiJqpi4JnR1VQxd5fr+XsOHpWudB0+r
Q9dVxcYNoeurmu81oVurmnHsLb7rp7wf83tz6KaqmKTHqqrm+0b3Gu468ga7
N/sd7zry4HalzzTIPfDh7DafAz4eDD1QFQfY+6vi7CHHxnntvqoYvjt0V1Wc
3GN/tNfu9Lt82s8zxff3eFXcE7+jqt9pbvc5RnkNf7JzH6uKJ94N72Si7cNV
cfKYYxO8xlmZo2e8N+/7s9CnngXsJ1Wx+17o3ap4ej70XFVMvBJ6uSr+nnUv
2HjBebMdf6kqDp9zHgy96Dw4eS30alUz/nborar+XMLPEn5uML9vht6oiod3
nMd8v+76ea4jb477cb65riOPb9W9fgdn+1ycA/be93PC4gf2mfuPQx9Vxc3n
of9VxfGHzlvseyJvqePc40LXkTff98e5+fn5VejLqjj4PvRdVXP2U+jHqjj5
NvRNVWz84Dy+NV+7/irXkXe5+31RFZ/fOI8/E/L7AT/P+X7f5+dnrn/2fryD
dYPddWri5PfQb1Wx8Wvol6pY+c0+nPzhPFj8J/R3VXP5X+hf328m+qVrmnVs
qqa7blnTfsx1MmyiJi7p8VdVM91QUy/4oI68Ne7Nfsw+deTB7p8+083u8aef
M1vTOeCpedhmNbGCrdX07WisKQYfrPFdg41S2GJNrPBtw4dt1go1zc56NT0P
s879rV3T94B4vqb7ztV0Dr4HrOHDAbktamJmrbBNNXGIrdfECXFifBdY46zw
tH5Ne/PudwrbsaZ3jt2xJna3Cbt1TWy0CrthTcxsGnaTmtjYoKZesLFRTXkw
RLx1TQxRRx4MbVxTHrPcNmybmmZ8y7Dtavr7F/wumDYbW8Ta5jWxsVVNeTC2
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
94D1J3zej7uOXp5jPMC+rxUx82rolSIOsS8XcfKa1/p6jlrh6R3vzd3/EvrZ
d479qYjdb0PfFLHxfui9ImY+CX1cxMa7zgUbH9hvmNc/KmLoPfvB0If2o5c/
C31a1ONfheb43OeN32PNU8XGl6Evitj42n4w9rnjRzsOvxHOR32jHIcfbzFM
wMD1ros6YOw7fyfMfe8xbMwN/VjEzG+hX4vY+MF+t/qc8LvD65zjRMfhN9bn
97X3/yP0exEH/4b+Kfo5Ax9TbP8O/VXExn/2g7E/HX+34/729/zu+qY4Dj9+
38P7Drf0NGdJLvq6RdX5cgdrhl2jipMFwv6vio35w85XxQpzjOFkwSo/WFw0
7CJVfdky7GJVPV7Dlqpex+aqs16raj/6OoVtVHFJjoWrenrxqlzwQRx+sEdu
9qP3icMPdheqqgm2ycGYX0c0q+qApxXDrlDFCnb5qrdjpao1+GBuuSo2lg67
VBUry1SNYZu5Jat6Z+2q76HXOb/WVe8B60tU8d+qqg7eA+YYwwG+q1cxw58p
rFrFIXaVKk5YZ413gbmVq3hap2pv7n6nsO2r7hy7YxW724TduoqN9cKuW8XM
xmE3qmKjTVUu2Fi/yg+GWN+wiiHi8IOhDar86OVNw25S1eNbhm0bOig0Gl6r
2Ngi7OZVbGxV5Qdjm1XFwwZx+MEG+agP9ojDjzds2ao7gG3qog4Y27bqO2Fu
u6oxbOwQtl0VM7uE3bmKje2r/GCDc8IPhljnHGGIOPxgmvOjbrjpENq1ioM9
Q3uEDvS3jqripGNo9yo29rIfjO3m+Pkdhx8cko/6WjgOv06hMT5H3mv6ke+n
p/cJ7V3FBnsfUMXD/qH9qvg4wOPFfR/4wdAhoYN9f+eEzq7isrPX6NHDQof6
rI8Ida/q5cNDXat6t4v9Gq6VPZbwOmvVOci7tHN0q+Kmm3Ml19LJ33ak9+Nb
j/IYPk4JnVzFAZY/d4OzU70Gt8eGjqni44TQ8VUMnejxyp47ruqN4Zz2rXqD
TnMuevys0JlVb8DRrgM2eoTOqGLjbPvB/OmOb+M4/FZwLcSv7Tj86Ndzfe6w
dX7oPN/54NC1VX19nv1g44JQrypmLgn1rmKjp+Nh40L7tfX6xVUM9bIfDF1k
P3r50lCfqh7vF7qi6r3kPOgt2OgburyKjf72g7HLHL+94/Dbyvmob1vH4cdb
TJ/CwBauizp4n64MDaji4LrQkCoehvgsYGao12DjqtCgKn6uCV1dxcm1Hu/q
Ofx2dO7+3vt654KHkaEbqjgf6Dr47hGh4VXcjLIftQ9z/H6Ow29n1zLQ5zXc
fvwbkPx7Wvw7WvT1TVUMPxJatBl919Q9PRl6ooqPm0Pjqtgb65jOnmMMY+Pt
Bze3hm6p4uT20G1VfT01NKWqv7GTfd9PeT968c7QpCr2yDGxirE7nIuevct+
3Z2b/Y5yHH6wPcE1dXUOxjB2t+uAjQdDs6qYwD5Qxc1DXuvhuZlV7N0Xml7F
0v0en+K5e6v65ml/Ty+f3+NV7wHr91SxPs11nOQ5xj3t+1gVW4/6Ts61fbiK
pce8do7nqJWefcZ7c/efhj7xnWM/rurBd0PvVHHwfOi5Kj5eCb1cxeWzzgU/
L9ivr9dfquLnOfvBz4v2o49fC71a1d9vhd6s+u9s/Nkofw5KL84OvVHFwdv2
g4PXHT/Icfj1cz7qu9Jx+PFOzfAdXO66qAMm3/N3wuj7HsPGR6EPq5j5PPRZ
Fbcf2G+Yzwm/G7zOOQ51HH7X+Pyom5+lX4a+qOLg29A3VX32Q+j7Kk6+Dn1V
xcZ39uPn5RzHj3UcfqOcj/rGOG6O73uxpvjknZ7p76evf/R+3MGSsb5EU5z8
Evq5io2fQnOrWPnZYzj51X6w+Ffoz6q+/Cf0t893vsjXoqlex87b1Fkv1dR+
9PU8Yf+r4pkcf1T19L/OBR/E4TfVudmP3v/PfrD7m2uC7d895jvnb6oOeGqE
XbwpVrAtm3o7UlNr8MEc5wUbC4ddqClWeNsYwzZzCzbVO0s39T30OufXqqn3
gPUFmjrv/zVVB+8Bc4zhAN9mU8zUsKUpDrG5KU5YZ413gTlqhadlmtqbu98k
7MZN3Tl2o6bYbRN2nabYWD7sck0xs0rYlZtiY9mmcsHGCk35wRDrKzXFEHH4
wdCKTfnRy6uFXbWpHl8r7JpN/ZkEv0ZsYTbWiLnWTbGxdlN+MLZ6U/GwQRx+
sEE+6oM94vAbbyZgALapizpgbN2mvhPm1mtqDBsbht2gKWY2C7tpU2ys35Qf
bHBO+MEQ65wjDBGHH0xzftTN/luE3bwpDrYJu3VTP2fmmiXsVjG3ZVNsbNuU
H4y1bSoefojDj+8hH/URTxx+9O72YbcL/R9KIE9p
            "]]]}, {}, {}, {}}, {}},
       VertexColors->CompressedData["
1:eJztnWd4VVXz9gm9S5cqISQYlAgqGilmgCCEpnSUJihFqlSlhwcIkNA7AqFK
6L0TShLSCIH03hvpEgsIqPAmb94P75ef//96PDEnZPllXc51ODl777Xnnrnn
nlktvvp24PiyZcqU6VKvTJly+euuHwr+uyZ61ate9apXvepVr3rVq171qle9
6lWvetWrXvWqV73qVa961ate/+e12tfVutbseF3WfmbSbu+Q6/Lk4p0vt8y8
ru3aru3aru2vuL248aeo8Gub3cEdA8x9JLnioiUNs33FduPyOhOu+ol3kv+Z
hzM8pN97sxo8+eaO1LjT03PrOE+xPmEzbETtO2KTEXXyubmnTI6f6bS+s5dM
2fX9noPve8vvcxP31A7ykY8mdp/07Zy7UrFOPfH29JGQGyn1mh25K/tOnIr8
cuM92bJ+VrvdmUFSrdv85j0vhkizcucjXC3DxP1Ih/mb7FLlkMmNCnU8UmVj
2Km9ddelypCYfnn9uufK9kqZrWeNzpX9wzo/9m2RYzD7oLPeUXPW5kiOVdqi
c0dyxMRz1E2npdni4dFrl8Tk25+2rVX+SY6s37Zz4mGvbPye6QmHXix4LVPs
3u1ysEq7TJkSPM1x5MwM6X3FYpb7iRAp08l6mveJMKkzIfrFtjcj8D4byn50
ztkXAefuSLu9XW1fJuZ/7tnu/qvreaO9kY2ZS/eBnmI2+FhUOWcvaVnfu8Gy
HG/5YvqkD8xd7sqx+MaRb8Xck0t/vf12v4YP5OS6c3VHXwuWH32H2x7bEyrl
k+f+taxeuHS9sqN9j85xMmzX1mXTqyWI15EyDQOCE/D5Vs/Mq+XdJk1+Wbj7
Rc6mNNlzsOW1RbZp0qKShf/F36KlpePoHucSY+X4LtMsm/g4GVh94zdlfw6R
1XWs5nd+FiZjzja5bPVdhNQ6k/16TmCUOC61PTrwXow03dou5ElKrDQZt3nT
BYt4qTA97v6gzARpkvds7Ip+iZL3QXmf8SmhkrqiyqEvKkfI9PZLr3RxjJRp
p9rWiW4RVXhfzWPEp3XHzff6xUp0uVNuG7dHiXOfmUOitsRIGe/3v8k4FysV
nnffa74oTKpvObZswKkIKWs3LTm1TZTEjr/905w3A+X1Xq5BPjeC5M39jmeT
WoeIn3VM7M4eflJwe9ru8JfajYb+3CPvgQSZxTxbctBTmrSNM6/4h1fh/3/u
o/zcl3g7lGvh7iGf1HAZ+9T7jtwIHHlkUyDbi3ofavvf22v8VXfkSVMPGTzM
5t6vVe/Il5feS9rx9A7a+1mNyF4zx0eik87cbdzrrvzsvPPxV+b3Sh1+vT25
XY07CW4yI3v63qzN7uKyJH7wj3Yeyvi+qM3ijGXR12VxhUneB2u7yqDAXIt1
vVzx82Zpb4bZON8Sy14RfW/Nvy3ScW7ahTZu8nknp9mh5QNl0Ci3e9W3B4nJ
Hxmh28qGiO3d1NAHA9Pk+PgpizddTJPZj5I2p4xNkwVJDxw25eNHlz7Dzq6b
lyvmdocjgz7KMZi9yo+ep3OH5cgOl8ozFszOkafJa57MG5gt6b5+bZc/zpHt
nfdub14rV+qsNOlzOjYbvyfae9/RqS4Zstds1erdPhkyvJbfHx/VzxCnDpU7
Dv8xSJZPXl43aEKIBF6dYWoeHWqwuCtgdXB8ousNGVTgOD+5Kd+YTZ23IOgm
xhVHWhzPm+gZIBtmenkN+DZIoofYPesVE4w4sjnNfOut1pny65zTlha9MyXP
I3zq+NUZGA/Q/WkX5j+86lu5kn1nwaGh+XFBk4khtd2q5kjAsv7xPnGJYla2
5oHeh5Okw09ba4YHJeE+ofeacCH38U8bfl/gKt+65jvy+65SAH8rW9yQ6/tv
jf9U3MT+g0qVH4a7Se+vL64/PsNdGRfoe+i5GOq5p36aOeavtu6S/zZm5uS5
y+C1v1ofuOiBv9PY8gVt/3u7qt8ubvwpKvyieKC4ngvh4PpRBxdM8fWXsVNb
+HZdFSDdbF+Wf90ySNrcuPfJol4J0r/Tnx98YZ8oX/06c9pRv0SZ9cH5t63s
s2R3as8/nZyz5Nizt55FXshUxi/yq2RX/f4//Jb/Vm/5Q5l4IWv2pbsP5Z2h
oWMaD3ko4+YP+3jMrvsyve5P2+Z3CJTDbWybZu8PktqDzBxHP7krB6592tKq
g78U3MbeKx6Iw/0yr48780DsPaJOjQ8NlC7uXk6NbYLlQdLw3LEPQsSz1Xuz
/xMcJh2qLYxO+jRCuqxc32ywTYo4O1dfvzkgRU65zj9uezVFXvqb2px1y5Be
Ex7XvJKUIfFl3k/o2iZDXLteHHrxQpbkTTGv4hGUJeej/7ydlZSJOKV6fy74
m9UbcSFdLEwmT46KT5eMG97vDLBLF6+1eU9MHUOk82edJ1ZzCJMctw4te5eJ
MDo/TDhIOEJ2wjuyUxxI30/xPOEp2el66f2lz6vajQ1Hisuu6reLG39KC36p
2ul9XHb0jzI/1sv3cwXv0btR4ps1NKDXmmhJnnWjbJBDttg65mdOB7MlbHT3
mHd3ZRV5Hkd24iEpr6E8burFphkHhmXIvvx/bzc/Q+7bbBjwRmC6mK2rumfq
y3TZFlrlGzPzDNkx1Db5DYd0/P6mlUZbfR+eIou693U0H54q1R7Nqp3wbv5a
/Yu4LJM4mTLeo+3jkHg5FlXulNv+BLTPqPp2/cE+mfJz1e6f+T3MlKoT+rrv
qpMpiT0/yPn9fpbsOrN5Q1x2lnx4b/yhX59mYhxC+eCe9w9etF7qLl8dCG//
6FMPKbercpO9pup+mOyq+Qvx55QnPh73Isj690A5E7DncevDwfKafb/wo/VD
JfV667RLUwNln+m5uI+rBsucLL+J8+fx5yl/p7/b1s2m49xLvnKrn/2Tlu5+
cjw05z9DQ/0xPyU73QdVvCb7ltM/LLrw8W1ZZ79vZlJjN8nt6eR7dqebxjWN
X68UfpGd3rt1BXncpBh5/kvZnEOfxUnyh43dRnSLR39bXLhG9l5RZpOsH+fj
V25Qk5/qZ0p6UnmXQcMzZFyF2zXedUmWW0/8N5f5JEX6r15qezQ/v7o9/tMd
XqHxMq7iWykJPROlh8Xcsrt2Jkra1UEdP8+Ok8YFCdm5BKnhuLDN4vaJiPsV
Xwu5de0/QXJ7yeoaDbqEyLG6gd0jz4einX7POUf/kYl706RRwd99liZmBXxk
/v9TferRi3lnhjtGyJBva0zdtj9KTFb1PzzhUbRs/z6s3MMOAVJpV8C1mBZB
sq5apW7n1wajf+6W0/fAr928pHpad9eqV7zFyqaC27x2vlgHHPPFpIFVy3pK
6/lz15uIl8ypdO59h6VsJ97yxbVvfOd1DhLrI5tN9v8SLCPvrl/XZVyo/PhR
z2bN5gRL05/HWb//WagUlAuzvcK4nviV68Kl+fg07+uuY/uPDhOvJj/0fBEZ
jnW3EWOfj7b9MFRqZZk5nO8RLqeej5zm5RkhYfMyW707z1++2ZS7SFoHyOQb
c7Y0/CUQ7wPFh6r5oKqd4grVOsWratf49WrjF9kpbiT/QHmNoXhI+vy8yz2/
veqSIztmDip33z1HHC5679+yI1uerrL6eNf0VMn3lisup6YWvtcnOD869Pn0
SR+MjJLzDfaVHTMyRlJ+//CvKPtYGTnkyajaLyKkTdS52qtfi5YOLXsvXD4o
Bv0e+WHKCyhOIN6Sfg/hI/GoqnUoivNV/Sp9nn4PxVeEs4Sb9HmyU75T1PU4
bdf4pfGr6OykZ9h7Kead9utiZesfzZzKjs/P0z6uGnGoc4K0sb9l9fn1bNlZ
a3avsPBsiZcGB219mYekz1O9iXhOyr8I1yj/mtXfo29MXpik/tnPsnvTSOmY
OuGqyaYo5KOovob6E8DT3Wnngzr4J8t3iXtqH56YIpZhNs1eG5WCeQTxhxk/
/r7uTIW7csXyQtdWze/J58km4wd1ua/9sLa/UnbKNylf1vhVOvGL/B7VESL6
DCr/UZN06TH8rW97Dk6XNY73fS49eIj4RXpFqmcNcJA7u0Pz8WtwUkBeXrZ8
1c7eoW9CFuIg1a0+LPvz9SXpkRJ9Mj+Ryo2WEyM+fvNmk1gZd+Z7+xsR9+T7
GIeHHac9kBunvzzbZGUg8mCU71B+NKVaQB8vt1Ax/aGm896kcOm5ISHmt7GR
yAcSnhKufX153JAVC0Nlp3vDTZZbw6XgY6PqRqLuhfIOY9uH2q7t/7+dcGrR
pUMf9ewTJu/aPb/otChCklp+1dv8ZaTGr1KKX2QnnofqR4bS56vykB/bfjQh
qnWSbAo7tXdLVpKkr6rtcahmMtaJiO9S1ZO/fu3IiU7VgyXQao5F2ZgQsT06
8EKl/lzHod8T+3Wm7euh3pL5tt37Ddb5yrZl09tO6uuHOKuKd51M+q2oke4n
a3tnlW8/6H5hn5dvAN4HY9uHJd1O+0q1Lmls11XUdoq76P3S+KXx65/kZaTr
M1RdjPoCKB+h+rvqfaA6EeVTlPeRvkKVP6F+CsoHKa/UfOO/Y6c4geIf2s+q
uPaq6hV1/Uvj1z/BL9JxEY9nKP3hJ9U7re01MV0uW/lN3fhDunQs0DlUS5f6
A5cMzN0XLi67PU3PekTKhk9HPWvzZjTGt6rvNeVf1F9Gv0cVv1SfS3H1C2v7
39spDqE6JtVVqU+BnjvtN4rHDHVdRY2bNAdJ45fGr/9N/k46c9X8y1A6RsvW
Z8u49M6SHqOmPBo0KUv2N/ziPR+HTJzjRPhLejnK4+aM6dCtYsUwOTqj/LF6
bSNka5TplrVnI+XuidnVfWdFSjnboVcWLImWWbdtB+y/EoM8HvkBrZd+te2G
ikMIjwjvVHlj+jzVF+jvGmo/Pw+s8Nhqi5fkR6MVa9T3kdg+jQ/N3eOr8auE
4RftK/K3qnV8+jzlF61eWGb5b84U5+UTu205nykmDguer041HH6p2lV1+IQ7
hHf0+ecXmrc2i4+RoHz4234rTpqE1N0+zyUe8cvY9lVps5NfpferuPLcop4T
QtdL/LNqv7nq3Bj6nTM73h26IzRQslMOPJq+JFgK0rCRP4Vo/Cph+EX7inh1
8p+0/6nOQvMASQ9vbH3QZKc5UcSLnixn+lPW3CQpc6zfnti2ybK9xfq5M/sk
Y35KfCb5Dap3FPVcCPq7qv1WhvLz5Icp76D5JKpzRYjfIzvdB9X5tKp94tT/
QtelqlOa07LNW8nmD+T3rHzAWBkov363ImTZoyDkz586Tb/pYhkm00a+PB0w
JEJcl7hPj4yIxH4Q0s3Se2Rlca+X5dJkqVRwA81SZH4nj0ldTVM0fhkYv1T3
iaqfoedO+m3ah7T/aX8O+PGPDhUyksRyws2GfjuSpWnlu2VdXJLFbYfH8gkt
c6Rb8zZf20qOPDK53naiOesJjW0eo6HyO+pTo3400oHQvHfiRalvmvqjqb+b
5oF8NbGqc8TyBPEeMj6h/u5EmTE87+CZlES8LvI/1CdO+41+J/UnEq9LujWa
M9mzoD+kWrTMuVT/j3tlY+Wjr/IRqUEc/l16Xqr3oUONAQ7SIkTy1vQZEl0r
TOYFDds4wSkc49Lc17bGPDkXKG8+dcm8MCxYPNpXb17bJwTjT9K7kp3uG8Wx
tA+Jt6F+SeoDpblzGr8Mi18UZ1J8S3Ed6f1IL03vO+mu6X25ePZIsxf20dK3
eT7izoyVmS9a1TNbECcT7ep7nbieKvduvb3sZes0aXAj4227jFSsQ6nOq1fN
j073+O7weKcUqTHz5JqYeqmF/vpxitHxmYSz9J7GNz0d9kaDLPk5bH1y0w+y
ZIf1qimXhmVinEB4qtpPZ6jnRX6G7gP9fkP1ZdB9pvtA85lVzyei+0m/87Ph
V096NM2WXQvizNp1zJY7e/b3q2mThfVlmvNJeqdJa6YsahXwUCJWOs18UTNd
Yh/1r5ex6aGEVf6r782KadJx8z17u2/TxKsgTrFIw35P+j0mT48MdpyXKb/I
M9fvd2bK4q21X196PwP3sypOOd/wLf+nW450veTumBGTI1UPt12x53R2qcMv
qgMaisem/It4A+r3IZyiOJnmwVLfFn2e4iL6uxR/Er6o+iuaZ0XzrwiXaQ6G
ofynqp3wiPwY2el7VM9z0XZtN2a7xq/C61qW6mzb6Msg+WPzukojGoVIQbq8
dk2owfqGVOuSxBMSD0A6W+Irbo9LcW/QPll2dBjVoG5csvgd+OTy7JRkGevx
zdDLmxLl/DvTD5mMSRKnwQ1HVN6WhDwk8S3EZxJ/pYoXPU/vHjj64wz5re6D
6VZfZojdp62m17+WjnVk4kOIh6dzTAz13lHcS/EJzbml5044Trwc8WCkP6G4
heqAtK/oXDMnn08urTZLlZz8MG/avlS5tvqR58npqRj/034g/pbmVFNfIeWt
hjoXT9sNe25FqcOvggNqt/vJlm8vX3v3sb/cbjUl1HZkyZlLQDhLeQflX8Qr
qs6tpX4T8oe0D2nfUh5BvDrVr6k+TnUc1d9J/Bj1NVO+Tzrkop7PQL+HdBGq
ehLV8zHpPqjO+6L4iuzE21OfONWJiM83FA9PeTfx7TS3jeIBwnc6D4h4Ejrv
j/hPih80fhWv/pB4RfKrqucW0ftO30M4Tu8v6RjpvSY+3FDxGJ1LQnkZ6dbI
j6n2ZRPOUj5L+4T2g7GdX6ntho0TSE9FcRr1cRDPQDpJ4isoXqU5IfTeUVxB
/op0Kf9Xh/ZZkvS6vbjZRzWS5XZowO6qVskav/4l/KLnq6ofU51rp6oTpr4n
4jOJnyyu+hHVuei9pjnzlLeq6jHofTc2v6rtxmmnvJvwjvJcQ+Es+RPK0w01
92OEeW6P5kPuy/E3f91wq06g2K862GXf/KBSh1+qfdyqzxf7rW6u6rP+aYKc
c7J+b0Nwoqy1zK1xq34S9tWSX6X9SfuH9jn9TtLr0rxc4hOI9yC7Kl+nOvee
+Aqq16jWxSj/Ih5Jtf/U2Pyqtmv7P7GTvyJ81POjCq+L+GpVv0H3mfTnVL8m
vFDVQxLvRPpG+rt0jrCqno0+T7wi8eSGmk9FOEt1OuIPVXXslA/S8zJUvKrt
2m7MdlX+R5U/L278KSr8Wjxvu2nLyQ/ENTz+yPFTgdKoqcWZBw2CletWVD+i
ej3xuqo4RZ9X7UOkfIrqv+T/Mya5mWZ6phXW4Zo+lGdhTU0b3kzD/KWxZ6Xv
/nRPkhmLcn+wmJss3V2rtpbVyfg7qX5EfSWEX1QXJj0exSF0f8hO+rqi5n+0
XduN2U71CKq/6/nzhdeleh8Ip2heCp33ZKjnTnUu0kur6igIF2j+A80roDyO
5k6ozvkhXTfVoeh6Sff1hlPZxQc/TBTn21UcKldNkmNPMuf590zCfJD4T+oP
pfxLz43X9tJgpzyL+kQa2Zi5dB/oKWaDj0WVc/aSlvW9GyzLKX3nLztW2trv
2i+eUq9q7RmVv/AW+3Z5sQvz42CqN5GOgvICiqsN9dypnkv4oqr3pnlBpD8h
HKF8B/uDFP026Zq6rFzfbHA+Tjo7V1+/OSBFTrnOP257NUWZbyTcob4n6jMq
KLuVs34oTxN6fzd1xUOxvzHsVN+GDzH+LCl9HNqu7f/ErtqnSbrr0oZfxOPR
HAniA8l/Guq8AHpelO/Q3CTKL2j+BvlV4qvpeyhPIT2wofIO+n7VvmnqhyXe
lfJcmptBuk3K943N/2i7tv8TO/k3qter9j8WN/4UFX6RDpP8BvVNGAqn6HuI
ZyN/SPkU8WCUb9L10txRylOoP4v2p6HeC+LPqX9TtV5mezc19MHANDk+fsri
TRfTZPajpM0pY9OUeVrK1+j3G5v/0XZt/yd28jOki3604ffj28beEes7NZ7+
ucxTGuasnLbmaOnTHxb1HANVu2r/L+EU6SIoT6T7QPUm6lOjOYekfyjq+0/z
SUjHrjr/h54L5Wuq+EhzUYhv0XoPbS+JdlX80vlX4XUV1/x5OseEziUhP0k4
RThIeET5O+VlpA+heVPGpk8g/lNVn095k6qug3CTni/NB6PrIlzT5ztruzHY
CY9oHo4+f/nfwS/y/zT3jHCK+pLo+RJeEE7RnFjqVyJ9e0nRG1Be9rfnSVln
S/dbfY71GZwtduuqvPv6kCx8XjRvlvSQ9P2kw6E4gXRc9Ny1vlHb/0276txy
quNcuHTL7psUL3mx6+SA12b7iNMXbVfOqnxX49f/gF90/ynPpfiZ/Bj1B6nW
iSieoboV6QDJTrhpbO8L2amPj/RONK+D8i96jtSPQPkX9R1QXYxwiuYb6Pke
2v5v4hTFt6r9Mrr+9d/hF/kHittV6yN0/gXtB4qfiV+iORKktyRcflX9HsV7
hFPEB9L8bdJ/Uh2Tzlsh/pn8APkNzR9quzHEjap23b/89zwSve+kA6S4+qW/
qc1Zt3y8mvC45pWkDIkv835C1zYZ2C+mWpek/mjqSyJ9u9Zp/318QvmXah80
2QkHqY5G88Bp/2ic0vZXya7xq/C6aA4k5UF0Pg7F23SOJJ0XQPkUzcEj/KI+
a6qPGNv+LC47PRfS/xN+0XlJqvoQ1TmNlJcZ233Wdm3X+PXP8Yv8PPX10Hz4
FpUs/C/+Fi0tC/xaYqwc32WaZRMfx+faKPJvxOPRHAzSjVAdxNj2Z3HxGPS8
iF9tY3/L6vPr2bKz1uxeYeHZEi8NDtr6ZqEenvrKqR5KfdbUZ0e6U2O7/9qu
7Rq//jl+UV2D4mHSM5Dez1B1Ivp+6pt4Vesd9PupH4ruj+p5JXTOL+kzCY9o
v6nW16hvneqeui9M218lu8avwusi3fIn1Tut7TUxXS5b+U3d+EO6dCzIy6ql
6/jWSPMmei6Uh6qeS0L+n/ScpNuhfIr2IcVRf6vDrxgmR2eUP1avbYRsjTLd
svZsJOK7sT1fbdf2/41dn/9VeF1UzyrpOEV5SknJv1TPVScelT5vqL4n1Xn4
xCtSnUt13jLpFWmOtz5fTNtLol3P3yi8roLx6pEDY+WYdx9rR6t4GVygK6ya
UOL7OilfKC4eSVX/T7hA+hPSkRb1dZH///ryuCErFobKTveGmyy3hsvz7nvN
R9WNRN6P6mj0eeIVKb+j81KL+nwfbdd2jV9Fh1/7/OV5K/sAuefgd3u7XVDh
nL4LJf/9JR049b2qnmdKduL36PuJ1yK7seULqvU44qVVdYyq57/QuaJ0noLW
qRqWx1CN36h+Tftfte/P2O6z5g//O/wq6vlRxWUn3cLdE7Or+86KlHK2Q68s
WBIts27bDth/JQbrRKr8Hs3lID62qPm94rKT36Dz1Gj+BvW5q/KNVX70PJ07
LD8vc6k8Y8HsHHmavObJvIHZiKd07gzpM8le0vlqeo9oziTNyaF4gPodiO+l
uW30efo9Jf39Uo23ixt/igq/DJV3GJudeELVec6kt6d+ZzzHE/DL2Ob/G8pO
fCadX0P1LMq/qL+D+ujp+wnXqN+N5uFT3FJS/CT9TtKdEu9Kc0Spn5R4Zprn
Q/MHqA+I8LGkPBdD5R3FjT86/yravID8Leki6H2kOJD4DWPzVxRvkx+jz5M/
V+UPDXWeJuk6KO+juhvNnabzdGifEI9N95n4AeoXoPnGbd1sOs695Cu3+tk/
aenuJ8dDc/4zNNQf+XbVPIvwgs5rSLs6qOPn2XHSuMBwLkFqOC5ss7h9Is5/
pv1D9U3CU9q3FK8aG95p/Hq18Yt4G+J5qA5C5zvTnFtj2+eqOE75KflDyjdp
brwq70d20m/Q3GA6l0dVt6/6e2jeJs1hI1yj/J3ylC4r1zcbbJMizs7V128O
SJFTrvOP215NwftD/emUHxGPR/hF/CFdF8UDNM+Z7gPNafFam/fE1DFEOn/W
eWI1hzDJccvP2MpE4P4nfKe4l+p0huKTNX692vhF74tpzToHFw0Ils8rTH53
nmWobPply+R9e8OkQsGLuShMqm85tmzAqQgpazctObVNFPqTks77Ec5Snzjx
peTfDJVnqdqp74zqbsRnGkrPT9+P8QDEV+Qnya8SLtwe/+kOr9B8HKj4VkpC
z0TpYTG37K6didjvQOecUh2Z4pnXrx050al6sARazbEoGxMitkcHXqjUPwzz
MuIDaa4p5V+ULxO+0/OqVv2LuCyTOJky3qPt45B4ORaVD/j7E7DfkHCQnqNq
3Kvxq2ThF/Fv9L6TX6X9RryKsd2H4spb6fMUD7jt8Fg+oWWOdGve5mtbyZFH
JtfbTjTnc5xVz30m+6Cz3lFz1uZIjlXaonNH8vHMc9RNp6XZ6MfIT9JcEdXz
N8nfEn4ZSkdH9V/kA4HvVeUJ6bpU40bCzdvjUtwbtE+WHR1GNagblyx+Bz65
PDslGedC036gPgvV/Ub9s4TL5GdUdQgav4oXvyjeoLyJ+BaKi6huRXlTSeH9
jC1fo/nMlI+QH6B4mPIm0nXQ36X50oRfNM+T6miq+hDipQmn6P4bm76Rfqeq
Tp7wl/S6hIPkH4hvpHoc8QmUp9N+fuo0/aaLZZhMG/nydMCQCHFd4j49MiIS
6xHEQ6r2exY3/hg7fqmeK0r8Oe0f8ie0H/S8oH+HjyVcIJyiuJd4J4pXqV4Z
7b3v6FSXDNlrtmr1bp8MGV7L74+P6mdgfzTVp0hnSPM/VfGa6oN6TqNh+RnV
fIdwIfe1rTFPzgXKm09dMi8MCxaP9tWb1/YJQZyifFBVf0J/t5GNmUv3gZ5i
NjgfkZ29pGV97wbLckpf/7Kh8IvwgnhvOpeZ/IPuJy1eO8UJxKeR36bz4EiP
rcyDQX2f8iDCX8JH4gNV8Yv4SdIfGtt+MDY71QFJt0n7iuYPEG9DemPyYxf8
zeqNuJAuFiaTJ0fFp0vGDe93BtilI65R3L6+QN/i6y9jp7bw7boqQLrZviz/
uiWfE1Tc+GMs+EXvF/V7ku6L5r5SvPSq9tEbm514Hoo3VPMs4oFV8w6Kkymv
ofyL6nSkw6d8jeosqvp/Haf9d3aqg1MdQfUcJdU5b4SbxLfT+0X5XeiYxis3
+MTK0nZ5sQv3xMvagnhvekKpwy/Vvl3S2Z7u8d3h8U4pUmPmyTUx9f5fXfxx
SuE8Kvto6ds830PNjJWZL1rVM1sQp+NMI7WT3lL1nB2aD68654TsFM+Qbofy
LOIbiT+kOE31/hC/pKpnM7b9Y2z8Id030tMaqg6uykNSvwDFS0+6Rzg0H54s
n7W02nblZbIc/KncxmiTlFKHX6Q7ojiW+gqpzq6a52r7v2On5078hqoui+bM
G+p8ZOJ5qF+YdPV0Hquqjp14ReJXKR+kczlJh1B7kJnj6Cd35cC1T1tadfCX
gtvVe8UDzAteVR6D9gPhGj1HQ+lh6PfQ86L6b8DNVX3WP02Qc07W720ITpS1
lrk1btVPkr2WVRwvJqYW5nN90+SnykcqnMnfN6UNvzwrJwV5H4qRh/nbutmq
OMlHl7cnz4nH+Jn8AOlmjW2fv6p2ek+JjyJ+zFB9WEWdf1GcTPkX5Ud0H1Tj
cNJ7E44Tb0l5GcWNNE+J+HnKO4xNx/iq2onvIv+p2gdX2vBr43XnxWkzM6TX
7uMLx23JkAFtn7Z/Mz1dNqeZb73VOlN+nXPa0qJ3puR5hE8dvzoD69pUPzW2
/VPS7aSTIb9N/pnqL6o6BMovaN476S4MxR/S/iQ8Jd2Xqj+nfh/CI9U+aJrH
SDwJzZeg/JTwjvJlzCMgb1WtN72qdoqLqO5P+4qee2nDL+KLiP+n/otXlZco
arvqHCeae0B9naRfov4XmvtH/pbmLxEfYih9uGo/mmvXi0MvXsiSvCnmVTyC
suR89J+3s5IykZ8h/od+D/F19FxU81mq09H1UpxDfD59D+ltqA5I8QPVwamv
WcfDhXbKl+l5lTb8anX8SsXLdyKky48Jt2pGRkmzIf1qzW0Rg3339F4Qf0V+
RtU/lBQ74RHpVUh/S36V7NRPR/EGxec0v11Vh0D1taK+z8TjUZ8pzccz1O+k
OFB17iLlZaTTVtUn0P0kXKb8i/I46mugPJ3iLvp+0kXQPiQcJ/9G+RHdZ3rf
VecoUt66eN5205aTH4hrePyR46cCpVFTizMPGjAPX9z4U1T49TywwmOrLV5S
wW1exRr1fSS2T+NDc/f4YpxMz4WeI/lPmv9c0udg0HVR/Z14IdIjUf1INU4g
XXGrF5ZZ/pszxXn5xG5bzmeKicOC56tTM5Tn5+B9MNB9pv1J9434Q0PhF/GN
lF9QXqbK39LzovzIUPkvzYVQ5cFoHiPV9Wg+IemfqU6EcxQhPqS/q/r91E9E
cxtI730t/+Mv8+/fpI6dGjWdFCWpBf/+ZunLv6j/i+Ix2p/kD2kuCtUxS3od
meIoiidpHjjlv4a6P1QHUc0LCL+Kev4J3WfCI9Jv0BwnQ+EX3Qe6/6o6fNKB
kB6Y+sSLiw8hPCU+h/JBip8pT6TPU3xIcxgoH0Q9D+AXxTNk1/rDv8cveh8p
/3087kWQ9e+BciZgz+PWh4PlNft+4Ufrh+IcbMLBkl7npfeR+qoozqT7ppqf
0ucpriNdN/UjE/9Debeh7jP5Maq/UP8X8XtFvU9ozj/F+aq8Il0v4TXlU8b2
fhWXnfYb6ZEobifenvRXlLcWhCeRA2PlmHcfa0ereBlcUJ+sWvr0G7Mdvr+2
eoObfF+r06CM9u7ydMbdmUdimU8gfKG4jvgTqvsQrpWUehnhBeE+1a1on6ue
20J4SvPYyU/S/CXS7xU1f0jfT3Vtul6Ku4pr/5C/onnFqjqQdVX3TC1n/VCe
JvT+buqKh2J/Y9ipvg0flvjzo0ubXc/vLbwuqmfR/SH/SXl33gflfcanhErq
iiqHvqgcUaijc4yU9MQfAs33hsrIU3V3pFwPF9MsmzLHOkZinkK6XOsTNsNG
1L4jNhlRJ5+be8rk+JlO6zt7YV5ZXHbyt8RLUP3CzzomdmcPPymQzbbd4S+1
Gw39uUfeA/y7v6ZViOxpfU8cLN7o/+G5+5KPMvffaByIcwhJD099TMSLbrM7
uGOAuY8kV1y0pGG2r9huXF5nwlU/g93PSWmjxwzdEChfVz+Z8rRdsOzeMMXW
a1+IWFnc62W5NFkqFWxgsxSZ38ljUlfTFJwbT3Xw4tongwoCgtfuy/3v8+pW
igwojOcHBsm1hAOWgYMSpW70rHe8LJLkyqhvToeMScK5VfQcSW9DfUYUd6le
F+UvNIe2pLzXxWVXnV9U3PhTVPil7dqu7dqu7a+2vbjxR6961ate9apXvepV
r3rVq171qle96lWvetWrXvWqV73qVa96LUnr/wHdna5b
        "]],
      AspectRatio->1,
      DisplayFunction:>Identity,
      Frame->True,
      PlotRange->{{1., 72.}, {1., 72.}},
      PlotRangeClipping->True,
      PlotRangePadding->{
        Scaled[0.02], 
        Scaled[0.02]}], {576., -189.}, 
     ImageScaled[{0.5, 0.5}], {360., 360.}]}, {}},
  ContentSelectable->True,
  DisplayFunction->Identity,
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{3.4070870431716757`*^9}],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[GraphicsComplexBox[CompressedData["
1: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
mOeneoNxcNXRTjJg9uOwXSX+Q5/xGmxrYO3/gf/Iftr/A/9Rbga3gFvBbeB2
cAe4E9wFjoG7wXFwDzgBToJT4DS4F5wBZ8F94Bw4Dy6Ai+ASuAyugKtgU88e
WPt/4D+qD0AHa/8P/Ef1ydDB2v8D/1G9wbqaqjdYd0r1BusyqN6gbrHqDer6
qd6g7o3qDfLCVW+QN6V6g3nFqjeYd6M6+mUMmP3G7McR/9HjG/hMrcFW+3/g
P9ouG1S/n/b/CDeDW8Ct4DZwO7gD3AnuAsfA3eA4uAecACfBKXAa3AvOgLPg
PnAOnAcXwEVwCVwGV8BVsKlnD6z9P6KDtf9HdLD2/4gO1v4f0cHa/yM6mOuI
c11frrPJde+4DhXXheE6DaybzjrGrCvKOn+su8U6OKxLwTxx5m0yj4p5DZxn
zHl/g9APbMAcp2K/8SD4iAEzzqHv/J9tlznh6+GP7x4bYv5f+JL7X3wkZr44
8B+Hv/FJi/LSz4M3BiuftkvpnWHPDFHeevlKQ++qDTWjw1eXnu/774KX48ce
DV5j8fu6zXWbdZ878+oW5Rc+OqBw8dzByr8uvn/ZFyscx1rWPG7g8iHKC8IT
DDXrvJc55+VnYzh/HOeP4/xxnD+O88f1/JZ7cL4enK8H5+vB+XpwvgTOl8D5
EjhfAudL4HxJc9nMpkd/vK5F+ej/vLmsdeFg5Z22u31F32pDlKd+csp6W9zm
OHbQDmMP2kHOlzLrTrjl4i+WtCifMOTVp1dsOljZbocoH/pRV7LpesdfPz9n
h+aFcr40/r9p/H/T+P+m8f9N4//ba+ZOuvaqjf7VonzK1rustNoZg5UfPbBr
uy8XDlFe7Yz37nutwx0fHv6pcMa88ck2K+55ebDyEeEbQ80dL/1+9xtul+dR
q1l2+Bf3rdjGcdOoY5sHmhz//W/BK6Mc3m6DHdutPD+GmB1aj9++dbUy9Kq5
/Tb/1TtY+asv/dc+Q5QnBK8bhprZiyZeft8qFT1+6bHfb/DaExWcz+D+Nri/
De5vo/f3M9+Unvnm3mr9+fzn2ZBbzjwu/m6L8nfX9N330VODlV+88M1vr7lz
iHKw+06Xy+fdb17oneP/DFaOnXyF/zNEefGyFUcuWzHUTFv4+a7HXi3PT/n9
/ealrZ/6z9b6+/rNdj9dve1PVw81xWuPKVy7cn/9/v7z9OQVo5f8+PvByju8
/eujuy6Vv2/ALH17vP8zWPmrwdv6P07vnHGW/zPU/OPye4//evgAzj/JfDJp
xyMXXT9YecuRw/23hpr/3rHnf++4Afv7z+vL37rq8yd2HKz8nyMP3WPKs/L/
n2zefMN//WGw8uTg9bD8PZPNRRcGr8HK/eFLPt8pZsmuF1yz6wVDzPtbLX1v
q6Xy/JffP8UcdskHh17ywVCzX9u/9207YUq97j8vtrtxxF92X314xDHjfwvv
XTJ1I+Unyqfd9PoLw5SvXf+8w4dv32rKYx7d9OiS+L3Epd3m4zl7H/bChcPN
FlccNGa3LWKqr/bBjvtUVhunfPv4Tf65we2Ofzz5Hz+c/I9unC9j0uFrmPIF
fw1e8vdmzTfB4+4fw8wXnwevjB7/3YxLv51xqeOfrprn/zgefemBx4zbL6ts
tyWzyTaTDl3nvWGm67bzn91moAi9bI5ZetnED9dqVbbb4cpH9m/77NBvNzK7
Xb25/1PS4x9Y75faer+UcL6KaRp5xJcPrO78Ym721Z3OnjNM+Zw5wRvDlQM1
++pGZugfDnhuysFlPd9zU/x3virj/FWz/LnxO/48Ypjy0N3mrrTv5XI+Y9bc
d/PFAxdFun//vrzuk7evvP8wc+9FR5+/6ZdGzzf3gSfGHXK3qT+/fz/evSS4
IIaZHU9NPtK6Y7/q464+Z8HMcf31+/v345Wn9Nzz4RUbKfvgvzPMrBFeaNjf
vx/fv2Sq7wwbKT+437zR8RXDlC8N5GPd/Rluthtez5f9r/vxvsA4hyuHPjpL
Pp/JZlj42kh5//Alv29ydD8NB8vvn2K2v/fcI9e9TvafEvmIi78+OPLkWcdv
NyLibrPVTav6PyOVw/v0304/6cTg1WYWXb/ead9dLveLtPvi0f0xUvn6Ix96
re/6EWbj8c1TX7u5W/cPrurMOeOVT3rt3Gv/cFJc+cwHfmy96IwJOH/WrLLf
HP+nTXmv0OhGKL88ud3/GWmWrnjTf2JmcHyf2eL7/FVdrSNN4Kqdj2VV/9cW
R/g/jn8I7v+JWRyfN2t8PvquM5ZvHHHBfH5i8e3T7xqhvPvjF9xyzfUjzeNd
F+5xy2N5HF80n3y9bm5Bb5vyPlctOrG61wjl7/7fg6/Er91Y+dDV28YNf3uk
qcYXrHbJXgU93ynnHLVkq28KOH/JbJTY7IXk+c4/cle+8dBLd45Q3nzILrcd
/srGyvuf9OVV7T+ONOfv/eN5e/9YxPnK5qR57ededP4I5Z3Xv9R056Pv178/
x4bx20jz3DYDh6+xp8Hx/eb+4Rt+dNTjI8xu21+9ZMhLTs8u+vqPx1yD/f37
96Pg9vtwhAmegl/9v37Vw+9rjX6cv9tsfcaD38W2dtffLk8O2/+Ri0Ypl7ef
98qG3zu95ftj/beEe8xO448+/ux7RinPfOP8f2++iuPEGTc0DZ/bbk7uumDR
FXp9dph9H1qn7/V9JiiHG9NTzx+Cz5xYz/71+vz7wQ3ors/bJl7x+122dXzE
fnet/cO7jiff/vTSE3cbpbzOD+/uM+xLYRl/aa/nQdSF8ya26mOXbrGlu77v
WLpO698+cjzlkAVn/nKo7F8wCz+67rhzL2lXHvf0gae+vbXoRbPvtNfXP/jh
UebUwFZPketT/r8l8/Fl6/o/7Wad59v9nyJ0/3m1y5VLb91klPKCZa9e+8Ue
7ZGvlLB/xcY5e46q5xvazXbhq6L7L3szeFXqj/ev39A/sqOsvo1R/bJL/ddI
U7+/fz1/NiZ4ELebD32XPfRNp4d8iePrvtjjxYOz/Th+ignDuc5RZmLw8dw4
uV7X/hD5/0w1o+at8fU57RF7U014ea4j+jQzdHGm6/mVRZ+m5/90k7s2Pu4T
6R+R398TxSujlS++KHiJnjCnbfbkDU9PH62cO3HjZccd02GKN29YvHlTuZ47
7X3fMVG5JdjhK8eTgkB9j4RyGIe/5Xj98JVTtttC9D3L7y+a/iXrHPCacdxh
XxGXzLHrVX5Yfsxo5YDWq3SYg8NXEecvmxtuDxpWo5X9oMCPDDrM6e/kTn/n
rhL2r2D/iu5vuWpa9/7jpZN26zD+l/1xcaOKHu/DdxefVsH5jLk/CNd+kuvD
QO83bx3WcuO0tzpMEFX0Pgjd90f5fOZ9+vDcTyf3q25903H4nL9gMo6fat7N
Bf/T0fY6GDa1Xh8UXT9XRf8//3raavfgE5D///SondlhgnBv6MXT9Hh73U3H
+RLm3PbgAh6jHMaFzzl93d2X3fT9OsLJ6H4eo1z79He3rv6k06/uOO/khd2d
UX+SXE9dpnrlw8/EvnJstylzSH7ViUuWjzEH3b+J/5NU/blh1z877HrHk4Nm
1HopHJ+z92lPp9ny0QH/iu5TfWoY8Oawv4xvR3//ZXnoRXsfbTjGHBB+ECXV
1xg+9+OlpYry6EW5637+2vFPRweBfrX+fL5/BdHZvm1jbHv1j0b1StBMajL1
+/vX1zkvz/dbFNHft5z6FLPhqXfe8syoSPciv9pJvo+p1i8PEn2qCZsVuzn+
4aiR/o+7nux1OEbZ7ifX4zQzP//P47Y9bYzy469O+GW32XL8dBOGn/u67//V
D868YLt7xyp/tXkQ0Lnve1hyh4dPXH+s2WX6k/8dtoF8vzHz4k/nrnT7Ysf9
N2w7bv4njh84ZPzPbQtSyj74H4Vju81F16/8/nz0PY617Z+hOewv10NXdL3m
Vd8hNNAC9i+ZV4KvZ52x9j6/taj6J4u+qfxrTEX5zSV37dT0kuPQ9n6oKget
sp02NcoPru437H7n2G/s+i1ex0v67vtozt79yvJ5bnDDTfkzF41Tzq4evBMz
vjntN+9K+fwkrk9H9+84c+TzY/2flOrWjx3bdoXj/UPDS9ef75BcPfufp403
x0Xts7zq4d8zOo/9iyZojV9+byyK7wvQS+aiM4KGxrjo7y5Cr5o9gsOPj1nf
260C3ZhOvzVQOXqc8pk+/dwkn1+/2TDsWIh0379t+yumbNtBcvyAeeu9Fr+p
Oy7yYfk+us3OwatroP736/wFl7fx1JP+69TofGe6PI7Q7292vOWwpeuv+r7j
C1e/+5NdnkDeh/99279X2mnpyFfGmwU/Jj5/eYx8f3FzyOnmuc2PcXzJ6Pm3
/We545v9o54op5XvCdrpFzi227zJhw/ibnu/vJdTPeQDc9i/YDJhA3y8+XK/
NbeZ+0Be9cFhh0Ee+xft5zO725x88SsnXbywoPq/Jx922X4HlbF/1faHvSH/
fxP5d8S+/15SPPjz1+92nNn1+atmnN1txgRf4AKD8/Wbm79fx3/iRZ/vs04P
xxPm92P/AdvPkZfzD5in8x9ctP/T420/xLgB3f+aR3d5Y7uTB+qP968H23/k
f19v73LOD39FHs9ysP/9Wj+boBza2h/i0f0u32ePyQYPktFp5SuCy2Q3x+sG
/5+bHIeX+QrHdpuP+rEn2Ofpv3Kq27/DcdhP05HD8QWT/eOcLTd9KW62mbDX
g7/cmFd97l+W/eftrjz2r5jfh6+4yU885YdVFpRVv2nZbjsuuqeM/atRe0U+
HxP1F02w/vxNVfcPr6s9qji+3+w0ai0/dJB5e/2R78XN8LDjth/7D5h4+EFH
n7//fdt2VNze/zsPYP9Z5vzzglfcvBN0Iy+dWa97s6LrIq787D0PtPx4/QTr
Z91uHa+X1gn2dDz7z8/c88A5WOfLv54mfjvg/0wwsdDg5XqQuKvXDL+q3//p
MZu0TPF/0qpfE/YLO/5l6Rc/L/3Csf38enG+nG33z5ho76fn+1S3/f455ePj
wSfteI2woZZXDrvZZjkOv78dy8qhP37keEjYAVFVPiJ8gDi2n2e/HY/YyX1/
/c2r+D/SDpplfeaVifr52zh5ov3813TrplmfwTpq/v0XNpP+nLD7z5TPO2n5
Hsfy+X8zYdnXE5YlzD4rjfV/0qq/tOg0/8dxORxgSeP4nFnhf0qLJsrvz5u/
BM3NsY6v/vyJHccf7fiWwf0PzXhDuBDdp45XPXTmmUuOdRxexu8nzG6bXvja
i9fI95E0Kw+9q7Zqj2O7LZqw+f9iwky+/9XCtxcWVH9n1dS4bdodD4RGUlTe
Mjn/wY3mlJWHxd467Zqnyzi/sdfVWQmzx7qdv99+/6rqb59+1+jPNX6O9pfx
fv//c/fRf9m6f7Z8/inzzNSg58LxXzqCDv20sr0PHd+2V2JK5RPH8vmE8fXU
ZD1f4z4Pe/85/v115/o/jo/f5sPjtvkwGbVXCjh/yZw0+6GDbi0lldsP2Gz5
KX+P+JVi/f4JsN9eDuPIB5ImGCUYeURJddsOL2P/atRejK7Xv1VUD8ctTqkq
dwYdqes6Dtuz+vm7uoW7hQM50d97Geuqzoue70kzNXg9grpjvn/ZcaCkee/T
IYsz17i81F2D16vIU/V9b7OtU6t8siilz0H7vvOt4Gmc/yBl/WTDBPSUaQuN
NBX5VRJ62oTh5dcpO260d0rfD+PWXxyHt+sR6Xr+JY3zFe3z/o/u+94lefG/
DhjieHb4huNQfsF9v9a3HVvfdmx9OxX1g8n3L7+/YsdPCvJ9lKFX7d9dSpkb
pwU9HRXoJnoupcz5g1cec+9zVdVf2Xg//5au1u/vzY2+F/96mvDK0RMWoq6u
f70EvWCb3JWKfId1d+eZA8KAytWFCu/7E1PmyCfuPOKJO1Gnzsw35x257nVr
POLqKNjPwXE4TvdgyvrKDv83z7k76JAY667HoHfivXNSZuQDR66y4s9u//D/
+yWOX+44tLNnoA+SOCEdbSVuledqFKfMlrhugur2/uwBJ3B8dJ2/EP2+9mS9
vtxx2Gw/IqUcjF48tV5aOaBTzknXH+9fXzYOcNfTUWsFMwIcfzSt+tNzZ7jr
acFjh2758FjHIZ7puL87iPTc9WX7nR2HX/MRju3zOm0OeyGYSCDXW6/583FB
gOE43HhRe2DTtHLYPPhnxNNN/f5+PPjm02f+5c50WnnWUb+/f8Flcny/9fsu
8PHg9yOO9eP8A+aOvRf+fHwmrdwafNHnOw4ex6v8KOcbMNPDDkfHtt8hHfUP
DuD8k8zYsMMzrWzHF+X4SeaA1cb7P46f3u44/8fxuH8ui/1zWTqKgybh/FF/
pX4/k+3fcajjuuvPm1z/ffpc9336LN+nPX6KudoEHT+ON/jmoOMfvjdtHn4o
eEl/qXy/U0zf7dfN2VPaNT5f8tWpu5TekeOnmpnBsP4Bjh8YsscDQz6V/adG
/T6Ow37ym2X/aeaNztWOOneSY9s/73jzcEJUOhrnlP5a+fummU3CV1r52WeC
V9psHL6m1e/vX5BTT7p0k7d3SZtDgtcP0L3pZmDEi/0jNksrh7/2s3Q0n2g6
zjcjGpdL1/NJcvwMc1Ti+dMHNzm2/Y+Olyx+ZsK+H6ejuHEGzj/T3H/rJste
jaWV/xP0s1+YNkH398NPY39vppmy4Zze5yanle966/iN9rrLrXN+yOx1Ph2x
qeOVD//3i7U33TrEdn6QYzsfyK0TavuDI76M6xbPNuF0iSzW1borep6X3Do3
dlwfdd/951XY/fFD9Hkc7fTQr39lnfh59j5619UxzAXdeIelo7gWdVX959c2
4UC7e569dcTaT/97edp+b+NQh0Pmi+r9FfEB4EfTpiV4beaO3yt8/d+6HuH/
ayX3PAz/X0emze2/v2Hzv3/n9t/h5oXxIZ84bm5aZaWjlju+b5t/vPzJfxzv
HpzgCfy+QVE/zFny/5d+OZkXEDf+07fl3ot67XNn7fHQE/XH++0AO+/UsZ13
Kpy2/SKTes30fYInekrPt8Hr0/x3HNt+hLSy3eaj/rtec2fQHblVTvXw/Sfz
2N+YXDjBolfZ+od7PtnxAce2P92x7Y9wz6eP1/1+qz3Xdrz9/f955NkDHL+y
9+3J3jfk+H7z1s73N4+f6fjHR1c5bMmN7nkU+vWmjsP/x/Wy/4BZ7ZgHtku0
Or7wqZ1vfXUPx4nWtf1d3PPHfk+OdwnjHMfhpibHTzLv3ho0tBx/vWWf3zRz
z5vB+/89vSDpuLrlShd+f7bsPzkaHwafJ/tPMT8+9Lszqm2Od677e6aYF5uC
jmr3PLHjd47D3Q9yHH59d8vxU82+G75/8O05xz/+YcJeDx7h+KhrD9jpGf3/
TjWzgtdajm1/l+OwnXOdHD/NXPr2WaMWTnM87OgDbztUPh//efLqLX984rwJ
jvf/4OmLiwc7Xrctt89y+f3+82WlPYc/e83vHE+bt8+3q0xzHE7LOtXx8xu2
lR94zj1/Pv7pgCPvqTi+d+iba31xnOPTe6ddMPop9/y5bPhE/xHq2M4Hcdy6
SvAEleNnmGHnrLnhF9McP7PuURs9cZl73oTDUWs43iiYvrKl4192m33V6n9z
z5sLVz5p81faHNvxEseBOv02OX6WCbtjM47D58IRjkP/eEiOn2U2DS9gx29s
d/IRL53meFH4hhw/26SOPDeRXcvx2R/9/dibt3T8bTi/yPHmAX7vnl82bnAc
zvfd03EpeN3bG7XzsE6t/7xb86zqP27R63WOee7z7T/5r+f4r7OOHbvqY3K+
OXae13qONwkHphyH4ydnOX7xxsmfzXxRzjfX9ps3Ow77mbdwHHarX+LY9ofL
+eaaYJQiv5Ljg2a899Bd2zq+yG8F9N3nns92nqNjO8+x195nr3HdFn//oFtr
H/e8/tO3V4789UM53m9PHj58+7vHOrbzBx2H81vfcs/v+eHL8T13B69e896u
lxcP0udnxoTNt48d7/PJrcOWLXOcid934ob/cfzzHo+smPa4Y7uNRfFrxlwc
dHNcJOOeMi8uGpc6PmPCaSrzxkGPR+O/mei6Hw+9x7aXiu55a59fwknMa09F
46zC6ag/R7g36td0/HLY7+nY9otKXqk8f+XvyZhLgubCSZlonmCv6k9UTnhx
lXccHx5M0zgsg+NzZm4w3fjNTDRftQ963vZzne6e9w+PCGZMZczJ5saTzI05
3X/i+5v6PzkcXzCJw4MZERnl0cF0iB0cD755s4cXrC9cNLce+GHfVidkzIMb
zbl428MLer6jN3hz0ce/OA4fS8cUlcONf7+/GnwcI9z9HbYHJrh1Ge/9p//S
72+ujTe2dusW2XHdDK7PLK7PLK7PLK7PLK5P+Txao3nUWRvHTJN57H3Rc3u4
st3GrJ9NcNdv+P/7Q9b02Q5b7B+38ekb7nq2vueuXzufJmvn/x8T1+PtvJce
nC8VxYfy+Sahp+31N0PO3xvNj8hG7eU09pe40F2/tt0u5+/V/fcIG6YZZRun
ON5+rTu2W+sOx3b+WJ+y3eaj9k/W5iksy6lu8xQcLwwGTKbkcHwhGpdx1/Nf
ng0mjmZt3slteexfNGet8e3cPzyRVfaDy/eW7+x4hym7HrHTStnIpwo4vhSN
H2TNsf63U4gVVd9k9QPnr36g4439Zu+LDzje1v+rPhtTwvlMlA+RjbbVet2P
p5949nf/LL+UVd5g7q7b/HKS4y3DHbJmu6NWHbJwO6PHh9NLuwx+X7/5+afg
lVW2n5PjvcN2luNY+Mra7+lznM+Pz4PZakd/lVUObe0Gx3Y+m2M7v0bOP2DH
9x5wbPtbHAf0RF826neR/in5/b4+eW7z549klQ/ecdno/Y52vN/R+/R9X5bz
TTLbj9jzzSV3Obbz1bPRfKgBnH+SmbtD88K8fD4+n/XZEdXMNnL8ZHPqzwf6
T3jH9j6Q/Sfb583H4MNk/ynmjdeDl+MDwvn4sv+UaP6e4+9jfkR6oOw/1ewT
TLM+LxuNd8t8T/n7p5pweoVe79Oi+zAbjYNO0/3r28t9aC/3ob3ch/ZyH9rL
febbVcNMkYhzth8i16pst922377H+eMRfviy5M++v6z+/mtH3R3X/e18vAnK
YfrK4RNxvmTUvhY/SkBPRc/jvqi9nIQu7W35e6SfIeLlaeyfie6fPrNW/Kba
Shon58yffvpoyaWLHX/96OgzSl87DtstszPKYX7JlRmcP2eO3z5IrHN+aecV
9cEvc/DLHPwyZz4N0gLvyysf29FyedMUx3ZbNJnpx/ROP8b5XfB1rH9en7lt
0vJHUup3ObPb0s39po7j9vxTL3/8quODjhnnN41LyscG+BfHdmvM1kFa13vO
D0Pcqs/mCX5Z1f3ffst/Xe74hef914Jq/fl8PzzxkZ+eXXip888wrSTZZ/MF
Nje6f5gv0GXqj/f9zvbbOn/zgzbfweTvG4jiH8cL7jVd/1rL+VHw1NvuFMfV
j86ufLSh7D/JrD9rSnzwzY5X2Xm9v5S3c/y99+rKO6/n/CfoPXzhNsc/HLls
xZHbOr4ySDhcU46fHOWhOA7j1/0dh/PKN5bjJ5tf9jx5k4eWOV7pscIWG5/p
uKnzk60PNXL8FDN1nT9duMOLjsO8zWMdL3ho2TWtGTl+ipl7zqevTX7M8fKv
Tlh54z85tvGcHD/VbHn+xt+seM1x6k//OG3h+Y7X2sXE7t7U8Xtzn3twWLPz
O9u/DL4BvCd4gpxvWpTf5jiYDXTO7Y43DhMSHIfhd07ONy3ql3Ns5/M5rvMX
n22/npxvuhm89PXmlZ93vPPPk7+77M+O78rd8GplE8drHBQcIeebHuUzOpb7
V3i3IP1xoWOb3ybnm2HeT5yQf/Itx7ecde71O13teHHQ3lzkeNbm/h5xOd8M
E2RrjPjK8fXjggwmx+Hne4Dj8POV62XQTPPiZidmj/gfx5dW34+9sdTxbt2T
N6r8yXFm8BXrXFqV8820fvyt42uuDl6Ow/lNm/fZ+Hxlmd8k9/+sqD+vL+pX
cnroz+84Dtvpm8zC8XM1zrXtSq6jOq++HbcP1hnz2+c2z8ytwxHOT327z873
mDlf969/XufwvM7heZ3D8zqH57X8/tZoPqKbF2f9BLyGmxdl+6sdn3Zq8HJs
+7fd8/mwsIMwh/FgeQ5F47xt7vn601MvXb5sD8dbnbDYt+Cc7Xdev1ePt+1E
x2H7bYnjcP+vHMs2bN/kc/Xv13JRXjre99sXl5z209NTj8yZweev/UDhNXee
C1eM6xl2tONRC6f5bzm+7/igcEUB5ytFn0NO2fbn5mw7+J9F7F82nYevdsXz
f86ZYBbJN5WS6tdf+dTPLec77pp00+nZLxzbcfCy8rO7rnxx9tmqcpiGeaJj
myfjeKfhd1z43gyj/NfjP9v50A0c263vL0cHEb5c72DfL14OyhBsLvoMs8rq
QY+v6FIfTvSZZtsnl2zz5BLHNl/T3a8jrt9yhyMed9xy1lqH3Hea44D+Z77j
lbfZ+8pqi5xvlnnuokzsku8d3zXj4GGbLnV8yfd3rdl0vOPjrvzp53vnON59
fumzfQfL+aP+y+WOw2bkuY7Dr3tmzjx84vqjp54q/pE329532Hcf/8exPX90
vk9z9fwX8GQ5/5wojwx8CXgb8Ma5qN6C9L/K759jvtg0mLCUUw6yBibd5Di8
7A90/EtLcGPIPMs59efz/fGvLRPPnPGV88sgmlp8q+NceIM7Dm/3PrcO9Qt/
Lq+8yUeOZ037fu3JVzt+6Jcbh/Rt77hwyy7t3SNyZqOgY3wU1rEeNC8ar3Lr
zB4S5hU4tnkHOZsf9TDXwZ5nwvRCicN9vrG9a4vmsx1/d3FgGLnovsY6kr7f
h+HA3c7/w/lb+zkOpkE/Pt6twxQ+vj93bMeDHIdpXvs5tvGVW0dlw5Er3ljw
oeNrnr10p/jfHOeOnv7Jqns4fiL91b7LJuRsXoGOx2IdBDmf8CF++8ysdZs5
xe1/2uPXnvr4tY4vDQaavnD8a/C1vel4q9eP/fEPT+H3DeqKrud8NG9R8oBc
3ks16H+Y4PJiDg3ScM52fOszozIP/JCP2okuz8rmuY/F+bqj/BmXB2L7n/NR
+xJ5OX77NXyevJqP+m1dnontDoxj/2R0nnyU/5WE3mseHNXm/7jno/2783Z+
/My07h/WRbr2f/E+Tf5Pr/JH5y/2f3px/nyUj+Web0esdN2798Ydf3PLifPa
z3W8+46L7jnm17zxHw7+EyKP8xWj9lI+6mcrqG772RzbfrYCji9H/QT5aNym
pLodp3Ecps1XysovbBnMRHRcHnb/Hz5+rKr8yN7nH5Za7Hhe+IbjU2/bcdUH
dX5Vway8/VUjxjc7ttvZUT5yXnmDg4Med+fX3zzU8cflHzleslXwjuw/x+wU
vkSfa96dupf/4/xo1NOPzzvxVsfnXdq8y3tjnd+E82wOcesgbfb0Xm9tsaO7
H8N0u9sdB1lnt8zL2zjyFrmfCraf+inHdtsZ9fMVouvY5cnabZd595YdLju2
r6B85XXf7L7e3VIHs1P3D+3y9DE4Pha1rwumEE50HQu9O5rvUzAH3XaoHymO
Uz0cRn47pnxGNngyxXB83Mb3QwrmmGA69Y3d0GXedZQXfGsCetpc/dWf/Su3
oHzfpi/vt8+t0f4bpnR/O66UwvG9Nr9iLXf/2rzsggnTCDW/pWh2fuK8CVvd
kcbxBdO/xt69By5299N3O/1y0HVjHdt55Y7fuXOWf6lHvLyA85Vs/DGlUM+3
F6J5rEXsX47mrxai/ICS6rb/uly//7fVer4MPNtxJkzoMspX3LDaM+vHTP3+
/vVa3+/eavov2eDdcf3y98l4TCmatzFc2W477ftHFE043LZ3h+o2DnV53euH
E/w7cXws6ndy1+uJJwQvx3Y8uxj1R4/V42180IXzdZt3bvh0/+lziubRM0ZW
F/8Sg56I+iOLJvg2Nj5uIvRUlNfu5s3bOL0Yve/m3dv3kzg+HbWn3PUd9ked
XYzGWVPYv8+EzZp7i9H3kFU9ufZDibWlX2yQuy6sXxdtP/Xl7roL+6kzjm1+
T6n+eJ3PLe9H/Xcji8rV3pdOeOSnKM/uiKru7wfLf99ib6N87fzLB46b6Xir
O/Z49ZYxjsN5JYMc298v7e1i1J6fr3p4fZzp2PYryfVXts/hDYYp221H1P4v
mbAc1Aeu7kQ4bb9lNPbvivJ/Xd52GAZsUYrmnYzB/jHz7r+DC6lkMmHHYJfq
9rnSg/2TkW+VlK1vlUzQ+tt15YTuf/a28R//dVYCx6eiegUlm0c5Oqm6rW+Q
xP69ZuS1F73x4D/k801Dz5hwOuEL8vdE45DvgjtL0fMng+P7zH+/+PDcm391
1+tTM9p7XrzI8f1XbvHI98WS+SmY1/RLVo//+NFL/Igzi/PlTPzeB8ff+6Dr
l97rpZ33fGlnx//4ck3/pxTdb316vL3uc8ohnu7Y5p06tvPYnM/aeW6OZWvH
50rKdvwt+vzfce+PDSceuONOCxOyHH8bpEU849jmOVeVqy+89MM/DzXKdz6y
7KnRmzm247KOl9zw1cHfNDkON7oeQ8mE0xd656se5p9dPL9+f9/P7d8h3G6+
TeZGHvNNORovkjpPrq5K4ZSP4tfcWjYHDgkivFHQO6P+zXIUH3ZA74rio7LZ
duOt1u+9qBN6j3k7KF833uVp/vL1Kydf9lY5yheJ6/5DAnxxAo5PmI3PvH7/
937n8vxaM0GPuuMNg/S3yx2H3edfls2Vzy3qHX6ayyMNpylmJyr/8HNQSdKx
3SbNvwN7HO7u7yturvgO6fJiRgXNz787XmuH/VZN5svmqNknD330qpSer/3s
t1dNjUvh/L02T/Zbdz9bXyxH/YAub8LeD704PhvFFVLnPAO9z9xzUFCRrxzN
P8+qbvsLstg/Z3YPJyy6+zVsF05w/Vh/C8LP6x1//Mtrk3r87zPsp0jk9HzB
qO9OJzoOx32XO1516V0/9Usc7/NF783Yafgdju22ZNt127jnlvUzd5+Fz/M1
yuaRswJDLenxfWGHW6n+fJPL9fyp4+m3Pfi+uaKqHJZt2sco18ae8ITfHFBe
9/zfXdrW43jr1YJKT46DaiSnZeYr23mbju22zRz9c5PftBKW+Er+jvao/Vmx
84n/OwJ6Z/T9V6J+ldGq23nCHdi/x+YzP1iJ8m1dnvxzmx/zQVPLBOURRwUR
o+NnwjwQl1d9zOCC/zMR509F9fdcnmCY/txTMUHr9AHNn6ua1z8d6jdJkzg+
HcXXLq/MxuMV1JuoRvUUUzg+ynvqrpjymi9fuY/WK6hG82zS2D8T5ftXbDwo
8zR9fd/gBDf1Yn+Zp1Ixy/cY8dNTL2VU/1M4UOl41xU3fbdnLat8xQWn3z35
EMevlfc4cqNEFufP27ofZ1eUxwZl6LqEC2ZPny7co2LG377A/8nr8WEZl6sd
Hx2UcfnBsR2XLCjbbTnK+6zY592VJegV89++YIJ6RdmOs1SifvSy7h82H0dV
lK8Nyps89784rPNZrT+/Z6Lxwop5fPDD7665g1F9z7Agk+Pms8ef+Nhgx0vC
gS5Tfz7/+Wiv+0r0Pc1XvTsYaLpifv3+/vOxNRzwr5qbHgkKSLg6tnbbZi4I
Eyirtp2fGQa9I/q91Wheajv0uBl18K973Kz9HnETlO3ourhqgij72YWuDslp
313uP1nG4/gem9+x3f+6f4Mw952Im+P1+38JfnZCPfvPL9vv7PKkjwvS6hdV
bfx3d0L3t/2nCRwf3W/XVus5598vH694fYMlLi/bzhdN4vh0FFfJuhsp1bue
LR44YXWXx1dJHfXmdbs73vycR6Z1Pet4zOIgE8rlTawXlBn9zLHdZqP6sVUz
fORfzRcvuryLlcKOBscf/37dvb5fy/F+2wz5ao2rsso/35A9/ppiFueP7qe7
qvXcXDV3tAUOl9f9n148yv8vOP5r0F2i+e8mqpPnOIwj7nZst2VbJ+q9atSO
Katu63A5Fh8UtvUJKjhfdP/t6e5H28/p2PZzVqO8JHdcWB8ubnC+/mjcr2oO
re53wT/+4/SNV+o7r/86x+Gw/6r9yrZ+0Xxl25/lOAxjxw7Vv8u+32ZW//70
644quzqUN76/m//j+NfnJ/o/JurHa8Px3SYYHVlpmOPQ1zc30XMspvsvDsqg
HjkOx8ejcW3HlU9W2/TdtOMpwRs7mWicpluPt+M8jt8J0jguHI/zJ8yOj008
75cdHG/04W1Hzd3ImFTvGw8s/vtE3X/SCyM+vfO1HhyftP+P3zsO7XuEifLq
Erq/zbtL4HipI2BMUOVl1LFJ6Glzwu17L/x5Ncdh3v8iYxbu2FGen0/p/mEe
xqspHN8bXW/GhGVrt3J5uLb/Io39MyboFbttqLu/rU+ZqH5KRvcP63/s69i2
cx3b+y+L8xfsvNDJxtYbvi6P4wvK9r5xbOPrAs4X1bOcYMyZS1Y5dOaZ5Xq9
VqlnOc9q4J2NrY/zuXt/+Ikzp33/pOOX3u568ou/OT4rGLY70XFYBnB8v7Kt
xzS//vefCPafj7Y/wt1v4X17nKs7ZuMyY3786p1/nzFS+udc3as1H9nq1Q/O
dPdXmH/8kOPJYUehifo7XN0t29/hOGzdzx2nbJ8jju22x4Rp3yvc89Pmf5ho
fGiC7h/it3EcnzCfnBoU0HT320vDrvvLVhebKO9+ou5v+3V6cHwy+rvd/TA/
mKf8nYnyulO6v83rdmzzuh1bv07j/BkTprP+6u6HsPz9tdJv5/L8bL9eL47P
2nEI//8TZNnPfDqj+tsbTh/zwR8z2L9gff8e128cDteucGznTfjX98ynn+io
FPT41cMHpmPbT19UtvULHIfthBsd2210f2idQ1lvy9g8pk/d++E8pIcdh/NJ
LnYcpr3t1a8854LeXZ/vdFx3PwTHB82jEx3bbZcJnrK7b9sf1fGWuoeu7l7y
hPyT26/r+I9jxm/52Mx+4wc3fT8f16X723GPscq2/8fVlQuvl9vH4fxxe30f
7Di8vsv9UX/BeN3ftu+7cXyPjRv2dRx+Db390XzmCbr/82F84epedYcDAxNx
vpS5K5gwPqs/akckoaetv6/ZH9XTTkHvjdancBx+ryXH4XjA6v02D2ybNI7P
2P66RY7DryXdr3nB9fsXo3nMjm23Yb/9HFYp6v7h59TvOLw+FzsOpzP/03H4
3PuhiN/Xb+vCTOyvv298Xe6buv39rX2+OZa/1+afu/dfC9IiVjgOWk/7Hddf
f75F85XtfT+/Xh/UaYJqKFu92m9WWbH+69P2kf6DgWjbZcczLnLXv/V7xzbe
67fPl9079fhh4QS+McrB7L7kI2Nw/lhUH83dL59t9NLS7T/rj/JyxmL/brNy
MKHlMfd8CecD+8evvVPwL1eHceZXK/l7xnB83P5/Xnf3j23H9puWt6//5djc
eN3/Vx+qo7pxfI/N33u2P/r/xKEno3pP/fa5PycBPWXXT7jY3T8fdDYP3e1p
x58f/O3jr/xPdD01JfV4W0/Asa0nkMT5o/vjy34Thte/pup1z/HlQRnjlaDL
/Pt7fb8ec//Cr09JQy+ZeXe+f8KUx/uVx60cvON//7dm/Z+i7j/ur2f5P44/
XPz5B4s/d7zxuzdeOkHXsxgwQ8c/1HdFzbHdVqP5pP3RvI2K6vZ5XFV+Pyi7
+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
q0mlI67w+iWUJ0EnzW9lM3sOfcutlD/m/HwCc56CKwLz/ftygfn5pNijYG6/
jPKo3i8PjhYuOVKYIbDzXmnpKX9+L/KbaATm/CeVCE/MC29vswpfE5jHIcv+
pBLmccj53vD60vzIf4fIEMWP5qvupw/9laX7ycfpC1HO8UaBuT9Nc5+Cud0r
zad6Pz/lMRJ2zjAsjf96fGETekbkuRTnXjt3dBMY89SJ8c6iE9dL9bk9porY
J2F9ktEh0p+pyiXJaUzixfxQmx2gYwhL8wHypNC8sEZcx+fl2wLzvAzHBebz
9A6B0V4So7wPfr5E1It5pfE9iCnAklTl2aiH7iDGO+c7GSJwXv1qefUbhYg3
MVt1vYnsBjTPpRqV8uxE5mFrUnDvfm9tqfm+SXW9Fcrc6vLQkSfwNgvz/AvB
Nd20PV1ke6lU/2jjBi0KPhJ4x8BKt1IWC7xi5nbpFYHf5Qciq+r9HMRnFqL8
inalHM/JAq+PY8ybDgXHcyJOgcetYxUENvQdcifmO5eCGS3GteMCYxyFW8EY
ZyEwfj5PuJ/zPVX5VhUeL/BPv+9Pvq/4l4rxzn+X5iG0pyr+nyG0p/4n8OEm
FTusivYquMw31d65ny8wN0f18Ia3L413Hi/nEeOb55d3C8z9wbsSlvc/yvU+
8regcdLRp5SH8dJJmDcbKTDyJfpU7QVp3yjGJz83tBeYj2+PGDfeUytKteso
8FDNoW8ifGK8Zp4YlnGivcCcxyBXjF/Oa9FLYD5OWgjM9yse+fePUV7HzxOP
+UjGhiCPG9DjVOWJ+PmnyTiZ/CdCFGeSqNTHc3qKgpGHJlvBOD8YVe2bgbHg
PtwkrYdsW9bapJSjv6FZVd8Co5c9HbVsHc3Xp3NU5VbkrdssnZcaLIt7bLEo
5Xw+GyTw5m+O3PJtFvh1+rX9vV4LzP2jfrIruDkj3MoT+Jvn+7yDrzkUjP7A
AvP4lVIC4+9H43FqiPznXeHl0nrP14sJIdyfThblGF8kMOZjcSt4+vDk17HX
BL7Y4OS5vlsFTooZtWXX9wKjftijYHx/L8ZVjA5RHHae6vN70T9wpcD82DAu
RLxPXqU+9xdrLXAY35qM93rD25fGK+f/nS3GJ5ezKK6il0+pz7FbhasK/Id+
5v0x1wT+dvLijgmLBMb3i8X7fVCMB34uvCIwz6OyW4wHPp9dVuFdYnxwvrKj
Yv1a3t//zu2zYr06/HRXmYHXBOb5KvaJ8cB2J19uE/0dz1+if5uHvm8e+lDg
bqu93VZfFZi7u54U+CCzy+8VmNvlle9vgzXNlzRe9Fjg9iuapkfeErhKhTKl
hl4QeHPrZcdvHRW4G2tAjnt7w452/scC83XuhsD8fp0TmMdNHRaYx00p99OB
cdW3BG7N4q6PCszjsv/P+OLnQcUvxQ0n6koHhXsCc3FB4OSLY+fvU/RCbkgZ
vTJ59AOB/dvj/dsvC9yTGdqPCTxRU3GiRukfHpVdwwtjx0iPv8V4GbzB0erH
fwUu6D0359AZgaulV4osq9zPfGj82ecd2j4WeGHVUr2G3BT4+c/DS2acF9jv
Kj9uwxGB0e9QrJdhv7eEw35vxof0f39vCYf93hIO/72l9XXTtE8bPxK44Xen
63W8LjCeywS2+lt9/PkBgZclzowYK8c9SeO935hLLf+8LvCZyhU3vZLqYx6r
BNJTRMKTDcc3/9s3Ee72XfbZ2VvVoA1/IRF++5e9EAF/svHfOQnGdrb9E7U/
EthpqOWFJNKDV4f/pU4unNcgGX5uxP6pBjf7WH4ILEiGwzfYPxHw+Zbzd5+8
SIZXQ9g/EVCt0gj37FAKJPN/Ium6FGjA/5HbS1W1l6pqL1XVXpqqvTRVe+mq
9tJV7aWr2stQtZehai9T1V6mqr1MVXtZqvaylPZ4P0zVwKzCCrue/VwN2q55
YirXWAPDjp47X6NpBEQ1vfNq7FANdOQFkXDw+aUdEUs04L01unKT1ZGkp9FQ
XtHqkDu6+7UXKVp4N2PlD3cXVIM5eWsfvmqkha8iT+570lD2G5PzA0YCy55Y
apEWBtxI1FZYHAmb+kysUeaYFh4cKm5fpWl14F83Rad8377s6zbUKd93K/u6
g3XK9+Vfd6FO+b78fh3SKd/3SJXUG16tHgKehXNr7awGcce/L9nWQQ+jW3Yu
VW5cBPT6oWIN2xQ97Oqb2PZe00jY1mHAsrW79FBu3JXNp2Krw3vs8hd64Jff
rk7910D8EBHUfw0wiL8g+8HZle/L/euKHcTbHYHxkzMclL86EvdbtxyU/7A6
tmNxKuNjufS3dX+nMj4uR+3/9I9VTmV8SIOibOY9pzI+OA9XbSAe+2q4j84B
5LfeGwGfMce1xgBHuD9iJNbrA8QrWB2mze86bf7PAIcNxdIzAs9xRwCSecL4
SDznvQYYwhPKV4fpi9ZPW5TjgmMtWURJBPi3PCra0scFbZ/Pa/N8XnVg7tlt
Frlg1JO4Bc+aS+Wb6uXslc437S+92tX1t0hoyui0EtyYfyktAmWRGxg9WkSb
SNo/uIGr/b+tjvGMa9zEAxqB8rYbmrHjRIfqwKLCB6TLeQUjYGPWuCUVmnvg
6GCmIYxEO9MiD65vrSLQX/WEh/jcIikPeC7lDYygPOG54OKP6pDNbsvhXFjQ
ld2pSNwHD8qjeJXqdA7LJru27Mco699rwqBSP1/elG6D+xXnfvtwZQ14yPjq
J9tg355Yx9BGNaFbhy4bvnhlg0VjZ994979awNX/b9ohpTXz3KsBVkYf4LQD
y+b07qsacJvJwXZYwu0CUTCD/bPBDqz0g1s10X7w1A463kAtKHW4hmbsmw4o
5++w1VCuBng+Sav2q9sBb+1cEjpTKYr8ExwY51a5JvCXdzpAqiTVrAWdl7ul
p5P0bFHAxQ9OKJfWR3rWhDVDA7WuGwD94xdE4blmD8CHPDEAxYk0pv3wcsKl
CFeR8/64kM+pVy3U901wUR6KGnDi4ylJE7q6kQ/IXwveOb33QbzODV15QRTa
xU+7iQ+yJvIPrnZj3ob5UTgOxrqJ56MG6u8aeMj/uiaehyI8pPergf6ZlzzE
F1UL9biL5fN2FMX75EIUf9SCj9kjU84bFoXvfySX3r8m8h9Oy6U8LjUgjRu4
84jPIAp50L7II31XDeKNSSU+xzrAwz/WmaGi9HfchbpoT+mTQ3le68A2zvOU
Q/xP9aDC2E0PfzVboJ7hwb7zl2rDr8FGlWsOsMApR317l8t1oFPV26mD1ltg
csHyRfeu1IVqR7/wnntmgRCrdq0eniMrkT0quTbep3wr8lXWqYP60uFW8ies
i3Kblfx766Fe+7UV23leD/fJMTaMe/iyNuJ2Mq6DeLaM6yK+KON6wKeNxnaa
T+rA1E+dvaYts9N8Ir1/a/dnFT8CilOqB6yX+/8BqFl6vrZtzXrY37cDRIxq
MXtdRF3iQQTyc60DbRLG7B32oQuep7brHtlI+vx3S+LyPC7oO6B87ZSadeH1
OvafC5gXrvVCbeLFdEEL/k8dGPkVe6SSjKbze4Zyjue/7w4jfZ8YOs+Z0O+r
fTR04P+YKI9INKzkdiMT8eLFgGsmy6hnprx30STNwN3yy8RQ/j0z8fzHwMmV
nfZMyciBVUy0iIbe1/b9YO2fA9eZ+Dea8lXlABdDY4CHyfgs8B4LmBkfTbzO
cr6xGOJ1tuD3vhUDE9ukP9v5rQ0SWdr3hBjKz2aD8paPZh0uFw1bVrFEJ3aM
v6gfAz8z9a7RDg04EXo0jSNQ/ID4x84GzA97LBrXg1sAz0YxBUIMrhc7Afkz
I2JwnfgRiJcxGiIYsVd9F+WPjUH9ZQUXxWFHk5+dnMeQ9Cog2+tiiMczj+y2
MfDkyooIl8dL8etU/zc6/z6NBu4OF8wnfXAM+ZFmkYwj/5wcXCdspKcZT/qK
6DgY/+rEuFcnrBD9YkW9FyviIPW7Xinf9bJCw8wrDTKvxALrLZq3rTQfxMK1
q+xhIzt1HAwZzB42ePGcPWKhGn/YcN1KjoXjjG7xmLQ+cOLFOIzPT5HufyH7
L5b8bpxK3njkJwb6XeJwnawD5K8VS3k/geKI48geSnzx38aSntRL8bBxxFPq
JZ6/WPRXs+VT/pFYeH9NWv2NVTXEsxhPcSxaai+B4mNNwOnPsxPgk8ZD3DMm
m+HSYkZ4mgBXkn5v9qyiGfYER6568D7FJV+Q9UsJ1K8spMdKoDwf5D81PZ5+
Jxvl102geBsH8QjHU7yNA1gay6qXE8ifBuDAhm3Vni1OoH4FxP8RDywrz5Xb
QHrsBFisnVB34QyA5X+whJ3xSj51nM/jgbsPr3PBxUHMoTeexkkexq16E+gc
lkd+cQn4OzTx0v4lgfK5eWH6E5bANYHyvXnJ/z0eeeQ/yKf7SHY92X+zhD7P
YTlvEpWPl+0p8ej3G+nDuMUW8bRuaWk9SyI+Ux3dt0QaP1bisUoiex7lu/8m
EfuD0UH5ShKpXzgo714S5R12Ej98EvVPIJkELNtkt/KA/il1EumcDJTnJglC
3HDlwvi4I2S3AJnvnXi1RhK/e5UU8ks0w9RYxuSTjPPduRzK85YCOp6gLwc4
rWwHun6WbG8kvamGcNtk6PSy389J/1jhr6d3GgT/SIH+Evq1yAr/SqjHd8mk
r3Yg/9KuZLKDOMlPk9pvTPGdMi9YKcIVkikvm4v0tCnUv100XpMJh6h/JUME
27esDlH8eArpe3XE95eKfMsHdTRe0zAvmUEPV9k2rGsq9UszbH9WY8a4bWnQ
mhNQm2ETo0ndmEr7uxziT07D/dvHOeS3kIr7t/dyML9DXCqsYGFOyy3QnqVx
bZdG86cF+LI2M5XyeFsp304qjUsn+bkSz1lPuh9b0yjvJvHbrkql8QxKfa7X
nxQCRqN8TjrXN4v67b2yV0Pwx1/3xiZr0mB6+fW3Ou8JwVHbrlbOFqmUD0JH
+RbSoS1b3trogS9vW9Ip34Se7EAZ8OPQhX067jeDgxPEZUB1npDZDJmcoCwD
xt2OGlmYb0YerG/S4eGlYPyMQzlwbeePPrN0zre0/fXP5l/mQJ+tH49b83YG
DD1bt1uUJQdKbbQf0/VJB410fKkZsECbumyHmA7vnB9ZamLADuxrJP6QDmV5
omw7VPJbsiv3yiAeVweN53Ti2XTS/jCD7JigtIfrg7x/yQDGJpr8iRtejmEO
YhnA2KiccW5I4cRU6di/vqb8BInpFL9USHr/DPJLlXn00smOU0TzBfGCKnq8
DPpcOuJ5zgLDs5WuiVl66PKg0xeJbTKBueGu/0YPOYy2pE4WlDk3xHfhjh4q
bno1fuvpLMpTYqJ1KIvyVpmpP8g8y3I8RBZ9bjPdn0wahzkUJ5tF+SNyiMc6
Ezgde2c75ofblwl8mbppBxa1WHgki+YpJ+3Tsyiu2Yk8nCczKU+YC+v1zqQ8
lG6ozBOlZpKfVxGNvyw6hxTR+pNJfNA6khrig9aR1EA2P8jpSWqg39zW+Tf7
6klqgB/bftWT1KCe9amepIY+r4GkhvahZpIa8jfKIamh39FCUgNTFndMSGtm
J6mBV9fznc8P2klqaH/vJKmhvD1FaA/6VIN54v06klrY72UroI6kFpqVmv7f
xAQ9SS18cf1+K/NIPUktLN3n23nmpp6kFvMerrOQ1NJ51kpSS/O6jaQWppRa
M2Qe2ElqoTQTS+wktTQ+HCS1wNhN2/V2ktTi71cB6PyjpfkwQPOhFs9hmiAw
s+natlr4bor0mE92mmlavA9P02n/qqP9Txb258s65Pc4qCWpg3v/eUr1cArZ
9MbPIybPFHLbaaZ4FRL1DXqSOtI36EnqSN+gJ6mj9cNKUkf2ecqnlKqjec9G
Ukfzt52kjuZ3O0kd+r2ddpLU4b5aun8odXjOedtJUkf+yEDrMr1/c4pjWKMj
O1uAeBB0wN2C7wXoPKwDvuy7gpS/R4d+K6khGG5hL+jIbzcEZY13kora6uDt
8gf/2dgzBFm1c8fd3a5Dvce4EOVx1SH/z48h+HzKw845n+uQH2h5CNixsoM0
Dnn+hJPkl9NJB9wteUwa8eDIeWWI/zia8HiaB3fpaR6icejXg03qtXEfa0nq
YfrK+YtTbmlJ6tF+WqQjSXgR4UVS/TXNpKeQzfk/Qvbh5z87ST08aMw8sh0k
9dCJO0I7SOrhU/5wktRj/42U9/96OHZUekj7Mx7vIb2/kU3c8wE+OnB5T7li
PXzYbt6CyGMAR7cXBjMW68ke76J5Vg+rj17IKZXngq6LtvUuM0oPjE19W28X
jOOEuHrcT05y4T4vRY/6510uPDdP0GO/eenC16V57d76hMCrum640LtoxnO7
Hnkbm1D+z2V6zGsy2w1JLL2BR0/+5m5oxx3V9fDVjos9zbU98C7/Rw+Huhhq
jvV64KeD7B891OYFHjDzf/TEj+8hO6oeenWZcGfQFg9cORB7+tkQPRxk4qYH
9eJH9FCeBUhVyQWeBlXqD5xXwZGLfN6D6Pt0zyU9u578Q3Ix31imnvxDctH+
JX0fLrPkvN56GNmy8duTesp5vfVQlxGL/5qn9CceTvc4T+lPyL/hhdn6ptJT
T/wbXng5duWLsSv1MPTmiRa15nuh1NEVvxql/vl0kTkmYb8X7jX5xF04Uw89
Ppp6NfOpF86f0uxtdU8P1z5cevXDzHzkF2qph6lDbnw3pGs+8cjpcf+6Mp/G
i3T/p7xsvzvLp+yz8JzpU/ZZ/H7M8OH9MNP4kfNuzdKDq0bXPyuVKUD/iwp6
Ol8WEP+NHhptuTbF3LcAFgzZn/GJtE5wf4nhBZhHpaIe8638UYD5YMfQ/a5e
GH6/mxQq95vz4/5ciPm3G+qRH/duIfIUnNPD6aHSwSSzCNayNOjS9z+QLG2c
BhXBrPosEboeFg9mGpoiipPVU7yOzKtI328d+bf21OP5yRTA85P0+7FTxMCV
AfhxzPnMxx31wKDudQDGMvhSj+fkvkHie5DuLwtvfD8E26sxxYie4uNCcJyF
NZ7Voz6ykPgXpfGF+54QVOfnFD3aCTqHUJ8q/d6xbPz2C1H+cqm/9Nz6T+Wv
QvBsx5vjnLX1uO/5XvaL0mPcwuIQHGHq2+V6xa7L/UK36sP3gyV6xa47a7hp
msWpJ76QFNIHGGBUaHhstdmpkMcDZQzAshmv/DYNlrDtx24D7afSiX/PQP1I
Q9IATrYdfl9L0gB8WR6tJWmgfY+OpIHGoY6kAe0h1fQkDWgP+U1PkvZRY2h/
OcYA37dkzNUAWr7BMcBc6XR/vhlAPj/ok9/seDrPRBPeKvP7EL5H+IIBRkDD
CoayLuDpGSoZYMWEd2vd0LigfVwd46F2Bjh7aXfGzJYu4Oka1htwXfjJhX7s
XsKHCc834P1Nd+O+oxnhloSl67n+aYyb9E8Gio9xYzzTRwbSz7pJr2kgva+H
/CENpBfw0H5Wqs/zWMr6dQNYSuW1eGemB/qUGbW2po3u398yf6oBefNr5EJE
70X6BloD8uoX5IKTbwgNsJGpYabnUr82YD//OxeGMzjVQHnQ80j/asB8Jfo8
8qMzYJxO0zzKm2KAmgfmv/nRtDzInlVc+pTBAPZtB9+vvTkPBg77Kck80ABt
V75M2HM+D7Z0fFY0ZYuB8qx6Sa9hUPLE4zxmgDOVdi4JtfTCOq5wNuC8N8KL
53fp/qDdz4v7weYGtBMe8eK+4me634n5eL+LCTcmvMQAG5gaZGo+8GOFxgAG
dmDbkk95FwzA1SVX8ylvigH5fN/wwbzvnB/NftMA/7MdX/xunA9++XRpszpS
/+D8vnk+WCah70cZoDkTnX2w2jJGF7FfwubS7t0/SLhnueHfWg3w0e8bHk3d
4oPTIxlzkAGGhnot6HLRB6VmXw4c3G7Ac02pAuoXBuwXaQWUz9QAfVm3aFRA
8d8GeKdwxNdPfiqAqEmV3r+bb4AuX20d2+lAAex/d2itPbMMMG3jhWWXyhRC
dv9tbXZWNMB7g6Hv7YxCiHteIq1UBhjpmGX5r3EhVGWvS/cHedcKaZ414P5l
LeUtkfovf/kc5S3ZZAC+faxThPF7Fql/sn88RcC0SqGvDLif/LCI9EsGqPTZ
9pnLFxRBtf+G29sFpesj+ua1OlgEP6fdHLVhjgF+XJ50u+KLInC0C554/z8D
8T35Sa9rAD5sNH46H9H4bOGncWag/agf+fvrGeAZ25ZK6wN3i+tpwLiKC36K
PzBA1KEBo2PqFIN27sNIj/T5Q0yd4y5Gv7PhBviyz7n2vs7F8PaNTTvH7zOg
X8bIYuS7rmLAdWNRMe2bDLhv2l+MepiZBkjhisRi0o9I/f3gkWdrygfgU55g
zgDd+cYjgPO8ND/XlnYln/kCYJ5m2fLfeAP8PWpo1XNdAvBdBMtAR5+/JICf
X+qPPG7k5wD6KTc0wCqmFzwUwPiTuTTeXgRwvEn3E+3PQchu0lt6Gsj+HMR9
xw1pPrM2jh6zOgjf9mNMhFL/l3YJcXeCMLdOWhXvKQPyPVQIgalXnPQ0EM9K
iOwtBohnBboQ8UIYYFf2e7uy64cg+niu9DRAG5aAQlofedqJHw2Kn86xD6X/
jhkUP53RO6X/FhsUPx2Ilv4bZlD8dP4bKP0n3W/ZT2fRUamBDIOiR0W9Kvll
1iA94duEu5CecHU21U8l/rBsildOozwL2ZT/PQPYdvDfkbKdmvQU/mzKf6kh
mU3zsZYkvV8VWX+aDXcbsgArPclsyjuvJ5lN/JcGktnA0xXcM5HMhp7S9mXI
RjPJbHjG1KY9zCSzYRhLHxJvJplNesscktmov3wvh2Q28V9aSNL7f0P5xutk
U3xXMcXjZlP+lWKat7NxvcgMUJ7jbIyznBYgvWg2XOk629pP+n0nLxjx74mj
2RhPfZP82H+Rvs+tVVHnz4dg25L9Hwz6PBuy0zePfF/6fY8tfxQbaJQNL7r/
8ST/rxDclqrVS8km/Xgk6vcnGGn8p9H8boSnTE3xJJ14w4ykL9aSNJI9TUfS
iHEHC/QkjRQ3SvuwdCPl2c4maaR4QBNJI3Dzw3kzSSPytkw0kzSSXcJM0kj6
txyShKsSrmokHmkLSSP5WThJGqH69u7SEyBr+MnM4SeN8GhmgfQEuMFoBKX3
O/hZovQE+OmJf84TvxG6Vfvk+txXAMeSLx0oeGEEt27WzJ/PAAzvCPaG640Q
FdrfaOlGAPZyy/5GuPfR60qrpgFcOP0y4oNsI8UFu+h8a4RZPO7XBZxeQbrf
PP14tgv48VC6vxhn7IL7/HxshFuMjvKcC45JovVmI8y09v/3zHoX2JjobYT6
s90jKk12ARMRqUZ4Z1176emGWpwI0Qg3JzmlpxuOpnx+JOVzo+Lfj/HCRsxn
fdINltE30uevot/7Fzk+3ghJ2gqLazf3QKB9laY5q42wu99vP9bM8sC3dwY5
s1sb4Y9XG+Y+uCjtv170Lbiyw0h6UNlfgX6PvrnE70HYTljqD9x/4d9czCd6
xggb1rNHLvErGJH/RDpf8rQ8F6k/WfIoLs+Ifsh78tDfcooR4+w6eUkvZiSe
P6/S38LHk1E1noyq8WRUjSejajxJ/acsJ4QB/veRCb7kgYNRwML8qw80KfZ5
7gfvMSn5Qflx4aCJ/ACy0C9opIniwzQkTXCapd88pSVpgqacGFxLUo5TkfMH
S+PqFnvoSZrIT0RP0gTSYXLo5g4GkiY6TxpImqAKTyiSTdIEPN1I+2ySUn2m
Nl2aTdJEcaNmkibyizKTNFF+hhySJoofsJI0Yb7RP60kTaQXspE0oX3gvpOk
Ce0DPzlJmhR7MkoTlPGszDN0BqjwZcfRXfaZoH9Uw9/eLQK4q5s/qM4UE9y8
+9B4IxPg6PlrHx1qZYLWf0xatqMqwKYxKW2+SjABD7u8CcQTa4IIThALxBNr
Am7GaOQC+9rYLuafTcDVhtJ4jGPmvF4myrfiBha13OIrE/lRuYmf30R+2m46
/5koTtZN50MTfLc64aOCFtJ5hdHmrjXB31G9/5ih9cD3+qtjcqT7WerzrfXu
lfdAGUajW9mEcR2XPLjf+t2EcRzS+OPzcWcTjocRHhwP0vtzv6aPcnGdYf2J
6dkducCHy2ATnpur5GK+uxipP14vOVv3Vi7sOfDmRvsxE1RcYMh6/XsuVA10
bf3yaxMs7iRVmJkLzXgF6X79/W0v6JgHaVMTrpTsMsHYLdPzFzryoNbnpnEh
qf2yq+bWrhKVB299UJATrTOh/8tN6XxTWGN6Wel+c/+XHXnQ+tyb+aO+NKH/
y4w8ePnJrQfvmk3QnNFr9/USr56J/C+8aBefY0I7ebqX8qSYyB/Di/XeM8Fz
ZlZ85oVHbLvxUBofDJ7wIq/WChPZx73QkxNgmYCZXz78zgvLmPkl0wSs2Nwm
H/mxfjOhdORTXkcTsKzoC+vkA0/raDXBzxVZxoV8aMAVgSbS0+aT3tYEX/CJ
Ph/KcuIVE/BlYFg+5W0wwVttPh75ZlcfRPx2pkrpQyZYPXjOwAM+H3zwIvfx
rAkmaDnjWPcfk32wzrzkpKO+dH83VmrzcQUfVOzHrjAhn8FdH/E9mlBvvt9H
9k8TnYt9dF42wbssDdxYH+XdlcbzX/En/vdpAaycxBy2pP53o+lf8U0LoPSh
FdIrJvil/NhND00FwN23epigYeK2pdurF8A8/7BWI7JMMGBFwlPj/yuAB+2L
pKXRBGy5tJ4rAL5cbjJB0p0vOsLmAgicKr+7RJovpdWzZt6MAnglrZ6jpN+b
H+cHUp4taX5Ffig5z7IJ42OTKY+v9P3lPHvIw25SeF7lfQcL00j5NKjsC9H+
HiT7jIn0fiHUx1wyqfbXJtX+2qTaX5tU+2uTan9tgrefD/ttVlYNyhdqJjt8
Fq2PhCMo/3wlwpM1JAknEE6QeXpkfwMzzi/SuRelGeOtXQaSZjjM6J0HG0ia
cR+wjvQS68zEr2cgaQbmZf1HUTZJM3xc9Yutf83OJmkmfzYhUW9G+7FvzfBD
b5aAwUpSjtMi/vytZojhimknSTNwNfVYJ0kzfGFgxEROkmbQJTSUngCdCud3
LJxvhob8BQCGOhaaKQ+qj3jZCM8QGPmzCtC+1lja5zN673UFUKY880yjzyfn
QZXuZ/an38DBY4XQ7V7toXOWmGHOknL731tYCEyLFBcyYxzNgCKwc4crs5IH
CvcTZjpvF0EUP2+b6RxOeb1qmNF/+HYRSIvJiwcnpH1vBUY4VET+mWZI6tum
bosJRZSPyoz6hH6UV+GOGfUNQT/qFWaacb+R5KfXzVDhq54Vvrrnh/fevVjl
3Ytm0ov7yV/aDPwYu8YPy1ialQ/NwI+x3/mBV8syQ1Ru3XWj+hWDbqStZ4T0
fm1nvB1buWUxbDGzEjMsePR89ERXMfhvPK6e9IUZ7vB/iuHU94duZQWk7zfv
eJsZbxdD58Jl0iVm6MLcyJ8Ww/5PWeSVGQIszeGpYph+6sh84xqpPgvH2CTV
Z/U+NUNNXrEYX7eZUZ/fK0Bx6WbySwngfZlixn1WXADvQ74Z54lLAcpnacb5
ZEOA9LVmnE8mBCiu3oz+V72C5H9F5fWDNN+Y0c6oCZI/iRl5KqsEKY+DmebZ
IGxh7oS/mUkGKW+5meZdOZ7bTOtEiHiJzZhfPTVEvMRm3PfVDKEfgPT7cFkp
BD+zhSbZTHayEMbDSb8vU+et7hjC+ySNP+73H6I4TI8Z17t1IejIFrh/zLje
TQ2h301bs2q+M6vmO7NqvjOr5juzar4zQxYn1kiAGpz4Kof8ExOJ7zaH+HWS
yJ8ih8ZREo6rZznA0/98mIz9NDsHuGiSAhumcUUM6evTlHmHnz8a6knmkP80
2T0X5wAbBVXeNZCU399AMgc8jI91uIFkDjxifKxbDCRzKA7ASjIHjk1iDJE2
kjmU/89GMof4Vu0kczCOdq+TZA76y33pJEl+hEB8kpADHTmBC8BuA2MazwHG
VjxA2q/quCN6Dp0D/cDFtRw6B/qRh7ZRDvpxnPJDPg8AzIGepZJ6llrgB8a6
WyaQA7FN86c/SSkGnn5Dul9e9vgjgPFoY3IUnjScz3Io70CQ8qDkoP1nDdl/
uuWgf9LdEHxWbs6hCZtz4NXSSFO7cyFgdMTDB+RAC5ZQaW8Iun3y/tX+0u/J
9x1n41Bv/68FeWfHUn4Yr4X4SxNwXR9nIf7SBOC7uxMW1COGEineywLcDPdO
Et1PC8zZxD5YEukPLTC+y4i9Q3NTiBfPAlxEJBMvngUuve9LuNYpjeIlLPCI
+y2kwsBmvyeNL5T9OskvKcpC+wTyY7lkIT9eLUkL5XPQKXkdMJ+DTsnrwO1E
mXqSFtKz6ElakN9pvp6kBdfZS3qSFuRRrGAgaVH0rigtFJ9uJWlBHvCVVpIW
0j+Rv6T0/uN43gAbSQvaL3bYSFowbtpuJ2mBDVxfZSdpgTi+kDlJWiCSEwY7
SVqQT8/mJGmBLXxgAXzO1x0L8GWqCmB+mBgL6tH2kn7UKPNQyXzgVtKnxeL9
C1jxPF0/Ds/TC62Y32dVPJ0HrHR+SEBeug1W4GrAI0ngt0dtaXXTChuPTLx/
el4i5tFuYIUeY9rO2TIxBcxezcHzu63wqP/K5udqpMBza7OMHmOsMKBDmfdf
/ZAMm7XDvn4tvf/rQOM9teKS4fOkRVfGvmeFlyx8Ylwq8clZFb8rPP9bgacP
TdGQtFI+eC1JKyzkBwotSSvmeayoI2nFPI8+HUkrcHXDVzqSVvjzD/bQkbRS
vhC9kjcE84XolbwhVfnB0UjSCpf/HFfPOURI/Pw2klba39hJWilvqpOklfjV
AR7GsxnLCkuHHKg/NAug5atZP5VqY4VI5lj/SYj87K2oh7wTSTwrcp4lOd+L
Dfj2+XoM6Vts8PfpqKoP+8XC1Ttvfz3AaoN5sKRNSigOGs46tqzaQhv66/RM
oDgWG7Cw2dHDkoD9zdtmg5EHPNdjHiVCrvS3ykAb/DPlkz3rOiVCL+nvGZ2N
9CLJsO2cNnt5fxvtczOpn9mgEQ+I0JC0wVoWT7BGQ9KG808lLUkbvMvnKy1J
GwxkE9h3WpLkF35OS5L8oH4hv6RfbMQzpSdpozwPBpI29Lv4N5ukjfJBZpO0
waUeDcfUfG0kaYPrf5X+tu9SI0kb8HSwrY0kpfcr6fhDWmUjSRv5RZHeZQ3h
PMJ5Nmi/sdnM3PlWkjZg2TG6m6wkqf5RIZFHz07SRvz3TpI2aNoh1h4aQP7s
D2zQ+dd7i7T1AfZ9fLFJB6kfcrqWFIA7kUOyExvYkCf7DQD28o03begvYwiR
Pxv1J5k3I5qwnK8EbKRHjsJ9Ra6d9Hv1qL/ZoTcP9I+GHJa4spMdUj9l/8Vg
XuTDdtg9yS89E+h8Ygc/fyGezid2WDjj7PZlfyRCI/4F7NCfG0jSyV/GTvuG
DPKXsUPtjxmzbya8azrTc8c7dhhvY8y+meCrO+DyhHw7lH4rffnWUlkwrGxk
07ZD7dDvZKfvWvXLgk08z4gdbi74ccjzG1nw+HDQ+Ur6/JW/iT408E0NSTsM
OtO/aLZTQ1Kqn7r/9z8Ha0jaocmARMe/GzUk7cgTnqglaUf72W4tSbuqv9qB
f2yTjqQdz5lP9SQpb/RkPUk72iW0epJ2+CKDEZtkk7STX2M2STud940k7ZRP
00jSDjwsx2EkSXGyc0lvOlf6/XgCZzNJO/KolBKS89EMFJJ/rvtCot+xk6Qd
ej4qkx/sCXDxesVvZl6wA7PqzyoGmFFudVeYboe0qsti76cCNI5vnXfpf3aM
f6oAGP9UxY7xptnSfpqleThmx33FHOLV+tpOevWaZEdzUH7FOpCyr++YSy0d
kFuKZWCsCxO2ModMB/A0lZ/FAB9emx30O8URv56D/FRj0R7qcpCfdjz5gTsg
tseuWg++TIcJpsvvDPA4wH/q27VzMzIg8aOCFoemOKBvXqv6TY5kwMY5Sxem
3ZTjLDKVuAv0g8kk/wQH8PDPT7LIP8EBt8Y0+nvJPi1JB2yb/6pjxe5akg74
o3jq+aOXdCQd5PeuI+mAtesqSltLHUkH+cHrSErvv6dD2rByBpIO5PttZyDp
wH3IJgNJB/JuLDCSdMDGKV9Mf+U2knQo8RooHUo8IUoH2dGdJB1Q5oPKU+1t
ASr8XVfz2VYHDO79aO9BE8Dzq9en/9TDAf+VnCz9QWVp/npzVfm/6zrQr/0X
4klZ6KA4nkiK63HCn5WGT+i3uAasLNVubp00J7zPHc1qws6fz/cuksq5XXFj
HeIrkuM8opW4D/SrjaPxRriQ4rISnLCZpbNcnAo8rWNjJ+aRbJkG/Jiw1Amm
c/X3Ppf2v7XuLvzgVZQTqnSsHhk3Ox0qrHxr9ISQE27cONO66N0MeNTn42UJ
Xzlhe485C3p/lgEXTQcPr9/shOmPO9+bfj0DpEaeFj9yQhp3qMokf24nsHTo
j37KIn9uJ9mByV/1byd04wdsDUkn9Hhav1X7Y1qSTni5MFPbbbaWpBO+bvZW
2T5Sf0Ip7UMrXT8xyKQlSbzST3Uk6X5N1in3B+chHUknjrscPUk6p8l+ZVud
wOn7WxlIOoFvP/81kJTKf2jcv/nZbJJO2LUu+p9hY7JJOmHj4ZuBRdZskk7o
+mT544+2Gkk6Yc60b9bnfmok6YRT9u6Da2mMJJ20L8sh6YTmzyp+0niIhSTl
dfnBTtJJcTIOkk6Ko3GQpO//CeD+/x/6vl1ovZxFeJbsT+ekuKjq6A/QEaAs
d0Srh3nhuwHZdetAJDMn6QB42HUwBu0WDYH82KPRbpEAcCitw4s6m5Ph0V8n
huRL+8Z/+7P/UkB6Ube2DUDl1WdbzEtJhTIfPWnctRLAYsPOrK/Hp0Ja8f2i
2HiAgjWLS3/0JBUaZNyC03aAqzy+J438TQCGrf1skWFnGsy6cy61WPqeJ1vU
mr/+rXT479iXXf8tBbC2HfMASgfudpoGMLFz1MHyjTLgcjPvozf/J/vNUdyH
NM5Rz5KJehfpHMOnhRMa1Pt1JzyVsJ9wU8LphGsQfhsgZeP55I3ntTDpbA/p
CbC/7Yh9bUdoKS4eoA8PhNeC5YsI6QnAvC36/65DXrj2AFsaHbhZVFYPbVK7
PJ5XSr7fZK9PkuNgZb9wgPI25mGphzJ1PzdfkO4Hxg0b0N/OA7CK2R92ZWM8
t/T7lmH2hpHS+sy0/bnSuva0l+dtXzakDVofU066/wuyTyf9Uj4bjky78/7R
0gCF/8S9f/0HI8y7P6HiowCAbui5n7vlGOF7uHtkTW2gfM45MJkFjDaS/b4t
ih84V/NNsYCf6/2A7Nl28rsDmt8cpEcHihugdehjIL0hyU5AfJYkNQB8m1fW
RZLiUvtRfJv0+2FcocyTBuSnWQPjDaYD6fdr4/UjAJ7d/0c6OSXBkJdPpf+A
9tXJwI//31Ee6e3JqB+QPgfqVVKAL9u7gfKCpmC9S4Dx5ndScF1/Aeifq0ul
/TIAP8buTiW/XYA0HjiSRnkqKa7xaAbKx3S/fkknCZQfPAvtr1eB/BOyMC/A
XiA7ViYcLSO9sgrIbyGTrgPgbmlSf2duakm3Abgb2nANrEi6XfGz7UD2TA0w
a+a+qQAsfUe5rlpg2v0vVtPvkqAj/SWQP50O9bnS/ePqTmm+5v5zL0Hx+0W/
AyDeWz2+/p80fpmZ9oUB9emvpH3YEUbMYUB9+hwgv/Vs9GO/J50z7JdXtp+V
jf5kB4D83LPJH1vqJ8wdvm42+p+NA/K3NYKfTWzjgeIHLUpcIM6bDtovAupp
rgvJ7bAbhOR+M2OERDuFi+KB6PfrS/4KNwHjyUYS76f0/qhnTkA9dBsX9Nhb
efSkoYnQ8uGO2E7RLtiY7UxvUC4JX3e5oPzMj6X/kmDYghYPd7R34eeNS8b1
sIKL7ELJwN1FMl0oAylYryHV/yeF8k26KJ6I9LG9CBek0rlKrp+h1N/Own27
Z1C8r4vsTunA05DaXWSnSse8pfVcwKzI85dkwb64Rj927eaieOAsijN1wZNU
ZnjOhN8qMQOzi8arlvyeXPg71Kf1PtmFr1/T4efq7SJ9oR71hZ1cqKd9R4/6
xHIuSPp84pbd5w3A/l7u4YL/tU/VTp5qAPa30O+CL/K2zWlb3wDs73Kp/eXJ
TaulVzJAU07Y5UK9wYps1E81dVF8dTbu29JcUJpt66pYKb7ABZEV4u40HWqF
t9i2D1wUx26leAMX3GHhnlI/57KfCzrtZynsAaWO7neHkPL9+bQ5OkTzqYv0
I3HIq37GBX8s8FvLd4uHBymH922bJvW709crj7gcD/8Zn3ti1rvghoRKtU4A
hkqOu0gmwOuQL/PCYxfo7/XpNqRpIrxjOzut3hQXfN6UZWRLhOjIlNLBX12w
h+Vra5eE9U5I34+9fDUJvDyRmwvz3s9JQ/vGdRfa2+ulkX+IC5j5osaMVIyT
XOBCe0aNVIyr+NJFeb4zYP7KzbdK/nXBstIbtMF6GXC75OO/D0vX/2kbvHra
8HTQBestSZztQj73QBad3124r2+tAe7+toz6T13qP+NcqBftosX5fzXd31Va
7Fcnqf5rqv//XBRPI+0XmTvqHhdwGKEHK4OjXMC00WndDbCDqaHXuuh3t2Kc
yXAX/c5Wii92UVyJFeNMpPvN4ykGOlC/u9kFiZMr/zPkLJB0wcS/vvpky1Ig
6aJ1kOS/LoUfAOdPGg9fCYn2d5mn2oV8jTNDwN2ypPdD/X0M5Tt0g9bVf3L7
YbHgP9Bq3tRoNzz7Ymz+w/Jx8LrtPwdfutyw/Y+fpJfiYPn9Lq/bdnCj/0tB
PMblVnUTP3g8xTHKfmoJeF8DbuKZSaB5ww2TJrJHCly5LD06uiGCP1Ioz4mb
7ILJtK64oQZ/JFNeFDfxiaZRXhY35VdIpbwsbtLjk3+rwqNJ8XXS54s+WEla
WTPRnhDrBh6O/2sWsFX46UduYKfnTTEaYKfnc1Xc0IonyNYAOy2PsriBlfbY
pQGpdLxJ+vzMy2hEJS1wd6OybswX+IMWuHlH+v74O+soz4gb+hVc2bGujQ42
zn3Q7kyWG0I8wE0Hyac+vFf7Tfq8JXJcoJvmQyvNB26KA7XBP4wOy+Gm/uAg
+4ab/JIpntLqhnpcgQUopffj8RDSvI3STfE/LpJuyoPrIp4JN/m7C8mXrREh
mMDSUrzlRn/r6dGUj85NcZEx6Je+303+5zEUT+yGYb5bZbv3joWYQwPfPD1D
ur9Xvn+67m4sNOX6KjeYeYU44Oqu0254v96Tsw2ux8HOPwf/Wu25m+Kg4mmf
4SY7agLtM9wwZMXl6kVDkjBe7P93dR3gUVVb95deVGogBAJpJCGBFAjpmdkz
d/qtAo8ivYl0RMECoiCINEU6iIAKAkpvIiBNQZQiiIB0UKkivUl7/zl3r4nf
c758WXNnJpNbzj1l77XXOu3GfZOIdbYbdWSJFKmKT053gyfcAHlnN3jCDfj+
+c7N9SjTk3m8WuCGrlEy3z+j3VTVDgimQLffTffuykdD2vyNfLjp9i35aESP
H8mHuL/kss6dRlKlZO5EN43KTXXG7kuj2H0/mu+tdlOVHlKxJJ2kaslLh0X7
mTq3co9z6WS//LebpA1Zj/mZFC8LXn52k12W6sqkZz/9/tWz89z07r3tQ86K
9vat+H39lJvWHGvz15LBjel58bulOP7fvrne4bX0xnRD/N4kjp95Fk3Au3CD
Z1UA3pU43jf2nO4dX0jpReevrRXHN3JSgbdij0Jy//Dxp6PE/obj3DxPddOB
7bUqh64WUs+zT5erf8+Nuoqi4uvF8w0H6pfDf+8s/nu73Z8J1zNhu5Prf7cz
wvpgbsRtXMV1R/Nb7bxb8EY01p8KHb92cerKx3Wx/lTo4fGStb9JjaH/3t3q
u1ZBoW2+a2P3TI+hFQc2xt2qr9DolcceHC8ZS12WrHtylxTS6+zs9Wf/WKom
32irMB6PpR2dxQcGK2RJWZnf4qi6LTij4DrFY/2ugCdaH77GCvsdH0rg422q
QM8igeyPlVPodvaltK4/JtE3+obdMwaK/ZvYp8reNkmUkdDW83JLhd63CZGJ
9NmDh5v0fIXEq4fnvZZINQ/MbppcV6HkOXfXVyiXSGMXFi0rUULsjy0E1wA8
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
RhY=
       "], {{
         {RGBColor[0.1, 0.1, 0.1], EdgeForm[None], 
          GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
GrcK+wuEzsXh/3xhP5tPFloILYUFQk/zf6Ux8MGaMWYeIXOJUCoMETI2DxaK
bT5aqBAqheFClVBDOEoot9tQh1EmXCr0cHwVuREPY+xJMu/qNB1pv/CfKDS3
29cuS8r3FKed/KdVJnsqv+31nah+H5H7o6mY799lGc+V/WOijwv/CA8JDwv/
msKTlw532uHPlnv4t7nd3CD8LTxo/i9thyz/aHlF3r+yHXV/tdLUj3mu8JfM
D5j/d7ef+4Rz5bav0Ek4z5R6OkfYR+ggzDTtKMwyhWe1/8H4l3rc/2BT3Kfe
7Xa8Q23qqJYR12+2I+7H/J8Gz6Hu53KFpZblQZZ36GDLPXSI0F7+Ple9fSE8
nI7/Aeb+D/l/APMeueG+TdgzN+iXwhmSz2eUnmHys0I4Sjha2Ed+tsv9a+ER
h8e/yCyho7AvVH52MEcTOuSGX8x75UbYXwm758b/AOl7UDwnOE2dZP+t7L4T
5qTj/5D/xbmm/CMuFQYKg4TxSucDLeMfsW1ujJ3MEXbLDcr85VH5WVA/4njU
6aVM2+TGmMo43C43/JKm6tywI6zR4rtX4R8o/7f7P3mccFs6/nsx9xD+TIXs
9BDvn4znQs/coIxtrRXO3JYhU4T1m+WrUzrGG8aZ/dJBGaPIW9r/vQfnxr84
4VLG9F+MG5Q1FP4O6Wh7uO2dG2VMPfVMR7poE4enYwxj7JqZDh7Cu1UY7fzc
Ioyy+Rzq2/5mpOM/HnOfdLRJ2nHvdLRVzH3T0T7zXT8p5+GwdLRt3HqlIy3w
HKrvHLvNc90y17hQ6Oq6n52OuU5Xj+f040s9rswTLkrFGL/U7YAxlTGM8eoj
0yUeV+aap6/KJ0/Iz42+5FRhSirG5KvMz9g+VThNWKu22Ul1N9P9zhS70R+d
TD+XinH+SvMzp1kkLHafNFQ40n0NY+kw90nYMb4ud3s9IhXj3BHmoQ86QTjR
fRn0JOEw9wHk4X3HQ9y7Ssa2K60LU9FfnuT0Mc9a6DQ96vROTsVc7FrHv8Z5
PZ08pENW+glXpqNeMV9tu/7CEmGA63nf3GjrtNuLXIfI+PnpkGnmjPvlRptm
jWY+Mu12c4HdqePz0tEe4DnXfQnmaxwn8S22PJGmRemQIczMC6cLM1Kx5kS/
Tx/PXPBsuz2qstlD9XhGKuYu+D0nFbLF2MB8EBmHj3nBZZZXZHyhcIjjow3g
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
20FZs6jtPQvaIWvwrMVzNqjEcbJ3x3raMMeXsR3hsg423G5lThdpZU1shN12
V99+SnXMRVlL55weei+sr6Kvht4a66+sw/7i+qGt0oZYf/3Nbuh/b2kV+pl3
2S/frEfT5j50XZa6rdPe0PtC34s13N8dFv7QfcINOS53/0QY6FPhhgzCh34Y
68esI7MmzZoxa8esW7Puj04R+wC0GfQt0d+iHdAnopt5v92zewh/OB2sg7Nu
nl0Xh7J2fp3Dxu1Gx8k6N2vorLnTvyyz3+w6+id2o53T5xI37Ya0Z/W3oOg5
ZfXHsvpk0KyeWW33x5Uq562tQh+b9lHmfp12hY4cum60YXTk0IfbXWNue2G3
smjPtdyXf1Iadm3LQmcOv+jh084JA37yg34a5U6/UuG+nzZd5f6+ptLzeavQ
2yff6LahS0ee0XmDnzJD3y+rCwjN6gJC4aGc4IOHvqOGxw36jkqPS/QrNT22
0H9QZlndOCj66fShaY9v9KHFHqPoU5BZzKQVPTV0IdFln2EzOmTn2Ey62Ftj
jw29spl2a2e709020Hec5zaDztjFLnf21thjoz3Ntxv7f+wLZvcDL7Xbgea7
yHUAH3uT6O/3Mh9y2sPh0bbQH0VvlLZHOjAj4+hoopuJ7Pd0PNwJwHhGWOg2
or+Jbir69JzD7V2y804H+hp0tTmXi1uu/WbvPDjUbt2c77mub8oje2cDlD1K
xsJc89FO9nF50246uLzZr8kp2XmHQVKy884DaPY+AyjlwRhW6LzS7ju6fhhf
80t26m7mOe0Pmu8v9xnso7I3Sptjn5S92xa2w4zcj3f90cbYL2VvlDYxwW7V
zh/7rW0l/9+0ij1U+o6DXJ/I4vHmb+542JumX5vsdOxiO/zVahg6iuSnjcPO
3ldxqnk4o8xZOs5ysSbRzv+L/KPzD8k/Jfo236BTkQ4dHeh36dDVgX6fDt0q
6A/p0LmC/ih8Wl/tq1V8o2f1N7oN6dDXgv4rNGYPR3RLOnS/EvZwikP3C5pb
HHo/O9KRDnTG4MNfI+GNdPCznr5O9Kl08KGXgq4P/FD0hPKKg6I/lF8c9Amh
oDjomnSs2UOfTMeaPXRtOtbsocTRUN+vpyNu9mKJ8+l06IZB16dD9+sZ0Q3p
0B/DDjP6TF+nIz/oeL0j+q7wcjp0M9DVeNFn9znvv9GUc/2v2B09nk2m6PFs
Np3nspjv8/KXq/xfbxk6BC85DOJ41X6xf8G6Aec5P5eY/03xZtBlTke9oVOE
ntNhrhPKsklx1Ntbwi7sZaUjP+itkaf3hKbF4f626wwdJ+oGnTfc30+HPtsH
oh+mQ38PutXygZ4VPOuUnj+Ul4/03ShXac1RGnNCH44wPrAMkW/0BtClo+yf
FeoWR3lRTge1kZ/Gkl/91+8lTBfOFvYWZth8oHCxcBFrBqbzWFcwncu6gukc
YXdhmnCGsI9wjsNqL5xptyWKs5finq3vPR3nWeylCOOFY4QOwkzz7yucK8xi
/0R8fcX/g8bWo0Sbton4vy4LHuI8TfadZT9C39+VRf46Cd+URVgdhR1lQeGp
LYwWRtltluOuKYwsj3C+LYsw4D9YmC9cwj5VbpT9FqG+0z6OvR1hrDCmPHQg
n1N5P58OPcnnLWvoSr5gGUdn8kXLeM3ioMhpreKgtInaxUGR/TrFQanLr6qS
ZIWwUqhXHHWLXK+RnPzaMr7RpaT+SUc9p5H00d/399i2q8wnCSey1yQcK0xg
r8mUuqnjPFFejYWJ9tdEOM7mdq7/04XdTE8TmgqT7O9rpfVG4SahueM8Qajl
eqDcp6seZzWONFFms9w+yQf6Y+iZtcoN3X7uKmAP+Kri0Llkr/dKm9n7XWwz
e8NLiuP+F/ab0b9FH5d942vshv4Te+aP58Q+Mzqr6MiiE4Xd6pzYe8YOvdut
jhP+t21HuOxtTxdmFMc+NvGg18u+9CKnifNq6Mei88r5tSNs5gziEJtvsDs6
tZxHQ892RHHs2Y4URhXHmbVhduN8GPq96Mi+6ziJj/NqJ9lthcNDf3el6TCX
C/uynK/Z4LSjh7qr/q0OaRU6xxOKo99nzHm4ptK9S9xbMF7mBnY7XmhWHH0h
aUSmkeXj3FfSFx7rMBo7btoGbWJscfRT9ZzPGuafaL/wn+CwGTc6KG3DlbYz
XBbEQ1sZUxzthLA4E4HeLLq2zzpPM13fA5xnzj7Md30/Z3d4ON+A7jS61C84
DPR0kS30udHvHe0461gO+jvcF+33fPtlrGWMXeYyRpf6WlPqe5XzTJkxj0B/
En1QxvtVws3pmHdA0af8we7oj/5oeodwr9r+Ny3j+3t9r64f41ZTyfBbqqu3
c2LOcovjaJYbdv8TdskN+o7QJDf6Nnia54bduzkxtl2RDt21tzzOoNPGHIG7
kLiTibnDaTa3zo02ik7sWrtzl9I6U+6XesqUe6cYr2a4nTNf4M6p6R47iQfd
uKft92z3azPdRzxjv/DvmhvpfU9okRuU+7QYI9E/RB/xbss08sgZzPE2c67z
GJvvsTsy+KDlD930W133yNoDlnvcbrEs4nab3ZHrh8xHO7zX4dEmOL85yfy3
2++44jirOs7p6GfZYV7GfAEdRXQW//F8hPnBu66TRZ5DkL+rPbdY7DxvL4tx
knF+q93Rg/zIFP1L7iDIs7zeJNn5omXoajM3nOp6XST7LS1DZ7plrsuV8zBl
ETZzii/LgjLOf1IW40Fbxhl9Pyw8JDwm5MouR3hc33nlYX60LOyS8vD7r/CP
eaB/C4+UhTtuDYUJwnjhQbv/JRwvPCDcL5xoftxPMMWtgfmOsRm+P4X7hD+E
34U3ymJcZDx8syzGP8xbymL8w/xaWcxjmAvU0NiVp3lIsb5/b61vmdfIfbWQ
Xx75vK0s5jLfO31/Or5v5f/XRqp/fd/r+H+jPBTGT7jp+62yGFOJu77TPk6o
K4wVxgg1hBHCcKFEOEIYImRMBwtVdh8mtBImC6cIlbY7WigTjhSGCtXCVGGK
UOwwBgmthVPNX2q/xFfOXM389ZxG0pc230DhGuVptPJboO+Wjv9koY7zMZqy
F451HbewO3K0qyl129yUuj1Z4V2ncCfpO+V4Bgg9ZX+YcIC+awojXUa1Hc8o
oZYpbm8LzTx/eb0s6p86frUs6pn5VM2m8lutvOo/sYp9v6bxzf5Z3crYBzxG
7g2axr77PeWxn8Ze3N2m7NfdZcp+3bUK/zPhU+Fg8X7VJM4ELLMd7Wmp6cfC
O8rT1kaR3uuEL4TPy2Ifr15lpKNQ8RcL6crYm2X/skFl7O828n4m+6itvR/F
3i3u9Svj3ECe9744x5DrPUzOIuR434yzBoTNviJ7wPAR91rvNbKf+Yfy0bc6
/OcpLUdWh/1NZTEvZy5/oyl91UpT+pVbymJOz3z8ZlPm9bOFl4WXhFvdnvC3
qSzm4sxbXykLynwfv7U936xQm6rbONrphWXhD/fNZVG38BNuLf8TVMtvpk18
z3Ec8Mw1D+Z5ZSEfmFc5jTvcZmj/9HPLXT/U8Qrnj/7yemGb62+U83yz2xZ8
j7l90D/S/21Snb/bOtI42e64nVYW/c0Tbiv4pR+dajvSwRkK1jlY4xjpeEgv
/cFNrocF5XEOj7Npl5XHWTrMN5fH2S/OQ11qd87ufaDymdomzuudIvpq4/h/
45+KM2ic1+JfkTNwnH27tTzOnXBe7ELbca7tHPvdUB7/ithxTnC+4+FM3G3l
cU4F/jvKY1+c/fAl5XF+i/NiMxwG58j41+RMGOfFdihds9uEn7NEt8q8WN8L
y+PM3TvCFaacAbzT7ZI4bnc8xH2L005ZLGWcc9yXm4/y6lke5Ug5XeK0c47v
YlPOEk5Q/HsoHYPKQxYHl8f3sbI/rnGYGTP6CoeVx9h4qHBIeYwN/Kvzj87Y
AOUfnX6C/zHG3VzzwYPM8a+OG3K2R3n8oyOPUNymu8wor8Tx9CmPsRbauzzW
A0g75xxZA9jsep1nO8w7/J+3SujhMqAOD3JZUAaM54TXqzzGv4PtzrgHJW+M
jfDjxtjey+XKWA3Fjf9G5HKVy26Z62SU6wm3tm4btAPW6U+3+VS1o6mNwrx/
WbRt+oMD3LYxz5P7pY2ifQ9xG6afZlxZIlyDP7nf1Tr6JMa3Ze6nB9sv5jbu
C2jTN8r/U62Dt6vjhHeo+wL68qPdD9JPjHYfR78wzG0UN8bJ2+zGGMvc4fay
GP+YWzCXeUBxvdA65hSMxzc4jiMcD/kZaz7C2iC/tzSKMXe9vlc1innSQOeJ
PHeQbHZpHOsHa0UnSYYfsLwsdBtC5hbZPNbt5zbL0xVuK71NL7McXOY2g8wu
Nv9Zbruc8WQN4w6HxXrEra7j25SGoW2iDxjjeHBjbeZO87CmwNlfzvy+Iv8n
tonzwqxzMB4zDrMewVlh8sIaxz12Y/3ivvI4FzPRFLcR7jvpN8c7DOJbp/DX
N474WAfhbDFxnej4iYM1kiftxhrZuvI4G3uGKW6c22Dvij2r9oWhh49uejt9
f1oQOvTZM5TZM5XQ7HlMaB+fHenqs0Ccy+phntk+Q4Qb5wM728xZVM6kcj4w
o/n90+oO1qOCy1qI6BNCiv860XVJnCX8vk34z2MdJQl/twtjhXEsf8r+qSTC
+q5RtAHkn7OFnOPk/OaQnIivJCfOknGu6SCfMetu8yW2O9jn0LrZbb7tyNtD
jWL+zVg41+dm8JfOifSSjjkuD9wYI0/ymEn+6ePp63PQD5Dfx5IYz1d5vMzO
UWiHO1z/uH3nNpqdj9zqNpWdu+D2lds0/Nn5HP1Ddg5EWB+7neG2ze2VdvuF
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
V5y78IbIbBX75HPFvdxtgDd4+JfgH2V1VZxd4KwE6zG1hNpJvP+DO/++t5ry
7z7M7QNxG25aQ7hOsresbYQz2mHUEdZXxTkDzgiMsN+aSazfcT6Rc4ojbUfc
vBE0wul7vCr2Skkf9xYf43rdLPNcYR5zHNOLquKe43H2t6EqziJwBuE2p531
nttN8feo3E6pij3brM4DaXrMdsT9jNNOWL87vdTdpqo4J0E62NfnH5J/SvbI
36oM8zWlMWfiX2ej/6n4f3rJlP+kJXbn/36pKWsby0xZ/7jWlH9y9q74x+Zf
7WWHwT/WRZobfFsda1BXy9zPcdMGGnqc7u91PtYQ+SdG5pBB9kb4n+d//UKP
84zx7Lnx38j/4mX2izy+4jhx22x3/o9ZE7/E87yJnhew1nCN0vaH0nax56Pc
r8b3646T/+xXHQbpeMN2/Ne+UhVniSjrl6viHAnm56vizApnSVi/5Owq51Q5
z81ZkJHC+ZLJ89vG91p9XyiMQR6qgnJGgPuRWRdjnYx3roZb/sYqD3WFekmc
N4TWT+JMXB273Sv+iVVxPuJGhwE/58qHOx3cwXyU43jNcsq8h3Ucxt6nhEHJ
f09Lon6f5DeJ88qc72VtC3fecmfdC7qes1IeJ1PCQFP4Oa+BDNK/83/MW+C8
y816/AMeF5m7M/4z9rM2RniM8RepbOa0jbMS9zlPnFtBH3qY80PfwZmMoe5L
htiMTFH2nPO433ycl1msMBe2jbMkG6viHA/nel6sirM+mJ91G53psZmwOQ/y
nO2o45fMR92/4DqHn39u3jinH+e/nLxivsFhcDZkhtIwq22cL2MOyJjUz+MA
lLNX6Kgf7XxeYzv8D3ad0Icudj/OOHalKWGtcDzwM4851P44H3SO55rHWHY4
P/e40jOzWZQdZ4O4u5O95PdV78dXR7/dPSf2kDmLcY4qeh+hg3ChJjldhf2F
OaYHCDPt3lGYZbqvsFA4RDhUuELoY/P03HiblndTZwtdHO4M2/Hm7eXy19s8
59iOt23Pzo13c+E/Lzfer+Wty01qEBdrEKon/2cJewh7CmcK7W0+23Z7CTOE
vZ23c3PjTU3COt/hdRbmCd2E7sIY+asj1BUusDvpnusywN/FwoHCQcIlprwl
Oys33ugljrNy4w1g8nC1wuon9BcuEroLBwrzhG42X2y7g4SnlceZymOVvpup
Q3hS38v1vU24XrihKN4yLRFK/d5pmVAuzJHb/sIBRfHWaandeAc1Yx7eMS62
+TL56+U6uMTxH4wMCF0d1gKhp/1dJRzu/Fwp9LX5UqGH/c13GJgvEDoLXYTZ
poQ7LTfeKuYt5blOL2VxntBJ2E843xT+cy1ruB3lvFbw/qjrmTo+Q2gn7C78
pjJcoXI7Wt8r4CmK71uEUcJo4bmikGlk+XlT4nnBlLS8a/leJHzgPFMGjwun
ClOE94XFdvtfUcg07eA98+H2ofmudv0d6TRRr0OoT+GZosgPMvuEMFU4Tdhg
O9roabnxHjPvMK8vClmH51m7k5/VThf8S4WBwiDLzlDHvcx2g4VCydhdLUL2
r7UdaZrmsqRdfWoe3D9xuJhfLwrZRXZeKwr5xvyG7ZCFz8xHXs/IjTehqfsz
Xf+0E/LZVtiNPLgPoC1tLgr5oK2cbvd2zlu1echrG5vfLgqZpg7edPzI5qai
aBuE9VZRyDT+PhaWOD9bXT/XCFvMh7+pufF2NeX+clHIMe3jFdM55qF9DxBe
dXopi41FIce0g5dM4X+xKOQLt6Mty5XCSKGmUCsVb4+n3VZbp0KGSOOuqZBL
5Ku36u7TFiF3DVNRH5R9q1TIKzwtUuEXOW2ZCoobcdIGkP2mqSgXyq9eKsqd
fDRIRb0Sbv1U2GEmrfDRVhqlIk7Ku0kqyo6wTs2Nuw94D3xSbty/wF0L5Ocp
uT9NXpT+p1pEG/1GWCXcLHxrSnttLz/Pt4hv+i/knrbSOBVxEt94hdtAaChM
zo27UYibPo544CnS95Oia4ui/6DNkH/6R9oY5jz93D8uvtVCkb6fFF0rpPKC
rhPK9L1B9FkhPy/8PiEU6ntNbvAU5IUd5gb6fk30dSGdF2E8JVTq+3nRF4Rc
fT+WG3GX50XYz+VG/01eSV9xXvA9LZToe73oM7khLxstX1WpqBPkq20q5Jv2
WjcVbYB6rZEKd3jqpEKOcUPmCAMZz+RFPMRRmhfxkGf6rHJkR6idCr/wH227
SqFQ9muKoqxTqSjvdcJxuXGnBnIwJhVxk67RqQirjt8ozRPyhbF2Rx55W7qd
sHsq3tLezeZZko1K/ZC21/cX+r6vXrx7ynunuQ6L98U7CB1T8Tb13sI+qXij
eh+78UZ3W4d7uOMvEPqZkqfhqShfym+Y2yvmEbajHka57ZKfganIP224v8Mo
cnxfqzx2FMX7rDlO6wC7wzNY+fi2RbSDvvre1iLGf/Kww23lpnrxTnt3YZ6+
67QMd95i72b7auEj93PkDVmgL5/idkm/NsHthvu0jjXlbqeJptQZ6XusKMY9
8kN90oZ5C53+qIXLiXGLuqfc8ctYRFlCceOt9ebmOdl89EnHpaLvoB+akIq+
jH7lWFPaOm+r06/RF0513qgz3o1vY/PpHhsZY8anov8irGNS0X9hPsVxEtY4
yxdu01WGZS0jDcgW5cTYNdHxkz76EuadZzv/Z9pMeUyz+b78eMeaN6vv9LvR
vCN9r9+Exu0u2/HW9D358f40bnfbDnP3As3PeTuTtzTNg/v9Dpu3td8WLhMu
F2rK/0bRl4Qqfb8g+iJvcjod8NcqCPeXhceEycKpwgEF4Y94OvAeMG98Ct0K
wo507K/vnxzeHfnxBjZ520f22/ODZ299f5Uf5oeEE4WThIdNTxYecNpPEPaS
/y/zg+dB28HTlTeB8yO+t4QFzuebwnzhUuEH4TbhduF/LoMreMtUuFm4RXjH
dguF72x3q1C7tsq/edj/kR91RrmmFe860aeEzvLTWrhW38UFYfe08Kf9ko+/
TEn7FqeLtH4jrHI6yNsKYaXzc4fr43XhYuES4Q1T8va7ZeU+l/vdlpHfTHF7
TbjI/Nsd9o2us5sc99e2w/yjy4m4v3cZUHZdCqIcce9cEG6Y9yuI8sLMu/Uz
hHOEzoXxNjJvNvPOPe8o8yYz78bzDjHvG/MmPe8i8x7yY7bjHeOHbMfbubw5
faRwlPCqw+AOSt6lPtpv1vLO/ckO92HzYeYt6qHm35QX7zeTjlfy4h1ozHsX
xlvXvIm9l76/LAjzHoWhN8zb1/sUhjtvX3cqjLerefv53rx4X5n3lvctjPet
cXsgL95+Jm9bailNtSK++/PivWfcOhRGeLyhfZ/DwG29yvFsYbrwjOkMy9NZ
dqOtniecLzwnzBRmCc+bnis0KghZoR00LgiK3D0hTBVOE1YLU2zuWBAygTw2
LAiZg3/fgrCjrTyeH30APJ0Kwo66b1AQcgZPferJclePus8P8wbn4xxhrXCG
ME14Ujjd5mYF0U/RRturPU1rHu0yVRA82fZ2pstijfMBf+2C6Ktesb9p9len
IOw2Cc86fsqrbkHYkT7e3GbO9QbzpYKoA8qe/u8CYbbQR/b/5seG1iEFQXMK
om2MEcYKfWXOE/J5Q9nuucJhprjx7i/zPOIcXxBl19ByWiqUCRNs18iyi125
kFGZjGke76UfUxBlDX/Pguhf/hZ6FQT9RziiIPJDuLTvYcJwt3PoCKGtwiwV
jnLfcLT90Q8dZfOJcj+kdtTD7c4rfXqPgujjiLt3QcT5r/uM0S6X3uKbqzQX
UA76vrR59JH99L2wecgm/TVvWvM2Nf0sb1fzBjX9Ke9k8z726IKoY+qzqXjT
wiDiU9sa2jz8L0rFPIk5HW8s13dZM8/gv5H/wlEFMbYR1pO2Yz2At5/rCHXz
Yh56hsfpy50u3t8+yvVQISx3uqgL+nLe3uad7XEFIffUDX30wXYbpPRe2Txk
fIH9kuexBSGL8FzheMg/73AzNtdwH1dp88iCGL/JwxiXB/wj7Be3Va7bkfkx
jo1yfdxsu1FuJxcKc/JDNh9z+0auHxF9ND/a02z7O7AgxhXGnIMKgjIeHlwQ
9E/765of74Ej64S32m1un/x4u3umKW+DzzLd1+mAj7fBaTfET5rIE/3dRuN8
t0nqgfZM/0d9QOn/aCsb3NaROfo7+gnaJGnBTH80Lz/GRWSW+Qfzjk1Ox1y3
pQftttl28yzf+H3EdqS3m8upi/NP+jrbTN+0m9AuP/qqtjbT51bbTF/G++i8
c06f1d7meQ6bN9jPcBi8Cc/4f5Bli3nQLkLz/BjjD7TbNPtt73x2t9uJ9rur
sFxlMqQg+onrTOmH6Kf3dp0x/uxl87muq06uh/2cz4sl2xOEPdzX0HdSB2c7
T/Avcp9IX3iS428hLLYdfSdjS2uhjXCcwtvSPOyn2I7y2r0w7vDgXo9GedFn
v5kb7XYT60Csv+SErhr6bZzV+ygJM+en3hN9P4m7vLgXgzswuOPrYpu5y+si
mzkrhI77u0norHM3DffZ7JYTYX+axN0Mg+zG/RPccZO992Wg3VYmsZfPXuWK
JM5kYOaeCM7WcAYKnTbuWOJcD287cS8J95Fw1u0DuX+YxPtPC+zGOTDygdub
zkf2/ahL7W/3nNBRRO+wXU6kFzPn/LYmUS6cwyPsrPmaJHT80AFFDwd9GnTy
uftmaFaXoyzu+0EHjDsXsu+eQblnAv0x7pjg/olvbIc5+85Z9t0zaPatKii6
MuiWrXS42bfQ4OHeC+6z49479FZHOH33NIk3wNBxWe76Ia3Zt9C4f6J9TpTB
F0nctzbPdcy7btzTwT0urymcxU3iHg7ugptrf9xNN8dm3nS60GbedpptMzou
XV0u3ztO0s0ZKXSu0HPizBlyhPy95Djh/8X5Rr8ne08f+eQeuk1OyzrLCOcY
1iqNA6rjrgjuGEKXDJ0w9oDRs0IHi/xzj2Fp2c57DDFzBgX9Je71yb5/hkyh
P4+eGHo/nMH6PgmdJ97zQhZ5Uwz5uNrywbtnb1rW7jQfOkDotrLHz/maVo3U
NlqHftt1tuOMUvYuPO7GQ3d/rONGJxmdLnS5brHcYb7Ndvi7y/Ggd4VOIPfl
cY8FenrcwUGZcPcEOnvEm72DD7fsvYeUb/YdOPK21HuW7Hly7yAyQf3QdrkP
kfsXz+JusTZRtrTzYpfpILtj3icndInR5eU+v1fdl3Cn4SuWo2WOh3087nFs
4bscufuPeoaHM3zfJqFvxHtux1ZH+dOvFDlN3DX4mvst7iDkLkLeeOP+fd6x
4z5+2vRVrjPuKOTNN/xxdg+9OOSSM3nUM2buNaRPpF6535CwMbNHe4LlhjN6
pAv54I023rXLvokHJY5T3Eazd2RCs3deQrnT6zLx9xJ6J3E+iXtwCn2eCFrk
syz5dju8cdzDju71yw0lA63jHHq+ym9jw/j+xOcVOKfwsc8xYEaPBZ1V9Fmp
M/QZ0PNAz4H9TnRn71MYR7WO8+MflcY5Cfgvaxx386GrxFko7kLiTib0bNCV
RY8WXZyONu/RNN5R4/0zzhxwB0OPJN43e7Q63i8b7DC4s2mB3Hq6LLaWxjkJ
4v7QZzwxc38MZ1QXmPYwD+ezUk5T9r1G8jnTeSVN3OH2scuGdsuZtgEeM660
fGxvEu+u0Q8tsTvtoVdO6ASjg8qbbd+7P/6ocby5y5llZKufw+VuCd6VZP+Y
N+3of+E5MCf2jdE9HuC6Jd3sz6MPhu4X5fWTxwHuUEUvBV0l+i90aTDTf1Fv
mOkf3xN9vzRkDcrZWN6B+8HjDHL3gcuSN+J+9JjzpONEvw15xJ2yRy63uv65
u/Ujy9F5rmfyxFkW4iC8821H2VyvMuxQHXcLXe9+jjOVe+eEnjn9wg22Y+x/
tHHcv88Ydr3HVfSQuV+Stst9k5e7ffRJYj9+hcdF7h6i/eDOnZT45XzVW5YR
3JqqXXwomV5dGnfzIAfc4bdXTuhIkyb4uH8k+74olHvFpriNUgakZYn97ZET
4+e2JPoa7iLhLpPPzEfe98wJd+KY6jCIm76BdzGz71VCs29RXuWw6AfRFUFv
o7AsKLosnLNDJzvP4+fCJPStmZddYTM6YPRZ9GHosTA+Mb69Z7/o4r9vitxn
36dkfLvAdUi9onvWwGGh50T5cn6tVOX5esPQLUN3qq3duAcH/UP0ERkD0L+i
f2FMQOcK8xvim9w6dOPQx+Jdw+zbm9UOC50Z3tfMvnsJpU+d4LGd8QzdMPpx
+vu+Lg/6x5PUtzRrGuMM4wNlhj7QcS4D8nmKw4Of8QN30sf9VvU9hxjq+QLt
71qPUYzlu2he/T/Nqd8RWur7fdEP2DfLC/oh5yH0/avob0LzvPD7rtBC3+/l
Bs+ueWGHuW9e7J+xJ9Y6L8LYytkIff8h+ifnJvIivN85N5EXFLfD8mIPDP6u
wo+y+4kzF/r+WfQX4XT9I+xWGHf+HS37irzYQxtmWiVMK4x/Ce4IHJoXe1fs
1x2VF/tq8BxpO8z750U8xNEtL+Ihz+cVxprgfsLhzhN7eucWxpogbsMdZw1h
tsxdhK7CBYWxToqZcyfbWRMsjDMKXxWGmTMLXxaGmTMN34p+Vxh725/yL1QY
5x2+KQw3zt0Qxo7C2Of+SPTjwjjnsq0wwmJv/JPC4OdsDn7h5wwFYX8vnO88
kT729onn88I4N/NFYYTVR/n5V2XAQedDhRzXTVPhLdm/LfTIi/r8SzgkL/zi
r2de2P0t9Nb3P7kR1vMKd1ZhlB/nCYiT+Dbmxlkcztr0ygs+eF6yHeeGRriM
awqjhdpe0xkl1LL5Zfu90P+KnNfhXM96xXG2MF3YIvOlwgL2TW03ozD+L+eY
5xWHMcft4UrhKvZc5e8sh0W7uVy4IjfKg/Auc7lcZjfaxmLzs/d7UW6cG+K/
ljND83NDdtj7fTF3Zx6In7xBSRfyyj4w+8SUAX4pM/JNGcFDuWx0mb3ueC7x
//N85xmZvlu4x23vXuE+t+17bP7Qeb3a7e0u89A27rS5f17sc7M3PjAv9sXZ
0x5kyh41ZbRnYay7z6ujuf6usS4+wHzwnFMY6+/Yj3TdkqfBDoP95zPc1mnP
/dz+iPtMt2/W8ofYL/vh0x3n3q7XvR3HusLoF+Cjr1ooLHLfd4XNjfOivLa4
L1vk+uMM1gvie1FYWxhpIqwnC6M/wnyE46evWSPzaXZrlhcygbxscJrId5O8
iAfZYS3zVcsIe+e0E+KbXFd9fQulV9/F7DUWhgxST+zLspeeKQo7ZLyoKNJE
GlNFQde577hZuMV9wSqb6SeWCsuEwqJI95Pud64Vlruvuck8n9ovbnvXUr++
S5zpKGBftzD4kZFjcuMsBucXOM830/J9nts5Zwhm2A2Z5swc5/Kes1/M41Qm
9bzOSx+3xGlFTo91/ocqDXvWiviQ0Ql2GyW7/WrFGZC7nBbcXnA851nuKT/S
/7nzel1hnMnmPpSJPqM9wWbuvuQ+IO4Qyt57yz/5kR5Xs3f8Q7n7h7sVeT+A
e3HQAduRxH1R3OnIHUPZdwDqeZwebr/cFYS+F375V+Q8CPngHM0Yxw8/umX8
jxLuF0779R5jbnSdbbPdDR5vVtrtS9utKIyxZ4XduL/g8RLNLUviHknuM8q+
A1DL+R/hNOLGu5m8wcn7t21q6z+yeaydv6KwLhTmFMZZFtLOWQPaz3kefzhb
huyWFMV5tFLO4BTFOcL8opCpI+yOG/1rT6FXbpwr5VByTlH0tdj1zo1zij8p
7J8L43xbmc+pcKbwF9n9Whh92+FCP/fLfW3m7CF8+OPsW7HTR9/Juc4euXEm
lLxtog9R2zypbrRNzp997PbEmVHcNxfGmUXG2x8K48wj9MfCOPsIJa2XOmzy
xlm8tOPu5zKgXXKejLZNm+5vuyLn7VmF8Rz167PFnKGm3zpUOCw3ziFxHoIz
d5xF4hwb5we3q0+uUt8yvzDOJ51mf6OVpy/rhD3nfjiDyxneZ0xpt/RN57ou
V7tuCXej65a5z0umzIleNkUmflfYDRTvosIou4WF8T1J8f5cJ8ycGf1T9K/C
6JcPcX7op/vYfLnrvI/76MNcl5w/ojzoQ6l/+lzKCDmij2TMX+vy4PwpsoUd
/jjrdJbzvM7unE98yhQ33vze5HuoeROS9zB585L3dHkblfdOWQNgLWCQ1zj6
ec0juw7Sz/P7w63bw3rBEPOgn4qeKnq6VT7jz1l/dFaPtBv/2QMcVrnP/ONW
ab/ZuzeOtluJwxvi//OB5methzVB1n7QmUWHAt2N7N1DDbwOzXp0C/+jsdaZ
XTuHZu+LhXJfA/+q3PfQxOtJhN3JaxmDHDf9Gnb0c6yB4Je40ekgfuJ+LYn4
6/t/iHLif5F7vLjPizvA0D2s4XJCx437Cmp4bYM1Du4/Q0+wymXDeiBr+x8n
sR4C/SiJ9RPoVv9DfuB/Su7h4R407j9jfe9T819tv9l1uA/Nk+s0kj7u6iF+
+NHz4h4F0sfaHGvHrNWxdsz9a//p2yZxpxtm1uxwz67hQaknzulzXr+b111Y
f8HMPWLcs5a9VwxK/hOXE26s0XBPHDzc4UaeML+cxL0RpO+VJO4dwbwpiXtT
MGuY/09HkTuk1MX/p4uIWVO6//TrMKOnMibZqY8Fzep4QbN6V1B0s9BROCYJ
fZd2SeyVoGec1YEZm4T+Fn7R/aprO+JAt2G8+dsnsXbOGvqeSehgow+o3/L/
7pqanMQdPFNsRud4qs2t7H5KEvps0JOT0Ek+zf5a2I587pWE3jhx7OF4iBsd
8hl22835gH93p4u8NXP5Ze8NhR6XhH4be0fsGbGWxFoza0uM7YzxmBnjmUNg
Zn0H9+x6D5S1GdZvWMdhP4S5A20Lns1J3CNEXbJ+g1/8vZpE28IN2WUvinbO
ugptnXb+eRLhsdeEjLOfhD/2mbBj34n7eicmcf9UO1Xwp6q0z2rsvLuZemri
vOKvkf3ixloEYdGu0N99PgmdacyEzV7c1iT2tIj7vCTaPG2a9sr+H260Sfxm
9wahuFVZdihf9ikoI/K00mVNWU5WWlsJrYXjhCZCU+EEYRehuTBaqC3UEUYK
NYVawmChWMgIg4S0zUNsVyKc6DB2FfoLhUKRMFBImWeA7TCPctjEd5L5Wgin
CC2d1gmUr9BIqFaZfyT6sbCbvj+pEXUwXmhgf8cI9W0eJ9SzeaxQ1+bjhWbO
88mOk/gmCo1dLsc6TsxjXB7w0+eix8ZYdYTzXSqMwM3ltVg4TOgrXCb0EnoL
lwo9hJ7CIuFQ+1soHGLzFUIfmy83H+YLhM5CF2GOsL9wgDDbdl2FBQ6b+C60
Hf6OFMqEcmG+cLDTMU/oJnQXjhYqhEphmGmVMNyUvB3lMPA31Pkm3FNrhEy1
EaaYVgsXOewDhblOL/FdbLuDhKn221a4xHak74EkxhXGpfuS6Mfp1+9Pdt7N
yRox68iMw6yhMk4zPnMnw+tJjKs3JdGn0McssF/GYfY1mAdkdSvfMM8tSYzl
jNsXOQz6j1VJ9DWEdanDgP9ct1HaM/vgzDmYs8wzH33S+UmM2bRn1tW3uX3e
kES/hnmF2yjm5W679BfZNd/sGjA0u378rvN8QRLjLnHMdZyMabOTGPNwm2M7
xr0LTXHjXn3Sm33bAZp9zwHK3O3WJOZPlAt3Dv5gM/dI/mjzXUmM64zzdycx
fmO+J4nxG/O9rkPM3K33t+uYey1/clg3u+wpa+6sY7zP3sX7j3nudDzwcEdi
4nkB993leC7wVBJzU+Zi65OYFzL35N0L5ljMX3ivId9zrnVJ+KX+brS8bHe9
Mp9ijvlsEnNQ5qfc8UgYxEc/jjtuTycRD3FvSMJv9k50KOk4U/LdXtijRtyL
wHjIfsp+6tO+k933wraUxq+0/Ahf6nuvdJi/4jx/Osyf67u96O68+cgZb9EW
wnupoLvyRmQqaHPec+TMumg+70KiC5COsHbXBGW4JgUp3tmUfUa0WHgqFTTN
u5z6LkmH29ec6U8H/2epiL+dsEDh3KNwTnB8J6bj+y7ZP98y3jQ9T9+zhXH6
/gT9A9G2wsepoNW8TZkK2kb4gHPr6cjbF6koD/L8aSrihH9rKvy25h3MVFB4
jkrHO5Y3CGMVf3vFuwGdBdE5LSONdYQxwmihLv5srpeONGKeJf+r5H+Uy+5w
oa+QZ3qYkGt6qPCD4ugi2tlpWCreo0V/lH3XdLj9rO8DRPcXfkoFxe0gxXWK
/Felo676OT7qZqAwQNiUirSS9h367piO+ticinTjNlVhHKywNsruQNGe9SPM
/qIzWgbv46nIQ67reJDjmC/3Y+pHfVP/g+32jfzvm474vtP3fqKdhGfk/0b5
H2aZO8l1T3nx5uzNlhXed53hOuZd0SmW15PNQ/2fZjfqlndjeU8WWeeNV95+
3dP0LNf96eZBPk5xWMjjNPPvYb9nWm7OtFvvdLwre5llZbL52zhdpwo90/HW
LW+rd0vH2/FzXWe8Qc+b9D3sztvxB5vylvwVKo/7WsZ393S8OQ//3i4D8tPa
8Ux2/c10GR3geIijl9NIOg5Jx3uvV1jOFtkM/2PpeF8eeeGNV96C7Z+ON14x
I9O8Hcz7v4fbnfdh+5ryXuxhpoSLnC0x/2jzUZe0h9sd1krlcV3LaF/IzVLz
PCC7hfVDbmhDd5iHeuVN2dWuN94P5t1gZIU3bR90eTzu/CATD9vtFOfvEdfx
I3b7PhXtDFm8u368hXyHZWKN40MO1jq+KY7/8fTON4nXWkZ4Yzj7LvFTdkPP
nP6dvv+XVMgB9fMb7cp1O9FjG2PdpCTmKMxZ9vX8gPn+sXZnbDzO7vB0tHv2
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
OGy2097qcUi5vnH4JvM7cyo6Ppn70HV6ckWsu+e5ToluUXCiU3OO+57/DeyJ
mK8pB2ObcXCIxsRRDYL/NrHOV4Q+0bPkd3LLiDPZ+fNNZ/kd3iB4dYvib1X8
3nVCf/t0z9e7a+1+qDZ07qO3+kWvzUMsN/mq50rkKZd57nzD9PWWp0Susk6l
9sMtQ0771wYh54lcJ3MrGLnOXb1Os4YzHy93WszlK0wjA/pMy4j/dYOQU71z
px0ypSs8p7/qvFtXhlw78uzIn+9kuVkekyEnfLTlhLuaRk69jmWMn9e3Z9SG
mzkYWflEvh/8vOdo5Otf9Jz9sulT9G3d2khvgOMmcv/gZ+1X1/K67JuQHX7L
ZUUmH1n8RAYbmWxksLeYRsYeOXxk7hMZWuo/zXGR7UbmG9nvRH79K3+zu/dV
7I8mOg1kk9t6X0UfTHUafI+875KW0c605TaXb4K/Q7aZvddK14G2Pb422nWx
2uGpynDfInx3ZchZTxaeVRkyvJOE29eGTO8s1zvRKwBGZr274pxbGXLT450n
+k2QUUYmmbLNcFza6Dr5NauNOD8gO1wZffyL8KDasElD3tiiQZ747cqwG4TN
oI3mxV0sn42c9gGWA0YeOJEVLqm7Q79Ccd0dOhiKLKfN+EAGGzlj+gzdLuh0
2aR8+tVG+okuhrqWRSYueTB+0PWAvDJ1QrcLemJoG3S+oLuFvkQ/C/1J36Iz
BZo+Q1fL/2yyuL8TvS9g+pm+RS8M8T5z31Nn+hVdM+RB25MPedPntAFh8Bf1
4HvamnJRN/qG9ktk3MHIxPdUXV+uDP7M13xyS22cAwjDngx2dhrLf3JtnAOo
M7YizvLYQKY9kXcHJzoAwPQjfEMfHu4+Y/4gHeT1kdtH7h+ew4ZSIusPJgwb
Sr9Whg6PnZ3nme6Pk5x3Ip8PHyTy+dDMd/X93dlK58XKmH+Ys0iP/ktsG2Dr
AHl+ytLZPIT+gtPMH+SZ6Dk4w2HwEGeek81nxE10D5zqMM45pJ3YXgBjK2Kg
2nN9bbiZ47A1hL0bxgD2hka57bBHNNrtgj2axM4SOLETBR5h3sWO0CDzGee0
ge6HsU4LnrvWYXs7bmKD6zqHwSuDnRb9Oc7fH+UyYnMHu0DYi8GmDPZ51pgG
Gttew0iHY2uGcYwdnsTG1F11d9iYutPp0f+3u57HuA1oly7Ok+8Pc9zE1tZI
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
hpNx/D87yWXxHeX+P1RMkoY=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
WZBlnfFJrt846W2TckbxzPc3vWdjruvBHsbbletcktZQueoZIcdGlbPW3o3M
dW5de6i7TmdGZ0V3nnLvP+b6LY9y8HrboztGd4ve+CjWenfItppirsp1bWN9
Xk53zmtL2Dk25db0m2JLI4t81yrGdBf3zzza3FnJPuwL0JuVL6Pct5JjzYpJ
KRalmLNiy1NAWYZjzJprQpF9L815cKFzEMo9qM/FhY7RKDajPudQ7s9vt1Mu
quS7Vne47m7duWfgnQKz4H1Tyb5zzULXlQ+t2EOHIseOFYN4Cd67pZZVfbaD
d3WR20rGmWHnFJVLVI7xQIF9avnS8lEV+78tZN9B8UblvlaG7WspB/ZJgWMA
Ok/yWWUbN6P+6DTbyHo7MTvss6g3FMrtLwnbd5IPdUxnv9CxkpcqWddKB0v3
SudWL7SNJ9tOb2x3FjknoFyAfJC7GK8j4z2W5pip3sb9VGxfQG/kdLcrB63c
s+545aLb5fqtrHLSXZG9VDGZFPsc42o4JqVY1M4Uvz1ZVOBYqvLZ+5Dl21Ln
OvZqzaEPlpaX9f1CHygtL+ubLvQcNTfF4BRLH59v21c+X3HIMQPFClqkOVZT
DUxLccxGbwtXxvzWV28Md9Pf16XuezeoVMM+k3ylSIrffjxZ4Fiu3oAod9qn
wG9BlEPVW6JNec6F603RDNZjfK5tHemTEPzB8Pcn+U4awn7Mre1cnXSkbBO9
KdJbItkow+HPr23dqW9eb4nb5ztXoDfFk5XrZ/ymqV7jFdBP6I14qn/rXsMx
K8Wq1sP/gPbX5jt2LBtWb99H53tuegMv3+HNfL8d+Tc/K985376W1kxvS37J
d196Y6JcsmxU2abKKcuWU85YuWLZdLI9zihmnGkbpI5yyfDPS/CdsirHb/70
1m9ivH0jvdHR2xz5SNvYizcKrcuUE2uT6zeQevuoN74t6O+fHL9FVZ+1S+xT
yZfS/whcIX8v5FjQmDT7antyPJZ8tsSQY0L1yvVrK8qRkM+KzvwnjP0lMuxi
7E+kU/k+3ixyrFk2/S74X5X6rKiObGXl4JV7l80sXXK01LlC6ZS72dv+efbF
dAaahiyjZNM3rdzoF6UeSznS0lz7PPJ19KZE/2vQOtf/i6D/OZCtXZZr31U2
t3L/D1e1L6E3AIo1poY8P+mPV0POcUjXKKezi/1cX+Bckc7M/wFstkPO
             "],
             VertexColors->None]}]}, 
         {RGBColor[
          0.2241733962264151, 0.24550325471698112`, 0.2671391981132075], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
0Lwbfe5W5v4NWIWdtsq/i+xutAf+EPhwhvmoMyHzU8rpzxSbXxicb/mt5BzE
XhYR1zVjL1kxs/Wy869y/lMLLWcZl291DdU0miJPc8ZY7M+0tMVnsnWPw+dt
+HSCzzBon/DazkURyyeVS85gfyvQQ0v2eDpqb17vvVrMfJvsQxvmtWOUMncs
v20d/qzQakyqL2XkW+6qu9GKufd6bWcf+93rdaFi4C3Qf4xvrQ+8HfgT4L4x
qweJ/gi0B1KW6yX5/Qia9dBMDVneq5y3ImZ2XDa8Rcxspd6a4tn5IYtpVRsr
D1l9TPe0qd/Vofxe4fB77HeHx127uV+9GHvRw4dRs6Gyn1vg0wQ+D8LnSvhX
AGcrpgrZXdE9GZltObPy5aEhqxeoVvApvxfzd2/PQY9nm51XDe+ikNXx9ir/
83e3Gfwl4PuAX8yZ7M+xnOev/NJrRE+BX5ljNnYX8mwLW82qCufelTvwFndg
J/jPwlbX2iGdh60eNYS5U3PsrIcDv+z1hz/h3cb9Vyt0c+r/7RtzD4ftLBrA
f4775S3Qn1JNDP1/BPxjzM5iK/AZ4CPAB4Hrxg3uqPqJ1xOU09/hufkg4Gdz
7A0OBH4qx95mIfRXu617jztchb+Xc4fPxoyveD7O7yT3s/Oh+Yl7Pq+O1TNK
41bTWAD+BPgF4DewlzVhqylVKGaD5kJo9gGf6/T/C/35rLWqjuV5bTzXOxG1
mqliuSeQc67XfHR+yxnLGMPhEUqb3VN99AOve8yG50FkmAHP14GPAb8O/GPU
fKr86QR4rskx33QG+Aq3dTdxF25hLIT/XOb+wNwXmbsUmoM5lgv/BtzMbfVJ
4L+5zTwK3Mht8rURy121l2755rPlrxVv3u8xZxJdtvZ6YFfW/KbQ9tUwYr5c
fry2agOeD96bb/mA+PzIWo3dbuuur3C9HAJfBv4N8HfC827GO+Afj1scoxhG
drFdxGyj6rs3eo1X9aESjx96wuNBf5sp8vL7yM8LyXkbAvcBbgR8kt/j/L01
y95xtMjolQ+1S1u8sY31r0iZ/bkD2m6Mm6GfCb46+MvB3wlucqnh94BvBn4z
+BPAO9xePck5tGTkcBYj+W3OCNUxO1uDcS4jLBxndgg+IeDcAoNb89u1zOY2
D1tuqbxS+WUzzzHvQ4b7GbdB3zfXapGqQz7Mb8xrkj9ELEdSftQK2hGlVkvZ
hIxNUmYzW8FvjNedCqEpSpreLuX30VKrC70H/SxGf+jn8BtLGfwGci5kDEHO
IuRt4PWHr6FpBU1leH4BbmaZ+VzdxZ2eU88A31u1jDpmv3Z4Pp4Prp7XK5LA
aeCfs6wu9VmuzZ8HbmCZrat73drvdgm4cq+N1GZfJ5GjLjKc5rdzymzyTPbU
i72FodnotRPVUOaBfxL8EPAvwuMFl2008JPAdwIvgk+R10N2Aa/0HHAZcyd5
HSwFbanXbU7nWtysmFk1hole35Df7u++ew+/+wpMP4PgcyF8zmRie/jtx99X
wWddlt0X3Zsh4IfqfoMbzrwRjM5+nzr7/RoG7mbk6Ag8qsD2IPmzwpYDK66o
4bSi0Tk8X2D7vRG4n8u2mHWWM17IMvu0ym1U67jlNsprlNNc6H5hdNL0KB0+
BvxKqckpfgOdp3Q8xvWs3Ohaz48qha3mqHqIfNQ17qd2w2MT9N2hHxOxmF7x
vN7ThWX2psbwu95teKO45VqSR+/vIn9HVwG38Df4KPwGM+6B5+MRi/UV57eM
m4/UurLB77kdPgjt8VI7B9UtfvS8uAkyF3vNUzUn1YEKq9ve1vu5ybdscNl+
h8cpeE0AX868uqr5MvfbArvTus96T7P8bl8J3KjMzkr3+kK/29nMuydlc79T
7SVmtZd1Bebn5OOkv19LbC+qCT3sdZ6fkmYHZQN38fuRbBzwF8BbXCeT4LGl
wPyp/OpWh7+F5nO/e8PQW+1i2+8hcIeTtucl/G4ptTuzu8D8pXzlN7yFqbyF
eryFtQXmq+SnlEPf43n0l9zNa5DzaGVbU3Jo3YIE54AfSfEuBgB/W9/6bjcx
7xbGVvZYA/w/wQfgQ8CbgGsB90rZOf11RjGr16g+IJvXI2x2LyNh8zVX8cU4
jzEeiFqNWHlQImF9NfXUpPtyP7tn2VNGxOqFu8LW61Kfq1vcahOqS6jXt9Xj
qzz4zHE+nwNPY0wCviNuPULlho8mrL+oPU6LWvyn2O+HsPU5FGupBzjZ+4Bn
0e1wr/VdF7GcUzmFeqrf5Ft/ZxJ8dnqNWvYv6TZQsdVEj6/mEk8t8DqY6hyl
XuuQ7pMJ0//xhNkp2ajewHuUN2Van+RV75XUZ97TXv/cnms6kn4251qerBz5
btbPYWQiwz549HH+T+dYnCf9q3+j/rb62pWlp/oGj1dNmFGIbJehs0JGU+5A
wN5He29COo57D1S98creHw8S1pdSTyo7bnGeYjzlf4M9t6rC/1f13vqwpMUT
8omq0Y4ttjqt8mzFoIo/q6mGzbrdMqyfVpgwnc+KWU1Z9WTxU89ePJWDfuE2
X7WBtl4fUD9G9QjVItS3UY6q/FS+KzNs/ku9nQXeG3olavm8cvNx0PT0Hnen
lPk/+b7Ho9ZPEn1ZntWbVGsa4TVs1bJbRK1upZpVp4jVVlRXqY/Mi5E5jQ6H
ZluMrvj8Q/kUtzOykU+UmZ3sAf22+tbbuiFq9SbVmhqC3+98dkI/3W3CH7z3
vSF77+qr7EpYb0Vv95aEvV/ZTtl32c+bItarUJ9C9Zu5XsNZU2A2RfbkgwKz
g5JN/mpkmfmsooTdM92xvsC1S+3e3o2cS5GzRQ2L+4577imb+rrXtJ9nXqbL
8zNrrvZe2z+gGQlNNWjuhM/iYruTigdPhSwmfBx5f/Gel+xfdsRsoPqx13l/
dDL4TPAp8M+Du6DUbIJyi/0ek+t7h0P51j/NSphMkufNqNWMVBc6LNvpfdIj
wMeAHwDumbC+o85Fsqq2qtry5JjlSMqPHgXuCbzjXLPBf/i5vB+2XrtyIvXb
3/X8qCTPao6qN14G/ZGQxVOKKw96Pr4x1/avvS9h/WeSFs8k+C1w+6Oa4qlc
i5F6e89BvYfT7O85t2+Kbda5T1XsPyVl8X8X4OneI9A+1S8SfmnI4nXF6tMU
A6bsnkvH+3JNz+p9zff70zNtPTPVyt7MtT6Z3qB84yD3j8pXlLco71Yt51ih
1XM25VlvVX3VT0MWT0oP5xWYL5Qf1Fv7yPEfh6xmIf2oFn7We83KNet4vqk9
jfBvZpQj9fK1FYtllhlPrXOxv+HOzLvKazuKldXzU/x8NzoPu41VD7DE42rF
9U285zs913qQqpeeZI0aKatLrEJX5cUe16iO7ja2j8fjim/vLbWz1DkOZF+V
U1ZrGxK2nr3u4VHOsIX7C+Wv6zyH1Xkc89rczoT1UfX21cde6+9rFvMGuv6V
u7T0XvCcUovhFKuoL9TG+0fTSy0vUk6kvmKnYust1oxbDq/8fTY0j3g8qfi6
kd/Jsaoven9cvUnVy1VjH+q5qXLkUv7/Za/zL4haTVbvTvnxurTlyLJnpR7D
9IhaLVXxw1fgG3pO1D9q9VbVWtWL3pq2frRyrHM9t3otavVf1X71zcj1Xut+
KWQ5mGh2oOfPUxZv7OV3j3LjqvZ9RHnEvpHQtxVJ/xZLNdfhXnfVNzXd/Bub
2VGr88qPzM+z3rnq21XyrZ6rep16O897jVr1pO1eU5pSar5cd2xk3Gq74v9A
2L7Z0vdaqlU/6/XqYSGrHahuoG/QPo1bv1h5/x+FlvsvrGd11b9qquArCq2+
0ajU7oruyYMx6/coltP9OpKwO6b7pHqb3uZ90Iwqsbq0vlNrmLYzVU1xp+fp
n4csh5etvgs9POW+YF/I8lid1xvwfyJpNQTFWWdyLdZSrPFnrsUbikdGu/2f
zV7v85qJznaFf2+gGKFqxOKEmTGzubK3Y+JWB1cNXLWKBr5WFfi95Gc0I2n5
g3KH0zGrr6m21gs973Y9S096w9KVbOcUt5/9wlZjVX1Vfm9pwnyfvi0a7t8p
tU3a9xZ6X/Ibw9x3dAnZd4Sqka7PtW84ZM+bJu3bEdmQKYpn/HsYneEYr+Go
drLN6yTKEf/0vKxx0vyB3p1svfqw6i2uzrHapeqWPWLWV9DZ6V4/6Hf7NPyH
h8wuygYu9G+cpibMd8pvrk5ajUbrrvAer9Y4ji67otNl2IRThXYXdQ/VR417
r015zAVl5mtGAh9Dzt5ZVrM863XLnJT5GPmXNqxX3XOHM/AcETJfMS1p38eo
JqBa4AKvB6rHWOS1977o5GbPX5JR65erP66cpmba8Kq5NvL8+j/wv917B+qJ
VQlZX0x+Y7/Hsc+z7jt+T6blWD1XtVzVdGd4XXd60u6TaJSjD/Gc7kCO1ZRV
j1kTsb6yesr61mOzf++xtNB60upHfwd8q9e9Vbtq57UsxeNHSsxf6Dua+fWs
D1jBOpeUWe55X4HVv0Q/NGyxi/yF8iHpVOeoWssnXqtXXNndv5s6EbOasurJ
y/xbD/mpyUmrxUjnf+Ulfs9VV1L+oe8+5A9z3V6VJ+1t662pZ7LX85f/Azpm
adU=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
c2nNyTWX+S/6/N/yyGk2VtQ4iR0ZMzJ2s476tXkRw1nAPQ8k+QvGm8yVmG2c
vWXkTBydxLCMXRljOos9NiuxR9Qp91LfO8l/NmZlbKwgO2KN9u9yrlck8Sxj
lOYWG3My1mSO8e/g7CTeaAzJ3A1zAucnORxzkxwOczfM0fDs1DNiz4YfT2KN
nll6VmnMsTrP+s38cVAtiXUZ0zKWZcxLX86YiLEQfbpaRWHTaMvULIqzBM8Q
PDvwTMGzbs/APfv2zHt0ZpyBe/Y9Cl4vM9aoa7NuZthS2ljaVtpU+qL65Pri
+qT65v+LWWWEj26s0Bxqc6eNGR5jLmQSz70B9G4eOZ/64vrkxnr3ZUXs2Ta/
FobNoq3yS2HY7iW8t7gobHhtK3OwzL3SxmpYFDbV/2ypoohNO2fOlTFqbS1t
Pm09ba5fs+IMxrMXY5jGBtvQ9sQWESM8gjF/wjiWgxqZcdb7IXxZSZz5aisu
41kfVIXNqG2nzaetp41nbsGU5GzaHAPPboypGkv1DEfbU5tQW1Ab1FikMWxj
18Yk+yU2qLanOn8n7y03NwHsgO9JbEBtv93wz8rjPwX+l2AFvA564c70sKW1
qXfyXYdnxVmVZ1bm0gzm+s/VI6dGW3184utdl/hG+nz6evpIc8zpy41cWnNq
9f30MfUt9QH/m/hU+lL6TJ5tpTOWZi3jjMuzH898POvxDGgR9/zULOSFPsG4
orAxtS3vKYrcHX0mfSVzeObkRU69ufQv54WtNZ1xTysMm+uo4vDR9M2qEl/G
HBFjT/o05r6bI2lupDnw5ubuZJ53ZEeO7p/Gs7Mj99x8J/97YQ6z+Xj+B8Pc
x7a8u0155ECa2/8R/MPyyPE/NfF5rk58sH30//z0yO1zjjfx/CVJfrsyydio
MVZjq8ZIjY0aMzVWaozUWJIxI2NFxpT0TfWR9Y31UQ+WxpmaZ2kHSsM2HqLt
UxQ2srawPq2+rDaxvrU+t762Pra2uTa2trU2ekNlbFbsTdfI9GZhw2u7T4Mv
zIozOM/eFmSFba7Nra2tje7ZZnWuVWsZZ5z69sYIjA3o45sbbQ61udPmSBvb
M+ZnrM8Yn7arMT9jfdqw5kJfStvu5ZETbS7o6tzIpTKnyliaNq+2rjE1Y9XG
4Iy9GbM2V9z/zPhfGXPGzY3rlvxfxBw5Y8/GpI1FG4M2VmbMz1ifMbOVuZGD
au6pOdieLXmG69mtZ0zGKo2xGVszZmms0BjatUnM0LNNz3A9u/WM8w3Wwhfp
ETs0hmgsQR9b39qYgraCe9y9rc1gbMeYjbEaYzzGbrrBuxZFDGessr0wfAPt
MW0VbRhtF20Wc+3NATf325z78UnMyFiRMSH/G2FOvrn4/kfCXPIhuZELbE7w
d7RrnR65WJ7Jn0k/v02P3FJzTI39n07dacVxBnAyuDI9YgnGFI6Hd0/2rzEP
Yw/tktiEMQjPJg5SHkiPMwpj/55ReDbhGUBT+tQ4J3LzzZlX9iqTlcXLEttU
G0vbShvV3A9jpMZGZyaycndJ5N4qM88rj/8w+F8C/1Og7zyTOXy+Knzol2h7
b/PIRTQncVXis+mrGVN4knJzYfj+xgD0HfUp9SX1If0vwRfZkdtvf98pjBxi
fUl9SnOH3yoM304f75XC8AH1/eYVhi+oD6zvq0+oL6yPqm+qT+xZjzFrY9We
+RRWxBmsZ68FFWG7atNqy2rDrmWsZzDm0/2vQm7kaqzJjNxofY7PkpiNsZoV
SWzHmI6xHGM8nZj/C5P8dn2IsazjUVlxlu+ZfrkxVHN4QZl7iHu2NotYjjbU
pvTIiff8wjOZh5x7cLP/ycgN21ubWVtZG3wsdXNz478N/sfB/wKYc26uuf8J
MNb0hD5+UcSctLX1UfRNtLkP8a4mGXF25hna/wc04HbH
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwt2Hu4yFXWB/BfOUgi5Bw5jpxzhOMcimneaup1l6ZXN2pSo0ZR3kjHtRsz
yKXLVDO5pAuhcktoKjUupTQSEkkpk+eNJtfjksklNE/vZz97//F91lq/vffa
a6+99tpr/4p6D+xefnqWZS1Oy7LK6OT8LFvcNMvegjvxN1bLskUNs2xdSZat
hbfwr9fMsm3a9utTATvwFfrNKMqyr+HdOlk2tSzLpuNXwCE4CHN8m6NtCX4v
7IGZvj3v2x56ttKzl54v0N3ko+Y6DD/AAXPvMO/r+NdgPqwpibYcKsiyW/A3
wxv4GTWyrLXx/65v/jO0o63ImwrNUZplfWpn2YP4z+Bz/TfCBugc9Bk76dws
u7RJll0C0/Anq2TZtedlWX7zLKsPP5n7R/POYvtya5jG/v3oK+RSbSPoGQ4t
8cX6bTHPt+b9PxiO72v+D/X9wph3jD2rOMtWkjdY97/Y+R1sxu/ii5p09Et2
bWZjDfJHxv0I/4b5xs2n42Nt7fS7Q7/n8KvhK3pW0fMdPe+jW8jz9P/AuHnG
/IDODXvi+9Xa8/Qbic4mf8/O/eytgJH4e9i8Fd1RGu0fgf86+JA9n8BY6/zG
/Bvxm+itYk2V4T363wrxQGc7umubYxj6Qthf40/RdxKewz9B7zZjzzauJqwu
i7E0GP9QXXsGf4PVYvUm/V+HF4zZYPzv8BvzsuxTWA+bG2fZ0wJ6gn3rZM86
wjX4y86mR9uN+hRr74Y+QG4mRubZ77nQEj+rKnu1XQ6XwT367MzJshMhHq3z
EMzBL7DuoyUxLkMsZuY4Qu5hvjvw3cw3D72JPImOEXT1Ne+D6ETyXb7fp30Y
LIFZ+hc3yLJGzaiCY3zV/Mwsq+7bWeTq8GU6J1Xwn6U4qay9MrmneD3bGjaJ
2T/gfw/H+Ppd/ZbDYfhZ/3vN3T4vrqktOoB8q/F96Vlhvj5oT/Jx/U8ZfxI+
SLH0P2y+ka1t2DoVvYr8mPH96bnG2v4XfZTcFC2CQuhFnmqu+/FDoLp+T/t2
H35DbpaVhD2ATfg1lfigEb/ROxd2mGObueqwYZm9ecCZ/jtamzy9XpY9fH6W
jYZZ+Kus+zM6mtO1jp7N+I3wirYx+nTVPg//MvzINyP4ajgcw3e15+fge+O/
0K8XWod8s3G363+EzbehPcijfD8V/GvMcXQk+Vo2fYSugu74Cm1jAiXvg/H4
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

             "],
             VertexColors->None]}]}, 
         {RGBColor[0.33152332075471697`, 0.3656383584905661, 0.389215], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJwtmnuczeX2x79oRlEuw96bvWfPnj0zZvbMoKHb6XV6pdIpTiqXyskt5drI
NXK/DsmpjKFSIkI6iakIiURHCJWjOuLU74TJLRGVckp+789rrT+eedZe3/Ws
Zz3Ps551eyb50OCOg6oHQXCEPzXony0Ogj3JIHgkIwgmNw6C402CoMWlQRBL
BcGUzCBod0UQ9MsKgsa02nWDoDp9XmEQnKsTBA2BWwBfBn5oOAieyg2CjmlB
UBoKgos5QXCQOZrCZwl8hsInH/hF4IHALYCXA88BHgX9aejPQH8X+IPg94OP
wr9loc17CbgTBUHwU+0geAV8J/DPg6+IBMHKvCBolR4EyTiy0WogW3u+z4fu
TmjGMbYbLYBnHrhr+VYXfGvm+hR8Jfh0ZNiJDFFkaAV+O/jl4NsDVwEfAI4z
9gP4b4N/AfgF4AeBrwRXSusHvgd7EGcvOlwSBGehX8tcVcxVh329v1EQTEfO
CN87QzcHmnvpM/hdAJydZfJJthaJIDjG2Kb1gqA+Y7szdgZj9/F9Efgd0Ayi
35tlcCnwVuB3gFtxjlHakJpB8F9wr/BtJ/gZ9D/x+yjwrfC/AHwS+BPW8jby
b0L+UmR5Apnu4hx3S17mDsHnKcb+Av0x6Luw7h6+n1nMs7GJzbWes9jOWXRA
zunsZ/+Q6cB5xr1faGO1Bwcjtg/rmPNCyuZ9FdormHcMSjkYXJhv/4N/u3zw
UWREJzuD/555j4AfCJwBzXngRvRfgF8D/BZzDaR1Zq7rGHsO+bYx9lXox0I3
gbn+gHaHn28LaM5A8z40vUOmu5L5z+xDK1oV59JVOHRjDfg0eMyA14+MXcLY
McjW/bIgKOIeteQe/VI/CO5jzELaS7Rb6piMWsvVfD+cHQSroOmeZToq/cyA
z3pkGIUM3ZnrAdo65no0ZTotfR7eMAhG08ZXC4Kr2KMTfP+OtgCaAdD0h6Yt
4z5HzqXgV7LPoziXP9jn5sx1EJr90JSwpj7s83+Q7TnOYTXn1RqaFxibDv56
eKen7Ix1vhXgh4ZsvgL47IbPLvjcAnwW+BvgR/lenbEnodkD7vJCoxkL/tJc
u9fzmGstc/2FuWbBvyN0t0JTAXwP8G3A90L/X+RfXt3O8OpCO8et0PwDmpXQ
3IT8A+F5BPnng+/v904yHs8xOV8A3wv8XeDvAd85ZDwHw/NB51nIeZVwHuc4
i3Z8P+n79jPfZ3E3JnLvdsNnle/tk8jfk/Zzmtm/zllmA3em7P5LhrVxu0vS
511x2wvtwyL6pbS5wK/FbT1aS7W46ZN0qSv88l0fdI93+F1ejmx5fi/Wo2sb
aavRt7Hswxzw/dLsrkT8vsxAj05x7tddanYikjD7cCRidkQ2RPYgM2E2oR+y
pMfNBo4E/zXzloGfpvuaZTb2B/rpbsc+zzK7I573xTh7bPI7tThz5Lk713R/
Dnv5JbpaUc304pmQ6UYxuj+gCH1kz69k/jVu34aAa8q3o/VMZ39oZHpbBv5W
8BfBDwd/Evx58I/Dfwf8n4T/MPAnwP8K/gnwu8E/Bf4M/Qv8zqhuulVOmyl9
Y61rUwa/TV/O79bAq4WL232tYNy/GT8LPmvAz3Jd7cs8Z9nHCuY6BH5f3PiU
Q/859OXQRwrtbuhe1Cm0u6d79zQ0e6GZCU0VY/fHTSbZv7Qs05n2nN13Wg+2
9Fn2LCPX7rrs7nm3vVOgubOx0dSGph7t7upmy2cWmj3/HbhawuB5WXauOtPl
WXauOtNO3O/OtE8uD4JvkeFrtw9FnOODuWa73kPmrJDtYU3GhTwGKIF2PGOa
Q7+QNb3sZ30F3wOPB0QbdXrdvx/9Xm+C/4fwn4HeTgqZbZVd1Zm/5ucuHrWz
jI9s4YUcs4da9we+P7Wg3cJZ3JNuezbF9+Rmxs5k7GTG/pxlPk/+7lSW+WPp
8E3obS/0dnQtO8/1eXamsg1vue9oCc390AyH5iXknY7cV0pm+uf4XZpmsU9P
l3NWls2teTcic1NolnB218OnB3xG1jL/tixkd7km57PN7/g9nEONlJ3Ffmg+
D5v/VYyz2O/gx8h4OWu+Fzl3MX4KrYz2MfwqaRNrWJxyxGMV2Y/Zhca/uuyf
xzbH4PES+5Wqafbmfo+RjnDPmmMTV3M3fwX+E/BnwGfgNyFlPrc/ezWQ9rtk
i9vd0L2YjWwfREy23sDDgKsB98yzMaKXruse3k4bBf6ZiPmdEvbm6pjtTz/w
j4GvDn54xHiJTzn9Jj9rfR/jNFPBvxmxeEN28E3aG7TWrG+Z69LH7OWntHLw
zcA/6bZiJGNnM/YWyQB+ltuWctY7mBZhvbWQ7VJkK0G2RtDHFbfApwFwI+Bp
wN9wXl+HLe7tCZ+PGlm89Bg05RGLSwvgUxwzXerF3jai1a9vtvxcvtlznWGD
XDvHLnyvR6sDzR/oyePYwUuAB7LnhbQke/hbwuyjbOP/dEdCFkN2g64BrSHt
fWT4AxmeR4YujMvxWEKxWyRl/r0dNJ1Eg/wFwE2BnwIuAr4S+Gngzoxbl7Kz
S4DPi9j9bQbcEngmcA5wAfDfgSuBD0fM19Rkb9rmWjw8IGI6IX2ow+/Ol5i/
KAF3TcTO6CXWNIy190T+dYx7nfFTwG8AfhN4aprp2nbXtz3gd4VNhqqIza15
FcM+7Pdob67pgfivjpjeSGc+Af9R2NY4A3iAfFia5TFD/EyPAX8HXCm94mzb
0Fammw2YEDY7EAV+J2T3XTHOiYjFOQMy7W7rXl8PzffQ1FVMmGtnpvNSHhAK
Wy5QAnwY/GXAfwI+EbJ9kp8fEzYdjwCvDtndbwj8BvAk4P3077oM68FXQl+m
faZ/KNf2ujTX4lrFtIuAZwGPhmZuxOIzyVwL+etGbM+rAacDTwCeE7E7o/si
va5w3X4PPqvCdhdk198Lm258oD0J232px7hQxM7uCuCMiMm2WDkQNGOA/wCu
AX58mo3b4GP/Bv0DHnfthmZb2PTzF+DffewJ4NPAbwFvB94cNj38Cfi8r3EF
8MKwreUc/KJNzOYvBz8/bPNezLMz1vm2ROcXu48bFjefJ1j3dgd37iPaK5zt
HSnLbf8DvNTzXOXQkxpbHr0IXJuU5YmbiTf/gV19lVz7NPCmpMHPJS0PVw6+
AXgp8IsZpo8DXSe/BL+QNhz8V/AfDP8L2Jm24HpAHwM/iX4dv+cBV4qWdhPw
BNZ4v5/7UnD9aCXgv4RPX/j8Cp9F4OYXG/97gR8GzgMeAtzC4+RS8Sy2sd+y
rtc9f1e8Ob2xxZyT+b4+afI/Tj+V3w8AHwd+x2WTLo9zfe7A9xHgbwbfHnsY
pu2Fz2/YgZ+zzQcNw0beCr4BdrIWtLcz5v/Ad6R/jN+3MLYufRt+HwbfE/oS
6K+Avhv4OknDyzeOTZl/XAncMWXyX0T+F5H/RubdxpyPuv3ZRB+C50LgqdBf
lbJ6yGbgZ2g9gRczNpexi9nDI8xzAPotyLOC72VeP8kA/2628fkd+rnQ38Bc
m8H1yzabXYtxaUlbV5T+n+BfAe4CPJhv+do3zrFT2HK3k+xPVbb56zfo76N1
BG5Gv8xj7LnAN9FaA3+P/r7sOcjN4NYXGX4s/Y1OMwafksXv4eh2c/rPEqbn
sjdr3OZMzrY4XvwL6JdCl1vf8kbFJJNrmC3c6LYoBM2cIvNlxxMW6yvOL0aW
RSnzZQuAe3u+1h5feT++cgO+cjxjm2Qbf8XaFR5vdwb3aZGttx3wNuB2wOWM
XcrY22qzNyGzp7KljzNvCprRzHs9/cGEyTA4bjme8ruHwGdmm9/Mof8SmgPQ
1ATeCbwFeB59C+hmA+8C7lJk+K70dd1frwB/M78XgT9Bf8jz/dXg2/D7LfAP
0kezzU/fjQwNvI6heP+1kMX8vaHJkv5BM1GxecpqF7XBVyaMTzXgpQmb61n6
u2ltgduwDx1ilpcNAh4PfBH4C3jvo+2Gf1vdr4TFDyOgmQZNdfZtC7iOfNtY
z85btIo3bwX3Pd9+rWd+JurxbdDI4gzFGK+j10PdLs3PtHqfan0pdH6y21Xl
auUeg53knn7FPV3CPb0vbnGGYozHVe/hWy/wVQk7M52XYqVTnv+K323OUzWq
ix53VdE/4vHteOjv8NqR4p1xXtP4K/3VtIn45b3IO9/v/kL6gnyDrxFtymiG
hy3OUzxwMmS+WX45DM3v7Nsp9i0javNprl8bW+1JdadlMdNL6eSeTKs5Ktfu
xp71ili8ejjT6p6qeaqGMcTrLcPgk55v+9k3afZXtvcoPPfBcwU85zB2rtui
Pyu+8HzwY8at8NrUMvoP822flZfs97v5BvhpUdvn9sVm62Xn14B7klYKvmWm
7YX2oQx5Qvnm12TL5W9kz4uhPes1tK/CFlMqnlTe08dj+4kx00XpoWqx6R5/
KtYb4fZWOdnDMcvLVGc6kLL6iWznniKzn/KN37l/Uc5a5Xlrk8Zmi2WHW4TN
VspO/ga+r5+F8rmeHoerVneV1+tui5qPkX85z/cLfqZdWceDEYv9/g5Nue+J
7HrMfYHy73/l2J7PY67cfLPtqtls91xvDDo5BNm+Sbf9Xu66XZY0Hyn/uJux
L7hfUOxQ5vFDCj6feIxXCLwnZDZ2bsLskWxRfq7lgcodVPfq67b0Gub5ET6j
4TNTNeF889HdYmZnZWPlA791Pz6Zffvec9tZ0EyCpib7cE+22VzZW91vxR/S
ye7sT++I5V2l4NPyLZZQ7Xyn11cjrHdivvn0H5CxQ67FwM+y7v4e8yg2ucHj
k4WeEyheVQ7U1X2H4oKOzkexzzC3M/KNzyfNPyo+GuoxzNCU1YVVE1bONMp9
TSVr2uo+Qr4to77FdIqJ/uqxjeLfFZ53zIe+0m3jYfpNfu/eBV4C3B34Afah
L2NWQb8I3Nsx2zfZhn8VmC4p1ivz2G9VjtVupDOvJsyOy4ZfAO7guV4PePaJ
WEw7N2zxrmLdQzG7/5JB9UjFx4qNr2V/KvIt5tH7Q01/g2gD/mXXbeWmu91O
jkaWNz3uUhzXwmOhSVGzHbIbzyD7q+47FPus8HjmVKbV4lUT6JC0eFGxovxV
tvss1QUnuQ+SjV/mdl41uR8aWk3pxpTFUrJdZQnz0/LRx9mbO913Kz4t9Rj1
iZj5Kp3F8qj5D/FckLT4Vec+lnWt8piwWcxyb933kcUWEyse1vvDijx7gxjE
/MM83/8lYX5RPlF293XXMdWD53hNWHop2y8dls3T+4HsnupDvbxG9GzK8m3l
2noraOU1XtVgqoWsDqM4tChusejL8HnY19gZGVt7vDcB2Z/0WEgx2s0epymn
qfC8JlJs8aJixZ/g0QN5Nl9qNTnVYVWXk8+/Mdd8+WjFPoUW4x1MWsyqePVk
2HJd2bpxUXvbkA6cSpjvl9+fEjXfLNs1DfzZQjsvvV/95vmsYpzTHp80Bt/X
37mmsN9LvG6jfGV60nKW54qsJqI7qPe35r4/stlXRc1uz4WmT7bd1TpRexOS
n1VdcKq/lfwGPAV4rd6bcqy2qLqi/NiKfLPbWwrt3Ut10bN6KwlZbHMC+mEh
e0/RHerjuYNqlmP87UB3aITnIHoXnep3Qe9dlzSyekL7HHun0RvNHuZphtzb
2YeHYnaWOkflgv/2d8PJjH3Ja2Wy/coNZP/XZ1vuIX/XLd/8q3SsFP4vep1Z
8X65x8B6w9zr75h6Rx0ZsjeXTaz32oTVP5UnjfJ7oRrPds+jlUMc8TxCsfx4
j7cfgc8Cr4HfAW6ax9g96Rtk27rkTzZ53jcnZrZPdk91svWev/eHz/Ne9/4l
2/I65XR6i5vo73Hj4vY+J/jypOVyytdei5m9lq1eG7a6m+oMyqFPe+4sX33M
bezhHHs/kz5sDVtNSnUA5X/1PDfMUlyXae/I5xpajVu2aFCO1bJ1XxpEzW/J
13SSjfRcOD1peZpytEpoR/hZH4iZP5Av0DthF9c95WGTPVdSfU5vvbojh6Dp
5rq6gXEb3Y/syrO6tuqcese7PWRvUrrTzaJ2r5U7zvM4oRc0s/2949qY1VIV
a6nO9IPXmu6N2xubaq/vNra3Rr0zpjNPsonF7Q/Cp9zfUxS/7Hb+ys8Ger1R
b/UrPU7Qe+NgfxfTu7fe4fT+9Rbyf+s1VcXX5wosbmzKWQzONd9+JmL1F9Ve
RuTZu5r819xG9sajGux7jS12Udyi98mjXiu+S/7Rcxy9H3byd5kbcu0+6y7r
DUzvOXrHqRWzGq7qt2eg/dnfK5WjJ3PM7ulNdWiOnWOnmOVO8lnKpbYW2lx6
S5/nb9yH0IEFnuMvCVuNTDUl5YslRZYzbuHMP/T8XbngUc/RVGfdH7bY+LMi
qzUo7m0Dz+u8hqPayQaPbxVHzPJY4kzY4gzFGMpHCzz3VO6i+oVylqoce8PW
+7Vy9y88f5ffUs1Kd/YFxvV3H/10zOIb+VP5h588Nywutrdq5a3rYqaj0s/N
8It7bvhmwnJR2Xndp8/8fzOmxCxuUMyg//t4xWtiytGXZpsNka+4xe/C4mKr
DSmPaBm12o1sr97zb0tZ/PYYuhH3+Fn/f7EvZf+DoXrhAq/d/T9QOUAF
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
HWvDNbKdNfAAvx+qFWswvSzusW0a/L9cX8j1BeA/pbHWzuBa85xYc65N16xr
1TVan7oWXDsLnAx/0evZsVZds6Nz4hl9tr8mz/YgeCB5xgtdF5S9bAdvDZrA
K8A58PNdI/CpoAt8EmVHyvPARPiV7luU14Mr4O/x33k5sbf4flWpq+eeAarA
7+H6Jp79I3A3/PFkD3PvGp/shTmU2bmxJ7r3uaZdy+6B34JTEz3TM6YkN/Zc
99ri3Nh73UPdO92Dv+Z/X4XPA1/Bl1EezAkt1D4W8vsHfn8PFsAHUl5LeQ0Y
AO/vM1PeDfr5LcpiD/X9rqgde0tt/qdWbuwx6bmx57vXpyV7vXu8e/vm5Cxw
D3Lv8UxQ29aG1HZU43auOsecW85Z92bnsHPXPdq58SqYl8yRS2lT4DOBnjnx
LsPhj5TFO91fFmPgu9/nuFButQ3Pvr52fPtcx7ws5oDvMhU+pSzeaWdpfFO/
pXN2lP9P3TwwMjvmpnPQueccdS46p53LzsnxtFlM20VgHHys7wBfAB6Dr/BM
yA7tXB91tvYc6JbM37+XxTf2275cFt+yEF6QG9+0PDe+od+uLDe0jr2JraLm
4bd8zTmQE990WjLnnevOabUJfWp9aTUKz6pSrjUuizPLud3UNVEWc3xcTqwp
19JY153ndU7MBeeEc8U15NpxzjiXX3CPK4s5PT2ZI86NZ8ti7P2Gfju/wUxQ
n2sng+c8x5I56Nx7PVm7j4IRyRreBDaCDeAj8ERJ+HD6bo8nvrA+rL6rPrG+
7zDPkJLwgT/Adn0SG3YC2Jgf2pMamtqZGtRGNfGCsN214e+izR354c/qLz7F
fVv4vRlMhn9C+8cLwjbXRt9K/TTqp3oNfj+4DN4L3Af/nH19K2f3J+Az+A6w
Eb4BbIfvAh/BPwQ74XvBFvhmsAe+D2yHbwNflIdvpc+jr6OPpW+lBqf2po/V
h/8dx/+OBb3h26ibkPgT+hiTqe9H/Y1gUn5oT/sT7U8NakdB+BD6Dtvh2bRp
SNtMkJUfWp82tba0ml8eddleA7n5oVXW0F5NC81SrVKNS21LzXIM7dbQ7j0w
uiK00b2JtqlG+qyxEepvAc/AR1KupHyJb/EXML5++Jj6luPgCwoixmFsY36i
tc2gnF4Qmpva5mKwKNE41b7U5NTi1MAK6TuX/8gBBb4L9dvgW30n+MlgI3wD
qAf/EXRNCy1V/3QZ9zzEtQfB0vzQqtRQ1U7VrObz3T7wm4PX8kLLVlNXS1fT
fj0zfJ5hSXyrfXr4bPpqavYHuOdX7v0F/Aw/BI7AD4OD8Kfpo79+NHgKXp1y
Jc/yDqgGr2OMA/4+qJ1o9XMTLVrNXq1TjU1tTc3zEP3up98fwcHy0P7V+NX2
jQHou+vT68vrw99ePzRHtcbB8He5b2XiT8wB2+jjfX6vBVvhGbTbzLNsAg3g
X7sGnPvgK/h3rgHnPvjW+U+5n3IJfS2uG7EWY0rGkoy5GFsyRmBswBjTe7R9
iXvmgn/BqzGWQ9NCG1cjN7ZkDMvYlTEmtQM1CbUINYRxaaF5qnWOVfukn3fo
559gdl5oq8aojE2psRpLMgZk7MeY0r5kz3av1ocpY04U8a6FoBReDPLheaAI
PpXz4RrOgz5gCvwSyu76JzUjJtnVswJcDM4HXbQpaDcedPY+bSV85AOgN7w9
dX+lHAXOhVdQzuLaTFBeGtpcBfX5tUKjG8jvGvw+AQzQH2oUOSPmihyCP8V9
E0AD2l4HGnpegyyQCeqBwfpUNeOZ++sPUVcd9INX1j7k/le4dhi0pG4pv5eA
FvAvKC8pDa3Q51H72k7dssTfN/ZtTNpY9K4klmwM2djxh0ns2pivsV5j2MuS
mLmxcjW83g1Dg1R7vLphxHaNeW9LYrzGro0JGws2hm2s9j/GnEsiZmss1Ri2
sWtjqsbe16tZlEQM/g31woYRWzfGbq7LD4zb940i58VYtzF9Y/nPJ9qjGqPa
ohrkjiTGa2zXmLuxf3MCzAUwB8BYhpq9Wr0xjYNJDo65N+b07KI8nvGqDnbC
d9BmYqInqTGpBXVLYhlqQl2Yd1cz70rYSz81/us+Tt2boDK8HdfOAx1AW9Dd
kmttQDf4ufRzA+gL2oGm1JVyrTFoAq9uP5SVQLWK0F6MyRiLUYM5Sv1i6heB
X+F/ghXw5eAP+BHwGvxVcNjrrLnj7NPr8AqfHV4MyuHjsGuaFUesz5hfJ+qa
c+100DE/YtXGfI31GrNe1ShyFMxNWNkocpnMaTCXwZwmczee0edtHDkc5jqY
0/G/XA74dsoqjPWRE3lGMK9x5DiZ2/SKeQdc20u5B9SEnwj2wb8ANeCDwS3g
w5NiTT2VF5qPWs9keAeu/UHbY6A9PJf1MIZyNMiBt6M8G7QCbcFPtCujLAX7
zUkwNwreH9SAN6U86FwBTbLCttTm1NbUxuxOOQu7aqY+JLwG4/QuY7canFAQ
Y+039ts65u5d7mnuZe5htSvijPNsq1URWpNniGeHmpNnq3uee51nrGeXZ5pn
2eFkr3bOOFfcs80NMGZvrN4cgWep+4N2x8AzyVxwT3Yvdk54NjqGjp1npLF2
Y/DG3o25a7too2ibaMOYi2XOhLkS5mQ597URtQ1dAz9SvlAR2roau3PROetc
dU46V10zrhXnrLaPNoS2gzaQc9s57Vx2jn+eF2eaZ9lnjpOxviQ/wpwHbTHX
mGtLm+xmcGl+5IaYI9KPe6aUh7al3romWSOHExvKXA1zKsylMGfDtXgq9afk
x5p0LWgzaCu4JloYq8kLLVdN94wkBm3suXlxrHXXnGvNNW8szhidsTljcsaq
jUEaezRmfSb/U1ERZ7NndJ9E81DrUIP6MT1yxsy9MQfnPL91fuw97kFq+2Po
a3RGaPyela5x17Zn5piiiBEZGxpdFLZJu2Rv0kZ5lbonG4SWq6ZrrocxWWOx
5nyYi2FOi7ks5mQ0z4+YkLa9Nr6xpze5/40GEYMyl0oNXO3bnKrZieaj1qOG
cyf1NxVFbNYY7W38nmreGPxY1bD9z6b/VvnhA7iXDgePJHuq2pKanVqdGpPa
6tTy+LZqrNpG2qDantpI2kb6ANr+2kj6AvoU+hL6BGq3q/LC1tLmUosqygtt
UU1KrVXNSa1JzVVfRB9D30KfZEB5aFZqVTfDe4CVSb6lMa1uiUalNnVxok2q
SapFqlHqu+jT6Mvow+i76NPoy+jDqG2p6arlqnFlq3Um+rn/MTk3YpTqtw+D
ZuWhWaql+fxqaWpyanFqao3BqNzIpTWnVq21Ff/TMi80V7XU1vBz8kJT1XZT
M1Yr1oZTy1NzVmsuSrS4WpQ1y0OTq1YeGrbaddXysN3V3NXateG1rd0j3Ru1
sdWC1QjVBq9MbFdtWm1ZbVj3Un1EfUP31L35YZNri+/xLATDkvikMU99DW1k
bWN9DrXt69Qek/jt4ETzV+sflBe+qTa/tr4+qtq9Gr/avhr+mLyIAaj9q/nf
nBeav1q0mrS+gT6Ovo0+wtbciPE4H40Zj6LtH0l805wxfeNLKiLW6/rRt9an
1JeckPie+nj6dvqgH3PufNkozkrPTH1ffQJ9AX1gfSd9Zn1lfahnWEtPN4i1
5JpS+zYmYSxCDdzYhxq82rsxkEe5Z2R++Ib6iPri+pD6jvrkCynvrYj17hj3
UP9J5peauLEuc5DNPTbm5VnqGdw+OVN/SGwsbSttuiuoG5TYw57h/djbGqRH
LMuYlme9NrS2s2d+i/TIOTLX6Kz0sA20CbQFtBGu5/6TqL88ic8dTGwIbQfP
7Nu4Xp4e14zhefYXgoLEBjg+sQE8+7UBzZUzh9rcaXPmhmIDfJkVtrU2v7HI
c9kL22VETNLYpzFKY5PGQM3FMKfJXCZzMq7PDh9F3+S67Ij9mzNlrpQ5ALeb
61MQ8Vpzfu5MCx9Z39g6c9HMUTU31Zw0cxUHJ7lu5ixq62ijaJto85h7dhXv
fGVh5KB1ywqbRlvmYnh36venRe6nY9aab/nPssjNM0dvVqIJqgVq05i7Yo6Q
uUHmsCwDW9Mi19kcenOnFiXxYv1DtafVYFWiQU0GO3NCS1RT3JhoZGMTTcpc
9meS/CvzHY0lmkNn7pwxRbXGTYl2NSXRvtTI1MbUwIzdTjD+Vxgx3H8yJpOK
IhfOnLjOvPeMrPCF9Im0BfWh9J20CW9KbERtQ20+c9HMITR30Jy0O6mbnBW+
m3NWX7CMtqWl4ROO5H878r/ngUcLQ3tdy7U1paHBGjvumx6xb+ffC1nhU+pL
zs6KXERj6MbOzUlsypqcmBt7uXuWvunVtL2qNHzU95KcJXOV/qXdkh05juY2
6kOaW/1DYeS6m2PdpThyxMwN61wcuWvmOJrbaA6buVzmLJmrZE6XuWTmeJnb
ZU6ZuUovwGdnRM5St0SjfSzxqfuD55P4n5rsgzznz1mRS2hO4XJ+X5ad5BaB
9VyrlB2+rD7tTzzrofTI/TYH3NxNc7bM1TKH09wtczbN1TSH6/jEh++c+Mi1
s8MH1/eulR2+sT69vrw+srlYy5PcNHOyzP0yB8vcK3PAcrnnU30O/YNEG+ia
aAVqBFerwxVE7qM5kNnck8qIXFFzmtSq1bDVrtWsX000BLUDNfA+3P9lQeRa
2sf/A0i01MI=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
wr8HPt6pF98M4Z0wL72X/x8USNjE
             "],
             VertexColors->None]}]}, 
         {RGBColor[
          0.5107687264150943, 0.5363716981132076, 0.5435308490566038], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJw1mXtglMXVxl/AEAQDQchuskk2u1mSbBJtC0WpgnL59EOwHxS5yEVAQGmV
VhSL2moRUCoVkFsgoCDeKmIBlQ+8i0hBhEqJYFVu1SIWa6uCIgJi6e/pM/4x
mbPznjlz5sy5Jz16/BU3NI6i6Hr+NGFOlkXRO9VR1Do/irYxD+H3IODiRBQN
qORbsyiaWxBF8xkd2HBhaRQ9kY2i81tGUUO7KGpVCH7TKDqLfXXsb8LeDW2j
aHl5FG1vFEV9WG/OaMT6PvCLwR8K/k9Y68/ozXqPkiiqZow9K4r2pKPor4xX
zo6iNDxUMnbDw272FrJ3CHs/iEVRX34vzuE8eHygKIqO5UbR0/B1L/x1g7c3
oD2kJorWQ78IeAe8tQK+osy8is8t7P099IedGUUtwV3D+hrWp3PXmYwa7ruL
c87m3Cs5dyTfT1dbPuvYu4C9S9h7mDlRFUUngVuBsyXIoR64X7hjL+j9E5k8
itzz4HdtRRSNgedR8HsN4//geSM438tE0UucuxH6y6B7JTRfg95l0DkPOnuB
fwE8Dvh2eO6S4lzg9skoOgidPdD5FfP5jPOA1yCTmcDdgZ8pjqLn4bNXiyj6
Jo6MuVsd9yqGZl/2d24FDdbz4W0663M551zOmAT9jpzzS+CuraNoBvAfgKcB
XwROD0Z7cFZDYzq0lkAnzvy//K4Gvhh4MvB44G3M8/n9AvAY5rX8Hgw8FJoj
GYOg+S38nmZ8Bc8voUsTgy4tR25Z5NIdfdiKjsys5Uz05Cre50DcPE+Flwp4
uwV+lgJ3BJ4PfAvzedDvBv0sZ57J2W1a+U4dUr5XA/gj+f16vuV9eZC5dGd4
mfWnJ98/Bz4BXK73qbR+ivYFgf778LmScSnrK7nH04zV3OXX7O2U8t6boNGm
xu+4lXc/j3d/jXd/hzcp4D6DuUtz6PeC/pvQuRf8XoEfyaa82vL5J/Nvynzf
ybx1e74dyouin/LWw3nrV5ujq9B5kbEGXWpAngsZs5DnAs7aHLf9LgbeFve5
9cBvxK3zO7nHu4zfwsPL0H6VsZFzNzPv5rwtwOuB3856fRPwllKvzy42H+JB
vFwb4M3cNxnu+yZv0cB4qZXf+YW2fuvr+N4RO7//DOwbft6M2/aHQPtFzuoF
/TbQ+zv3OiobgcciZHUnfK7n+2LwfgzORcx38ftC4B6c/a+E7XQr61M1WJ+J
DI/CwzJ4eJbvb1VaVqtYGxH0uTu4KwMd+bN51fZpPym1jcm+8rjjWfDUvrn9
1rSgG8vgvwH+hzW1f+oTfNRS1v8ctz+8Hnobg40sRgYzyv1GG9CFO7DHJviK
ZXzvC94CcJboTaH/IHwu4nuc+1eAMx+cS8CZCs5c1luwXpJrP3db8HWX830R
eF3AqYbfPvB9Ezxfxnpd8AOP4I8fY9yILh3jfv8OOnwXd+8e7F3n358wD/IB
X1Z7Xbw3BB0bC7wgwD2h0YxxDJrjOHca527QudA9zVrU0u+quRFjLzqwN2Y/
r/ccEd50N+vvsl7PeoxzHwi+/Vz4/bbKceQocnul0HJ7D/y3wV8I/tQq66X0
UPd4NfB8incoqbA/FF/zis3bSPifCf/3wv8p7nuc+9awflWZ46ViQVfObYKM
pnHuI0X2U/JRk9k3gP33sHcMOt+NsQj/vx36h6E/p4Xj5LdB5+sTjiuKKQMT
jsGKv6e4x2R4G8ZdRuJfnmAsZ5yFD1yLP3kAeGql9whf+nI03F02lAl2tB38
l4PPnMbaKMb3cuzzWqXs9/oy/47ffaC5W+8MvJf1ztC+jjPy4W0i996dtI49
A95JxgnG02E+zqjjnAbxx1lPQLMZv+tYz+W+O8N6PvD+EOtP8bZHkOHRlo7B
3+Q7rsX53pu9h9h7RDpW5m+bmNMhvn93tnjpB35jxj7g0oTlIpnEeaMSRife
6G/I5voK28uT8LYVOgu1H3hdkOcg6R16k0E+pdDbzPrjrI9mvQfjEPK8hPnu
jOHR4EyAz3O4SxvgNoHn69i3CPrDgVcDt6r1WftZ+wu/V+kdmYfyu3lr5x0t
Ms49PmDtXb6tZr0QnXoenn+ea1qbAj+TyhwD5P8PctcdwR4lpztqLKsccGcB
N23tuD095dj9NfzPYtyW47h0OMQ18fuzlM9ZAjw+Zb0bkDKv4nMP6zuBVwKv
kr/P2j88Dp85IUa/A86b4DwJzg5onxNi6wZwHwg5T1dk9S9wtoMzH3gO8hmL
DG8HngT8P8DD+D6vxrnBOtZvS3t9PTa0lFGMHW3m+2Mp65ji8LM1jsXvMe9Q
vgI8q8w5jfIZ5RoNgaZyop3Fzot6wnsT6Q38N+ctPsQ2m2KzD/N9eZXPko60
rrWeXI8ddED+A7CFkwn7CPkH2cBTQS8n8f1A0n67jrsP5u6NFZvAPVHkmNUB
3SwO+rkl6TxJOZJ8+bxga58lHZMUjxQz66sdN2fDzxchH9Nb3Rze61be9iN0
qX+OfWTbkMPMRn6jgpyVg6wN+WQq6biu2P06954qW8UvVXDvqmLf607WNra1
T/uEuxwCfx/4s7L27/LtX2adwyk/eSjp++vu/bhvXsK5xBrWr652zK1EBo+h
24+i25/hh+PAs/DDb4Gby9kfoc8fQ/MjaO5taT9xstS+4hzeaBM8jWrsN1gd
5BOxtyvnbeWsKnCqGSPAOcR6QZVzBtU0+RnXNZXAG6AzHJw/c9dnquyfm8Pb
zJCrj6v22+hdrkNu7VL2jc+lrKPSpWbMecFGMuBWMPLBP5WwHCXDa9L2EfIP
lzIP5i1ivEUj9g0MdtoZHvJCLjGVd/wcPsfxjjeD/8O09asJc49a+7rhafsg
+Z/XUvY7st8pspW06Q9OOGdVTrJUOhDw68A9zrn3tLYPUI4rPyAduS9tPdlX
5jvrvh8h/33If05L5wv9Qs7wAXpxMNiL8pQlQeeVox2utMzv431HM45xl3HM
vyYH+ibHddWDofbM594XIKsO3H0F8v8F41Su5a2Y9F8e4GV/yvZ1AHhPyvbW
Hb05Dr0TjI9Z/yDluPA+5yQLnYP1l78JMa4bv7/O8Z6+RdZF6aHecE7wybWs
vR70UzK7LPh56c7joS5WXjM2a/1/Hjt+RfkT8HJkcQs4nzNvYu0NxgrWH07Y
X8tXK65ekHBs7QJu95AnqF6cUOCasSn8t0Bek+HzwhLnHMo3xnDmqUDz7LTj
pfRKOfL8UudTr0GjJNSVNydcW6quXJJxHqAcQPF8fvAzktmHQW4Lko73Wq9j
389DTap85GShc5Lxha4nlTv9nXMPhDpUOns4Zr1Vff9pyM3k74/U2Ocrj9sd
crlrwPkZIz/P8u4b3uIL5HArd1iBHIawdpxvR1ifpnOyzuHlOz+usv/8ssS1
kOog6fXnKev2LvZe1Mz+pzM4J6oswzOQ7Znwfyc8vMh6l6zfbgZnni53LL6a
vTsr3GeozTo/Vm6s/GtHjWPBSe57mrvcDp2vSkxLdGTfU4INqg77KtQXyosX
h9xYsW5diGvjkfn51a6LFd9mfhd34POTuH3jj0rdi1EfRjlFTtp5hXL5AcXO
50/BTyPw78hxXtwj9FhUq70c6rhb4aVnwjXmFxnnBMoH5POaFdnvzQP3uazt
fQHz8JCHP8x77EQ+jzA3g7c8zpqS4zrjoUrXGola50/KVW5i7eKEfbL8sWxD
PrkMnEzaee0n0LuxwDT1znOL/Nb3ce6PQ900iLm01DXD3/h+kHFfM9vB5mAL
pdBMpZ0n12fdZ1G+8Tq4pZWO709xVqMCx7iJzJ+V207rOLegyLnWwKTrJdVK
F2dtw6KvHFY5rvLYdszVaec5E5LuL6i3IN/fqdr+P6beF/L5LfJZAO2TnNG5
mfPfJbXOgcfDwyF4+Edj16Yrgm5Pg07P0Ev5IXufYu+Tue6v9A7rB8tdY8hv
VEKvNu2cJwt8btp52gj2bcZW27K3HtwzeO9OTeyD6+L2w8tTzqWUR1Wz9/tp
56i/494XKnfJ87ymxLD6Fh8WuJb/KWstsrZf5V/zQj+kX63jlmLWdzWeaj7Z
2fPBRs5RPRp6Mk/Dz4dx+/KV6PLC0LOaXWAZST6KIUPbOY5UMNfwewZwDWf9
IO2ceQD3fTHUQUt485uCj1XPckvoe6gP1zHouWqjJuWuj64Anph2bXFj0r0q
2ePV2MeY4DOVly0IPnMMdN4qdK19Gfz0ibve3KqeGGMCOGvKnVMqPu7l3n9l
vMDdr+T8bcGn3dLOMVL3ki9MBXm2Rc6rCvxeqm9yQ9xPoCfvgvcsOJ2h8xx0
1uY69/l3kW1NcalpyM2Up68Mtbz6DXeFnsNeeLu8wPnPUHAOl9h/9gZ+D3g8
8HTmsqAD6r8Oirs239bWtiQ72lrruk763BPcdwJv6sF0KXX/pG+p+ybqmSg2
5mRsd7dBcx40T0KzW8Jvpvd6SP3hrHnYUOsaUnZXzjtUhdq2N3v7xR1HZB/t
i2wj8+PWJ+mS8og9Fc4l/lLsOlw5nvK+duHuG8udL8ovqae4qp37isrF1N9R
PvYoZz6Vcby4H3hpzD72WeYNGdv4iIz5E2/q/x0L9dH+AsdjxeIVfF8Zs89U
Dltb4DxWvZZV4Y3U01ofagT5rU1F9l3yu5cEP7m7yHXXf2uumPsd0r0HCxzD
FL/U01WfVHdR77B/0vm5+nCbgv2uY+8LMfO/L+b+i963Lfgdk8691xe4Ty3+
ladfXeh4VIl8UqGPpPr4hlAX38O+GUH/lVNvD32P8WXuZavukM9TLJFd7wK+
NOQ8yv0bFTv/71fimK14/aci12mSg/p5X1S6p9e62n1w5R43JJyvKFfZUmjf
J7+n3ufY0Fv7NM/xU31y8Z4JcVN+ZVSwwauAr4k7PxwGPCbufHE48LVx55m7
Cm3/sv0RrI8NOqy+0ZzQO6pK2sfJv6kP8XXIVeSPtwWf/P9l4f8Q+a6rPgm1
VRK+Lq1y//J43L0q5VpfK4cp8T2uLfL/QpSfbCxybSmd6R5zn0Jv8b765IXu
ezSA0xucu8HJRW5nJ50P6H9BY8r8/yD9D2Fq1vJRH2tSqPvkj/8Q6mXF+Ymh
r/gD3u39UIvpnEWhxyL/JF8gPxCDfqek77UuYxuQ/sueHonZpiRr2aty8zXK
sWPOe1sknK8oVxnI2q9Cf0bymxbeV7nAwErnA09kbJ+yTb3D3eV+C/0v4u7g
99S/GR3kI9tdF/Rf/mZZ8HtvF7qXqve9Oea6WjV1TsI5jXyseOkfMz9HSuxD
5T+ntXXNLLmp//dWuWP07Ixpic6SYvcXlONNYW1RqPWmZBxvFGsUNydk3Rf9
NO5cUHanPGJ+kXOJ/tDfX+48+UDCta5qrpnQmBvyOvXyVYcrB1ZPelfoS8te
uwc5qJ7T/4RU0y0sd12nmKUYNTDkY8Wl5kk52Db2/jHm+KsceUT4f9zv5YdC
Plwf82/Bwt0S8M+vcq0rv7opZlpaV/3Xtdg1oOJefYh9D2Z8H91FNei8UIeW
6X8ioa+imNo49JAHFrh+kEx+GbPcJfP/AK0RZsQ=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
+a0G+hNj8LJ7FfgRnt8o9kD3vjywEKwtibX0ruqhZWnzTk40rQVFfIcZ1lkw
vyj2Jtdw1273qCezY810rfxjdqxVNyRrvWvWLZSZAA7zrXc/jfbpx2fU9SnI
g99MuYezQ9t2/9V20qbWltaGOkzZdeRdCw7Bj4ON8A3qLfAN5GmUE9qHGoi2
uja0trM2u7a5mqBaoDa6trg+p77miMQ21gbV9tRGHkq9M6h3OhgCX8YeUZfx
qQOWwn9F2lTuTQHDMmG7ajNpK2nDHiB9NelPg/1FYRtrg2t7ayPPo55JjPko
nrUEDCTPeeTtDi6H30ob3zMu32ljwJ8BjSiTBdbAryPfHPI9Cn6TCdtPH13f
XBtQ30EbXNtbH+Jz6ulPueVV2UtADv8/pNw/QGP4YvIcaRy+tj63vtzoxFfZ
nPiKavZq9fqMVzJug7n+RN9/rB626wjqGN4sbFj3dvcc9xr3eLUSNYPcRDNR
K99AvvWNQzO/lL71AcPo21LQkX5dxLP1BB0yoTXoU+pLqjl8Rd6WjMWZ4Ev4
bvL9gXyPg13wT8E8+FzwSVHs1TOzo7/u2b34dmZi83fj+zkHdCdP16LQdxox
Pwc1C81brXsgfBZtzDTmRt9aVQstRM1BrUFNRFu4qrpXTtjEvUnrx72+oBe8
IWP8AX3ZBE4vDq3Db8ZvRc2jNmlvcu8NNVf41aQPSYcta5/VNtQU1RLVONy7
tam1pd3D9bX0wfS99Lm03fVB9D204aszTnPpf3v6/h3P8DVrwDqwFvwb3MX9
K7QlwJ0lsba7pruWu8YfIM/j9OsxsB/+PukL0uFL6Q/kUvd67v0J5GSFLTqR
em4rCZvUujsntrBtzCW9f6OY+34DeZR5nrIbQVP4Jup/PB2xJNv4K/+fSEfs
zjRtH21ebV1tIPee+uSplx170Cr6uBPsACvBWOp8KCvene/wJMqNz4qxcEz+
x/991LMXfAv/Z1bYcNpuX2SFr+Ccc67pMwxrFGPmWA11HS2Jb9ZvtYblS8LG
1rb+Av4o12Vcb+dZJ4L/Fcecd67bB7/t+fyflxXf+A7uN8+Kb9Vvtrgk1iDX
niJtWZ7pSfL8ERyCv6VtnfhnA8C7/J+X+LumXeL8Zm51ARcXRSzGmJWxKmMy
aklqgmqBakoPku8D1zC+hRFgGv/f4f/bYGomtEk1Q7VCNUpjeWpSalHG9NTG
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
LIzIhE+hLzE8E9qdmptamxre/wHEQo/n
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
             "],
             VertexColors->None]}]}, 
         {RGBColor[
          0.7446736603773585, 0.7496235849056604, 0.7307987735849056], 
          EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
3uRxvRo9ZiPDGr6vFBh+lW8k4NEbXj3JdasipmvpeRB66+554FSB6UJ6WFxi
2FS4dCD3GhQ1nl250x+9lik3nymw/Cyc+3SlYd1IwjCN6oju1D9j97oCOa+K
WaxVp00X0kP3EusrFLPTudeNjEQL6y1yvb84Df+1nvMfR/YnGRci/xWs/cfx
8NaE9RvqNaYh2zbHzMv4vua4tIl7fOwxLhzxUKlhiUuQ6wP0tpz1f6tncT7N
+J6P3jpxlynEYE9GE7HQ2M5iXvF+DN1/ETes8gI6iKYNG7dHtr94/Y3Dp9D1
fyN3SPBfLt8fo4ZT5TMrkWe19zzCxf/1GiFsfl/c8PkC+C3yuq/afk6l8W/g
/0XlhrfjnL/H+yzl3T1elztDv8Qx5BL0l+sYRpj6aKHh6jr4bWfvePbeDP1T
GcN4t2GjWvcHYatNxeafwvgNjvOFbec4vh2QMSwu354Iv65eow9ErQar/or3
UMeQTeh+tOfq2cjfyJiSb3E2xGNNa52qbL039AvdJ3XXCY6LRpLfxhTZXabE
rQ+RbIrLH73GTcQWYyoMzz+BjH9gjEDOi9l7udt3W7FhAuEB9XMjHTf+HNMp
i+vJCcPHwsaqP2d5LX4saVj/Zz3wf63jZ2HV7ysNryo/bfUcJX3PcJ2rt77U
69eJQqsZqhfz2HuDY90F+N3mKqutp+Cxxfn0Qf5rHAP3cZzyImMQd18R9X5K
ucHzrXqaR10PE1KGpWSjevaG9pZXJe88P1dxvMdz1D/gMyxm9WtNkfVCqk1/
Z/0Wx40/IGfw3mp6wnp49e8/wXMBPBfAs4Gzzm5v/d/6pOlOelMfucJjtic8
n4tabnuD/3/v9hI+u6u16e2bhPXAytXC5tsi5tsPYMNpbsdRyP+D9/XKMQ+W
W55Rbd/awer73QnrZ4RFVSd3OVZXn62eXL22eLztfFaXGl4RVtmF3Z7xXkz5
Ka+95ah69HqRvxssKTGcpJou+4/MmO2GsNbbMVUj62P9DeRb9s6stL5M2F+x
LT9/WOspu7984fl25g+dyqzfU69XkfZ6lm94UBhRNSiWtjylHJWOGy5U7RiY
NEwpH36Xe3WMWG7/LXd/2d9brmbvm+ztzN6n5ePe611eab2r+tZ1Set5VCOU
7z9xfNWNvUcr7S3kA+Y1juWEKbY5zlyesH5GvYx4D3f+ys1DY5afb8dWDd47
jIvY243ebZSzl/hbk3Blo+dnnTklbeeqhoxyXKGeo877VuXiupTl5mrOWoUO
N+QYXjvpmK0L5/bm3L3Mv8rYm5fww9a04X5hWuH3rIxh+DroH3D6m+KGG5TH
lA8me95YlTL/kG8Ma294WhhjVAfrtdRnXQX//mnT+S7ueqXj3p7QDIDmI/Vl
zKcy39fc6k/Ca1AMnW30/jqrzN535BvqJ4SJhYe7s/dq36ueoLHE8MAdHazm
KR9OFj4sM1z3adp6Eu2dlTafkGzCJi2911admVRstWYNe8/3Xrih2N7v5EvK
08e97qh+fuk19Od6m7Caq15hg/dTd0fsjUi5ogk99ON3TZb1DYo9xV0tMk8s
MntF1df6u8pY1h90Xcl37nf/eZZ9dziGL48YX/EUhhro9UW48niVYcvRGcO+
wr1rk4aH5Od6K1rlmEr99GzHunUZe6dT3lAfOd6xpfKy8rP6x/Upq5HKvXr3
usZz9c5SoxPN9Zz1S+8Nd0ft/VR9rupSrb9R6K1OOFhy6q2rzvtc1f8DjgHe
zBiGEH7Q29L4InsD0TtovWNpvbOo11Jsqm/e6X23+qruXpv0ZlMUM7/SW1qN
10T1aj28d1D/3dLxW3bEcoryid4Ro46Za2JWM1QvjsQNS8kHjhZZD6b+K6fM
+gTVrObMr/PYXJT2WpJv/celjh8UxyMqLZZVSzs5tmyMWL5QrtBb2oXun/8H
swppbA==
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
m6L/B9DlzgU=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1:eJwt1mtwlsUVwPFNAogSxVaSkBASIQm8XNR2ClWSIK3DHWpRtFhuEoIEyii0
UBEZy0VwgDFOpx8Ui1IsYJlWwAqaECRCBaudWq1UHGoDQmSgii0V8YJA+tt5
ng//Oee8u3v2nLPn2X17TJ97+33ZIYRfoT1+UhDC9PIQLjLuo8/GspIQhvQJ
YV7nEFbQl2J6vxDG9gih5JshPEbWsCflh/BQWQit7UIYTJ+ILYUh/BNrOoaQ
6RXC7+in+RpQGsL1V5tPfszuY2yrsedwFPXmj6oI4dauITR08Ds5kv0In+vs
cZ34augrcTY/iTvGWiP2HcZGF4WwmM8HcSs97/IQBpk3EAMwO42zZ14I+3qG
sBe96JMV42Kx/DJivzKEA/QLmMnvOet28T3fPvewG8Ve1DeEQjTTG+QzTJzZ
4twm5lH0oXiF7x58T+S7lGxmXzJnsjw/uyyEteRF9gMxB35zrF1MX4iHxT9B
/CXiv5Nczv5QvT/AA2q/Xt1b6WPtswkbcQtfO/l4onsIu+XRhB/TR19lXz7a
9bYH2nULof8VIUwzvluOTTiH0/Ju4WOBuOZjHl4U57yCpA4x95/Tgz1K1WSK
Wo5Ty470EnzKx1Q+p+BF+gb+CuS9Q95XqcEnXULIZ7eRz/ntD8hhFxr7tTj3
WDdGrFPpT8a45bQGq9E/rW2LOrwhl1Z1eZX8F7uMLMUv9c4Edk96R73VS79W
oAyv81stpptQnRvCV+pQRb87P+nf2LNL0v7qGn+jT0QOfawcP89Pzimezazy
pB+Oiz2k4yPMPcZ+Vg43iv27WISH7LtHvd/Hs53o9n2ZXi++r8V1Hl9iQ+fk
LBowSd2qM8m5fC2XYE2bvF5L8y6112Z7LcoJYT9Zwq7Rh2/z+RYK6Vfrybfs
81eMsO8f+fgb/d9kNr9ZKE1rUWWvl9LzeoGsZGfzs1v8+8SfK76seA/we5Q8
gt70cnvU238D5oulkzgepdeVJvHEGA6aO5P+/ZLkPol3yM3xbOTbXu3GWDO6
LOmh2EunxdheDCXiel+sH7O3W/M/nLBmlbXb6NV6sxJz9GeD3qii14j7vLVf
4Qtsls9Q64fwczO60gfr+3pju9BYnNQ51jvagzPJmj3p2CjfWBff2DWYgRt8
d0f5+Q8/76lprjlH2KfiPZP6zmOfZA+Kd5s4M/gZJom9jf8r6B3oHchL7BPW
HUMtf69Y+yH9TFlyt8X77Az5X/aTciyU473yLSDXsnOLkvsu3nEL9UcnejGK
ipJ79A6/daO/E/uH30s4n/bhsl7J3Dh+Z3rPjDQ2F2/Ko86aEfS7sAJZ1izw
2wT6Id9tWXpnjiTfZfeJexQl90p/czLsaepXr2616raKvJv9ibG/GHsDZ9M6
xu9lYPfk/lmeSb6ddubfgQprb7Euh/5b+1xwd1xj33PkM+whvscqVGKg7/Kw
mi3jYwAfN+jdb5NL2aeif7LFbx/RT2KzGNaL4Wk0p2fQj88f8r0gK4ThZN/4
RjjLtnheGKaXB+jr/eJZI67VeDTNMfZt7I/YE53THg7dk3clviW19v/0yuRN
GI5hONgzeR+22SOTflPl5Fb2pt7J3RHvi0bkie+A+SG9M/uR+9kPGrsfa9R+
jjWL6Avsu8l+G/GdtBZ/ls8BrJbbcuteo19Ut5+6X1vcrcV66gL7NnZjfH8x
3m+7jG3z+yPquxI76eP8tlGcrTiOSm/herHPMb/VuuM4mvr9zPwzGElvsv4s
PVdcs9VkFmbgdbVabOwpY+uwtiD5L/J38hm/T7b2IP1tHML1fF+Hj4xN7ZD0
yjBnMRR3pX0zwtg4c1v4+QE5vDzp5YVqdD9Wp319rzqeUo+TmBt1ta1Ss19g
ibptEWsl/dq85E2P7/gXaR/+xu9PYR32mve4+TPNO2HOceNz6Pfg6WvdpWq0
Fxvpj33DGVYktYn1qJPLYXlM1mN9492By9O7YrxvtdC31RVdipL/VDuMPY8f
GZ9m7gv0ffLbnp5NG7mX3WSPYvdFN3wPje6PFZmkL2MvVpMPR7tvcp7xDNeT
bXw2lyf9EXviS4zl90ZnNSY9r6z4rdKzM8nbGt/T2/CmsRnWv5S+azvJWvYY
e+xK/y99To5mN9n/Xev/geb0vXnZ/Ib0zqyL7xC9uzvwVXX8U/wflb43U+Rz
UH7vYBr9nNz2O5elar8EK+mr9Pq37NXITwPOpu/Ie9bcZM12a2rJQ+yt5h/D
B3jc+j3W3m6vI/QWjKdvcaaDzJ+FOhyuSHyEsuQtjO/fqrzk7OPb+7w+247f
p+/w/wHu3Lym
             "],
             VertexColors->None]}]}, 
         {RGBColor[0.917794, 0.920966, 0.881936], EdgeForm[None], 
          GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
ZcBYqhL7qV2l8pFJjn+5JjxvW+0Yp8x90E+sM+88vxhv/0k/yryk0PuBd+Le
8724Oq8z17uQPjaueLltTFg5cfJUy7Kn/R9jaPrD22LCdonrEmv5uVw63816
QXkEmNem5oq3X8BcplVqLOofY1PeaamxzabtZh5WYF5pe0bEZH86+K4W7R1x
qUTrH89YfvN9IWJOEfN43PuJOvEw5jq9Wn6AdpB+nc88l+PdCI79oH0RfVIs
Jvyd2DvvxG20rBZwD4Y19kDb8nzQw1Fhl/Xnyfxl7s99NTPx7BnLo8b6B7kd
51nnMtovYpNhxxnUjf2OT4iJdbJf5Hoeth37HvagdUQ24C7ozk25OpO5zvEX
fUV/6z5zkQXYdx2rlAP2cxnzLa4V14x7+if0eWFEvutax1D1/qex+12C+VbF
dTZPvGeLcZ6vS4Wt0JYwpj4TlTx4n+7hSu3NlxEPpFbrTkIY9Ysgz20hnaVn
V8uuzcNzUC39oC/e7jw8B/Xzw8qJjtr+sT7tDc/LOPeJziGYSzzj2IExxHjf
aVrr+1wbfVZI7I0YN2OVyT5T4jeuDXVxkNd5J/r+yPuacuriNRxkXci3TlG3
Yvb3vJvMuOAj3/flGnItiUemQW+PZCtmDjDfns5l2CfH2RVSPLHLd5prfQ+R
c6BPGmYfNd8xF+fJtT3kHH+MY3z61WnQi9klOhemfae+cI3G+jtlR//R39+I
U24zVtnM49CX7vZ+5bpwfw62jKKea3/blyH+lmfZ/B77YO1KsHbbMVY6nsNh
5ZK7Q+qL8mZssNW4yd6QxmZ/e0L6Zb0G2GeXRdRvJfr5Q1h9sN+o/SDt3RH7
+18w7yAsP9IGchhSIp+3I6R1YhveRym2v49Th8OS/ynelwjLFgcoTw7LJjfE
c0pYOW0psaWw1uyzEt23I37Ce4J1ucJT+C3f8iCmQpyCGMXva2w9uhflP1RK
fxMwxysi0q1i9F8Zlv6R2Af5/gn9n86Vj0xC/W4R4WHEeALv8cbNdDeLe6Fh
mXArxrMhx/L023f6nLb+Lvx661l353Pc/yHwkBpWXj3R+4Zt1lRgfj4rPOL4
iHtyS55wcGLgk5yvc09moZ9YWDhGIzw3DSvf3mb9o262LtU9Ia7JScwxIayY
gNj6DmO456LO+WHpRUs8XxSWvhTiOR7W2oYw3y4Rxa3Eip43HrLVe4CxTirq
Z4eFa5zAWCdz5ccbozwzLByA67PLesrYbJvxwHq93Gv95Xe+n3aezHMaYj0d
fB+I+7jAeQLvp//X+4vnG8+VK1an/rG/fc7BmKcxJ6OdJYZ6xnezCnxXi/F6
sWM85oLc3yMsy23eE6eiOu9/1/83yHcOw9yPuTTHYI7HcepzPv4yzu8FeUwu
Uf5PPK6d72lxvL2+j36Gd7YrZYMuKdI9QtpbYl7tfadruDExYnl97XOITY4w
TsZv9F197b82oJ9mxhh5z7SV8UPmjuSLeQjvj+8sF7bJnHhlkWIpnjmsissf
1RifYDy43DgNY/9TMZ318oyVPpVnpbTLT2Ku9+QqfiIukhwXNkJ92Wo9XWEZ
EyPhHas+Rbpnxfvdm3zf7DHvL8abtC9cB+rkzdCpsaXCLn7Fb/uI7OZr5oux
+dwS3UGptX3a4X3/kO/BURf+H86W+uE=
             "],
             VertexColors->None], PolygonBox[CompressedData["
1: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
wW/Y40dicA+2fA78yNo17b3/DvBYe9PQ3gQYB++bkKER/22Hf1voZUPvM3Sb
DiYxdxVYqt6dNUOQfzfyf4/sc8GYUusg2feBY6B/StL21RnriC43o9PV6PIG
OI75XszfwtwxYBW8bkv7VzlLveojxM+MfPesqoWXguJc18Qq6E1K97vKz+I1
HqxLn+cbkK9HuXPrr+y5gLN5PP65mvN5FRjE+Ogaf08EkyL3VOql9iN/IbIs
wr+z0P0rMAv/peL2ne4oo9jfm/2T2HsNuAt58ljfhrVngOHMn1LjOfFUrF5e
6VhUzA5H/1OTrl3rW9sWV4KNrW2TeaxtyZ4BrD1LOR/+XePuHS4C3fg+AlzM
90LQPeEa/2a6n1av1zXl3kE9X5e4z6DOnnoM9WaZjC/LdI92AfYfVG1dD8L+
l2GLC7DJYsUiGFXsnKVc9TA4BftcyPqDWbujwLn4Y3BstnNyH+jHoD8m0zxE
a2ypbSuaZ8XdI6s33pXlXl53Ht111NP3w/+D8X/vfMdAjL0BGmvYuzrmWrCi
yLVSZ1qx/VPSZ0Mx3pb1Wax/m7VvgdaMY5G/34w5Ny2ucC1TjkowX8z8Wube
B1Ow/cn488QC19ze2LZdwrlFOSab9S0j05JMQ7BHL+yRwh7DQB7zOcy/E7MM
e9F1Rty9mvQdjH4j0veL2WAvvhra4Fj9BSyF3+yEe331/M8wbmZ8SY7vgLL9
3GrfbeQDxV5Olc+WYnBco30qXyoH6S6zEMzJN89h8B9b4bvMI+BW9O1b5Vyn
nHc3su6ps7zq6TqRj1cSA6+29B0qhX6l6LcuZptVMk4wXh/zb83QX1Rh2rpj
7sO3e0SDuTdizrWfgEFtnHNXsDejzLWnD9iFPQZjj53Y4ltQXuueW722ZAjw
28tvq2KmuRf6u2tNe0XMvf9O8GyO7wC7mf8djGVuCfiT799qvXZ5zGdJZ0xn
S2cqB/vNr3LuUw68tqNromrh8Yx/Ze8fJT4bl4HP1fvx24Mxv3EUIF9bdHo3
5hh4lf1zqlwrTgClzBdGjrX3VN9qXcNVu3WnKGI+P/KcaKhXmFbsu4R6hm/R
bXvCvfgfoDvy/gX9Dwocg78SL98xv1uxA/bDfxbztxd4zc4i33l1180FGfD7
u9ZnSzb9DFv0iLv3052uD+erY9L9ie7X6oXnl7oWqCdW7lVOUy5TDu7HXC/k
3ybbxNx7fRn33VA9mHqrlvAYkekeq5m9c5KuRcqBAXmHVDr/PQS2lLrHV28/
GIwiPqaBQbmuCfK1dJau8nk1sXNJyrX17FzXrksi+141rCHpO4p6LemkXDu/
0rzEswNznZKe1x3mwYTPZFP6vUC94mHUl0PS/f9IdBsedy7eAz6p8x1cd2+9
WTXBe2Cpa6tiRLGoGFLsKCb3s7Znve/GU0ATa3vrzSxmG/ZhfEpkW6rHLUO+
VNK1UzX+F2hNLfHbkXqIaSWOccW2esQBpX6D09ubaL6ecg+m3mue8g36H1fl
2FaMHIt/9rH+Amw9LNNvXxm6I2T6DawH47+YH5rpNXr7uKXSb2V6AzmB+RZ1
3qs96g0vjdw7q0dcTf4+qNi9sO6oqv3N1c6d6gGOZe6fxX5rUE+lXHRO3LlT
OWkN9GZEfhvSm92R+OPWlH39CLgmck+iXkQ9613MLQOP5zpmOtb7DVCxeFK2
c82ilPcq56jX1puR3orUcw9Ct/UdXIsVH+c32Iay3U/gjZRzuHK3eHRG/58i
x+oQ9dMd/Oamtzb1QLezdnHKvdM5IFbiNy29ZekN43D274q893zQnfHuyN+y
eR22WVHjtzrdh9Tbrky/36kePsHaT0p9F1NPt4rzPoX5DS1859XbwZtxx5ry
+0bGixPuFVVjzmR9F9ZPYO2VYH+R3xS0VzTujbum7Uq/b9XCqwKeG2KuAUcw
7hz5LvBhzL3U81XujdRT9YbeITWmrTeTNcTywvbuTVW/v9X9NP0+pPeaHXpv
Tt/f9Zvenn9Ivwfq/rqk3HdyncWrwJHE02nEU3mhe3S9FT9b6tqiN2O9XWxu
8Fq9YZxJ/K9Mv7+p/h2p3rHcvtWd/TZkuwIZ13LeSpDvUcYzk/5WDfsHtA+E
xxZ03QyK4F9U7d5oDhjK+M5q9+aSaTu0v2nwW4R0Ooz9nSLbSjSmMPd7yrVP
OUZvI4oZxYreSPRWNDBu26ufa075DUVvJ7pTza5yzVGtUQ+ju25x0rVC/XgJ
8ifS91/ViLdY2ztd/1XzcoiHhXGfDb05KTe1SLi3VI56tMJv6rpb6w1Jd60G
7FfXzneuDugToc8mdNkIvmP+0Eq/TatnPxv/d69x760YG1jhO7voqecbiCwv
V9l2TQW2/Zik72ryQVPSNUm1SG++uot0KffboO4kuksPSnpe+f2vuN+cJb96
5Gfg9U2F38Il88HI2yGy7z5QzcYeC9L1XzZ5gv1z487t6nHrddeNrJtivkO9
3yz0VqE310bm6yPTkg1OL/P/PPS/DvXE/welfKj3
             "],
             VertexColors->None]}]}}, {{}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1nmQznUcwPGvdYQWQ7sta1lXcg21LMu6coRWSMltnZFjt5CMQoYx2NYs
yeQcx5KaCYPYtYRCYtxRk5ncGzOdGGGH7fVMf7zn9fs8x+96nuf3/GqPzOyb
USKEMCsqhMZ1QugdE8IX+kpXdVMVYkOoonbqpLd002vf5kSFuiFkc51yVcP8
HZvxWuT5Z0MopSHmqhzM6hzH5vyQ/bmSc/k373J8XAgj69kGM/WB5dXM41+s
+lwII6paPcdwLC9wKaOrhZDDivyaydzJljzNATzFQXzIpfyX2bzLHCbUdxxs
z0dsy8ccx+R422QKP+FY5nAC87mCJ3TV8hoWcBUPMJOfchJXsC3Hsw0zWIId
WWxbXfg9a/II63A5i+zjMj7hEJ7hYJ7lUJ5nOn9iCnezFVtH9l8TtVFb9It+
1evWXc22q5cLYQHPmHfxum4ptrrn1fF5+8UO7M5MTVWWeSVzuZ+XdEXnzMWs
muC7oQfmVkxTH0U38F1ibS5iKncznXc4jPc4hy1qhLCJU5nL6TzHfBazfE3f
44bOCRsxnX25nrN5nTP5G7eyQaJ95Du8zMmMaeQ7wyrcwzu6p5nmzrV8llzN
Yj5im8aOpXYIw5nNLB7mIh7jfW2zXMRdDH47+TxuzmYOR7InUyOvs87Atdxn
G2t4iN05hw/tSxrzGcs8xnMabziGJtzB3x3jXH7OfszlII5mM1ZiFAucu/PO
3V5e4H4eVJznoyv5TjPd67bxHxV6LMu80/J2TVRzcyITdMh7L1rPDG5mKybr
vs9wuLmAe/Sx6pizmK18tTPv4zcaYfkRW3tvqmZpjo7qmMraZn3bS+G7HM3d
zGYR2zsPnSOfnXkBGzlHJ1nOeayoJeaB3KHdquKcV/YZDNMoTTFv4CVdVqzP
7ZTH4nmeifyZNzx3RZu1UWPUw+MxjOE+687TEFWobB32obFtZ3GhXtZB+1hs
n3O4j3s0Ra3NDVmepxzzcc3Vl85Ne85j4GPnaaTlIn6rA1qixZqk8eqrKK9p
yxTV0m2/xShe4E2/0as6oE3mtczmDE5TmjqbEyK/Zf7hmnDXNWIPzzGbWzmU
A1VXiSp0bWnk8e0sx/ci1xvXo5e4lwlczULX7gxOZyKjeMi1fptr/Vxu5Xzu
4CLmcTH3cwkPchkPczmP8jP+wJU8wdU8ybU8zXU8y/U8xw38kRt5gRfV1H78
aU7iHbbkfbbhI7bnE3ZiCfvdlVHsxle0SM0i/y1MivzXsCWXM5U7y4RQkmnm
nspVV/MW9mAvluKrLM3eLMM+fE156mcu4CC+yad5yb5vsV/zOYVD2I+3/Lde
1zX/s5d5mVfZx3P9vaYX+zGNfdmDvdmNfZjBOZzEjziRszmBszieM9lBqUoy
t2IztmATvsiGbMr6bMx6bMjarM+arMt4JjKOCYxlPKswjpUYw2hWZjlW5FOM
ZmmWZ0mWZWBpPnbcUSxi4EM+cR7us4h3+YCLtVBrzPO5ivOYHrmX0UzzALZW
suopUUM9nsAy6m65NNNY6J4oiUeZyE2MZg4XK0OFri2TeIudOcD9WRx3mp/h
bfdlR9y4vc/J6hV5PXtwHLtwFDtwGNtwIJP5Bl9gr5j/7/n+AzTtfVo=
             "]],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{8826, 5313, 8872, 5374, 8870, 5371, 8866, 5372, 5410, 
             8897, 5413, 8899, 5416, 5418, 5455, 8924, 5458, 8926, 5421, 8901,
              5376, 8873, 5375, 8876, 5319, 5317, 8833, 5316, 8832, 5315, 
             8830, 5311, 8826}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{8895, 5409, 5446, 8918, 5411, 5408, 8895}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9201, 5877, 9318, 6000, 9315, 6001, 9340, 6045, 6128, 
             6132, 9497, 6248, 6358, 6362, 6415, 6419, 6458, 6460, 9691, 6510,
              6570, 6573, 9769, 6624, 6682, 6684, 9857, 6742, 6793, 9899, 
             6743, 9859, 6686, 9814, 6629, 6626, 6575, 9736, 6516, 9693, 6462,
              9657, 6425, 9625, 6371, 9579, 6261, 6257, 6141, 9406, 6061, 
             6057, 6012, 6009, 9321, 6008, 5878, 5876, 9201}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9765, 6609, 9803, 6668, 6730, 9851, 6672, 9806, 6612, 
             6607, 9765}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9949, 6857, 6910, 9988, 6861, 6856, 9949}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9969, 6890, 10006, 6938, 10049, 6985, 7029, 10088, 6986, 
             10050, 6939, 10007, 6891, 6889, 9969}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9984, 6909, 10022, 6952, 10020, 6954, 10063, 6997, 10061,
              7000, 7044, 10103, 7047, 10108, 7006, 10066, 7003, 10071, 6959, 
             10025, 6911, 6907, 9984}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10157, 7115, 10181, 7148, 7173, 10207, 7150, 10182, 7149,
              10186, 7119, 7116, 10160, 7110, 10157}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10425, 7574, 7647, 10471, 7651, 10473, 7654, 10475, 7656,
              10476, 7657, 7660, 7740, 7745, 7809, 10559, 7748, 7744, 7663, 
             7659, 7583, 7580, 10431, 7578, 10429, 7576, 10428, 7575, 10427, 
             7572, 10425}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10680, 7987, 10730, 8060, 10784, 8131, 10836, 8192, 
             10888, 8270, 10952, 8361, 11017, 8452, 8532, 11077, 8456, 11020, 
             8363, 10954, 8272, 10890, 8194, 10838, 8133, 10786, 8063, 10732, 
             7988, 7984, 10680}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10702, 8032, 10752, 8099, 8163, 10815, 8105, 10755, 8102,
              10760, 8039, 8033, 10704, 8030, 10702}],
            "210"],
           Annotation[#, 210, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl1n9Ql/UBwPEP6RQjLU7E0ERFRPyRG6UmKLrwNzc0Jzosbf6aZP6o3E2P
melZnOJhmM3CyJVRw1ptqSjOCJ1hZstV6trqLmZac6vlTA9FTmGv5/rjfa/n
83wfnufzPDz3PE/veQ/9dFlMCOH8DSGkpYQwKSGEKr2uBj1j3Wl+qZu6hBCv
kbpbv9BibVCp4vqEUMk6HdZg4y84gW0SQ7iX3VjIO7iKM7iN6/g/XuB5Xoy2
6xrC3NQQFnGZylWhGuvOs2vfEObcGkIXLuBCnuJTjEsKoYwdWc0h3M3X2odw
nDONm/gUL7OUF1nG7mnmz2xe5QheYyGHdHMs3sUtXMgyPsj9LOf7Om35eR7g
c6zjMv6GS1jOEVzETC5l4Gi2ONYYvsserGdvbmWzOT7N6yyP5hgbwknm+f1m
f/9rTuZOruLLXM2/8FUW6SXLk7iCE7iScczlR/aVmvb9fgPnGJ9wrPv5Cefz
UxZysV5SldJt+zkT7OdWrTXO5+Narw+N9/CMzqlLP9t1D2EUJ7CQv+RGbuN+
1ept43+yWS3qelsIt+mK9cMYkx7CFC7QA+plXMIs7mYm93I2L3EtM3qEsIZ3
spIr+TH3s4Xtkv2/2YH9+zt3TuWLfIxn+Cj/xTeY2tN9xX5s4CPsPMB9x3ju
43e6pEeNc3q5L1jBFl5l5kDXv3cIP+cGzmYpS3iUjfqD5WbuYSv38xhLWca5
fJILeQ9HR9vZd1tW8pBjTeBaNplLLi9zCuuYxF/xrHMYyF38xjmu4++Yz0rO
5HwOZifG8Ca2Y51reMq1q+VBJVrfPfrbm82fG2xziTW8wzH+w1Xs6diHOY2t
XM88cz3KnYx1Dm2cUw5n8EE+y2d4knGeU/WWP7G8jRVcygKOZftoG75mX8fs
cwpLGMPprHfM3nyM35jTal5gFmt52Zw3cjfncBmHMoXJese5/sN5r2aRhmmd
cZN7rlEHNDK6x/h2dP/qqobbLks7/baW9TqqPvbZV3c5xsOcz2rO4142qVnZ
5pcT3VvWr2d/5/ABY51XR202LuAu7VW8a3BLdH9pnpYb7+BnalCC63jcuiSe
YDL/zrN++210/fiKHtACdY6y/i37rtF92uKY8ZzFD81lEJ/kRk3SOLWYe5k5
v8VCruRypauD8XHX4Fh0DfWqa5PNxzmS69mGra7ffMvXeER/1lZt1sNaouma
qhHR9fbMSGXP6LmhU8ZfeqYc5GHWabtKjYu4mJOZc2MI//XMuugZto8fs5Rv
cBYLlKKfGX/tGXg7q9mRRTzjeTmOP47eLaow/sp7ailXMpkxPOS91uq9doTV
LOYulrCGm1jLzTzIp/kOt/IIn+V73Mb3o3clP+B2/pUv8COeVIrjnTVO4zkO
4Ne8nd8yg99xKBuZyavM5nXezWDeYzlJxRpkXMLB0fuUGdH7lUO5lVms4Gi+
yBxWciyrOJGv8yd8k/ewmtNYw3we4ExO5438zLlUmU8xl/M+5vOc74cz+sK3
RAMbeJpT/DbDNnnMZy6nciInczzzOIa5HM3xHMEcDucoDmUWMziMg3knB/JH
TI+uJftG15Z9mM5e7MseTGESk5nI7kxgEuOZyE7szDjewlh2ZDvGsS078Aa2
Z6vzbMtrjGEzW513E6+zkc28yCvcpA163riYc3W/1hjfy2wN1yLjIeyjZMUq
17qvfN9l8AiTWc8U7mQnbmGZHtI5z5IdvjNPcKzxSY7j3ziRnzKNh5gafUOy
H/uryt+t4A/ss5xvKtHyc2zPIl6w/TR+zkGs50C+xzb8Pd/1HbuOm1iiWZaf
YAGLuYaHuZp1LOKh6JuY1/kKm7mDjdzOK6xjT8eoZQ/+id24j4n81jb/1h79
USv0iPL8voQTWcgxnMdRnM1MFnBIdG78IfM4gOMTvv9m/z81+8i6
             "]],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{6005, 9317, 6003, 9320, 6007, 6011, 6055, 6060, 6136, 
             6140, 9500, 6260, 6367, 6370, 9624, 6423, 9623, 6424, 9656, 6461,
              6512, 6515, 9735, 6574, 6625, 6628, 9813, 6685, 9858, 6741, 
             6683, 9812, 6627, 6623, 6572, 6569, 6509, 9690, 6459, 9655, 6422,
              6418, 6366, 6361, 6252, 6247, 6131, 9402, 6049, 9343, 6005}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9603, 6398, 6441, 9642, 6402, 6397, 9603}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9945, 6854, 9983, 6908, 10021, 6951, 10019, 6953, 10062, 
             6996, 10060, 6999, 10100, 7041, 10098, 7043, 10133, 7080, 10131, 
             7082, 10159, 7109, 10156, 7114, 10180, 7147, 10203, 7177, 7206, 
             10225, 7183, 10206, 7180, 10211, 7155, 10185, 7118, 10161, 7117, 
             10165, 7084, 10134, 7083, 10138, 7049, 10102, 7046, 10107, 7005, 
             10065, 7002, 10070, 6958, 10024, 6956, 10029, 6916, 9987, 6860, 
             6855, 9948, 6851, 9945}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9962, 6875, 6926, 10002, 6879, 6872, 9962}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10036, 6970, 7016, 10081, 6973, 6968, 10036}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10313, 7385, 7451, 3584, 10354, 7388, 7386, 10314, 7384, 
             10313}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10344, 7436, 7498, 10382, 7500, 10383, 7444, 7440, 10347,
              7435, 10344}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10387, 7513, 10426, 7571, 10424, 7573, 7646, 10470, 7650,
              10472, 7653, 10474, 7655, 7658, 7738, 7743, 7806, 10558, 7808, 
             7812, 7877, 10603, 7879, 7882, 10643, 7947, 8016, 8019, 8089, 
             10746, 8023, 8018, 7948, 10644, 7885, 7881, 7816, 7813, 7751, 
             7747, 7667, 7662, 7586, 7582, 10432, 7579, 10430, 7577, 7518, 
             7515, 10388, 7512, 10387}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10610, 7896, 7962, 10659, 7899, 7894, 10610}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10655, 7961, 10703, 8029, 10701, 8031, 10751, 8094, 
             10750, 8098, 10808, 8160, 8233, 10862, 8165, 10810, 8162, 10814, 
             8104, 10754, 8101, 10759, 8038, 10707, 7963, 7960, 10655}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10906, 4445, 8388, 10962, 8304, 8300, 10906}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10927, 8335, 10994, 8429, 8513, 11060, 8434, 10997, 8336,
              8334, 10927}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10964, 8394, 8486, 11042, 8397, 8393, 10964}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{11052, 8503, 8567, 11094, 8507, 8502, 11052}],
            "168"],
           Annotation[#, 168, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1:eJwl13l0TmceB/ArmWBiPZaxx1Ziy4x1LIdUKJJKKWEUKUWlU3RUNag6Woqm
hyKkpZm0SC011lpLatdaSmsppZHRQU2ZtsJhMEPM557543s+v+e5z12ee9/3
ue9bd/jYvn8pFgTB4MggaFAvCBIrBcFKWSMFclmiKwfBJttKsbycVHfmCLmi
fp6j5JF6Nj+SXKlZPwj2sUB+kO7aEb8LgoGsxjS24GSm8DX252JO4y+8yaGP
GVslCIZwJJ/l80zlCA7mMA7icM6VCep5zJR16kvh+Kquv4FrVq/Xd5kbuZAT
uYCTmMXJHM3n+Ge+JIskW7bpu86t/IWVHHOEY4/kSY7gac5lyWpBMIfR/JQt
uIGteIz9eZQDeIezeZNzWb1hEOxmNe5jB/6XaWxV3Xn4R2ZyJOfyRW7ne9zK
Rcznfp7jFyziPT7gf1gvNgjq1wiCOmzInvwTx/NNjuN0ZnEVF3A11/Mg1/AI
D/A6v2fJmu4NG7OLPFTHsZBlWcBSvMRb9jnMQh7nGW7hKX7GT/kBM5jOmZzM
VD7NgewfHp+xbMpmjGQEi7EET5rrRXP+hle4jLu4hPs5nos4jjnszDGM5zhG
sQsj2YNfeRZ1eIRfS5I62rZ0JnIZ07mUk7hCDqk/4VFO4ceczFV8iq+xLJNZ
hn34nWOfkhx55LPxV0aGz5xntIfzHNM4SqJsW8nzckEqOk4VeUN/CqfLLPla
exMLeZUV3acq0sm96s40vsJ3uJjbJU8+1/4778tD+Um7hmfZUtpI0CgIerEU
X2BtZrAdtzCVhRzEm5zKlrWsGZzAE9zOh4yK8ZlnSTZq7LvPp5nD3lzC1/kj
17J+bZ9NNmQBX2I+x7J8E/NlWW5mIm+wBwvZto5noe7I1xnPBNmhzuZD3mO7
pp51XesR32YqZzODX/K2rFPf5yYWcTsjrY+f87j2fC7kSPZmfDjOsSOZyz3O
1Z1v8K5rS+Id9uIuVuWrvGRuTbiR192DaVzBFObyGQ5nHMswYClGsQJLsDKr
S0v1KA7hOv4qt2Sbdgvn+ImTGePc+9iXRZzFZNf6JZfzC65iCXOJMLc+0l9e
1H6f7/EEs3iKJdyXvepoHuAZfYuZzTEcwK4szmhGsRzXO8dx50rhu4ziQB52
TQ04nTdcc3vm8Y65vMPbnMO7vC971AnGvBXORRrZ9ysOYmnH7CcD5BvtLSwd
nl8SXcMwfihLJUe7gOXN44i6Io+xKk+yFs/yUrgPV3O5vCBPaldhBdnpHCec
aygHSXkZrF2OQ3nCtcUxk+9Kz/CzLPvM4wk+NKe56p1M4wR2ZDPGyjHfre99
p2ZyLRM4ixEs8n08LAclXt9eZsk8GSujpZ9E2vY4O0h9iQm/93LaWnDZmrCb
+7iKy5gjk2SU9lPsxhhWD9d9a88da9DO8J0ls2Wt9mDOZEPWlWvWsmbam1k6
XFP5D+veE3w8fF9Kdvh+9+4dwwmsxYB7vKuLvKsPcjNncCMzuI1zmMd53M0F
3M9DUs7+J7Qr8DQr8yyr8jxr8AJjeJF1eYkNeJWNeY3N+DObs5CteZvteI8d
+YCd+YhdmSgzpKl5ZDAu/I3A5pzP1sxie2YznkuYwFx25Ur24Br25Ab25mb2
5TbuCq9Fpmjv5TPsx9/yvHuw0vXM4DgOYgqv+m32o99oEzle5qlf5Q8sYAHz
mc8LTLZPin3Pq7+T8/q/5TmeZTfbk23vwiTGsxs7MIFt2Ymt2Z7N2YZxbMkm
/ANjw3sdPjvHPCBHHf8g6+mP1V+bj7Fm+KxYlbW4w5itstf4bawYPmP95cNn
zjLhZ4DRLMe1xqwO9zF+JTcxlxv4MYsZV9y4Iu1IfqgvWz7Rfp8ruIh3+YC3
eZ+ZMkc+0n6bI+Q5mab9LKdyIDtKW4kN5yZD9NdiCUlSX/Gbuzkvsw2PsC5X
sUx4zeHveS5kpoyTa9aol3mdr/BfTOK37MFz7Ml89mIf+VWdzt+E8+E6qaTe
wMr8gMU5iTeMnchb7M+LbM5DjODfWIwbeNR/jxmczzkyVJ3BwXyLAziV/fgm
p3AXJ3EH05nH5bzPpbzNHP6buxjjXHmsyc9YjVtZmT8b80/ZJOvD48nLkmz7
aPZgGrtwGDsxle04gK3Yl79nMhuzW6X//8/6H6aHESg=
             "]],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{8806, 5270, 5328, 8843, 5273, 5269, 8806}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9070, 5698, 5730, 9092, 5700, 5697, 9070}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9316, 6004, 9342, 6048, 9401, 6130, 6246, 6251, 6360, 
             6365, 6417, 9620, 6421, 9622, 6369, 9578, 6259, 6255, 6139, 9405,
              6059, 6054, 6010, 6006, 9319, 6002, 9316}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9566, 6343, 9602, 6394, 9600, 6396, 9636, 6438, 6479, 
             9670, 6443, 9638, 6440, 9641, 6401, 9605, 6346, 6341, 9566}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9692, 6513, 6571, 9734, 6514, 6511, 9692}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9724, 6553, 6604, 9763, 6554, 6551, 9724}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9961, 6874, 9999, 6924, 9997, 6925, 6971, 10038, 6975, 
             10041, 6928, 10001, 6878, 6871, 9961}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10035, 6969, 10078, 7013, 10077, 7015, 7055, 10114, 7058,
              10117, 7019, 10080, 6972, 6967, 10035}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10281, 7328, 10312, 7382, 10311, 7383, 7450, 7453, 7510, 
             7511, 10423, 7570, 7644, 10469, 7645, 7652, 7729, 10513, 7732, 
             10516, 7735, 10518, 7737, 7742, 7805, 7811, 7874, 10602, 7876, 
             7880, 10642, 7946, 8014, 8017, 8087, 8090, 10801, 8153, 8228, 
             10857, 8156, 10804, 8093, 10745, 8022, 10695, 7951, 10647, 7888, 
             7884, 7819, 7815, 7754, 7750, 10519, 7746, 7666, 7661, 7585, 
             7581, 7524, 7521, 10391, 7517, 10389, 7514, 7458, 7455, 7390, 
             7387, 7332, 7330, 10283, 7327, 10281}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10342, 7432, 7495, 10381, 7497, 7502, 7562, 10416, 7564, 
             10418, 7504, 7503, 7443, 7439, 10346, 7434, 10343, 7430, 10342}],
            
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10407, 7548, 10455, 7618, 7709, 7713, 10548, 7789, 7857, 
             10593, 7791, 10550, 7716, 7712, 7621, 10457, 7551, 7547, 10407}],
            
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10439, 7597, 7678, 10486, 7600, 7596, 10439}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10481, 7676, 10525, 7759, 10523, 7761, 7828, 10568, 7832,
              10571, 7765, 10527, 7763, 10530, 7679, 7677, 10483, 7674, 
             10481}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10564, 7827, 7897, 10613, 7829, 7826, 10564}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10609, 7895, 10656, 7959, 10654, 7956, 10651, 7958, 
             10700, 8025, 10698, 8028, 10749, 8097, 10807, 8159, 8232, 10861, 
             8164, 10809, 8161, 10813, 8103, 10753, 8100, 10758, 8037, 10706, 
             8035, 10710, 7966, 10658, 7898, 7893, 10609}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10868, 8244, 10929, 8333, 10926, 8328, 10923, 8331, 
             10993, 8428, 8511, 8515, 8577, 11096, 8517, 11059, 8433, 10996, 
             8431, 11000, 8340, 10931, 8338, 10934, 8249, 8245, 10870, 8242, 
             10868}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10904, 8297, 8385, 8389, 8477, 11034, 8480, 11037, 8483, 
             11039, 8485, 11041, 8489, 11044, 8491, 11046, 8493, 11048, 8495, 
             11049, 8496, 11050, 8498, 8499, 8563, 11089, 8565, 11090, 8566, 
             8568, 8629, 11134, 8571, 11093, 8506, 8501, 11051, 8500, 8419, 
             8416, 10984, 8413, 10981, 8410, 10978, 8407, 10976, 8405, 10973, 
             8402, 10970, 8399, 10968, 8396, 10966, 8392, 10963, 8390, 8307, 
             8303, 10908, 8299, 10905, 8296, 10904}],
            "126"],
           Annotation[#, 126, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1: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
zZii///f/z+LT4m4
             "]],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{8929, 5467, 5504, 8953, 5506, 8955, 5508, 8957, 5471, 
             5469, 8931, 5468, 8930, 5466, 8929}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{8986, 5562, 5593, 9004, 5564, 5560, 8986}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9026, 5627, 5650, 9045, 5629, 5626, 9026}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9341, 6047, 6129, 6134, 9498, 6250, 6359, 6364, 6416, 
             9619, 6420, 9621, 6368, 9577, 6258, 6254, 6138, 9404, 6058, 6053,
              9346, 6051, 9345, 6046, 9341}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9565, 6342, 9601, 6393, 9599, 6395, 9635, 6435, 9634, 
             6437, 9666, 6477, 6530, 9707, 6480, 9667, 6478, 9669, 6442, 9637,
              6439, 9640, 6400, 9604, 6399, 9607, 6348, 6345, 9568, 6340, 
             9565}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9705, 6529, 9747, 6585, 9746, 6586, 9778, 6641, 9777, 
             6642, 6699, 9820, 6701, 9822, 6644, 9779, 6643, 9781, 6589, 9749,
              6531, 6528, 9705}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9960, 6873, 9998, 6923, 9996, 6920, 9994, 6922, 10034, 
             6964, 10032, 6966, 10076, 7014, 10112, 7056, 7092, 10144, 7059, 
             10113, 7057, 10116, 7018, 10079, 7017, 10083, 6976, 10037, 6974, 
             10040, 6927, 10000, 6877, 6870, 9960}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10246, 7260, 7292, 10263, 7262, 7258, 10246}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10267, 7299, 7340, 10291, 7300, 7298, 10267}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10278, 7324, 10310, 7381, 7448, 10353, 7449, 7452, 10386,
              7508, 10385, 7509, 10422, 7569, 7639, 10466, 7641, 10468, 7643, 
             7649, 7726, 10510, 7728, 10512, 7731, 10515, 7734, 10517, 7736, 
             7741, 7804, 7810, 7873, 7878, 7943, 7945, 10692, 8015, 8085, 
             8088, 10800, 8152, 8226, 8229, 8317, 10916, 8231, 10856, 8155, 
             10803, 8092, 10744, 8021, 10694, 7950, 10646, 7887, 7883, 7818, 
             7814, 7753, 7749, 7669, 7665, 7588, 7584, 7526, 7523, 10393, 
             7520, 10390, 7516, 7460, 7457, 10355, 7454, 7389, 10315, 7333, 
             7331, 10284, 7329, 10282, 7326, 10280, 7325, 10279, 7323, 
             10278}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10289, 7339, 7397, 10322, 7341, 7338, 10289}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10307, 7376, 10341, 7431, 7494, 10380, 7496, 7501, 7561, 
             10415, 7563, 10417, 7566, 10419, 7567, 10420, 7568, 10421, 7507, 
             7506, 10384, 7505, 7447, 7446, 10351, 7442, 10349, 7438, 10345, 
             7433, 7378, 7375, 10307}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10318, 7395, 10360, 7465, 7533, 10400, 7467, 10361, 7466,
              10363, 7398, 7396, 10320, 7393, 10318}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10396, 7530, 7598, 10442, 7602, 10444, 7535, 7531, 10397,
              7528, 10396}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10436, 7593, 10482, 7673, 10480, 7675, 10524, 7758, 
             10522, 7760, 10565, 7825, 10563, 7822, 10561, 7824, 10608, 7890, 
             10606, 7892, 10653, 7955, 10650, 7957, 10699, 8024, 10697, 8027, 
             10748, 8096, 10806, 8158, 10859, 8235, 8321, 10918, 8237, 10860, 
             8236, 10864, 8169, 10812, 8167, 10817, 8108, 10757, 8036, 10705, 
             8034, 10709, 7965, 10657, 7964, 10661, 7903, 10612, 7901, 10615, 
             7834, 10567, 7831, 10570, 7764, 10526, 7762, 10529, 7767, 10532, 
             7682, 10485, 7599, 7595, 10438, 7592, 10436}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{11136, 8632, 8681, 11170, 8683, 11172, 8635, 8633, 11137,
              8631, 11136}],
            "84"],
           Annotation[#, 84, "Tooltip"]& ]}, 
         {GrayLevel[0], Opacity[0.4], 
          TagBox[
           TooltipBox[LineBox[CompressedData["
1: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
9vw1WzGGTRnNJkV+/t3/f8vBg8s=
             "]],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{8907, 5427, 8928, 5465, 5500, 8949, 5501, 8950, 5502, 
             8951, 5503, 8952, 5505, 8954, 5507, 8956, 5509, 8958, 5472, 5470,
              5433, 5432, 8912, 5431, 8911, 5430, 8910, 5429, 8909, 5428, 
             8908, 5426, 8907}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{8977, 5548, 8997, 5578, 8995, 5579, 9014, 5607, 9011, 
             5608, 9036, 5641, 5664, 9055, 5669, 5672, 5690, 9067, 5694, 9068,
              5673, 9056, 5643, 9038, 5611, 9015, 5580, 893, 5547, 8977}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{5561, 8985, 5559, 5563, 9003, 5595, 9027, 5630, 5594, 
             9002, 5561}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9024, 5624, 5649, 5651, 5678, 9059, 5652, 9044, 5628, 
             5625, 9025, 5623, 9024}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9332, 6024, 9385, 6108, 6231, 9484, 6109, 9386, 6025, 
             6023, 9332}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9344, 6052, 9403, 6133, 6249, 6253, 6363, 9576, 6256, 
             9499, 6137, 6135, 6056, 6050, 9344}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9394, 6121, 6239, 9490, 6123, 6120, 9394}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9563, 6338, 9598, 6391, 9597, 6392, 9633, 6436, 9665, 
             6475, 9664, 6476, 9704, 6526, 9703, 6527, 9745, 6583, 9744, 6584,
              9776, 6639, 9775, 6640, 9818, 6698, 6753, 9865, 6754, 9866, 
             6702, 9819, 6700, 9821, 2241, 9780, 6588, 9748, 6587, 9750, 6533,
              9706, 6532, 9708, 6482, 9668, 6481, 9671, 6445, 9639, 6444, 
             9643, 6404, 9606, 6403, 9608, 6349, 6347, 9569, 6344, 9567, 6339,
              9564, 6337, 9563}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9632, 6433, 9662, 6473, 6525, 9702, 6474, 9663, 6434, 
             6432, 9632}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{9661, 6471, 9700, 6522, 9699, 6523, 9742, 6581, 6636, 
             6637, 9816, 6696, 9863, 6751, 9904, 6800, 9939, 6845, 9975, 6899,
              6945, 10013, 6900, 9976, 6846, 9940, 6801, 9905, 6752, 9864, 
             6697, 9817, 6638, 9774, 6582, 9743, 6524, 9701, 6472, 6470, 
             9661}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{9797, 6663, 6723, 9843, 6664, 6662, 9797}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10190, 7158, 10213, 7186, 7216, 10228, 7188, 10214, 7187,
              10215, 7160, 7159, 10191, 7157, 10190}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           TooltipBox[LineBox[{10227, 7215, 7240, 10239, 7217, 7214, 10227}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10238, 7238, 10245, 7259, 10261, 7293, 7335, 10286, 7295,
              10262, 7294, 10264, 7263, 7261, 7239, 7237, 10238}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10247, 7265, 10266, 7296, 10265, 7297, 10288, 7336, 
             10287, 7337, 10319, 7392, 10317, 7394, 10359, 7464, 10358, 7462, 
             10357, 7463, 10395, 7529, 10440, 7594, 10437, 7591, 10435, 7589, 
             10434, 7590, 10479, 7671, 10478, 7672, 10521, 7756, 10520, 7757, 
             10562, 7821, 10560, 7823, 10607, 7889, 10605, 7891, 10652, 7954, 
             10649, 7952, 10648, 7953, 10696, 8026, 10747, 8095, 10805, 8157, 
             10858, 8234, 8320, 10917, 8322, 10919, 8238, 10863, 8168, 10811, 
             8166, 10816, 8107, 10756, 8106, 10761, 8041, 10708, 8040, 10711, 
             7967, 10660, 7902, 10611, 7900, 10614, 7833, 10566, 7830, 10569, 
             7835, 10572, 7768, 10528, 7766, 10531, 7681, 10484, 7680, 10487, 
             7603, 10441, 7601, 10443, 7534, 10398, 7532, 10399, 7536, 10401, 
             7469, 10362, 7468, 10364, 7400, 10321, 7399, 10323, 7343, 10290, 
             7342, 10292, 7301, 10268, 7267, 7266, 10248, 7264, 10247}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10376, 7491, 10413, 7558, 10459, 7631, 10507, 7722, 
             10554, 7796, 7864, 7869, 7936, 7938, 4150, 8079, 10742, 8082, 
             8084, 8146, 10799, 8148, 4299, 8219, 10851, 8221, 10853, 8223, 
             8225, 8301, 10909, 8305, 10911, 8308, 10912, 8310, 10913, 8311, 
             8312, 8400, 10971, 8403, 10974, 8314, 10914, 8313, 8315, 8408, 
             10979, 8411, 10982, 8414, 10985, 8417, 10987, 8318, 8316, 8227, 
             10854, 8151, 8150, 8086, 4168, 7944, 7942, 7875, 7872, 7807, 
             7803, 7739, 7733, 10514, 7730, 10511, 7727, 10509, 7725, 7648, 
             7642, 10467, 7640, 10465, 7638, 10464, 7637, 10463, 7636, 10462, 
             7635, 10461, 7634, 10460, 7633, 7565, 7560, 10414, 7559, 7499, 
             7493, 10379, 7492, 10378, 7490, 10376}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10557, 7801, 10600, 7870, 10641, 7939, 8012, 10690, 8013,
              10691, 7941, 7940, 7871, 10601, 7802, 7800, 10557}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            LineBox[{10920, 8324, 10990, 8423, 11055, 8508, 11095, 8572, 
             11135, 8630, 8679, 11168, 8680, 11169, 8682, 11171, 8684, 11173, 
             8636, 8634, 8574, 8573, 8509, 11056, 8425, 8424, 8325, 8323, 
             10920}],
            "42"],
           Annotation[#, 42, "Tooltip"]& ]}, {}, {}}}],
      AspectRatio->1,
      DisplayFunction:>Identity,
      Frame->True,
      PlotRange->{{1., 72.}, {1., 72.}},
      PlotRangeClipping->True,
      PlotRangePadding->{
        Scaled[0.02], 
        Scaled[0.02]}], {192., -189.}, ImageScaled[{0.5, 0.5}], {360., 360.}],
     InsetBox[
     GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJx13TmOK+m6HdCErDRp0KBBgyISCSKRSJDZ94x3blO3brXvDUGAbE0hhhZD
0hAEQdwb4kKFHGLlPoSecbHrY8Tf/Pf/8b/+63/+t4uLi2F5cfF/P//f//vf
x/PPi+Hcl3iBl3iF13iDt/gKX+MdvsG3+A7v8QHf4wf8iJ/wM37Br/gNv+MP
/Im/8Dc+4uHcI774D3J88YMcX/yNHF/8nRxf/IMcX/yTHF/8RI4v/kWOL34m
xxf/JscXv5Dji1/J8cVv5Pjid3J88Qc5vvjz3AMe8YQv/pPv4xFP+OK/sL3j
5yVe4CVe4TXe4C2+wtd4h2/wLb7De3zA9/gBP+In/Ixf8Ct+w+/4A3/iL/yN
j3g494jbP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu/yTH
7Z/kuP2THLd/kuP2T3Lc/jl5wCOecPsn38cjnnD7Z27OsXf8XOAlXuE13uAt
vsLXeIdv8C2+w3t8wPf4AT/iJ/yMX/ArfsPv+AN/4i/8jY94OPeI2z/Jcfsn
OW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj
9k9y3P45ecAjnnD7J9/HI55w+2fud5Vzjr3j5xKv8Bpv8BZf4Wu8wzf4Ft/h
PT7ge/yAH/ETfsYv+BW/4Xf8gT/xF/7GRzyce8Ttn+S4/ZMct3+S4/ZPctz+
SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu/5w84BFP
uP2T7+MRT7j9M/ccx99Vzjn2jp8rvMYbvMVX+Brv8A2+xXd4jw/4Hj/gR/yE
n/ELfsVv+B1/4E/8hb/xEQ/nHnH7Jzlu/yTH7Z/kuP2THLd/kuP2T3Lc/kmO
2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bPycPeMQTbv/k+3jEE27/
zD039jmOv6ucc+wdP9d4g7f4Cl/jHb7Bt/gO7/EB3+MH/Iif8DN+wa/4Db/j
D/yJv/A3PuLh3CNu/yTH7Z/kuP2THLd/kuP2T3Lc/kmO2z/JcfsnOW7/JMft
n+S4/ZMct3+S4/ZPctz+SY7bP8lx++fkAY94wu2ffB+PeMLtn7n3VD439jmO
v6ucc+wdPzd4i6/wNd7hG3yL7/AeH/A9fsCP+Ak/4xf8it/wO/7An/gLf+Mj
Hs494vZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7
Jzlu/yTH7Z/kuP2THLd/Th7wiCfc/sn38Ygn3P6Zey/ueyqfG/scx99Vzjn2
jp9bfIWv8Q7f4Ft8h/f4gO/xA37ET/gZv+BX/Ibf8Qf+xF/4Gx/xcO4Rt3+S
4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu
/yTH7Z/kuP1z8oBHPOH2T76PRzzh9k/sOpz0T+x7Kp8b+xzH31XOOfaOn1f4
Gu/wDb7Fd3iPD/geP+BH/ISf8Qt+xW/4HX/gT/yFv/ERD+cecfsnOW7/JMft
n+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5J
jts/Jw94xBNu/+T7eMQTbv/ErvtL//ge3PdSPif2uY2/o5xr7Jmrmc9rvMM3
+Bbf4T0+4Hv8gB/xE37GL/gVv+F3/IE/8Rf+xkc8nHvE7Z/kuP2THLd/kuP2
T3Lc/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv+c
POART7j9k+/jEU+4/TO3zjj947ob34P7XsrnxD638XeUc409cz3zucM3+Bbf
4T0+4Hv8gB/xE37GL/gVv+F3/IE/8Rf+xkc8nHvE7Z/kuP2THLd/kuP2T3Lc
/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv+cPOAR
T7j9k+/jEU+4/TO3ryH94zo/1934Htz3Uj4n9rmNv6Oca+yZ3cznDb7Fd3iP
D/geP+BH/ISf8Qt+xW/4HX/gT/yFv/ERD+cecfsnOW7/JMftn+S4/ZMct3+S
4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/Jw94xBNu
/+T7eMQTbv/E7qNK/7iu2HV+rrvxPbjvpXxO7HMbf0c519gzNzOft/gO7/EB
3+MH/Iif8DN+wa/4Db/jD/yJv/A3PuLh3CNu/yTH7Z/kuP2THLd/kuP2T3Lc
/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx++fkAY94wu2f
fB+PeMLtn7l9m+kf9zG4rth1fq678T2476V8TuxzG39HOdfYM7czn3d4jw/4
Hj/gR/yEn/ELfsVv+B1/4E/8hb/xEQ/nHnH7Jzlu/yTH7Z/kuP2THLd/kuP2
T3Lc/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bPycPeMQTbv/k
+3jEE27/zO0TT/+4b8p9DK4rdp2f6258D+57KZ8T+9zG31HONfbM3cznHh/w
PX7Aj/gJP+MX/Irf8Dv+wJ/4C3/jIx7OPeL2T3Lc/kmO2z/JcfsnOW7/JMft
n+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f04e8Ign3P7J
9/GIJ9z+mTuXIv0TX+IFdl+D64xd9+c6nC32PZXPjX2O4+8q5xx7x88DvscP
+BE/4Wf8gl/xG37HH/gTf+FvfMTDuUfc/kmO2z/JcfsnOW7/JMftn+S4/ZMc
t3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9s/JAx7xhNs/+T4e
8YTbP7Hn4KR/3BfuPk33TbmPwXXFrvNz3Y3vwX0v5XNin9v4O8q5xp45zHze
4wf8iJ/wM37Br/gNv+MP/Im/8Dc+4uHcI27/JMftn+S4/ZMct3+S4/ZPctz+
SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH75+QBj3jC7Z98
H494wu2f2HO30j+eQ+G+cPdpum/KfQyuK3adn+tufA/ueymfE/vcxt9RzjX2
zP3M5wN+xE/4Gb/gV/yG3/EH/sRf+Bsf8XDuEbd/kuP2T3Lc/kmO2z/Jcfsn
OW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9c/KARzzh
9k++j0c84fbP3Dl/6R/PvfEcCveFu0/TfVPuY3Bdsev8XHfje3DfS/mc2Oc2
/o5yrrFnHmY+H/ETfsYv+BW/4Xf8gT/xF/7GRzyce8Ttn+S4/ZMct3+S4/ZP
ctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu/5w8
4BFPuP2T7+MRT7j9M3euaPrHc7Y898ZzKNwX7j5N9025j8F1xa7zc92N78F9
L+VzYp/b+DvKucaeeZz5fMLP+AW/4jf8jj/wJ/7C3/iIh3OPuP2THLd/kuP2
T3Lc/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8k
x+2fkwc84gm3f/J9POIJt39izzFO/3iun+dsee6N51C4L9x9mu6bch+D64pd
5+e6G9+D+17K58Q+t/F3lHONPfM08/mMX/ArfsPv+AN/4i/8jY94OPeI2z/J
cfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3
f5Lj9k9y3P45ecAjnnD7J9/HI55w+2fu3PT0j+eIeq6f52x57o3nULgv3H2a
7ptyH4Pril3n57ob34P7XsrnxD638XeUc4098zzz+YJf8Rt+xx/4E3/hb3zE
w7lH3P5Jjts/yXH7Jzlu/yTH7Z/kuP2THLd/kuP2T3Lc/kmO2z/JcfsnOW7/
JMftn+S4/ZMct3+S4/bPyQMe8YTbP/k+HvGE2z9z9zSkfzy32HNEPdfPc7Y8
98ZzKNwX7j5N9025j8F1xa7zc92N78F9L+VzYp/b+DvKucaeeZn5fMVv+B1/
4E/8hb/xEQ/nHnH7Jzlu/yTH7Z/kuP2THLd/kuP2T3Lc/kmO2z/JcfsnOW7/
JMftn+S4/ZMct3+S4/ZPctz+SY7bPycPeMQTbv/k+3jEE27/zN0Lk/7xnHTP
LfYcUc/185wtz73xHAr3hbtP031T7mNwXbHr/Fx343tw30v5nNjnNv6Ocq6x
Z15nPt/wO/7An/gLf+MjHs494vZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3
f5Lj9k9y3P5Jjts/yXH7Jzlu/yTH7Z/kuP2THLd/Th7wiCfc/sn38Ygn3P6J
vYcq/eO9DJ6T7rnFniPquX6es+W5N55D4b5w92m6b8p9DK4rdp2f6258D+57
KZ8T+9zG31HONfbM28znO/7An/gLf+MjHs494vZPctz+SY7bP8lx+yc5bv8k
x+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu/yTH7Z/kuP2THLd/Th7wiCfc
/sn38Ygn3P6Zu/cu/eM9MN7L4DnpnlvsOaKe6+c5W5574zkU7gt3n6b7ptzH
4Lpi1/m57sb34L6X8jmxz238HeVcY8+8z3x+4E/8hb/xEQ/nHnH7Jzlu/yTH
7Z/kuP2THLd/kuP2T3Lc/kmO2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+
SY7bPycPeMQTbv/k+3jEE27/zN2zmf7x3invgfFeBs9J99xizxH1XD/P2fLc
G8+hcF+4+zTdN+U+BtcVu87PdTe+B/e9lM+JfW7j7yjnGnvmY+bzE3/hb3zE
w7lH3P5Jjts/yXH7Jzlu/yTH7Z/kuP2THLd/kuP2T3Lc/kmO2z/JcfsnOW7/
JMftn+S4/ZMct3+S4/bPyQMe8YTbP/k+HvGE2z9z9/qmf7znznunvAfGexk8
J91ziz1H1HP9PGfLc288h8J94e7TdN+U+xhcV+w6P9fd+B7c91I+J/a5jb+j
nGvsmc+Zzy/8jY94OPeI2z/JcfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7b
P8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P45ecAjnnD7J9/HI55w+yf2HvH0
j/dqes+d9055D4z3MnhOuucWe46o5/p5zpbn3ngOhfvC3afpvin3Mbiu2HV+
rrvxPbjvpXxO7HMbf0c519gzXzOf3/iIh3OPuP2THLd/kuP2T3Lc/kmO2z/J
cfsnOW7/JMftn+S4/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2fkwc84gm3
f/J9POIJt3/i9I/3hnuPr/dqes+d9055D4z3MnhOuucWe46o5/p5zpbn3ngO
hfvC3afpvin3Mbiu2HV+rrvxPbjvpXxO7HMbf0c519gz3zOfRzyce8Ttn+S4
/ZMct3+S4/ZPctz+SY7bP8lx+yc5bv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/
yXH7Jzlu/5w84BFPuP2T7+MRT7j9E6d/8r/T9I/3hnuPr/dqes+d9055D4z3
MnhOuucWe46o5/p5zpbn3ngOhfvC3afpvin3Mbiu2HV+rrvxPbjvpXxO7HMb
f0c519gzx5nP4dwjbv8kx+2f5Lj9kxy3f5Lj9k9y3P5Jjts/yXH7Jzlu/yTH
7Z/kuP2THLd/kuP2T3Lc/kmO2z/Jcfvn5AGPeMLtn3wfj3jC7Z84/ZP/HaZ/
4ku8wEu8wmu8wVvsPQ2em+45xp4r6jl/nru1x55L4T5x9226j8p9Da4zdt2f
63B8L+57Kp8b+xzH31XOOfYOn6N//w9y3P5Jjts/yXH7Jzlu/yTH7Z/kuP2T
HLd/kuP2T3Lc/kmO2z/JcfsnOW7/JMftn+S4/ZMct39OHvCIJ9z+yffxiCfc
/olP/dP/HZ76p77EC7zEK7zGG7zF3gvjPQ2em+45xp4r6jl/e+w5OJ5L4T5x
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
       "], {{
         {GrayLevel[0.8], EdgeForm[None], 
          GraphicsGroupBox[PolygonBox[CompressedData["
1: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
LO4RiRmY2DUSV3Czc6T7Beb4hzGDPN/FPuJ2dA203SMxRq3dXIM5n7f8jsfv
nXt6HZ7zSPv4vjsxEmMwtG8k9mBlP1u0Sdbhaf9IzMDQuX6vvOcD7IPRgyLx
AzdHRGKA3j80Ui/Cx8HW6evJrg3Th9hH3IGuR63DIzFDrcNcg/kU57Gno8JY
xu/5aFsYPSUSS7ByciQ2mJ9qH3fPcZEYhr8TIrEEKyfawtzx1tHO83PTy6e5
BhyfHYkHuDnG63NnnBmJMRg6xzpnd7rzYPEs6+Qf6zz2dIZ18s/3mnB2gS0M
3RWph3j/F0fiBG4utA4fN0XqUfi+yD7iLo/ECdxcGokr+LvENZhfZh9xVzgW
Xm+IxAz9fm0kTuDm6kh3BL1/VSTemF9jH3FXugba9ZG4otZ1rsF870hc8llx
o9fhGfaxj369PRIncHNrJMbg45ZIfDK/zT7i7vY5wc2dkbji7O5wDeY3+5zI
v8ex8PpIJGZg4kHvA27uj3SPsN/7IvHG/AH7iLvXNdAejsQYtR5yDebc8Xyn
47vg45H6G+Z2iwPXYcwTxlORGIOh/0ViD1aetEV72jo8PReJGRj6xu+V9/y8
fTD6UiR+4OaNSAzQ+69G6kX4eNk6ff2Ma8P0K/YR92IYR7rW65GYodZrrsH8
Weexpze9Dt8j3rKF0Y8jsQQrH0Vig/kn9nH3vBuJYfh7PxJLsPKBLcy9Zx3t
Wz83vfypa8DxV5F4gJu3vT53xheRGIOhr61zdp85Dxa/tE7+O85jT59bJ/9D
74Vn+M7rw1yzrh7i/f8QiSuY+NEWbn6OxBLc/BaJDVj5xT6Y+8mxxEV19TT3
we+OhdE/I/HDHfCXLT3+ty2s/Op6rPFvJJbg5j9bOOMf7mNh5Q/Xpm6tLh9r
1+taH86mrqtXeOdZXWzASlIXVzAR1xXLPK3LR1xR19nASqMuljivvK4azL/3
WXJ2ZV2xMNq/Lk7goBt+fiISK+26/k4EW1Vdfxti3qnLR1yrrhpo/eriilq9
umown6qu2jzbNHU9H5xtFX6eKYyZw5ixLq7gZvrw8wuR+JihLotGLDoMzVIX
J3Azoq53z3seWJcPLmerixlYmbuuvqff56ir/2Bi9rp0epl9UBuOB9XlI27W
uupRa666OKHWnHXVYD6grjz2NE9d69DL89Zl4XLBuviBj+F18cB8obp83DeD
6+IW5haoix/4GFqXhbMhdeloS9X13PTjwnXVgN0l6mKDfp+vrvW5Jxarqw9g
aMm6dM5ukbryYG7xunTy568rjz0tWpdO/si61oSzpeuyMLR+XT3E+1+uLpZg
aJm6dDgYX1ePwvSydfmIW6kulmBohbp4+yeM5euqwXzFunzErVxXLJyNq4sZ
+n21ujiBm1Xr4hzORtXFHvPR9hG3Sl010MbWxRW1xrhG6jXhHs5X9zo8w7R1
9TKfD+vUxQncrFUXY/CxZl18Ml/bPuI28DnBzXp1ccXZresazNfwOZG/oWPh
dUszAxMTwpiuLm42qesegbON62KP+ab2sd+NXANti7oYo9bmrsF8uWZ4J41w
7mFsXRcb9Pi2dbEHZ9vZwsf2tjC3Y11cwdAudXECNzvZB387OJa4Y+t6x7zz
XR0Lr7vXxRIM7WFLL+9pS2/u7HqssXdd/MDHPrYwtK8tDO3m2tTdz75hYUy0
hctJtvB6cF08wNOUuliFs0Psg6H97YOhA+viBM4OsiX/AOtoe3nv7PVQ1+AO
O6YuZjiLI+viCm4Or4tzmDvMscyPsI+4yd4v+zu6Lq6odZRrMD/OZwxDx9vC
3Am28HSiLUycZAs3J9vC0ym2MHSqLcydZgs3p9vC04V19TQ9fpEt98RZdbHE
fXC2Lf1+ji3cnOEa8H1eXVzB0Pm2MHeBLWuc6Vjq3lZXL9J3F3tNmLuprj6m
fy+tiyuYuMwWbi63hacrbGHoqjA2q4u5q23h5hpbeLrda9Kbl3hN1ri+rs88
eLrBdpswbrRlT9e6Bnzf7D3C1i22cHOrLc92nWOpS//y+cDnyh1eH/6+8T54
1rvqYgwO7raFs3vrYgy2HqiLJRi6zz569h7HEveO+4D3/6Bj4ezhuriCp0ds
4elRW/r0ftdjjcfr4gqGnrCFlf/ZwtNDrk3dJ+2DradsYfRpW7h8qa6+h4Nn
62IMbl62D86esw+2XqiLJZh70Zb8562jPea9s9dXXIN76+262OAs3qiLJRh6
rS7e4OxVxzJ/3T7invF+2d9bdfFGrTddg/m7PmPYes8Wtt63hY8PbOn9D21h
6yNb2PrYFrY+sT03jE9tYeszW9j6MYwr6+r3n2zp9y/r4hmOv7KFra9t6bPP
XQMuv62r72DrO1vY+t4Wtr5wLHXhgM8ZPmN+9pqwFYXf5e6sq39/rYsTev83
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
Hp+ciA1YmWidft/TteF4kn3E7et61No/EUvUmuIazPdyHns60Ouwp4O9L5g7
xBaeDk/ECdwck4gH2DrUOqwcYZ0zOjoRJ8QdZp38o3x+aMclYmbFME5OxAB8
fBzG2WGcE8aJYayciJVTrMPH8c6Ds5Osk3+s90XdE6yTP8Hvk/471TXo69Ns
x3hNGIOPMxOxBxNn2Y73ntDh4/xE/MDfvX7fvJML7IPRixNxQp9emajX6a/L
EvUx/X6Jdfr3XNeG3UvtI+6iMNZzrSsS8UOty12D+XnOY09XeR2e+2pb+Lsl
ERvwdHMiBpjfah931XWJeIbdGxKxATc32sLT9dbRzkh0v3Bet7kG99DdiXiA
lWu8PnfDnYm4gpt7rHN2tzsP7u+yTv61zmNPd1gn/z6fN738QCLG4OkNv3t6
537raA8nYgyGnkjEBpw96Dy4ecQ6PD2eiBniHrJO/qPW4fLJRPzA9HOJeh1W
Tk/UU5zLM4lYgpXnrcPKU86DuWetk/8/74u6T1sn/5NE/UePPOb12d+Lie4m
2HorEQ/w9KbPgPnb9sHQK4kYhpXXEnEIT6/bcnavWkd7wftljXdcA4Y+TMQJ
fLzk9eH+fT8/ffGRddh613kw94F18l92Hnt6zzr5n/pZ6evPbGFu9TR8ToXR
COOrRGzA2efW4e/LMC609rV1OPsuEXtwU6bqCd759/bB1o+JWIWh3xP1Ohz8
kqiP6cefrMPWN64Nrz/bR9wPrket3xJxRa1fXYP5t85jT394HTj70/amMOqp
eICnKBU/zONUPhj6JxHbcPxfIg7hif+QBRZu/rWO1kr13PRykqoGd1gzFQ/0
+19en3uC84YlOCtS6ZxdmioPFnkf6OT/7Tz2lKXSya9SrUn/tlNZOJs7Vd/Q
F71UDMBWJ5UOrwNT9Sh8d1P5iJs6FWMw1D8VV3DTL1UN5lOl8hE3TapYeB2Q
qtfhYMZUfUw/Tp+q72FrulTcMp8hlY+4aVPVQJs5FVfUmilVDea1VGfPO5sl
1To8w8Kp+ob3P0cqruBj9lQMw+tsqRhmPiiVj7h5Up0T/M2VihnObs5UNZjP
muqcyJ83VSwsLmhmYGKBVFzBzeBU9wvMzZ/qM5j5kFQ+4uZLVQNteCrGqDUs
/PxFojn9wucDnysLpVqH5zws/DwijKXCWCIVYzC0WCr2YGXxVBZtyVQ6PI1M
xQwMbZjqvfKel07lg9FlU/EDNyunYoDeXyFVL8LHcql0+pq9UBuml0/lI26Z
VPWotVIqZqi1YqoazHkG8tjTKqnW4T2PsoXRNVKxBCvjfVcxX9M+7p7VUjEM
f2NTsQQr42xhbox1tI383PTyWq4Bx+un4gFuVvX63BnrpmIMhjawztmt7TxY
XM86+aOdx57WsU7+xl4TzjaxhaH9whia6v1PSMUJ3GxqHT52TdWj8L2ZfcRt
lYoTuNkiFVfwt7lrMN/SPuK2diy87pyKGfp9h1ScwM12qe4Ien/bVLwx394+
4rZxDbSdUnFFrR1dg/kiqbjks2IXr8MzLJrKR7/ulYoTuNkjFWPwsXsqPpnv
aR9xE31OcLNPKq7gb2/XYL6bz4n8SY6F10NSMQMTB3ofcLN/qnuE/U5JxRvz
A+wjbrJroB2cijFqHeQazPl+zO+p/C56qNeBj0eysO8wJoVxjd8N7+roVLzB
05GpOISbo2zRjrEOWyekYgkuT0rFDKyckarv6ffTU/U682u9Du//1FR9CSvH
p+KQWie7Bv1+mnXyT/Q6rHGKdfKP9V64D46zpdaZXp/vFJek4oQ75uJUXDG/
1D74uygVM2jnpeIQns63hZtzU3GOdp2fg36/OhUnnOM5qe4I4s7y+twTZ9ui
XZWKGXKuSMUebF2eiknmV9pH3GXeI9oF3gt3wPVeH4b+l6o/6KObUnECNzdY
h48bbdFutg5Dt6XiBG4eCmPfVHfA7fbB5Z2pmIH7+1NxQo/fk4oNWLnLOv1+
i2vD8d32EXeH61HrvlQsUete12B+q/PY0wNeB7Ye9r5g7hFbeHo8FSdw83Qq
HmDrUeuw8oR1zuipVJwQ95h18p/0+aE9m4oZPt9eSsUAfMwemHkr2LfDeCGM
I1Kx8rJ1+HjOeYeH8aJ18p/xvqj7vHXyL/T7pP9ecQ36+lVb+po1YQw+3kjF
Hky8aXuS94QOH++l4gf+/vb75p28bx+MfpiKE/r081S9Tn99kqqP6fePrNO/
77g27H5sH3EfuB61PkvFD7U+dQ3m7zqPPX3hdXjuL23h76dUbMDTj6kYYP6z
fdxV36TiGXa/S8UG3HxvC0/fWkd7PdX9wnn94hrcQ3+m4gFWvvL63A2/p+IK
bv6yztn96jy4/8M6+V87jz39Zp38f3ze9PJ/qRiDp+kyvXt651/raFEmxmAo
y8QGnPEfqSMPbuqZdHhKMzFDXC2TTn6cSYfLZvj5wVRMtzP1Oqy8lqqnOJdW
JpZgpZNJh5UiUx7MVZl08vNM+4LLMpNO/qBM/UePJJnWZ3+9THcTbM2QiQd4
mj7TGTCfMZMPhqbKxDCsTJOJQ3iaNpPl7KbOpKN1M+2XNWbKVAOGZs3ECXz0
y7Q+3M+S6fnpi9ky6bA1c6Y8mBuYSSe/f6Y89jQgk07+HJmelb6eM5OFuRPC
zyuFsXIY82RiA87myqTD39yZLNq8mXQ4G5yJPbhZNVNP8M6HZPLB1tBMrMLQ
Ipl6HQ4WzNTH9OOwTDpszZepNrwOz+QjboFM9ai1cCauqLVQphrM58+Ux54W
zbQOnC2Wyf4QxrKZeICnZTLxw3y5TD4YWjIT23C8VCYO4WlkJgs3IzLpaKP9
3PTy8plqcIetkokH+n3xTOtzT3DesARno6xzditkyoNF3gc6+UtkymNPK2bS
yV/Na9K/Y2zhbNtMfUNfjA+jkYmtsdbhdbNMPQrf4+yDlbUzMQZDa2biCm7W
cA3ma9lH3DqOhddNMvU6HGyYqY/px/Uz9T1srZeJW+Yb2Efcuq6BtnEmrqi1
kWswXzrT2fPONvU6PMOemfqG979VJq7gY4tMDMPr5pkYZr6lfcRt53OCv20y
McPZbe0azCf4nMjf3rGwuHsmZmBil0xcwc1Ome4XmNsx02cw853tI24H10Db
LRNj1NrVNZjzecvvePzeuYfX4TmPsI/vu/tlYgyG9snEHqzsa4s20To8TcnE
DAyd4/fKe97fPhg9MBM/cHN4Jgbo/UMy9SJ8HGSdvp7k2jB9sH3EHeB61Dos
EzPUOtQ1mE92Hns6wuvwno+0hdGTMrEEKydmYoP5yfZx9xyTiWH4Oy4TS7By
vC3MHWsd7Vw/N718imvA8VlhrJ6Jm6O8PnfG6ZkYg6GzrXN2pzoPFs+wDk9H
O489nWad/PO8JpydbwtDd2bqId7/RZk4gZsLrMPHjZl6FL4vtI+4yzJxAjeX
ZOIK/i52DeaX2kfc5Y6F1+szMUO/X5OJE7i5KtMdQe9fmYk35lfbR9wVroF2
XSauqHWtazDfKxOXfFbc4HV4hr3to19vy8QJ3NySiTH4uDkTn8xvtY+4u3xO
cHNHJq44u9tdg/lNPify73YsvD6ciRmYeMD7gJv7Mt0j7PfeTLwxv98+4u5x
DbSHMjFGrQddgzn/LIh/7so/c300Exv0+C6NwH0Yc4Xxtd8N7+rJTLzB0xOZ
OISb/9miPWUdtp7LxBJcvpCJGVh5LVPf0++vZup15t94Hd7/y5n6ElaezcQh
tV50Dfr9FevkP+91WOMl6+Q/7b1wHzxjS63XvT7fKT7OxAl3zEeZuGL+iX3w
92EYZ1p7JxOH8PSuLdy8nYlztG/9HPT7V5k44RzfynRHEPeG1+eeeNMW7ctM
zJDzeSb2YOuzTEwy/8I+4j71HtHe8164A77z+jCU5+oP+ujHTJzAzffW4eMH
W7SfrMPQr5k4gZtarj7mDvjNPrj8IxMzcP9fJk7o8b8zsQErf1qn3392bTj+
yz7ifnc9av2biSVq/eMazH9xHnviPzLNOuwpyrUvmKvnsvCU5uIEbopcPMBW
nEuHlSyXzhk1c3FCXJJLJ7+R6/zQWrn+1gM3vVwMwMfm4efpw5ghjE4Yj2di
pV8uHT6qXHmPhdHNpZNf5toXddu5dPLf9/vkzu6fqwZ9PVUuS1+zJozBx7S5
2IOJ6XJZNPaEDh8z5+IH/pbM9b55JwNy+WB0YC5O6NM5c/U6/TV7rj6m32fN
pdO/M+aqDbuz5fIRN0uuetSaIxc/1BqUqwbzmXLlsae5cq3Dc88Tfv4gE3/D
c7EBT8NyMcB8wVw+7qr5c/EMu0NysQE3C+Sy8DQ4l442Ta77hfNaKFcN7qHF
c/EAK/PmWp+7YdFcXMHNErl0zm7hXHlwv1gunfz5cuWxp0Vy6eSPyHXe9PLI
XIzB07q53j29s1QuHW3ZXIzB0Eq52ICzpXPlwc1yuXR4WjEXM8Qtk0snf/lc
OlyukosfmB6Tq9dhZepcPcW5jM7FEqyMtQ4ro5wHc6tZJ3/lXPui7qrWyd/C
TNAjK+Ran/2tnutugq31c/EAT+v5DJhvYB8MrZmLYVhZOxeH8LSOLWe3lnW0
cd4va2zoGjC0WS5O4GO814f7Tfz89MUE67C1kfNgblPr5K/hPPa0sXXyt/Sz
0tdb2cLc82EcHsYRYWybiw0429o6/G1ji7addTjbMRd7cHN0rp7gne9kH2zt
kotVGNo7V6/DwR65+ph+3C2MuXOxtb1rw+vu9hG3s+tRa69cXFFrT9dgvoPz
2NM+XgfO9rUdGsZBuXiApwNz8cP8YPtgaFIutuF4Si4O4Wl/W7iZbB3tGD83
vXyIa3CHHZmLB/p9P68/zOcNS3B2lHXO7lDnjfD7GOn8ic5jT4dZJ/9Yr0n/
HmcLZ1fk6hv64sRcDMDW8dbh9YJcPQrfJ9hH3Km5GIOhk3NxBTcnuQbzU+wj
7jTHwut5uXodDs7O1cf045m5+h62zsjFLfOz7CPudNdAOzcXV9Q6xzWYH+Cz
552d73V4hlty9Q3v/9JcXMHHxbkYhteLcjHM/BL7iLvS5wR/l+dihrO7zDWY
X+hzIv8qx8LiTbmYgYnrc3EFN9fmul9g7ppcn8HMr7OPuKtdA+3GXIxR6wbX
YE6/8PnA58rNXofnTML34HuCvTeMu8LYNRdDt+diD1busIW/u63D0325mIGh
t/xeec/32wejD+biB24ez8UAvf9Irl6Ej4es09f3uDZMP2wfcQ+4HrUey8UM
tR51jcl+hj28pye8Du/5f7Yw+mIulmDlhVxsMH/JPu6ep3MxDH/P5mIJVp6z
hblnrKO97eeml192DTh+IxcPcPOk1+fOeC0XYzD0pnXO7hXnweLr1sl/ynns
6VXr5L/jNeHsXVsY+j1XD/H+P8jFCdy8Zx0+vs/Vo/D9vn3EfZKLE7j5KBdX
8PehazD/2D7iPnUsvH6bixn6/atcnMDNF7nuCHr/81y8Mf/SPuI+cw20b3Jx
Ra2vXYP5rbm45LPiO6/DM9xmH/36Sy5O4OanXIzBx4+5+GT+s33E/eFzgpvf
cnHF2f3qGsx/8DmR/6dj4bXeEDMw8Z/3ATf/5LpH2O/fuXhj/q99xP3lGmhR
qHNnrlr8H9RQA+b4fszfifhdNG5oHfjgu/Nka/M29G54V82GeIOnvCEO4abR
kEUrGtJhq90QS3DZbYgZWJmmob6n36duqNeZz9fQOrz//g31JaxUDXFIrV5D
Nej3qRrSye80tA5r9GtIJ79saC/cB62GLLWmbWh9vlPM1hAn3DGzNsQV89kb
8sHfwIaYQZupIQ7haeaGLNzM2BDnaPM39Bz0+zwNccI5ztDQHUHcdA2tzz0x
fUMWbe6GmCGHvyXAHmzN0RCTzPn7Aj7iBjW0R7QBDe2FO2BwQ+vD0EoN9Qd9
NLQhTuBmSEM6fCzQkEUb1pAOQws1xAncLN1QH3MHLNyQDy4XbYgZuF+qIU7o
8SUaYgNWFmtIp9+HN1QbjhdvyEfcIg3Vo9aIhlii1pIN1WC+YEN57GlkQ+uw
p2Ua2hfMLduQhacVGuIEblZtiAfYWq4hHVZWbEjnjEaFn2uOW74hnfyVGzo/
GFqtIWb4fBvfEAPwcXEY64exQRjjwsgaYmUN6/AxxnlpGKtbJ3+090XdsdbJ
n6Wh90n/reka9PVati2vCWPwsW5D7MHEerZd7wkdPjZuiB/4m9jQ++adbGIf
jG7WECf06dYN9Tr9tUVDfUy/T7BO/27o2rC7uX3Ebep61NqqIX6otaVrMN/I
eexpG6/Dc29rC3+7NcQGPO3aEAPMd7ePu2qHhniG3Z0aYgNudraFpx2to63T
0P3Cee3hGtxD+zbEA6xs5/W5G/ZuiCu42c86Z7en8+B+H+vkb+889rSXdfIn
+bzp5SkNMQZPZ/jd0zuTraMd2BBjMHRYQ2zA2f7Og5uDrMPToQ0xQ9wB1sk/
2DpcHtEQPzB9bEO9DitrN9RTnMvRDbEEK8dZh5UjnQdzx1gn/3Dvi7pHWSf/
kob6jx45xOuzvxMauptg66yGeICnM30GzM+2D4ZOaYhhWDmtIQ7h6XRbzu5U
62jHe7+scY5rwNCFDXECHyeFsUpD3J/v56cvLrIOW+c6D+YusE7+yc5jT+dZ
J/9SPyt9fZktzLWb4XMs2MfDuLIhNuDscuvwd4Ut2lXW4ezahtiDmycb6gne
+XX2wdYNDbEKQ7c11OtwcHNDfUw/3mgdtq52bXi9yT7irnc9at3aEFfUusU1
mF/jPPZ0u9eBszts+Vv4gw3xAE8PNMQP84fsg6G7G2Ibju9tiEN4us8Wbu6x
jvaUn5teftg1uMOeaIgH+v1Or889wXnDEpz9zzpn94jzJvl9THH+Xc5jT49a
J/9pr0n/PmMLZ5831Df0xfMNMQBbz1qH1/cb6lH4fs4+4l5uiDEYerEhruDm
Bddg/pJ9xL3iWHh9t6Feh4O3Gupj+vH1hvoetl5riFvmb4ZxouNedQ20dxri
ilpvuwbz+332vLP3vA7P8HNDfcP7/6QhruDjo4YYhtcPG2KY+cf2EfeFzwn+
PmuIGc7uU9dg/oHPifwvHQuLPzbEDEx81xBXcPNNQ/cLzH3d0Gcw82/tI+4r
10D7oSHGqPW9azDn85bf8fi98yevw3PyGYyP77t/NMQYDP3WEHuw8rst2p/W
4emfhpiBoembeq+853/tg1H+TyHhB27Sphig9+tN9SJ81JrS6eu/XBumo6Z8
xP3netRKmmKGWnFTNZj/7Tz2lDW1Du85b8rCaLcplmCl0xQbzHtN+bh7iqYY
hr9WUyzBStWUhbmyKR1thqaem17u11QNOJ62KR7gptHU+twZUzfFGAxN15TO
2fVvKg8Wp2lKJ7/ZVB57mqopnfwZm1oTzmZqysLQok31EO9/lqY4gZuZm9Lh
Y4GmehS+BzTlI25QU5zAzWxNcQV/s4af32hoPntTPuLmaCoWXgc3xQz9Pm9T
nMDN3E3dEfT+XE3xxnyepnzEzdlUDbT5m+KKWvM1VYP5Lw1xyWfFkKbW4Rl+
tY9+XagpTuBmeFOMwcewpvhkvmBTPuIWa+qc4GaRprji7BZuqgbzoU2dE/mL
NxULr8s2xQxMjGxqH3Azoql7hP0u2RRvzJdqykfcEk3VQFumKcaotXRTNZj/
2i/U7R/ywli+KTbo8RWbYg/Otm/q3fCuVmmKN3haqSkdblZuyqKNsg5bY5pi
CS7HNcUMrKzdVN/T72s11evMd/A6vP81mupLWFmtKQ6ptbpr0O9rWid/rNdh
jfHWyV/Ve+E+GG1LrXW8Pt8pJjTFCXfMZk1xxXxz++Bv06aYQduwKQ7haSNb
uNmgKc7RdvRz0O/bhTHQ57h+U3cEcet6fe6J9WzRtmmKGdjaqin2YGvLpphk
vrV9xG3hPaJt7L1wB+zk9WHo8Kb6gz7atSlO4GZn6/Cxiy3abtZhaM+mOIGb
A5rqY+6AveyDy32aYgbupzTFCT0+sSk2YGVf6/T77q4Nx/vZR9zerketyU2x
RK1JrsF8D+exp/29Dns60PuCuYNs4enQpjiBm6Oa4gG2DrYOK4dZ54yObIoT
4g6xTv4RPj+0Y5r6b4/CzYlNMQAfH4ZxZhhnhXF8UyzByknW4eNY560QxgnW
yT/a+6LucdbJ38Tvk/472TXo61NsR3tNGIOP05tiDybOsB3nPaHDx7lN8QN/
d/t9807Osw9GL2iKE/r0sqZ6nf66uKk+pt8vtE7/nu3asHuRfcSd73rUurQp
fqh1iWswP8d57Olyr8NzX2ELfzeFsW1TPN3QFAOwcrN93FVXN8Uz7F7bFBtw
c50tPF1jHe20pu4XzusW1+AeurMpHmDlSq/P3XB7U1zBzV3WObtbnQf3d1gn
/yrnsafbrJN/j8+bXr6vKcbg6TW/e3rnXutoDzbFGAw91hQbcHa/8+DmIevw
9GhTzBD3gHXyH7YOl080xQ9MP9NUr8PKqU31FOfyVFMswcqz1mHlf86Duaet
k/+490XdJ62T/1FT/UePPOL12d/zTd1NsPVGUzzA0+s+A+Zv2gdDLzXFMKy8
0hSH8PSqLWf3snW057xf1njLNWDo/aY4gY8XvD7cv+vnpy8+sA5bbzsP5t6z
Tv6LzmNP71gn/2M/K339iS3MjS3C51QYWRifN8UGnH1qHf4+s0X7wjqcfd0U
e3DTLNQTvPNv7IOt75piFYZ+aarX4eDHpvqYfvzeOmx96drw+oN9xH3retT6
uSmuqPWTazD/ynns6VevA2e/2V4fRq0QD/DE/3k7/DCPCvlg6K+m2Ibjf5ri
EJ7+tYWbv62jFYWem16uF6rBHZYX4oF+/93rc09w3rAEZ41COmcXF8qDRd4H
Ovl/hnGj95QU0skvC61J/7YKWTibs1Df0BedQgzAVlVIh9cBhXoUvtuFfMT1
L8QYDPUKcQU33UI1mPcr5CNuqkKx8DpToV6Hg+kL9TH9OG2hvoetaQpxy3y6
Qj7ipi5UA23GQlxRa4ZCNZj/57Pnnc1caB2eYXihvuH9z16IK/iYtRDD8Dqw
EMPMZyvkI26uQucEf3MUYoazG1SoBvNZCp0T+XMXioXFoWYGJgYX4gpu5it0
v8DcvIU+g5nPX8hH3DyFaqAtUIgxag0pVOMz9wufD3yuDCu0Ds95cPh58TCW
CGPRQozB0MKF2IOVRQpZtMUK6fC0ZCFmYGj9Qu+V9zyikA9GRxbiB25WLMQA
vb9coV6Ej6UL6fQ1e6E2TC8bfv7DPbtUoXrUWqEQM9RavlAN5jwDeexppULr
8J5XLmRhdPVCLMHKON9VzMfbx92zaiGG4W+1QizByhhbmBttHW0DPze9vIZr
wPG6hXiAm1UKrc+dsXYhxmBoPeuc3ZrOg8V1rJM/ynnsaS3r5G/oNeFsI1sY
2rtQD/H+Ny3ECdxsbB0+di7Uo/C9iX3EbVGIE7iZUIgr+NvMNZhvbh9xWzoW
XncsxAz9vl0hTuBmm0J3BL2/dSHemG9rH3FbuQbaDoW4otb2rsF8wUJc8lmx
k9fhGRYq5KNf9yjECdzsVogx+Ni1EJ/Md7ePuH18TnCzVyGuOLs9XYP5Lj4n
8vd1LLweWIgZmJjifcDNpEL3CPudWIg35pPtI24/10A7oBBj1NrfNZg/XIa4
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
LmzN0JGFpxk7sqwxVUex1B3aUS/SdwM6WhNG5++oj+nfgR3xCVuzdmThZraO
LDzN3pGFoUEdWZiboyMLN3N2ZOFpWEdr0puzdLQma8zT0Wc8bM3bkYWt+Tqy
7GmujmrA9+CO9ghbQzqycLNAR5Znm7ujWOoeGH5eNIzFwhje0frwt21H++BZ
F+qIMThYuCMLZ+TBGGwt0RFLMESt792zi3QUS9x6HfUB73/JjmLhbKmOuIKn
kR1ZeFq6I0ufLt5RPdZYtiOuYGi5jiysLN+RhacRHdWm7god+WBrxY4sjK7U
kYXLMR31PRys0hFjcDPWPjgbZR9sje6IJZhbzZb8Va2jLdPR3tnrONfg3lq3
IzY4i7U6YgmG1uiINzgbH0bD8zXtI27ljvbL/tbpiDdqre0azNf3GcPWBraw
taEtfGxkS+9vbAtbm9jC1qa2sLWZ7XRhTLCFrc1tYWvHjvqeft/Jln7fqiOe
4XhrW9jaxpY+28I14HI79x1sbW8LWzvYssaWjqXuQR31HD2ys9eErclhLNhR
/+7aESf0/m62sLW7LWztYQtbe9rC/V62sLW37RDXhhXY2MVrssZ+Hd0jMD3R
FrYm2ZK3j2vA5RTvEbb2t4WbA2zhbF/HDvXZc89xrx3s54a/dbuhF8LohHF4
R1zB06Ed8QYTh9miHWEdzo7uiCt4utLvnnd+jH2wdVxHLMHQKR31Ohyc2FFf
ws3x1mHrSNeGgxPsI+5Y16PWyR1xRa2TXIP5Uc5jT6d6HTg7zRZeL+iIAXg6
vyMGmF9oH/fNWWGs3hFP53TEGDydawt/Z1tHu8rPTY9f5BrwdHlHnMDH6V6f
u+HSjriCpyusc3YXOw/+LrNO/hnO4z64xDr553kvPMPVXh+2Huuoj+mRazvi
hN6/zha2buiIK3i6uSN+4OZG+7jLr3cscfd11N/09S2Oha3bOmIYdm+3hac7
bOnxm1yPNe7qiCt4utsWnu6xhadbXZu699rH2vd7fXiaJfTra8G+HsbDHfED
Nw92xAm9/4BjmT9kH3GP+2zg5tGOGOO8HnEN5tf4LDm7JxwLW893xAkcPBPG
IR2x8lRHdwpsPdnRZyTzp+0j7n+ugfZcR1xR61nXYP6Ca8PBi7b09Uu2MPdK
R4zBxKu2x/ksYAlu3uqIDVh5wz6Ye82xxP3RUR/wzt92LIy+2xE/cPOeLf37
vi39+KbrscZHHTEDEx/bws0ntnDzjmtT91P76N/PbGHxc1sY/a4jBmDoy474
hK3v7YObr+yDm286YgO2vrUl/2vraB+Gcab3+oNrcG/93lGvcxa/+N3DzU8d
sQ1bPzqW+c/2EfeF98v+fuuIMWr96hrMX/Z745396fOGib87Yg+e/uuIJRj6
xz44+MuxxP1rH3H1rliCoVpXvN0ZRl9XNZhHXfmIi7uKhbOyK2bo90ZXnMBN
1hXncJZ2xR7zvCsfcUlXNdCKrriiVrOrGg95H3AP562u1oEzPme4m+Bv6q74
ofe7XTEGH9N05YOPXlc+eOrfFWPwNFVXlvx+XeloVVfrsMa0XdWA1wFdcULv
z9gVS7yT6bviDc6m6yqW+Qxd+Yjjc5H9sr+Zu2KPWjN1VYP5wK7Yg7NZu7Lw
MVtXFhZn78rC2aCuLEzM2RVvcDZvVz0KT3N15YO5ObqKJW7lrnqF9zxfV7Ew
N7gr3mBrSFcWthboysLWPOHnDzpaY1hXvQtbw7uy8LRgVxZu5u+qNnUX6soH
Zwt3ZeFska4svC7VFT/0/mJdsQpnI7vywcfiXfngacmuGIOnEV1Z8pfoSkcb
2tXe2evSXdWA15W64oGzWL4rTuBp2a7uNThbpqtY5st15SNu0a72y/5W7Io3
aq3QVQ3mq3R1xrA1yhaeVrWFv9G2sLWaLXyMsYWhsbawNc4Wnla3hb/xtjC0
YVc9Tb9vZEu/r9UVt/C0ti39vo4tbK3hGnC5nr/Twdb6tvC0gS1rrOlY6u7S
VS/Sdxt7TRjdoas+pn837YpP2NrMFm4m2MLT5rYwtIUtzG1pCzdb2cLTbmHM
3VVvbuI1WWPbrj7jYWs7W9ja3pY9be0a8L2j9whbO9nCzc62PNs2jqXug2Hs
E8a+Yezu9eHvCu+DZ92zK8bgYC/bwc6DMdia2BVLw10LHz27t2OJO6OrPuD9
T3IsnE3piit42t8Wng6wpU/3cz3WOKgrrmDoYFtYOcQWnia7NnUPtQ+2DrOF
0cNt4fK4rvoeDo7sijG4Od4+ODvKPtg6piuWYO5YW/KPto52oPfOXk9wDe6t
07tig7M4pSuWYOikrniDsxMdy/xk+4g7wvtlf6d1xRu1TnUN5mf6jGHrLFvY
OtsWPs6xpffPtYWt82xh63xb2LrAlt+TLrSFrYtsYeuarvqefr/Wln6/tCue
4fgyW9i63JY+u9g14PLKrvoOtq6yha2rbVnjEsdSl++U/A7H72nXeU3YujeM
Pbrq3xu64oTev9EWtm6yha2bbWHrFlu4v9UWtm6z3cm1YQU2rvearHFXGLt2
xfTdtrB1jy15t7sGXN7nPcLW/bZw84AtnN3hWO4n/jkQ/6yVf7b6UFe8wccj
XXEIW5/7/fHeHu+KMdh61Dp8PGaL9oR1mHu6K67g6dmu+IGbl7vqb3r/pa54
YP6F16EvXuiqR2Hoqa5YpdZzrgFzL1on/xmvwxrPWyf/f94LDD1pS61XvD7M
vd8VS9wr73XFA/MP7IODd7tiA+3NrriCs7dsYeuNrvhE+9LPQV9/1hUPnOPr
Xd0FxL3q9bkzXrNF+7Qrlsj5uCve4Oyjrjhk/ol9xH3oPaK97b1wH3zl9WEi
6alv6OVvu2IJhr62Dgff2KJ9Zx22fuyKJRj6p6ueppd/sg+efumKW3j9qyse
4OD3rnoabn61DlvfuzafD7/ZR9zPrketP7tijFp/uAbzH5zHnv72OuzpX+8L
tv6zhY96TyzBUN4TGzDR15MOE3FPOmeU9cQScVH4+c6u8tOezg+t2dNnHty0
e2IAPjYNP08TxrRhtHpiCVY6PenwUfSU93AYVU86+Y2e9kXdsied/Hf8Pum/
bk816OteT5a+Zk0Yg4+pemIPJqbuyaKxJ3T4mKEnfuBv0Z7eN+9kxp58MDpz
T5zQp7P31Ov018Ce+ph+H9CTTv9O11Nt2J2lJx9xM/VUj1qz9cQPtWbtqQbz
6XvKY0+DelqH556jJwt/Q3piA54G98QA8wV68nFXzd0Tz7A7b09swM18PVl4
mqcnHa1/T/cL5zW0pxrcQwv3xAOszNnT+twNC/bEFdws0pPO2Q3rKQ/uF+pJ
J3+unvLY0/CedPIX6+m86eUlemIMntbq6d3TO4v3pKMt1RNjMLRcT2zA2ZI9
5cHNyJ50eFq2J2aIG9GTTv7SPelwuUJP/MD0qj31Oqz066mnOJeVe2IJVkZb
h5UVe8qDuVHh55rzl+9pX9RdqSed/M3MBD2yTE/rs78xPd1NsLVOTzz8n6Xz
jtt6bP/4fe19XXVft5ARUchOsmWPqIiWVIpKgyRFpaFSJBKJSolklOzsvffe
ez/23vN3vH+fzx+f1+E4j3Ge3/N7vL/3nccDPPX0HeD39hoMHd4ohmHliEZx
CE9H2nJ33R0n1sXnZY8+7gFD/RvFCXx08/5wf7Sfn7kY4DhsHeU6mOvnOPWH
uY4z9XWc+kF+Vub6WFuYeyY0PTQjNKRRbMDZcY7D32BbYkMdh7PhjWIPbmY1
aiZ45yO8BlsnNIpVGBrTqFmHg5MaNcfM44mOw9bx7g2vo7xG3kj3o9fJjeKK
XqPdA3+Y6zjTKd4Hzsbabh2a3Cge4GlSo/jBn+I1GDqtUWzD8YRGcQhPE23h
ZrzjxM7yczPLU92Db9iZjeKBeR/n/bfxfcMSnM10nLs7w3W7+H3s5vpTXceZ
pjlO/dnek/mdbQtnKxo1N8zFuY1iALbOcRxelzRqRuF7jtfIuyB0cKMYmtso
ruDmPPfAP99rsHihc+F1caNmHQ4uadQcM48LGjX3sHVRo7jFv9hr5M13D2KL
GsUVvRa6B/7pvnve2aXeh2e4qVFzw/u/olFcwceyRjEMr5c1imH8y71G3lW+
J/i7slHMcHfL3QN/qe+J+qudC4s3NIoZmLiuUVzBzcpGfV9g7tpG/QzGX+U1
8q5xD2LXN4oxeq12D3zmhZ8P/Fy50fvwnIl6/I4Q9s7QbY1iDIZubRR7sLLG
ltjtjsPTXY1iBoZe93vlPd/tNRi9t1H8wM3DjWKA2X+gUbMIH/c5zlzf4d4w
fb/XyLvH/ej1UKOYodeD7jHez3CSz/SI9+E9P2oLo881iiVYebZRbOA/7zW+
PU80imH4e6pRLMHK07Yw96TjxN7wczPLL7gHHL/aKB7g5jHvzzfj5UYxBkOv
Oc7dveg6WHzFceofdx1neslx6t8KzWsUZ2/bwtAvjZoh3v97jeIEbt5xHD6+
adSMwve7XiPvo0ZxAjcfNIor+HvfPfA/9Bp5HzsXXr9qFDPM++eN4gRuPmvU
N4LZ/7RRvOH/z2vkfeIexL5sFFf0+sI98G9uFJf8rPja+/AMt3iNef2xUZzA
zfeNYgw+vmsUn/g/eI28X31PcPNzo7ji7n5yD/xvfU/U/+ZceP2vUczAxN8+
B9z82ajvCOf9o1G84f/lNfJ+dw9i/zaKMXr94x74DXX1holkXfMNc/zuzJ9l
+XNsti7GYChdF3uwkqnLEsvVFYenYl3MwNDmdb1X3nOprjUYrdTFD9zU62KA
2W9W1yzCR7WuOHOdr6s3TNfqWiOvXFc/ejXWxQy9mtfVA79QVx1naqprH36P
WKsuC6Mb1sUSrGxQFxv4repa49uzTl0Mw1/LuliClfXqsjC3bl1xYlvU9dzM
8kZ19YDjtnXxADct6tqfb8amdTEGQ5vVFefuWsdfv9koFtvUFad+7brqONMm
dcWpb1fXnnC2ZV0Whvava4Z4/9vUxQncbFVXHD72qGtG4XvrutbIa18XJ3Cz
XV1cwd+2dfXA376uNfJ2qCsXXnerixnmfee6OIGbjnV9I5j9HeviDX+nutbI
61BXD2K71sUVvXapqwf++nXdPe9s97r24Rkui7/uGeoV2qcuTuBmr7oYg49O
dfGJv3dda+QdUNc9wc1+dXHF3e1bVw/8Peu6J+oPrCsXXrvVxQxMHBpK1cVN
57p+FsLZwXWxh3+I18g7qK4exLrWxRi9urgH/jI/U+/QYd4HPrrXNevwd2Rd
vMFHD9uK6+AKho6qi5NG92Ktme+s4rzT6nrHvPO+zoXXfnWxBEP9bZnlAbbM
Zh/3Y4+BdfEDH4NsYehYWxg62r3pe5zXeLeDbeFyiC28nlgXD/B0fF2swtko
r8HQ8NDGdTE0si5O4OwEW+pHOE7sGJ+ds57kHnzDTq2LGe7ilLq4gpuT6+Ic
5kY7F3+M18gb6vNyvnF1cUWvse6Bf4TfG+9svO8bnibWxR48Ta6LE7g53Wvw
McG55E3yGnnT6uIEbqbWxRX8TXEP/DO8Rt5058LrOXUxw7yfVRcncDOzrm8E
s39mXbzhz/IaeTPcg9jsurii19nugX94XTPLvM7xPnB2Xl3fKfi7qC5+mP3z
62IMPhZ4DT7meQ2eLqyLMXiab0v9BY4TO9f7sMfF7gGvS+vihNlfXBdLvJOF
dTHGeS9xLv4ir5E31+flfEvqYo9el7oH/g/Z+H0gdG3o8rp4g49yU/z8CvtI
aEVdDMDW8rr4hLkrbYld5TjMXVvXvMLW43XNB+92pdfg7Lq6GIOnW+rigXm/
oS6WmM3VjsPZ1e4Nx9d7jbxV7kevm0PD3OtG94C/a1zHmW71PjC3xhbm7qtr
7uHg3rpYwr/fa3B2R10Mw99ddXEFZ3fbwtadjhN7ws/NjD/gHny3Hq2LE5i4
zfvzzeC+YQa2HnOcu3vQdeP9Pia6/nbXcaaHHKf+Se8JQ0/Zwtwndc0Q7//Z
uniAlacdh7N36ppX5vQZr5H3Yl28wcrzdfEGW8+5B/4LXiPvJefC2Vt18cC8
v14XS8zmq3Uxxuy/Uhfb+K95jbyX3YPYm3XxRq833AP/Ht897+xt78MzfF/X
3PD+P6yLE7h5vy5W4ey9unjG/8Br5H3qe4Kbj+viirv7yD3w3/U9Uf+Zc+H1
27qYgYmvQlfUxc0Xdf2MhLPP6/o9AP9Lr5H3P/cg9k1djNHra/e40nkwCoff
eR+ek5/T/I7M78G/1MUYDP1UF3uw8rMtsV8dh6c/QzfVxdDaTXqvvOe/vAaj
/9TFD9ykmsQAs9/QpFmEj38dZ65/c2+Y/s9r5P3tfvRKNokZeiWa1AP/d9fB
cbpJ+/CeM02yMFptEkuwUmkSG/i1Jq3x7ck3iWH4KzaJJVgpNcnCXKFJcWLr
NOm5meVmTeoBx2s1iQe4yTZpf74Z9SYxBkMtmhTn7po3qQ4Wm5oUpz7XpDrO
1NikOPXrNmlPOGvZJAtDHZo0Q7z/DZrECdys16Q4fGzVpBmF7/WbtEbexk3i
BG5aNYkr+NuwST3wN2rSGnmtm5QLr+2axAzzvlmTOIGbNk36RjD7mzaJN/y2
TVojb5Mm9SC2RZO4otfmTeqB/0NdXPKzYssm7cMz/Og15nX7JnECN9s2iTH4
2KZJfOJv16Q18nZs0j3BzQ5N4oq7a9+kHvhbN+meqO/YpFx45b/hCjMwsVuT
zgE3uzTpO8J5d24Sb/i7NmmNvJ2a1IPYHk1ijF67N6kHPv+dWHrDxF5Nssx4
IvDpHDo41DY0KnRiKBPqGuoSSoUODR0SSnsNP35kN3RzHv/pqSNC3fWvtW/o
ETpSf3u/oW/oKP1jOv9v+4Q2C53k/fhH3nuHeoUK7nG4/rWYDT3dq5nreus/
MfX/vY/Qv5bn/+vIy4UO85ny7nGY/sjQcLTPsWFoaGhIaAPbwaFWoeMdW99r
x4XWCQ0MHRNaNzTI/tpeGxDaPDTaz9PG93dCqIXj/fWJaujnc6zlNfxNnTsy
1Do0IjQ8tLHtsNAmjhPbyGuctWXoWJ9pi9DJPsc+oXNCs0NbhcaGTgm1C41x
3pZew986NM5524XGh04L7RaaEZoe2j40wbEdQqeHJoZ2CU0LnRHqGJoSmhzq
EJrkvG1Cp3qPHR0n1t496Luze0wN7WRLr219Fup39VnYb/fQmT7fHqGZ9vcK
nR06K7R/6LzQuaE9Q7Oct7fvhrz9HJ8T6uQ68vb1Gvd4YOj80NwGzf6C0EWh
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
U1Oa5VPdq63PQj1cTfB+cDbRPhzMCE1PiQfstJSYOdMxuJ0cmpQSP1NDU1Li
5Az7Hb1GHrN7np8f/ma6F/N9Tmh2St+F032OvXzvZ6XEwRznwd4s1+/tOvI6
+CzUd3IdeczrXO/N/J5vnzlYFVqZ0uxfGLogJf7mOY/ZvCJ0eUpsXOAYzFwc
WpASJxeF5qfE1Xz36uI4MTi7xDXM+LLQZSnN35LQpSnN++LQopTmHrswpfm+
1LHDvEavnu6xNKVZXupeu/hd8Q56++zL/L5vD92WEg9Xh65Kic8VoStTYhe7
PCXernIMbq7zfQ30nV2bEjPXuNdRruO+YG+1a2BgTejWlDi5OXRTSozdGLoh
pe8L9vqUeLvJscFeo9cI97glJcZucS9+l2JumN8T/Hzsd18oF78LZ9Ni5p7Q
3SmxcVfozpRYuds+/NzrPFh5IHS/3+e7oXdS4ulBx+Dk4dBDKc36k6EnUprB
x0KPpjTHjzhvrM/EHqc7Tmy8e9B3ins8nhIzj7vXOJ/lPr/Xp7wf7/lp+7Dx
SujllJjA8s2Cm1cdg7fnQs+mxMYLoedTYuVF+zO9Rh6z+56fH25fcy84eDv0
Vkrfhmd8Dph5M/RGSgy84zzYe93181xH3gyfhfq5riMPbt733jDzgX3e91+h
P1Pi4+PQRynx8KHzmM2fQj+mxMpHjsHH/0KfpcTTp6FPUuLqE/da4jgx2Prc
Ncz396HvUuLjm9DXKc36V6EvU+IM+0VKHHzt2DKv0esq9/g2Ja6+dS++x3ek
xOe1PvsPKf1suNMx+Pg99FtKPPwa+iUlxrA/p8TKb47Bx9++r5t8Z3+kxNUf
7rXKddwXbP3jGhjIBDfptPZPhk2kdT7+Ad7/UuIM+6/PR5zYGq/RC7bokUqL
MSy9+HtA/J7N78vwAKPsN8Vr/K7NO9k61rZKi59y2FJanBTDFtLihjV8WKqk
lQdDzcM2S4uNetjGtOZ73bDrpDXj2LXTet/bpLUf89gi7Fpp8UePWlrz3ZRW
L9igjjw4pDf7McfUkQff1bTOBMP0wIezlmmdAz7ahN00LU6wm6TFW9u0YrDC
Wuu0+GkVdsO0ONkoLR8mWdsgrfndNq3nYaa5vy3T4p/4+ml9F9ZL6xx8J1jD
hxVy26XFEn9PYfO02MNulhZLxInBJ2ucFXY3TutMMLNdWudgLjqHDk6Ljx3C
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
w0LHZ8XScPvM9wj7cDjUvWDphKzmD5ZOtN/WvfFbud9Qz8TMrOYYlk723szr
GaGpWc36KaExWc3+WPuwNM4+LJ1qH7ZOsw9LE0Ljs2Jpon1+3rAHzLRzb/aG
4cmhSVmxNMX+Tj4LPhye7l6wNM1nhZPp9uFmhv0O7kcNP4PX9zuBiVl+/nou
3nmob078nBOanRUDZ4fOyoqJ2fbhao7z4Gdu6Dy/4+tCq7Ji6XzHYOaC0Lys
ZvyS0MVZzeNFoflZsXSh85j7c73HIY4TO8g96NvVPRZkxdUC99rfZ6EerhZ6
PzhbZJ/ZXx66IqvZx16eFVtXOgY/S0KXZsXPZaGlWfG0zH4Pr5HHTK/288PP
CveCh5VZ/fsq+RYs9jngh3+P5dVZcbLKefB2leuPcR15R/gs1Pd3HXm9fXbO
BEvX+xzMxFOhJ7Oa9RtDN2Q1+zfZh59bQjdnxcltoTVZsXWrY8Mcp4Y5fij0
YFYs3e4aWL0zdEdW/Nxln5m+2/5I96Yv/Nwbuicrfu6zDz/32x/lfuwBSw84
Bj8P+xxvhzaNmd0kJ04eDz2W1aw/GnokK04ecc0kx4nBydO+o6m+pyeyYuwJ
9xriO+NOYekZ1zD3r4RezoqNF0MvZMXS86HnsvqmYJ/NirMXHJvhNXrNdo+X
suLqJfdi7l/1Hszxa/aZ69ftw8CboTeyYuIt+3Dyju8GJt4PvZcVQ+86doHj
b/kd/x36KyuePnANnHwU+jCref3YPvP3if2L3Ju+MPBZ6NOsmPiffTj53P4l
7scezOsXjjG/X9qHxa/sM/s/ZvXvfIWlb0JfZ8XJT47BybeOwcT3oe+yYuYH
+1d5jbxLfUaeAeZ+dq+bfQd/+p3/HvotK5Z+Df2SFdu/uOZ6x4kt97k4903u
8UdWjP3hXnP9rnh/MPCP7x1+/gv9mxUzyZjlRE5zz7+gjtgax6mBCeLEYCYb
NpMTZ+mwqZx4w9ILxogTg6tcTjXMd7OwtZz4qIQt58RVKWwxJ86xhZz4IU4M
DvM59YInelRz4gpLL36msTfngqfmOe0Hb/y8acxp1luGXTcnHtYK25QTB+vl
FIOVFjnF4GedsGvnxBN1+HDGGnlwTG/2g631c+rFrPOdaJ3TO9gobKucuNow
7AY58YalBsaIE4N5zsW5YYweG+f0PrH0gqs2OX2P4KFtTj58bJaTD1eb5+TD
wBY5+XC1Zdh2Oc3mNmG3zomxrXKKwQ3xLfxeDwl1zomxbXOqgaXtw26XE0vt
c/JhaYecfOae3vRlZncM2yEnfjrm5MPJTjn5cEs/9oChnXOKwdUuOflwtmtO
PrO+d9i9cuJq97C75cTBPjnF4GePnGLw0ynsnjnxRB0+nLFGHlxxRp4BtvbN
qVfCd3BwTnwcGPaAnLjaP+x+OTGNpQZ+iBPj28G5OHeDexyUE29YesHQob5r
+OliH5662oelbvbh4TD7MNM9dHhODB1hH36OtA9PPezDTE/7zPIxoQE5zfdA
+/DTJ9Q7p/k+yj7z3tc+/PVyL2a2X06/28FPf/st3Bu/5n69PGenhMbkxNYg
7828nhQalRNLx4WOzYmTwfbhZoh9mBlqH4aOtw8nw+zDzXD7zOJY793Svdkb
lk4IjcyJpRPtt/VZ8GFxhHvB0mifFU5Ott/Oz4S/iftRMzH0SOjhnJgY53Ow
/3WhVTnN/WmhU3PiYLz99q6fkBMzk0OTcprR0x3b3vHxft+XhhbnxNUU18DP
GaGpOfEzzT5zOd1+B/emL8ycGZqRExsz7cPKLPs7uR97wNJZjsHW2fbhcLZ9
5n1e6PycOJkTOicnJi5wDIbOdQyG5obOy4mT8+3v7zXydvMZeQYYvdC9uvsO
FuXEzMWhBTlxdVFofk68zXdNF8eJ7eNzce7D3WNhTrxd4l6wtMR3DUtL7cPD
ZfaZ9WX2mf3L7cPSFfZhabl92LrSPiytsA9LV9lnvm8M3ZDTfN9kH26vDV2T
E0sr7TPfq+zD4dXuBUurc5o/WLre/hD3xh/gftTw90H4HZTfMWHpZu/NvD4Q
uj+nWb81dEtOs7/GPizdZh+WbrcPW3fYh6U77cPSXfa38R4wM9y92RuG7w3d
kxNL99kf57Pgw+Hd7gVLD/qscPKQfbh52P4Y96OGf46B/92I/10IHh7NiWFY
ejz0mN/T16GvcmLpqdCTOfHwhPOmeg0fxp52Hvw8H3ouJ05eDL2Q01y/Hnot
p/nGvuo5+Mb7MZuvhF7OiUl6PJsTYy+51xzXkTfLvdlvtuvIg5lnfKYZ7oEP
Y2/4HDD0SejjnDjAfpTT3H/q2EKvfZgTT++G3smJpffsX+i1t3Oa42/9PFf4
/r7MiVvib+XE+ps+xzyv4V/u3C9y4urz0P9y4g37WU6MfeHYEq9xVvh+32eC
ge98DuYln4+fq3kx82Poh5zm/nvnXeM1fFj6yXkw82vol5xmN8G/4Dkvfn5z
DD7/CP2e09z/F/o3p1n+O/RXTiz96Tx4/dl73Ow4sRvcg75r3OOfnBj7x72u
81mohyvOwn6wlMzrfPCQysuHmWzYTF4MlMIW82IgnVceLHE35MEM8UJerFBH
Hlyxxj3CSSVsOa/ZbwzbPNQydGxoUF5sNAtby4uHel55cFbNqx5mqCMPRunH
+WCPOvL4Fn/g98ocN+XVizleKy8fHth73bwYWCfs2nkxwRo+PKznM8LNhmE3
yOsd7B52t7xYbJVXjLncOOxGec3TZmHb5jW/m4bdJK95bZ1XHsytn9cezDJx
YjBGD/rCCT3a5MUKll4wzFmo5zk3z2s/eGsXdou8mNghbPu8Zh+7fV5sdcgr
Bqtbh90qLya2DbtNXtxsl5cPJ6yRx3eFe2qR13dnx7x6wcGuYXfJi/st8zoH
nOwcdqe82ODOyIPzjnnVww915PEt4SzUwyF15DG7e+R17/DTKeyenpXeoV55
zThr5MHMPmH3zouJA8MekBcne+VVDz/75pUHK8T3z4sn6siDs/3yyoObg0MH
5TXjXUNd8vpGch/MFmwcGjokLza6OQ/GOrs+7Try4JB+nC/pus6eiePyYgOG
ORfngKXDQ4flxcFRoT558dDHdwEzfR2DjSNDR+TFT89Qj7w46WW/7DXycu7N
uWHmaPeCh4GhY/JiurvPwXMPCPXPi5tBzoOxfq5f23XkFX2W7r6v/s5jjgf7
mZnrIfZnhV4IPZ8XE8NCx+fF21DntfIaPlwNdx6cnBAa6Xd8Tmh2Xgyd6BjM
nBQaldeMnxoal9f8nRIakxdLJ4dG58XnCO/RznFibd2Dvlu7x9i8Znmse23i
s1APV6d5Pzgbbx8OpoXOyIsH7NS8mJnuGNyeHpqYFz+TQ5Py4mSK/Q5eI4/Z
nePnh78Z7sV8nx06K6/vwgSfY0/f+8y8OJjtPNg70/WdXEdee5+F+j1cRx7z
eq73Zn7Ps88cXBO6Oq/Znxc6Py/+5jqP2VwWuiwvNs53DGYuCs3Pi5MLQxfk
xdUF7nWI48TgbIFrmPGloSV5zd/i0KK85n1h6JK85h57cV7zvcixrl6j15Hu
cWles3ype+3kd8U76OmzL/X7vjV0S148rAhdmRefy0NX5MUu9vK8eLvSMbi5
1vfV33d2VV7MXOVevV3HfcHeStfAwM2hm/Li5IbQ9Xkxtjp0XV7fF+yqvHi7
3rFBXqPX8e5xY16M3ehe/C7F3DC/w/187HdPKFOI71xBzNwVujMvNm4P3ZYX
K3fYh5+7nQcr94Xu9ft8O/RWXjzd7xicPBh6IK9Zfzz0WF4z+Ejo4bzm+CHn
jfGZ2GOC48ROdQ/6TnKPR/Ni5lH3OsVnucfv9Qnvx3t+0j5svBR6MS8msHyz
4OZlx+DtmdDTebHxXOjZvFh53v4Mr5HH7L7j54fbV9wLDt4MvZHXt+EpnwNm
Xg+9lhcDbzkP9l51/VzXkTfNZ6H+XNeRBzfvem+Yec8+7/v30G958fFh6IO8
eHjfeczm96Hv8mLlA8fg49PQJ3nx9HHoo7y4+si9FjtODLY+cw3z/W3om7z4
+Cr0ZV6z/kXo87w4w/4vLw6+dGyp1+h1pXt8nRdXX7sX3+M1efF5lc/Ofvxs
uM0x+Pgl9HNePPwU+jEvxrA/5MXKz47Bxx++r+t9Z7/mxdWv7nWN67gv2PrT
NTCQCm6SBe3/X+hfn++f0N95cYb9y+f717GbvUYveKNHoiDG+I/V0AsG4JI9
mOtsQazy93j4HZrftWGmGGuFgtjIh80VxApr+PBTKigPVqphKwW9zy3DtiuI
p1pBMThpHrZZQbO+dtgWBc1gU9h6QXPcWFAejJYL2oMZJU4M9uhBX1ihx1oF
MYOlF9xyFupha52C9oPJdQvyYaN12I0LYgK7UUHcbFJQDN7WD7teQWxsGHaD
glhpVZAPV6yRx+xuVdDzw+2mBfWCgy3Cbl7Qt6FlQeeAmc3Cti2IAe6MPNhr
U1A9/FBHHt8RzkI9TFJHHtxsXdDeMLNNQT7v+6CwBxbEx/ZhtyuIh20LymM2
9wrbqSBWiBODjx3DdiiIpx3Cti+IKyy94Ic4MdjqWFAN871n2D0K4mO3sLsW
NOu7hN25IM6wOxXEAXFisMcaveCJHrsXxBWWXny/eFe8A3ji7Ox3VGh56IqC
+Ng/7H4F8bBv2H0KYgy7d0GsECcGJ51DBxfEE3d2QEFcYekFz9RxX7B1iGtg
4IhQ94I4OSzUrSCuuoa6FMQc9tCCmOvmWMpr9Cq4x+EFMXa4e/UNXelng4cj
vR8z3jPUoyAeeod6FcRHH/uNrudu4KN/qF9BPB3tWHPH+/gdTwxNKIitAa6B
mYGhYwqa3UH2mcVj7Te5N33hYXDouIL4GGIfZobaX9v9BvhdHu8Y73aYfbgc
bh8ORodOKoirkaERBTFzsmMwc4Jj8DEqdGJB/Jxkv43XyFvPZ+QZ4G+Me23v
OxhfECenhsYVxNjY0CkFcX6Ka7Z2nFhrn4tzb+cepxXE1WnuVfW74v3Bz+m+
d/iZHJpUEB9nhKYWxMMUxzo4Ts1OjhODjzNDMwriaXpoWkFcTXOv3RwnBlsz
XcN8nxc6tyA+zgnNLmjWzw6dVRBn2FkFcTDbsT29Rq/93GNOQVzNcS++xcwp
swtPc70fvF0QmlfQrC8MXVIQD/NDFxbEwSLHYOUix+Dn4tCCgni6xH4Xr5EH
x+d7P9ha7F7MOt+Jy/0OLgst9fmWhC4tiLFLXdPDcWKdfS7O3ds9lvl9LnOv
v7iLov7/OfCwoiCGHwvVYq1a1OxfG7qmIMauDl1VEA/X2Iexlc5jTleHrvO7
fCr0ZEFcXe8Y/NwYuqGg+b4ttKagWbwldHNBXN3kPLhd5T2GOU5siHvQd6R7
3FrQXN/qXsf6LNTD0+3eD8busM+8Pxh6oKC5x95fEBMPOQZvd4fuKoine0P3
FMTSffbHeI08ZvlpPz+MPuxeMPBE6PGCWL/T55jke3+0IFaedB68PeL6ya4j
b7TPQv3priMPZp7x3jD0rH3e9+eh/xXEwQuh5wvi6jnnMZcfhN4viJPnHYON
V0IvF8TSS6EXC+LsRfea7TgxeHrVNcz3e6F3C5rFt0NvFTTrb4ReL4gx7GsF
MUb8zYIYfc295rvHOwXN9TvuNc7vinewwGd/z+/759BPBfHxaeiTgrj6OPRR
QaxiPyyIn08cg48vfF9LfWefFcTVZ+51ieu4L9j60jUw8GPoh4I4+S70bUFc
fRP6uqCfkdivCmLuW8eu8Bq9rnGP7wti7Hv36ue+1K3087Eff+bk5zo/t2Hm
j9DvBbHxW+jXglj53T78/Ok8WPkn9LffZ8vgft2iePrXMTjhP0r5X0Gzno2/
zhQ1gyn+v31FzXGiqDwY/ct7MKPEicHef+4LK/RIF8UMll63+Cx/+b3mitqP
95wvyoeN5mGbFcUElm8W3DQWFYO3UthiUWxUwpaLYoVvGz5csUYes7teUc8P
t/WiesHBOmHXLurbUCjqHDDTIuxaRTHAnZEHe01F1cMPdeTxHeEs1MMkdeTB
zfpF7Q0zGxTl8753DrtTUXxsFLZVUTxsWFQes7ld2G2LYoU4MfhoE3bTonja
JGzrorjCblwUP8SJwVbbomqY723Cbl0UH1uGbVfUrG8RdvOiOMNuVhQHxInB
Hmv0gid6bFUUV1h68T3+pSA+4Ymzs99qz+kv5mPHWOtQFA87hG1fFGPY7Yti
hTgx+NilqPuCJ+6sY1FcYekFz9RxX7C1a1E1MMD/P3XvovbvFHbPos63R9jd
i+IMu1tR5yNODPZYoxds0WOvohjD0mtRJX4/CHWvaK73L+rn7opmcdbQN83E
QddQF7+nEaHhRbF0cOigopg5MOwBRTHE2oHm4bBQN890z1APzzr2yKL46eY9
eOcnhEb63Y/0fvDZ2fsxp0eEuntesYcXxcmRjuW9xt5pn/3Qolg/xL1SXsOH
q2NDg4piBTvQs8izDiuKH9aOKYq9vqGjimLpaPtrOz6gqHk90c/D7B8fGloU
A9ghRbHey/fCN6K3/ebu3aeo70cfx+DwOJ8VDgfb38D98OG2n8/EOz4rNMvv
/mz7zODU0JSiWBkdOqkoNkb53Jt5DR9+TnYe3IwLjS2Kj9NCpxY1x5NDk4qa
fezpoUWhj0MfFcXHxNCEopijxylFzf1499rBdeRt497st73ryIPpMT7Tlu6B
39HPxDmY99l+ZliaFjqjqN8p54TOKYqbM0MzimIFO70ofmY6tqvXqN/Td0mM
WbwgNK8oRs/xfjt7H+53oZ/7w6KYIPf8ojiZGzqvKOaw5xbFzPmO7ec1zsr3
uL/fK9/rAfaZ4wt9Du7i7tBdRc09e19SFFcXhxYUxdkl9g/3uyEPFpeGlhQ1
f8tCl3m/q0Iripon7JVF8US/i4qa0+WhK4rijx6XFjWvl7tXX9eR19O92a+P
68iD48U+0xHusdjPebXPAYu3hG4uiknsTUV9I251DLZuDN1QFCfXhVYVxclq
+4O8trKoubnHdzfa93dnUawTv9b3fY3PcYzX8E9y7h1FMXN76LaimMeuKYqf
Oxwb6TXOyuzfF7rX7//10Gt+59hXi2LosdCjRc34vT4rM/5E6PGimHkw9EBR
rGDvL4qThxwb5zX2O939Hilqvp8LPVsUM497P76J84uarUP9nvFnOPeZonh4
OvRUUfOOfbIoVp5xbKrXnvC7/KSobwEcP+zzwdLzPgd8vBV6sygOsG8UNd9v
OzbXa9wXzL0SerkoTl61P9trLxX1HXnE+zH7sPhBUd8F4i8WxfQLPsdZXsO/
2Lnv+w7eC73ru8C+UxQH7zt2odc4K/P7qZ85Wwr2Ql1DGdsuJb2bYthCSUx8
HvpfUQx95vqlXsOHpS+cB0/fhL4uio3vQt8WNd+/hH4uasaxP/muSyXtx/z+
GPqhKCbp8VVR8/29e610HXkr3Jv9rnEdeXD7pc90hXvgw9mvPgd8JGPPREkc
YPkPu8NZqqQYbLD2X1EM/x36qyhO/rF/s9f+9Lssl/Q8zDv3ly/pW0D8j9D1
od98Dr4Fv9uHA3JzJfGU9TuBK2y6JE6IE+O7wBpnZY4qJe3N+94sbNuSZgHb
piR2W4XdsCSemoWtlcTEWmGbSuKvWlIv2GheUh7MEK+XxCF15MFQY0l5cLJ2
2BYlzfj6YdcLTSjHvYQeKmt+W8bauiXxsEFJecz3OiXVM/vUkQfT9ON8zD11
5PGt+tfvAL45F+eAvY1Kek5Y3Lgkn7nfNOwmJXGzRdjNS+K4dUl58ME9kQc3
xLlH2KaOPDjm/jg3Pz+3DNuuJA62C7ttSXO2Q9j2JXGyTditS2Jj+5Ly+NZs
VVI9/FBHHt8A+nE++KSOvMGeG+aX7/d/fn7mukNJ+/EOjgr1KYmTncPuVBIb
HcPuWBIrrOHDyS4l5cHiHmF3L2kuO4Xds6T7PSDs/iXNOnY/33Vf78dc7xt2
n5K4pMduJc30XiX1gg/qyIM9erMfPFC3d0ns7lrSmWCbHvg854ElnQOeuocO
L4kV7GElfTuOcCznNb5rsHFo6JCSWOliP+m1zp7po/08zXx/vUv6HhA/uKT7
PqikczR4Db/m3F4lMdMz1KMkDrFHlsRJL8dKXuOs8NTPe/PuTw2N86xgx5bE
7qjQiSWxcUxoQEnMDA4dVxIb/d0LNgY6bz3Hjy2JoQHOg6FBzmOWh4aGlDTj
I0MjfO/TQ9NKYmN4aFhJbJzgPBg73vWtXUfeBu7H+TZyHXl8i2ECBlr6XJwD
xk7yc8LcaPuwcUpoTEnMjA+dVhIbJztvK98Teds6zj22cx15bXx/nJv9J4Ym
lMTB1NCUkn7OwAcsYSeHJpXExhnOg7HTXd/RdZP9PBN8vg6u+/+8+N494m/f
EH/rr/dcz/D9wtN5oXP9PlaGri2JmbNCs0riZGbozJK4mWWfWTw/NLekuV4Q
uqik+cbOL4mZud6D+74utMr3vsr7wd7s0NklzfuFoQtKmnHsvJJYme/YQV5j
7/189jklcXyOe+3rNXy+EctDV5TEFvbykmaUZ72mJIZYW1YSw4tDi0ri5FL7
vRy/rKS5Xu3nGeAeV5c039irSvpd5mLfC9+CS+wf7t4LS/pOLHQM/q/0WWFy
hf1+7ocPu0t8Jt7946HHPAtP2Ifd+0P3lcTGjaEbSuLhep97iNfwYeMm58HV
mtCtJc3s7aHbSprve0P3lDTX2LtDb4U2iflqXRYPd4XuLIlFetxSEld3uNfJ
riPvBPdmv5NcRx683uwzDXcP/LF+Js4BD0/6mWHuwdADJX0vng49VRInj4Qe
LokP7EMlsfGoY+O9Rv0k3yUxZvGl0Isl8feU9zvV+3C/b5b03BuXxcQLoedL
4uS50LMlcYZ9piRmnndsutc4K9/ppX6vfKMvs88cv+xzcBd/hv4oae7Z+42S
uHo99FpJnL1hf57fDXmw+F7o3ZLm74PQ+97vs9CnJc0T9pOSeKLfqyXN6ceh
j0rijx7vlDSvH7rXYteRt8C92W+h68iD47d9pgvd420/5/98Dlj8MfRDSTxh
vy/pG/GTY1d77buSOPk69FVJnHxj/wqvfVnS3Pzlu7vR9/d7SawT/8L3/bnP
scxr+Dc497eSmPk19EtJzGN/Lomf3xxb5TXOyuz/E/rb779FzMhaZb1zbFNZ
DGXCpsua8b99VmY8F2vZsphpCPtfSaxg/y2Jk0RZsTVeYz/Yol+qrPmuhC2X
xQz92I9v4islzdYcv2d8+CC3VBYPxbCFsuYdmy+LFeLEYIA1zsq73LSsbwEc
J8s6HyxVyzoHLLUMu25ZHKwTdu2y5nu9smKwwRr3BXP1sI1lccKd4cMha83L
+o7wrOzH7MPiRmV9F4g3K4vpWlnn4PvIGj6ckNuqrDvYMOwGZd0Fdv2yOCBO
jPtijbMyv23Keub9Q+eFzg3tZzvH7+bg0EFlMbF52M3KYqhtWfVwwho+LG1R
Vh48bR12q7LY2DbsNmXN945hO5Q149gdfNedvR/z2z7s9mUxSY8ty5rv7crq
xexTRx7c05v9mHvqyIPbdmWdCY7pgQ9nHcs6B3zsHXavsjjAdiqLs33KisEG
a3uWxfBuYXcti5Pdy/JhnbVd/C4P8fMw79zfgWVxT3zn0Lfx1zuVdQ6+Bazh
wwG5B5TF0/5+J3CF3bcsTg7we+O7wBpnZY4O9d6876GhIZ4J7OCy2O0f6lcW
T91CXcti4sjQEWXx18W9YOMw5xUd714Wh12dB0OHOw9OeoZ6lDXjfUNHhcaX
9efXB8ua3z6h3mXxcLTzmO9erm/uOvLK7sf5aq4jj2/VHmW9g4LPxTlgb4Cf
ExaPsc/cHxc6tixuhoWOL4vnQaGBZfEx2HmtHOceW7qOvCbfH+fm5+eI0PCy
ODgpNKqsORsTOrksTk4MnVAWG6Odx7dmpOvbuo68jd2P823qOvL4cx2/H5zh
7zfzyPMz16d4P97BwtAlZXFyWujUstgYFxpbFiun2t/O74Y8WJwUOr2suZwS
muz7PTM0o6xZx073XS/yfsz1tNAZZXFJD35/Z6anuteuriNvR/dmv51dRx7s
TvCZ2rvHBD/nTJ8DnuaFzi+LFezcsr4dFzh2gNf4rsHGOaHZZbEyx/7eXju7
rNlZ7Ofp5vu7uKzvAfGzyrrvWT5HJ6/hd3XugrKYuSg0vywOsReWxckCxzp7
jbPC06Xem3d/e+g2v3PsmrLYvSF0fVlsXBZaWhYzV4aWl8XGEveCjWXOO8rx
K8piaKnzYOhy5zHLV4VWlDXj14VWlfX3IfhdkN8BYWNl6Nqy2FjtPBi72vWD
XEfe0e7H+WDvGufxLYYJGOjjc3EOGLvRzwlzN9mHjVtDt5TFzJ2hO8pi42bn
jfQ9kTfKce5xuOvIG+z7W+397w7dVRYHD4TuL+vnDHycYntf6N6y2HjQeTB2
j+vHue4+P89dPt8priOPP/PwrednDkw8WtafadtU432HTqjqHXwR+rwsTp4I
PV4WG4+5ZrLX8OHkSefB4rOhZ8qay+dDz5U146+GXilr1rEv+66/9H7M9Uuh
F8vikh5PlzXTL7jXbNeRd6Z7s99ZriMPdp/ymaa5Bz6/R7zmc8DTh6EPymIF
+35Z346PHFvgtffKYuPt0FtlsfKO/Xlee7Os2fnKz3OZ7+9/ZX0PiL9RFv+v
+xxzvYa/1LmflcXMp6FPyuIQ+3FZnHzm2CKvcVaYftdngq2vfQ7eebYSPxsr
4uG70LdlMfCN81Z4DR8evnce3Pwc+qks7v8L/VsWY784xvz+Fvq1rFn/J/R3
WQz8GfqjLH5+dx6s/hj6oSyW/nBstXvQ9xb3+KssTv5yr5U+C/VrfBb2g6uG
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
4sOquu/jfY6NvIa/rXNPrYqZcaGxVTGPPaUqfk51bEuvcVZmf1LodL//BaGL
/M6x86ti6MzQjKpm/HSflRmfFZpZFTNTQ1OqYgU7uSpOznBsR6+x327uN72q
+T43NKcqZmZ6P76JR1Q1WyW/Z/x9nXtOVTzMDp1d1bxjz6qKlXMc6+S1WX6X
V1b1LYDjaT4fLJ3nc8DHwtAlVXGAvbiq+V7kWFevcV8wd2Hogqo4mW//YK/N
q+o7Mt37MfvLQpdV9V0gfn5VTM/1OQ70Gn5P5y71HSwJXeq7wC6uioOljnX3
Gmdlflf4mR8NVWvBYuiRqmy5pnfzZOiJqpi4JnR1VQxd5fr+XsOHpWudB0+r
Q9dVxcYNoeurmu81oVurmnHsLb7rp7wf83tz6KaqmKTHqqrm+0b3Gu468ga7
N/sd7zry4HalzzTIPfDh7DafAz4eDD1QFQfY+6vi7CHHxnntvqoYvjt0V1Wc
3GN/tNfu9Lt82s8zxff3eFXcE7+jqt9pbvc5RnkNf7JzH6uKJ94N72Si7cNV
cfKYYxO8xlmZo2e8N+/7s9CnngXsJ1Wx+17o3ap4ej70XFVMvBJ6uSr+nnUv
2HjBebMdf6kqDp9zHgy96Dw4eS30alUz/nborar+XMLPEn5uML9vht6oiod3
nMd8v+76ea4jb477cb65riOPb9W9fgdn+1ycA/be93PC4gf2mfuPQx9Vxc3n
of9VxfGHzlvseyJvqePc40LXkTff98e5+fn5VejLqjj4PvRdVXP2U+jHqjj5
NvRNVWz84Dy+NV+7/irXkXe5+31RFZ/fOI8/E/L7AT/P+X7f5+dnrn/2fryD
dYPddWri5PfQb1Wx8Wvol6pY+c0+nPzhPFj8J/R3VXP5X+hf328m+qVrmnVs
qqa7blnTfsx1MmyiJi7p8VdVM91QUy/4oI68Ne7Nfsw+deTB7p8+083u8aef
M1vTOeCpedhmNbGCrdX07WisKQYfrPFdg41S2GJNrPBtw4dt1go1zc56NT0P
s879rV3T94B4vqb7ztV0Dr4HrOHDAbktamJmrbBNNXGIrdfECXFifBdY46zw
tH5Ne/PudwrbsaZ3jt2xJna3Cbt1TWy0CrthTcxsGnaTmtjYoKZesLFRTXkw
RLx1TQxRRx4MbVxTHrPcNmybmmZ8y7Dtavr7F/wumDYbW8Ta5jWxsVVNeTC2
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
94D1J3zej7uOXp5jPMC+rxUx82rolSIOsS8XcfKa1/p6jlrh6R3vzd3/EvrZ
d479qYjdb0PfFLHxfui9ImY+CX1cxMa7zgUbH9hvmNc/KmLoPfvB0If2o5c/
C31a1ONfheb43OeN32PNU8XGl6Evitj42n4w9rnjRzsOvxHOR32jHIcfbzFM
wMD1ros6YOw7fyfMfe8xbMwN/VjEzG+hX4vY+MF+t/qc8LvD65zjRMfhN9bn
97X3/yP0exEH/4b+Kfo5Ax9TbP8O/VXExn/2g7E/HX+34/729/zu+qY4Dj9+
38P7Drf0NGdJLvq6RdX5cgdrhl2jipMFwv6vio35w85XxQpzjOFkwSo/WFw0
7CJVfdky7GJVPV7Dlqpex+aqs16raj/6OoVtVHFJjoWrenrxqlzwQRx+sEdu
9qP3icMPdheqqgm2ycGYX0c0q+qApxXDrlDFCnb5qrdjpao1+GBuuSo2lg67
VBUry1SNYZu5Jat6Z+2q76HXOb/WVe8B60tU8d+qqg7eA+YYwwG+q1cxw58p
rFrFIXaVKk5YZ413gbmVq3hap2pv7n6nsO2r7hy7YxW724TduoqN9cKuW8XM
xmE3qmKjTVUu2Fi/yg+GWN+wiiHi8IOhDar86OVNw25S1eNbhm0bOig0Gl6r
2Ngi7OZVbGxV5Qdjm1XFwwZx+MEG+agP9ojDjzds2ao7gG3qog4Y27bqO2Fu
u6oxbOwQtl0VM7uE3bmKje2r/GCDc8IPhljnHGGIOPxgmvOjbrjpENq1ioM9
Q3uEDvS3jqripGNo9yo29rIfjO3m+Pkdhx8cko/6WjgOv06hMT5H3mv6ke+n
p/cJ7V3FBnsfUMXD/qH9qvg4wOPFfR/4wdAhoYN9f+eEzq7isrPX6NHDQof6
rI8Ida/q5cNDXat6t4v9Gq6VPZbwOmvVOci7tHN0q+Kmm3Ml19LJ33ak9+Nb
j/IYPk4JnVzFAZY/d4OzU70Gt8eGjqni44TQ8VUMnejxyp47ruqN4Zz2rXqD
TnMuevys0JlVb8DRrgM2eoTOqGLjbPvB/OmOb+M4/FZwLcSv7Tj86Ndzfe6w
dX7oPN/54NC1VX19nv1g44JQrypmLgn1rmKjp+Nh40L7tfX6xVUM9bIfDF1k
P3r50lCfqh7vF7qi6r3kPOgt2OgburyKjf72g7HLHL+94/Dbyvmob1vH4cdb
TJ/CwBauizp4n64MDaji4LrQkCoehvgsYGao12DjqtCgKn6uCV1dxcm1Hu/q
Ofx2dO7+3vt654KHkaEbqjgf6Dr47hGh4VXcjLIftQ9z/H6Ow29n1zLQ5zXc
fvwbkPx7Wvw7WvT1TVUMPxJatBl919Q9PRl6ooqPm0Pjqtgb65jOnmMMY+Pt
Bze3hm6p4uT20G1VfT01NKWqv7GTfd9PeT968c7QpCr2yDGxirE7nIuevct+
3Z2b/Y5yHH6wPcE1dXUOxjB2t+uAjQdDs6qYwD5Qxc1DXuvhuZlV7N0Xml7F
0v0en+K5e6v65ml/Ty+f3+NV7wHr91SxPs11nOQ5xj3t+1gVW4/6Ts61fbiK
pce8do7nqJWefcZ7c/efhj7xnWM/rurBd0PvVHHwfOi5Kj5eCb1cxeWzzgU/
L9ivr9dfquLnOfvBz4v2o49fC71a1d9vhd6s+u9s/Nkofw5KL84OvVHFwdv2
g4PXHT/Icfj1cz7qu9Jx+PFOzfAdXO66qAMm3/N3wuj7HsPGR6EPq5j5PPRZ
Fbcf2G+Yzwm/G7zOOQ51HH7X+Pyom5+lX4a+qOLg29A3VX32Q+j7Kk6+Dn1V
xcZ39uPn5RzHj3UcfqOcj/rGOG6O73uxpvjknZ7p76evf/R+3MGSsb5EU5z8
Evq5io2fQnOrWPnZYzj51X6w+Ffoz6q+/Cf0t893vsjXoqlex87b1Fkv1dR+
9PU8Yf+r4pkcf1T19L/OBR/E4TfVudmP3v/PfrD7m2uC7d895jvnb6oOeGqE
XbwpVrAtm3o7UlNr8MEc5wUbC4ddqClWeNsYwzZzCzbVO0s39T30OufXqqn3
gPUFmjrv/zVVB+8Bc4zhAN9mU8zUsKUpDrG5KU5YZ413gTlqhadlmtqbu98k
7MZN3Tl2o6bYbRN2nabYWD7sck0xs0rYlZtiY9mmcsHGCk35wRDrKzXFEHH4
wdCKTfnRy6uFXbWpHl8r7JpN/ZkEv0ZsYTbWiLnWTbGxdlN+MLZ6U/GwQRx+
sEE+6oM94vAbbyZgALapizpgbN2mvhPm1mtqDBsbht2gKWY2C7tpU2ys35Qf
bHBO+MEQ65wjDBGHH0xzftTN/luE3bwpDrYJu3VTP2fmmiXsVjG3ZVNsbNuU
H4y1bSoefojDj+8hH/URTxx+9O72YbcL/R9KIE9p
            "]]]}, {}, {}, {}}, {}},
       VertexColors->CompressedData["
1:eJztnWd4VVXz9gm9S5cqISQYlAgqGilmgCCEpnSUJihFqlSlhwcIkNA7AqFK
6L0TShLSCIH03hvpEgsIqPAmb94P75ef//96PDEnZPllXc51ODl777Xnnrnn
nlktvvp24PiyZcqU6VKvTJly+euuHwr+uyZ61ate9apXvepVr3rVq171qle9
6lWvetWrXvWqV73qVa961ate/+e12tfVutbseF3WfmbSbu+Q6/Lk4p0vt8y8
ru3aru3aru2vuL248aeo8Gub3cEdA8x9JLnioiUNs33FduPyOhOu+ol3kv+Z
hzM8pN97sxo8+eaO1LjT03PrOE+xPmEzbETtO2KTEXXyubmnTI6f6bS+s5dM
2fX9noPve8vvcxP31A7ykY8mdp/07Zy7UrFOPfH29JGQGyn1mh25K/tOnIr8
cuM92bJ+VrvdmUFSrdv85j0vhkizcucjXC3DxP1Ih/mb7FLlkMmNCnU8UmVj
2Km9ddelypCYfnn9uufK9kqZrWeNzpX9wzo/9m2RYzD7oLPeUXPW5kiOVdqi
c0dyxMRz1E2npdni4dFrl8Tk25+2rVX+SY6s37Zz4mGvbPye6QmHXix4LVPs
3u1ysEq7TJkSPM1x5MwM6X3FYpb7iRAp08l6mveJMKkzIfrFtjcj8D4byn50
ztkXAefuSLu9XW1fJuZ/7tnu/qvreaO9kY2ZS/eBnmI2+FhUOWcvaVnfu8Gy
HG/5YvqkD8xd7sqx+MaRb8Xck0t/vf12v4YP5OS6c3VHXwuWH32H2x7bEyrl
k+f+taxeuHS9sqN9j85xMmzX1mXTqyWI15EyDQOCE/D5Vs/Mq+XdJk1+Wbj7
Rc6mNNlzsOW1RbZp0qKShf/F36KlpePoHucSY+X4LtMsm/g4GVh94zdlfw6R
1XWs5nd+FiZjzja5bPVdhNQ6k/16TmCUOC61PTrwXow03dou5ElKrDQZt3nT
BYt4qTA97v6gzARpkvds7Ip+iZL3QXmf8SmhkrqiyqEvKkfI9PZLr3RxjJRp
p9rWiW4RVXhfzWPEp3XHzff6xUp0uVNuG7dHiXOfmUOitsRIGe/3v8k4FysV
nnffa74oTKpvObZswKkIKWs3LTm1TZTEjr/905w3A+X1Xq5BPjeC5M39jmeT
WoeIn3VM7M4eflJwe9ru8JfajYb+3CPvgQSZxTxbctBTmrSNM6/4h1fh/3/u
o/zcl3g7lGvh7iGf1HAZ+9T7jtwIHHlkUyDbi3ofavvf22v8VXfkSVMPGTzM
5t6vVe/Il5feS9rx9A7a+1mNyF4zx0eik87cbdzrrvzsvPPxV+b3Sh1+vT25
XY07CW4yI3v63qzN7uKyJH7wj3Yeyvi+qM3ijGXR12VxhUneB2u7yqDAXIt1
vVzx82Zpb4bZON8Sy14RfW/Nvy3ScW7ahTZu8nknp9mh5QNl0Ci3e9W3B4nJ
Hxmh28qGiO3d1NAHA9Pk+PgpizddTJPZj5I2p4xNkwVJDxw25eNHlz7Dzq6b
lyvmdocjgz7KMZi9yo+ep3OH5cgOl8ozFszOkafJa57MG5gt6b5+bZc/zpHt
nfdub14rV+qsNOlzOjYbvyfae9/RqS4Zstds1erdPhkyvJbfHx/VzxCnDpU7
Dv8xSJZPXl43aEKIBF6dYWoeHWqwuCtgdXB8ousNGVTgOD+5Kd+YTZ23IOgm
xhVHWhzPm+gZIBtmenkN+DZIoofYPesVE4w4sjnNfOut1pny65zTlha9MyXP
I3zq+NUZGA/Q/WkX5j+86lu5kn1nwaGh+XFBk4khtd2q5kjAsv7xPnGJYla2
5oHeh5Okw09ba4YHJeE+ofeacCH38U8bfl/gKt+65jvy+65SAH8rW9yQ6/tv
jf9U3MT+g0qVH4a7Se+vL64/PsNdGRfoe+i5GOq5p36aOeavtu6S/zZm5uS5
y+C1v1ofuOiBv9PY8gVt/3u7qt8ubvwpKvyieKC4ngvh4PpRBxdM8fWXsVNb
+HZdFSDdbF+Wf90ySNrcuPfJol4J0r/Tnx98YZ8oX/06c9pRv0SZ9cH5t63s
s2R3as8/nZyz5Nizt55FXshUxi/yq2RX/f4//Jb/Vm/5Q5l4IWv2pbsP5Z2h
oWMaD3ko4+YP+3jMrvsyve5P2+Z3CJTDbWybZu8PktqDzBxHP7krB6592tKq
g78U3MbeKx6Iw/0yr48780DsPaJOjQ8NlC7uXk6NbYLlQdLw3LEPQsSz1Xuz
/xMcJh2qLYxO+jRCuqxc32ywTYo4O1dfvzkgRU65zj9uezVFXvqb2px1y5Be
Ex7XvJKUIfFl3k/o2iZDXLteHHrxQpbkTTGv4hGUJeej/7ydlZSJOKV6fy74
m9UbcSFdLEwmT46KT5eMG97vDLBLF6+1eU9MHUOk82edJ1ZzCJMctw4te5eJ
MDo/TDhIOEJ2wjuyUxxI30/xPOEp2el66f2lz6vajQ1Hisuu6reLG39KC36p
2ul9XHb0jzI/1sv3cwXv0btR4ps1NKDXmmhJnnWjbJBDttg65mdOB7MlbHT3
mHd3ZRV5Hkd24iEpr6E8burFphkHhmXIvvx/bzc/Q+7bbBjwRmC6mK2rumfq
y3TZFlrlGzPzDNkx1Db5DYd0/P6mlUZbfR+eIou693U0H54q1R7Nqp3wbv5a
/Yu4LJM4mTLeo+3jkHg5FlXulNv+BLTPqPp2/cE+mfJz1e6f+T3MlKoT+rrv
qpMpiT0/yPn9fpbsOrN5Q1x2lnx4b/yhX59mYhxC+eCe9w9etF7qLl8dCG//
6FMPKbercpO9pup+mOyq+Qvx55QnPh73Isj690A5E7DncevDwfKafb/wo/VD
JfV667RLUwNln+m5uI+rBsucLL+J8+fx5yl/p7/b1s2m49xLvnKrn/2Tlu5+
cjw05z9DQ/0xPyU73QdVvCb7ltM/LLrw8W1ZZ79vZlJjN8nt6eR7dqebxjWN
X68UfpGd3rt1BXncpBh5/kvZnEOfxUnyh43dRnSLR39bXLhG9l5RZpOsH+fj
V25Qk5/qZ0p6UnmXQcMzZFyF2zXedUmWW0/8N5f5JEX6r15qezQ/v7o9/tMd
XqHxMq7iWykJPROlh8Xcsrt2Jkra1UEdP8+Ok8YFCdm5BKnhuLDN4vaJiPsV
Xwu5de0/QXJ7yeoaDbqEyLG6gd0jz4einX7POUf/kYl706RRwd99liZmBXxk
/v9TferRi3lnhjtGyJBva0zdtj9KTFb1PzzhUbRs/z6s3MMOAVJpV8C1mBZB
sq5apW7n1wajf+6W0/fAr928pHpad9eqV7zFyqaC27x2vlgHHPPFpIFVy3pK
6/lz15uIl8ypdO59h6VsJ97yxbVvfOd1DhLrI5tN9v8SLCPvrl/XZVyo/PhR
z2bN5gRL05/HWb//WagUlAuzvcK4nviV68Kl+fg07+uuY/uPDhOvJj/0fBEZ
jnW3EWOfj7b9MFRqZZk5nO8RLqeej5zm5RkhYfMyW707z1++2ZS7SFoHyOQb
c7Y0/CUQ7wPFh6r5oKqd4grVOsWratf49WrjF9kpbiT/QHmNoXhI+vy8yz2/
veqSIztmDip33z1HHC5679+yI1uerrL6eNf0VMn3lisup6YWvtcnOD869Pn0
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
2QkHqY5G88Bp/2ic0vZXya7xq/C6aA4k5UF0Pg7F23SOJJ0XQPkUzcEj/KI+
a6qPGNv+LC47PRfS/xN+0XlJqvoQ1TmNlJcZ233Wdm3X+PXP8Yv8PPX10Hz4
FpUs/C/+Fi0tC/xaYqwc32WaZRMfx+faKPJvxOPRHAzSjVAdxNj2Z3HxGPS8
iF9tY3/L6vPr2bKz1uxeYeHZEi8NDtr6ZqEenvrKqR5KfdbUZ0e6U2O7/9qu
7Rq//jl+UV2D4mHSM5Dez1B1Ivp+6pt4Vesd9PupH4ruj+p5JXTOL+kzCY9o
v6nW16hvneqeui9M218lu8avwusi3fIn1Tut7TUxXS5b+U3d+EO6dCzIy6ql
6/jWSPMmei6Uh6qeS0L+n/ScpNuhfIr2IcVRf6vDrxgmR2eUP1avbYRsjTLd
svZsJOK7sT1fbdf2/41dn/9VeF1UzyrpOEV5SknJv1TPVScelT5vqL4n1Xn4
xCtSnUt13jLpFWmOtz5fTNtLol3P3yi8roLx6pEDY+WYdx9rR6t4GVygK6ya
UOL7OilfKC4eSVX/T7hA+hPSkRb1dZH///ryuCErFobKTveGmyy3hsvz7nvN
R9WNRN6P6mj0eeIVKb+j81KL+nwfbdd2jV9Fh1/7/OV5K/sAuefgd3u7XVDh
nL4LJf/9JR049b2qnmdKduL36PuJ1yK7seULqvU44qVVdYyq57/QuaJ0noLW
qRqWx1CN36h+Tftfte/P2O6z5g//O/wq6vlRxWUn3cLdE7Or+86KlHK2Q68s
WBIts27bDth/JQbrRKr8Hs3lID62qPm94rKT36Dz1Gj+BvW5q/KNVX70PJ07
LD8vc6k8Y8HsHHmavObJvIHZiKd07gzpM8le0vlqeo9oziTNyaF4gPodiO+l
uW30efo9Jf39Uo23ixt/igq/DJV3GJudeELVec6kt6d+ZzzHE/DL2Ob/G8pO
fCadX0P1LMq/qL+D+ujp+wnXqN+N5uFT3FJS/CT9TtKdEu9Kc0Spn5R4Zprn
Q/MHqA+I8LGkPBdD5R3FjT86/yravID8Leki6H2kOJD4DWPzVxRvkx+jz5M/
V+UPDXWeJuk6KO+juhvNnabzdGifEI9N95n4AeoXoPnGbd1sOs695Cu3+tk/
aenuJ8dDc/4zNNQf+XbVPIvwgs5rSLs6qOPn2XHSuMBwLkFqOC5ss7h9Is5/
pv1D9U3CU9q3FK8aG95p/Hq18Yt4G+J5qA5C5zvTnFtj2+eqOE75KflDyjdp
brwq70d20m/Q3GA6l0dVt6/6e2jeJs1hI1yj/J3ylC4r1zcbbJMizs7V128O
SJFTrvOP215NwftD/emUHxGPR/hF/CFdF8UDNM+Z7gPNafFam/fE1DFEOn/W
eWI1hzDJccvP2MpE4P4nfKe4l+p0huKTNX692vhF74tpzToHFw0Ils8rTH53
nmWobPply+R9e8OkQsGLuShMqm85tmzAqQgpazctObVNFPqTks77Ec5Snzjx
peTfDJVnqdqp74zqbsRnGkrPT9+P8QDEV+Qnya8SLtwe/+kOr9B8HKj4VkpC
z0TpYTG37K6didjvQOecUh2Z4pnXrx050al6sARazbEoGxMitkcHXqjUPwzz
MuIDaa4p5V+ULxO+0/OqVv2LuCyTOJky3qPt45B4ORaVD/j7E7DfkHCQnqNq
3Kvxq2ThF/Fv9L6TX6X9RryKsd2H4spb6fMUD7jt8Fg+oWWOdGve5mtbyZFH
JtfbTjTnc5xVz30m+6Cz3lFz1uZIjlXaonNH8vHMc9RNp6XZ6MfIT9JcEdXz
N8nfEn4ZSkdH9V/kA4HvVeUJ6bpU40bCzdvjUtwbtE+WHR1GNagblyx+Bz65
PDslGedC036gPgvV/Ub9s4TL5GdUdQgav4oXvyjeoLyJ+BaKi6huRXlTSeH9
jC1fo/nMlI+QH6B4mPIm0nXQ36X50oRfNM+T6miq+hDipQmn6P4bm76Rfqeq
Tp7wl/S6hIPkH4hvpHoc8QmUp9N+fuo0/aaLZZhMG/nydMCQCHFd4j49MiIS
6xHEQ6r2exY3/hg7fqmeK0r8Oe0f8ie0H/S8oH+HjyVcIJyiuJd4J4pXqV4Z
7b3v6FSXDNlrtmr1bp8MGV7L74+P6mdgfzTVp0hnSPM/VfGa6oN6TqNh+RnV
fIdwIfe1rTFPzgXKm09dMi8MCxaP9tWb1/YJQZyifFBVf0J/t5GNmUv3gZ5i
NjgfkZ29pGV97wbLckpf/7Kh8IvwgnhvOpeZ/IPuJy1eO8UJxKeR36bz4EiP
rcyDQX2f8iDCX8JH4gNV8Yv4SdIfGtt+MDY71QFJt0n7iuYPEG9DemPyYxf8
zeqNuJAuFiaTJ0fFp0vGDe93BtilI65R3L6+QN/i6y9jp7bw7boqQLrZviz/
uiWfE1Tc+GMs+EXvF/V7ku6L5r5SvPSq9tEbm514Hoo3VPMs4oFV8w6Kkymv
ofyL6nSkw6d8jeosqvp/Haf9d3aqg1MdQfUcJdU5b4SbxLfT+0X5XeiYxis3
+MTK0nZ5sQv3xMvagnhvekKpwy/Vvl3S2Z7u8d3h8U4pUmPmyTUx9f5fXfxx
SuE8Kvto6ds830PNjJWZL1rVM1sQp+NMI7WT3lL1nB2aD68654TsFM+Qbofy
LOIbiT+kOE31/hC/pKpnM7b9Y2z8Id030tMaqg6uykNSvwDFS0+6Rzg0H54s
n7W02nblZbIc/KncxmiTlFKHX6Q7ojiW+gqpzq6a52r7v2On5078hqoui+bM
G+p8ZOJ5qF+YdPV0Hquqjp14ReJXKR+kczlJh1B7kJnj6Cd35cC1T1tadfCX
gtvVe8UDzAteVR6D9gPhGj1HQ+lh6PfQ86L6b8DNVX3WP02Qc07W720ITpS1
lrk1btVPkr2WVRwvJqYW5nN90+SnykcqnMnfN6UNvzwrJwV5H4qRh/nbutmq
OMlHl7cnz4nH+Jn8AOlmjW2fv6p2ek+JjyJ+zFB9WEWdf1GcTPkX5Ud0H1Tj
cNJ7E44Tb0l5GcWNNE+J+HnKO4xNx/iq2onvIv+p2gdX2vBr43XnxWkzM6TX
7uMLx23JkAFtn7Z/Mz1dNqeZb73VOlN+nXPa0qJ3puR5hE8dvzoD69pUPzW2
/VPS7aSTIb9N/pnqL6o6BMovaN476S4MxR/S/iQ8Jd2Xqj+nfh/CI9U+aJrH
SDwJzZeg/JTwjvJlzCMgb1WtN72qdoqLqO5P+4qee2nDL+KLiP+n/otXlZco
arvqHCeae0B9naRfov4XmvtH/pbmLxEfYih9uGo/mmvXi0MvXsiSvCnmVTyC
suR89J+3s5IykZ8h/od+D/F19FxU81mq09H1UpxDfD59D+ltqA5I8QPVwamv
WcfDhXbKl+l5lTb8anX8SsXLdyKky48Jt2pGRkmzIf1qzW0Rg3339F4Qf0V+
RtU/lBQ74RHpVUh/S36V7NRPR/EGxec0v11Vh0D1taK+z8TjUZ8pzccz1O+k
OFB17iLlZaTTVtUn0P0kXKb8i/I46mugPJ3iLvp+0kXQPiQcJ/9G+RHdZ3rf
VecoUt66eN5205aTH4hrePyR46cCpVFTizMPGjAPX9z4U1T49TywwmOrLV5S
wW1exRr1fSS2T+NDc/f4YpxMz4WeI/lPmv9c0udg0HVR/Z14IdIjUf1INU4g
XXGrF5ZZ/pszxXn5xG5bzmeKicOC56tTM5Tn5+B9MNB9pv1J9434Q0PhF/GN
lF9QXqbK39LzovzIUPkvzYVQ5cFoHiPV9Wg+IemfqU6EcxQhPqS/q/r91E9E
cxtI730t/+Mv8+/fpI6dGjWdFCWpBf/+ZunLv6j/i+Ix2p/kD2kuCtUxS3od
meIoiidpHjjlv4a6P1QHUc0LCL+Kev4J3WfCI9Jv0BwnQ+EX3Qe6/6o6fNKB
kB6Y+sSLiw8hPCU+h/JBip8pT6TPU3xIcxgoH0Q9D+AXxTNk1/rDv8cveh8p
/3087kWQ9e+BciZgz+PWh4PlNft+4Ufrh+IcbMLBkl7npfeR+qoozqT7ppqf
0ucpriNdN/UjE/9Debeh7jP5Maq/UP8X8XtFvU9ozj/F+aq8Il0v4TXlU8b2
fhWXnfYb6ZEobifenvRXlLcWhCeRA2PlmHcfa0ereBlcUJ+sWvr0G7Mdvr+2
eoObfF+r06CM9u7ydMbdmUdimU8gfKG4jvgTqvsQrpWUehnhBeE+1a1on6ue
20J4SvPYyU/S/CXS7xU1f0jfT3Vtul6Ku4pr/5C/onnFqjqQdVX3TC1n/VCe
JvT+buqKh2J/Y9ipvg0flvjzo0ubXc/vLbwuqmfR/SH/SXl33gflfcanhErq
iiqHvqgcUaijc4yU9MQfAs33hsrIU3V3pFwPF9MsmzLHOkZinkK6XOsTNsNG
1L4jNhlRJ5+be8rk+JlO6zt7YV5ZXHbyt8RLUP3CzzomdmcPPymQzbbd4S+1
Gw39uUfeA/y7v6ZViOxpfU8cLN7o/+G5+5KPMvffaByIcwhJD099TMSLbrM7
uGOAuY8kV1y0pGG2r9huXF5nwlU/g93PSWmjxwzdEChfVz+Z8rRdsOzeMMXW
a1+IWFnc62W5NFkqFWxgsxSZ38ljUlfTFJwbT3Xw4tongwoCgtfuy/3v8+pW
igwojOcHBsm1hAOWgYMSpW70rHe8LJLkyqhvToeMScK5VfQcSW9DfUYUd6le
F+UvNIe2pLzXxWVXnV9U3PhTVPil7dqu7dqu7a+2vbjxR6961ate9apXvepV
r3rVq171qle96lWvetWrXvWqV73qVa96LUnr/wHdna5b
        "]],
      AspectRatio->1,
      DisplayFunction:>Identity,
      Frame->True,
      PlotRange->{{1., 72.}, {1., 72.}},
      PlotRangeClipping->True,
      PlotRangePadding->{
        Scaled[0.02], 
        Scaled[0.02]}], {576., -189.}, 
     ImageScaled[{0.5, 0.5}], {360., 360.}]}, {}},
  ContentSelectable->True,
  DisplayFunction->Identity,
  PlotRangePadding->{6, 5}]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.4065548250694394`*^9, 3.4065548372413144`*^9}, {
   3.4065562978506894`*^9, 3.4065563168194394`*^9}, 3.4065564128194394`*^9, {
   3.4065564581631894`*^9, 3.4065564873350644`*^9}, 3.406900398624936*^9, 
   3.406921894812436*^9, 3.406922235531186*^9, 3.406922509734311*^9, 
   3.407083647468551*^9, 3.407087037281051*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["thresholdImage",
  FontWeight->"Bold"],
 "\nConverts a grayscale image I into a binary image by setting all the \
values below the threshold t to zero"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037281051*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "thresholdImage", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"thresholdImage", "[", 
    RowBox[{"I_", ",", " ", "t_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", " ", "<", " ", "t"}], ",", " ", "0", ",", " ", "1"}], 
       "]"}], "&"}], ",", " ", "I", ",", " ", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.407087037281051*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["normalizeImage",
  FontWeight->"Bold"],
 "\nConverts an image to the 0-255 range.."
}], "Subsubtitle",
 CellChangeTimes->{{3.4070831692966757`*^9, 3.407083181999801*^9}, 
   3.407087037281051*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"clear", "[", "normalizeImage", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizeImage", "[", "slice_", "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "maxVal", ",", " ", "minVal", ",", " ", "image", ",", " ", "newImage"}],
       "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"image", " ", "=", " ", 
       RowBox[{"Take", "[", 
        RowBox[{"slice", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"sliceSize", "[", 
            RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
           RowBox[{"sliceSize", "[", 
            RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"sliceSize", "[", 
            RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
           RowBox[{"sliceSize", "[", 
            RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"maxVal", " ", "=", " ", 
       RowBox[{"Max", "[", "image", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"minVal", " ", "=", " ", 
       RowBox[{"Min", "[", "image", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newImage", " ", "=", " ", "slice"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"newImage", "\[LeftDoubleBracket]", 
           RowBox[{"x", ",", " ", "y"}], "\[RightDoubleBracket]"}], " ", "=", 
          " ", 
          FractionBox[
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"slice", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", " ", "y"}], "\[RightDoubleBracket]"}], " ", 
              "-", " ", "minVal"}], ")"}], "*", "255"}], 
           RowBox[{"maxVal", " ", "-", " ", "minVal"}]]}], ";"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"x", ",", " ", 
          RowBox[{"sliceSize", "[", 
           RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
          RowBox[{"sliceSize", "[", 
           RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"y", ",", " ", 
          RowBox[{"sliceSize", "[", 
           RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
          RowBox[{"sliceSize", "[", 
           RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "newImage"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.406912587843686*^9, 3.406912601984311*^9}, {
   3.406912745078061*^9, 3.406912936765561*^9}, {3.406913014562436*^9, 
   3.406913045062436*^9}, 3.407087037281051*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["invertImage",
  FontWeight->"Bold"],
 "\nInverts an image "
}], "Subsubtitle",
 CellChangeTimes->{3.407087037281051*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "invertImage", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"invertImage", "[", "I_", "]"}], " ", ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", " ", "==", " ", "0"}], ",", " ", "1", ",", " ", "0"}], 
       "]"}], "&"}], ",", " ", "I", ",", " ", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.407087037281051*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["n4, n8",
  FontWeight->"Bold"],
 "\nReturns the points in the 4 neighborhood and the 8 neighborhood of p"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037281051*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "n4", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"n4", "[", "p_", "]"}], " ", ":=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        ",", " ", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "-", "1"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        ",", " ", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "+", "1"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "-", "1"}], ",", " ", 
        RowBox[{"p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
        "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "+", "1"}], ",", " ", 
        RowBox[{"p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
        "}"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "n8", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"n8", "[", "p_", "]"}], " ", ":=", 
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
            "x"}], ",", " ", 
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "+", 
            "y"}]}], "}"}], ",", 
         RowBox[{"{", " ", 
          RowBox[{"x", ",", " ", 
           RowBox[{"-", "1"}], ",", " ", "1"}], " ", "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"y", ",", " ", 
           RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}], ",", " ", 
       "1"}], "]"}], " ", ",", " ", 
     RowBox[{"{", "p", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.407087037281051*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getN4, getN8, getN4Immersion",
  FontWeight->"Bold"],
 "\nReturns the points in the 4 / 8 neighborhood of p if it is in the \
thresholded image I"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037281051*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getN4", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getN4", "[", 
    RowBox[{"p_", ",", " ", "I_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"n4", "[", "p", "]"}], ",", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"I", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], " ", "&"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.407087037281051*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getN8", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getN8", "[", 
    RowBox[{"p_", ",", " ", "I_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"n8", "[", "p", "]"}], ",", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"I", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], "&"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{3.407087037281051*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getN4Immersion", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getN4Immersion", "[", 
    RowBox[{"p_", ",", " ", "V_"}], "]"}], " ", ":=", " ", 
   RowBox[{"getN4", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}], ",", "  ", 
     RowBox[{"thresholdImage", "[", 
      RowBox[{
       RowBox[{"Take", "[", 
        RowBox[{"V", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
            "1"}], ",", " ", 
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
            "1"}]}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "-", 
            "1"}], ",", " ", 
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "+", 
            "1"}]}], "}"}]}], "]"}], ",", " ", 
       RowBox[{"V", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}]}], "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.407087037281051*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getC4",
  FontWeight->"Bold"],
 "\nGets the number of 4-connected elements around point p in the pointset X"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037281051*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getC4", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getC4", "[", 
   RowBox[{"p_", ",", " ", "testPoints_", ",", " ", "imagePoints_"}], "]"}], 
  " ", ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"Module", " ", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "tPoints", ",", " ", "mImage", ",", " ", "count", ",", " ", "list", ",", 
      " ", "list2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"tPoints", " ", "=", " ", "testPoints"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mImage", " ", "=", " ", "imagePoints"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"count", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"tPoints", ",", " ", "#"}], "]"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"list", " ", "=", " ", 
              RowBox[{"{", "#", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"count", " ", "=", " ", 
              RowBox[{"count", " ", "+", " ", "1"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"While", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "list", "]"}], " ", ">", " ", "0"}], 
               ",", " ", "\[IndentingNewLine]", 
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"list2", " ", "=", " ", 
                   RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"Scan", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"tPoints", " ", "=", " ", 
                    RowBox[{"Complement", "[", 
                    RowBox[{"tPoints", ",", " ", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"mImage", " ", "=", " ", 
                    RowBox[{"Complement", "[", 
                    RowBox[{"mImage", ",", " ", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"list2", " ", "=", " ", 
                    RowBox[{"Union", "[", 
                    RowBox[{"list2", ",", " ", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"n4", "[", "#", "]"}], ",", " ", "mImage"}], 
                    "]"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    " ", "&"}], ",", " ", "list"}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"list", " ", "=", " ", "list2"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "]"}], " ", "&"}], ",", "testPoints"}], "]"}],
      ";", "\[IndentingNewLine]", "count"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{3.407087037281051*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getC4", "[", 
    RowBox[{"p_", ",", " ", "X_"}], "]"}], " ", ":=", " ", 
   RowBox[{"getC4", "[", 
    RowBox[{"p", ",", " ", "X", ",", " ", "X"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.407087037281051*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getC8",
  FontWeight->"Bold"],
 "\nGets the number of 8-connected elements around point p in the pointset X"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037281051*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getC8", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getC8", "[", 
   RowBox[{"p_", ",", " ", "testPoints_", ",", " ", "imagePoints_"}], "]"}], 
  " ", ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"Module", " ", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "tPoints", ",", " ", "mImage", ",", " ", "count", ",", " ", "list", ",", 
      " ", "list2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"tPoints", " ", "=", " ", "testPoints"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mImage", " ", "=", " ", "imagePoints"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"count", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"tPoints", ",", " ", "#"}], "]"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"list", " ", "=", " ", 
              RowBox[{"{", "#", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"count", " ", "=", " ", 
              RowBox[{"count", " ", "+", " ", "1"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"While", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "list", "]"}], " ", ">", " ", "0"}], 
               ",", " ", "\[IndentingNewLine]", 
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"list2", " ", "=", " ", 
                   RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"Scan", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"tPoints", " ", "=", " ", 
                    RowBox[{"Complement", "[", 
                    RowBox[{"tPoints", ",", " ", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"mImage", " ", "=", " ", 
                    RowBox[{"Complement", "[", 
                    RowBox[{"mImage", ",", " ", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"list2", " ", "=", " ", 
                    RowBox[{"Union", "[", 
                    RowBox[{"list2", ",", " ", 
                    RowBox[{"Intersection", "[", 
                    RowBox[{
                    RowBox[{"n8", "[", "#", "]"}], ",", " ", "mImage"}], 
                    "]"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
                    " ", "&"}], ",", " ", "list"}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"list", " ", "=", " ", "list2"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "]"}], " ", "&"}], ",", "testPoints"}], "]"}],
      ";", "\[IndentingNewLine]", "count"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{3.4070870372966757`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getC8", "[", 
    RowBox[{"p_", ",", " ", "X_"}], "]"}], " ", ":=", " ", 
   RowBox[{"getC8", "[", 
    RowBox[{"p", ",", " ", "X", ",", " ", "X"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.4070870372966757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isCurveEnd",
  FontWeight->"Bold"],
 "\nTells us whether the point p is a curve end point in the image V"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870372966757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isCurveEnd", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isCurveEnd", "[", 
   RowBox[{"p_", ",", " ", "V_", ",", " ", "W_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", " ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"currentN4", ",", " ", "n"}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{
     RowBox[{"currentN4", "=", " ", 
      RowBox[{"getN4", "[", 
       RowBox[{"p", ",", " ", "V"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"n", " ", "=", " ", 
      RowBox[{"Length", "[", "currentN4", "]"}]}], ";", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"Return", "[", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"n", "\[Equal]", "0"}], ")"}], " ", "||", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"n", "\[Equal]", "1"}], ")"}], "&&", " ", 
         RowBox[{"isBoundaryPoint", "[", 
          RowBox[{
           RowBox[{
           "currentN4", "\[LeftDoubleBracket]", "1", 
            "\[RightDoubleBracket]"}], ",", " ", "V", ",", " ", "W"}], 
          "]"}]}], ")"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{3.4070870372966757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "\n",
 StyleBox["isLocalMinima",
  FontWeight->"Bold"],
 "\nTells you whether the point p is a local minma in image V"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870372966757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isLocalMinima", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isLocalMinima", "[", 
   RowBox[{"V_", ",", " ", "p_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"currentN8", ",", " ", "isAbove", ",", " ", "isBelow"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"currentN8", " ", "=", " ", 
      RowBox[{"n8", "[", "p", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"isAbove", " ", "=", " ", "False"}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"isBelow", " ", "=", " ", "False"}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"Scan", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"isAbove", " ", "=", " ", 
            RowBox[{"isAbove", " ", "||", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"V", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], " ",
                ">", " ", 
               RowBox[{"V", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}]}], 
              ")"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"isBelow", " ", "=", " ", 
            RowBox[{"isBelow", " ", "||", "  ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"V", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], " ",
                "<", " ", 
               RowBox[{"V", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}]}], 
              ")"}]}]}], ";"}]}], "\[IndentingNewLine]", "]"}], "&"}], ",", 
       "  ", "currentN8"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"isAbove", " ", "&&", " ", 
      RowBox[{"!", "isBelow"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{3.4070870372966757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isSimple",
  FontWeight->"Bold"],
 "\nTells us whether the point p is simple in the image V, inverse of the \
image W"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870372966757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isSimple", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isSimple", "[", 
    RowBox[{"p_", ",", " ", "V_", ",", " ", "W_"}], "]"}], " ", ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"getC4", "[", 
        RowBox[{"p", ",", " ", 
         RowBox[{"getN4", "[", 
          RowBox[{"p", ",", " ", "V"}], "]"}], ",", " ", 
         RowBox[{"getN8", "[", 
          RowBox[{"p", ",", " ", "V"}], "]"}]}], "]"}], "  ", "\[Equal]", " ",
        "1"}], ")"}], " ", "&&", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"getC8", "[", 
        RowBox[{"p", ",", " ", 
         RowBox[{"getN8", "[", 
          RowBox[{"p", ",", " ", "W"}], "]"}], ",", " ", 
         RowBox[{"getN8", "[", 
          RowBox[{"p", ",", " ", "W"}], "]"}]}], "]"}], "  ", "\[Equal]", " ",
        "1"}], ")"}]}], ")"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.4070870372966757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isSimpleImmersion",
  FontWeight->"Bold"],
 "\nTells us whether the point p is simple in the image V,inverse of the \
image W when testing the immersion threshold "
}], "Subsubtitle",
 CellChangeTimes->{3.4070870372966757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isSimpleImmersion", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isSimpleImmersion", "[", 
   RowBox[{"p_", ",", " ", "V_", ",", " ", "threshold_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"V2", ",", " ", "W2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"V2", " ", "=", " ", 
      RowBox[{"Take", "[", 
       RowBox[{"V", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
           "1"}], ",", " ", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
           "1"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "-", 
           "1"}], ",", " ", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "+", 
           "1"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"V2", " ", "=", " ", 
      RowBox[{"thresholdImage", "[", 
       RowBox[{"V2", ",", " ", "threshold"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"W2", " ", "=", " ", 
      RowBox[{"invertImage", "[", "V2", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"isSimple", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}], ",", " ", "V2", ",", " ", "W2"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{3.4070870372966757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "\n",
 StyleBox["isBoundaryPoint",
  FontWeight->"Bold"],
 "\nTells us whether the point p is in the boundary point of the Image V, \
inverse of the image W"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870372966757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isBoundaryPoint", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isBoundaryPoint", "[", 
    RowBox[{"p_", ",", " ", "V_", ",", " ", "W_"}], "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"V", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], ")"}], " ", "&&", 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"getN4", "[", 
         RowBox[{"p", ",", " ", "W"}], "]"}], "]"}], " ", ">", " ", "0"}], 
      ")"}]}], ")"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.4070870372966757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "\n",
 StyleBox["isBoundaryPointImmersion",
  FontWeight->"Bold"],
 "\nTells us whether the point p is in the boundary point of the Image V, \
inverse of the image W when performing immersion"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870372966757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isBoundaryPointImmersion", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isBoundaryPointImmersion", "[", 
    RowBox[{"p_", ",", " ", "V_"}], "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{
             "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{"V", "\[LeftDoubleBracket]", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
              "\[RightDoubleBracket]"}]}], "}"}], " ", "&"}], ",", "  ", 
          RowBox[{"n4", "[", "p", "]"}]}], "]"}], ",", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
           "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], " ", 
           "<", " ", 
           RowBox[{"V", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{
             "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "\[RightDoubleBracket]"}]}], ")"}], " ", "&"}]}], " ", "]"}], 
      "]"}], " ", ">", " ", "0"}], ")"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.4070870372966757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isBorderingBackground",
  FontWeight->"Bold"],
 "\nTells us whether the point p is bordering a background pixel."
}], "Subsubtitle",
 CellChangeTimes->{3.4070870372966757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isBorderingBackground", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isBorderingBackground", "[", 
    RowBox[{"p_", ",", " ", "V_", ",", " ", "W_"}], "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"V", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], ")"}], " ", "&&", 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"getN8", "[", 
         RowBox[{"p", ",", " ", "W"}], "]"}], "]"}], " ", ">", " ", "0"}], 
      ")"}]}], ")"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.4070870372966757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isDestructible",
  FontWeight->"Bold"],
 "\nTells us whether a point p can be destroyed from image V (inverse W) \
while preserving skeleton Pres..\n\tthinOperator = 0 \[Rule] Topology \
preservation \n\tthinOperator = 1 \[Rule] Curve preservation \n\tthinOperator \
= 2 \[Rule] Surface preservation (To be implemented)"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870372966757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isDestructible", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isDestructible", "[", 
   RowBox[{
   "p_", ",", " ", "V_", ",", " ", "W_", ",", " ", "Pres_", ",", " ", 
    "thinOperator_"}], "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"thinOperator", "==", "0"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"isBoundaryPoint", "[", 
       RowBox[{"p", ",", " ", "V", ",", " ", "W"}], "]"}], " ", "&&", " ", 
      RowBox[{"isSimple", "[", 
       RowBox[{"p", ",", " ", "V", ",", " ", "W"}], "]"}], " ", "&&", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Pres", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], " ", "\[Equal]", " ", "0"}], ")"}]}], 
     ")"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"isBoundaryPoint", "[", 
       RowBox[{"p", ",", " ", "V", ",", " ", "W"}], "]"}], " ", "&&", " ", 
      RowBox[{"isSimple", "[", 
       RowBox[{"p", ",", " ", "V", ",", " ", "W"}], "]"}], " ", "&&", " ", 
      RowBox[{"!", 
       RowBox[{"isCurveEnd", "[", 
        RowBox[{"p", ",", " ", "V", ",", " ", "W"}], "]"}]}], " ", "&&", " ", 
      
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Pres", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], " ", "\[Equal]", " ", "0"}], ")"}]}], 
     ")"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{3.4070870372966757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isSkeletalSurfacePoint",
  FontWeight->"Bold"],
 "\nLets us know whether a given skeletal point p is a surface point... \n\t\
Pre: p is on the skeleton"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870372966757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isSkeletalSurfacePoint", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isSkeletalSurfacePoint", "[", 
   RowBox[{"p_", ",", " ", "S_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", " ", 
   RowBox[{
    RowBox[{"{", "imageN8", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"imageN8", " ", "=", " ", 
      RowBox[{"getN8", "[", 
       RowBox[{"p", ",", " ", "S"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "\[IndentingNewLine]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "+", " ", "1"}]}], "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               " ", "+", "1"}], ",", " ", 
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             " ", "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               "+", "1"}], " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "+", " ", "1"}]}], "}"}]}], "]"}]}], " ", ")"}], " ", "||",
         
        RowBox[{"(", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "-", " ", "1"}]}], "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               " ", "-", "1"}], ",", " ", 
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             " ", "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               "-", "1"}], " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "-", " ", "1"}]}], "}"}]}], "]"}]}], " ", ")"}], " ", "||",
         "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "+", " ", "1"}]}], "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               " ", "-", "1"}], ",", " ", 
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             " ", "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               "-", "1"}], " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "+", " ", "1"}]}], "}"}]}], "]"}]}], " ", ")"}], " ", "||",
         "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "-", " ", "1"}]}], "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               " ", "+", "1"}], ",", " ", 
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             " ", "}"}]}], "]"}], " ", "&&", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"imageN8", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               "+", "1"}], " ", ",", " ", 
              RowBox[{
               RowBox[{
               "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               " ", "-", " ", "1"}]}], "}"}]}], "]"}]}], " ", ")"}]}], ")"}], 
      "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{3.4070870372966757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isSkeletalSurfaceInteriorPoint",
  FontWeight->"Bold"],
 "\nLets us know whether the point is an interior point of a surface"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870372966757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isSkeletalSurfaceInteriorPoint", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isSkeletalSurfaceInteriorPoint", "[", 
    RowBox[{"p_", ",", " ", "S_"}], "]"}], " ", ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"getN8", "[", 
       RowBox[{"p", ",", " ", "S"}], "]"}], "]"}], " ", "\[Equal]", " ", 
     "8"}], ")"}]}], ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{3.4070870372966757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getSkeletalPixelType",
  FontWeight->"Bold"],
 "\nGets the point type of a pixel p in the Skeleton S\n\t0 - Not in the \
skeleton\n\t1 - A skeletal point\n\t2 - A curve end point\n\t3 - A curve \
interior point\n\t4 - A surface boundary point\n\t5 - A surface interior \
point"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870372966757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getSkeletalPixelType", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getSkeletalPixelType", "[", 
   RowBox[{"p_", ",", " ", "S_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", " ", 
   RowBox[{
    RowBox[{"{", "ret", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"S", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], "  ", "==", "0"}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"ret", " ", "=", " ", "0"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"isSkeletalSurfacePoint", "[", 
          RowBox[{"p", ",", " ", "S"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"isSkeletalSurfaceInteriorPoint", "[", 
            RowBox[{"p", ",", " ", "S"}], "]"}], ",", " ", 
           RowBox[{"ret", " ", "=", " ", "5"}], ",", " ", 
           RowBox[{"ret", " ", "=", " ", "4"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"getN4", "[", 
              RowBox[{"p", ",", " ", "S"}], "]"}], "]"}], " ", "\[Equal]", 
            " ", "0"}], ",", "\[IndentingNewLine]", 
           RowBox[{"ret", " ", "=", " ", "1"}], ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"getN4", "[", 
                RowBox[{"p", ",", " ", "S"}], "]"}], "]"}], " ", "\[Equal]", 
              " ", "1"}], ",", " ", 
             RowBox[{"ret", " ", "=", " ", "2"}], ",", " ", 
             RowBox[{"ret", " ", "=", " ", "3"}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "ret", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{3.4070870372966757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getBlankImage",
  FontWeight->"Bold"],
 "\nReturns a blank image of the same size as the source image."
}], "Subsubtitle",
 CellChangeTimes->{3.4070870372966757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getBlankImage", "]"}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getBlankImage", "[", "]"}], " ", ":=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{"0", ",", " ", 
     RowBox[{"{", 
      RowBox[{"x", ",", " ", 
       RowBox[{
        RowBox[{"sliceSize", "[", 
         RowBox[{"1", ",", "1"}], "]"}], "-", "gaussianRadius"}], ",", " ", 
       RowBox[{
        RowBox[{"sliceSize", "[", 
         RowBox[{"1", ",", "2"}], "]"}], "+", "gaussianRadius"}]}], "}"}], 
     ",", " ", 
     RowBox[{"{", 
      RowBox[{"y", ",", " ", 
       RowBox[{
        RowBox[{"sliceSize", "[", 
         RowBox[{"2", ",", "1"}], "]"}], "-", "gaussianRadius"}], ",", " ", 
       RowBox[{
        RowBox[{"sliceSize", "[", 
         RowBox[{"2", ",", "2"}], "]"}], "+", "gaussianRadius"}]}], "}"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.407087037312301*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["findSkeletalValue",
  FontWeight->"Bold"],
 "\nFinds the correct skeletal value that a pixel can be reduced while \
performing immersion"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037312301*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "findSkeletalValue", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"findSkeletalValue", "[", 
    RowBox[{"p_", ",", "V_"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"neighbors", ",", "skelVal", ",", " ", "V2", ",", " ", "W2"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"V2", " ", "=", " ", 
       RowBox[{"thresholdImage", "[", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"V", ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              "-", "2"}], ",", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              "+", "2"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
              "-", "2"}], ",", 
             RowBox[{
              RowBox[{
              "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
              "+", "2"}]}], "}"}]}], "]"}], ",", " ", 
         RowBox[{"V", "\[LeftDoubleBracket]", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
           " ", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
          "\[RightDoubleBracket]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"W2", " ", "=", " ", 
       RowBox[{"invertImage", "[", "V2", "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"isCurveEnd", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "3"}], "}"}], ",", " ", "V2", ",", " ", "W2"}], 
         "]"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"V", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"neighbors", "=", 
            RowBox[{"Sort", "[", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                   "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                   RowBox[{
                   "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], ",", 
                   RowBox[{"V", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}]}], 
                  "}"}], "&"}], ",", 
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"n4", "[", "p", "]"}], ",", 
                  RowBox[{"{", "p", "}"}]}], "]"}]}], "]"}], ",", 
              RowBox[{
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
                ">", 
                RowBox[{
                "#2", "\[LeftDoubleBracket]", "3", 
                 "\[RightDoubleBracket]"}]}], "&"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"neighbors", " ", "=", " ", 
            RowBox[{"Select", "[", 
             RowBox[{"neighbors", ",", " ", 
              RowBox[{
               RowBox[{
                RowBox[{
                "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
                " ", "\[LessEqual]", " ", 
                RowBox[{"V", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", " ", 
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}]}], 
               " ", "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"skelVal", "=", 
            RowBox[{"neighbors", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"Length", "[", "neighbors", "]"}], ",", "3"}], 
             "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Do", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"\[Not]", 
                 RowBox[{"isSimpleImmersion", "[", 
                  RowBox[{"p", ",", "V", ",", 
                   RowBox[{"neighbors", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", "3"}], "\[RightDoubleBracket]"}]}], 
                  "]"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"Module", "[", 
                 RowBox[{
                  RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"skelVal", "=", 
                    RowBox[{"neighbors", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", "3"}], "\[RightDoubleBracket]"}]}], ";",
                    "\[IndentingNewLine]", 
                   RowBox[{"Break", "[", "]"}], ";"}]}], 
                 "\[IndentingNewLine]", "]"}]}], "]"}], ";"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "1", ",", 
               RowBox[{"Length", "[", "neighbors", "]"}]}], "}"}]}], "]"}], 
           ";", "\[IndentingNewLine]", "skelVal"}]}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.407087037312301*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["performThinning",
  FontWeight->"Bold"],
 "\nPerforms the thinning operation on image V, (Inverse of the image W) for \
a maximum of n iterations, while preserving earlier skeleton Pres, for \
topology/curve or surface preservation."
}], "Subsubtitle",
 CellChangeTimes->{3.407087037312301*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "performThinning", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"performThinning", "[", 
   RowBox[{
   "V_", ",", " ", "W_", ",", " ", "n_", ",", " ", "Pres_", ",", " ", 
    "thinOperator_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "G", ",", "H", ",", "m", ",", " ", "dMap", ",", " ", "boundaryPoints", 
      ",", " ", "thicknessImage", ",", " ", "thickness", ",", " ", 
      "progress"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"m", " ", "=", " ", 
      RowBox[{"Max", "[", "V", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"G", " ", "=", " ", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{"H", " ", "=", " ", "W"}], ";", "\[IndentingNewLine]", 
     RowBox[{"thicknessImage", " ", "=", " ", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"thickness", " ", "=", " ", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"progress", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"progress", " ", "=", " ", 
         RowBox[{"Join", "[", 
          RowBox[{"progress", ",", " ", 
           RowBox[{"{", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"G", ",", " ", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"Frame", "\[Rule]", "False"}], ",", "  ", 
              RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}], ",", "  ", 
              "\[IndentingNewLine]", 
              RowBox[{"ColorFunction", "\[Rule]", 
               RowBox[{"Function", "[", 
                RowBox[{
                 RowBox[{"{", "x", "}"}], ",", " ", 
                 RowBox[{"GrayLevel", "[", "x", "]"}]}], "]"}]}], ",", " ", 
              RowBox[{"ImageSize", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"300", ",", "300"}], "}"}]}]}], "]"}], "}"}]}], 
          "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"thickness", " ", "=", " ", 
         RowBox[{"thickness", "+", "1"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"dMap", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"isDestructible", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "G", ",", 
                 " ", "H", ",", " ", "Pres", ",", " ", "thinOperator"}], 
                "]"}], " ", ",", " ", 
               RowBox[{"{", 
                RowBox[{"x", ",", " ", "y", ",", " ", 
                 RowBox[{"Length", "[", 
                  RowBox[{"getN4", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "G"}], 
                   "]"}], "]"}]}], "}"}], ",", " ", 
               RowBox[{"{", "}"}]}], "]"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
           "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"dMap", " ", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"dMap", " ", "=", " ", 
         RowBox[{"Sort", "[", 
          RowBox[{"dMap", ",", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
              "#2", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
              ">", 
              RowBox[{
              "#1", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
             ")"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "dMap", "]"}], " ", "\[Equal]", " ", "0"}], 
          ",", " ", 
          RowBox[{"Break", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"boundaryPoints", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"isBorderingBackground", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"x", ",", "y"}], "}"}], ",", " ", "G", ",", " ", 
                 "H"}], "]"}], " ", ",", " ", 
               RowBox[{"{", 
                RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
               RowBox[{"{", "}"}]}], "]"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
           "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"boundaryPoints", " ", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{"boundaryPoints", ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"thicknessImage", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], " ",
                "\[Equal]", " ", "0"}], ",", 
              RowBox[{
               RowBox[{"thicknessImage", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "=",
                " ", "thickness"}]}], "]"}], ";"}], " ", "&"}], ",", " ", 
          "boundaryPoints"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Scan", "[", " ", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"isDestructible", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", 
                  RowBox[{
                  "#", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "}"}], ",", " ", "G", ",", 
                " ", "H", ",", " ", "Pres", ",", " ", "thinOperator"}], "]"}],
               ",", " ", 
              RowBox[{"Module", "[", 
               RowBox[{
                RowBox[{"{", "}"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"G", "\[LeftDoubleBracket]", " ", 
                   RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], " ", 
                   "\[RightDoubleBracket]"}], "  ", "=", " ", "0"}], ";", 
                 RowBox[{
                  RowBox[{"thicknessImage", "\[LeftDoubleBracket]", " ", 
                   RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], " ", 
                   "\[RightDoubleBracket]"}], " ", "=", " ", "0"}]}]}], 
               "]"}]}], "]"}], ";"}], "&"}], ",", "dMap"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"H", "=", 
         RowBox[{"invertImage", "[", "G", "]"}]}], ";"}], 
       "\[IndentingNewLine]", ",", " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "n"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"boundaryPoints", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"isBorderingBackground", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"x", ",", "y"}], "}"}], ",", " ", "G", ",", " ", "H"}],
              "]"}], " ", ",", " ", 
            RowBox[{"{", 
             RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
            RowBox[{"{", "}"}]}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}], ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"boundaryPoints", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"boundaryPoints", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"thicknessImage", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{
              "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              ",", " ", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             "\[RightDoubleBracket]"}], " ", "\[Equal]", " ", "0"}], ",", 
           RowBox[{
            RowBox[{"thicknessImage", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{
              "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              ",", " ", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             "\[RightDoubleBracket]"}], "=", " ", "thickness"}]}], "]"}], 
         ";"}], " ", "&"}], ",", " ", "boundaryPoints"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"progress", " ", "=", " ", 
        RowBox[{"Join", "[", 
         RowBox[{"progress", ",", " ", 
          RowBox[{"{", 
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"G", ",", " ", 
             RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
             RowBox[{"Frame", "\[Rule]", "False"}], ",", " ", " ", 
             RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}], ",", " ", 
             RowBox[{"ColorFunction", "\[Rule]", 
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", "x", "}"}], ",", " ", 
                RowBox[{"GrayLevel", "[", "x", "]"}]}], "]"}]}], ",", "  ", 
             RowBox[{"ImageSize", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"300", ",", "300"}], "}"}]}]}], "]"}], "}"}]}], 
         "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"G", ",", " ", "thicknessImage", ",", " ", "progress"}], "}"}],
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.3993009561966295`*^9, 3.3993010048844414`*^9}, {
   3.3993011114788733`*^9, 3.3993011171039095`*^9}, {3.399301698076378*^9, 
   3.3993017057483015`*^9}, {3.399301797842641*^9, 3.3993018016395407`*^9}, {
   3.3993039893254166`*^9, 3.399303994591075*^9}, {3.3993113428568535`*^9, 
   3.399311368513268*^9}, {3.3993117123279686`*^9, 3.3993117228280354`*^9}, 
   3.407087037312301*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["performImmersionThinning",
  FontWeight->"Bold"],
 "\nPerforms shape perserving thinning on a grayscale volume"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037312301*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "performImmersionThinning", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"performImmersionThinning", "[", 
   RowBox[{"V_", ",", " ", "n_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "bins", ",", " ", "V2", ",", " ", "beach", ",", " ", "modified", ",", 
      " ", "s0", ",", " ", "s1", ",", " ", "s2", ",", " ", "s3", ",", " ", 
      "s4"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"V2", " ", "=", " ", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"bins", "[", "i", "]"}], " ", "=", " ", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "0", ",", " ", "255"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"bins", "[", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], "]"}],
           "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"bins", "[", 
             RowBox[{
             "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
             "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
              "}"}], "}"}]}], "]"}]}], ";"}], " ", "&"}], ",", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"x", ",", " ", "y", ",", " ", 
             RowBox[{"V2", "\[LeftDoubleBracket]", 
              RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}]}], "}"}], 
           ",", " ", 
           RowBox[{"{", 
            RowBox[{"x", ",", "1", ",", " ", 
             RowBox[{
              RowBox[{"Dimensions", "[", "V2", "]"}], "\[LeftDoubleBracket]", 
              "1", "\[RightDoubleBracket]"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"y", ",", "1", ",", " ", 
             RowBox[{
              RowBox[{"Dimensions", "[", "V2", "]"}], "\[LeftDoubleBracket]", 
              "2", "\[RightDoubleBracket]"}]}], "}"}]}], "]"}], ",", " ", 
         "1"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"s0", " ", "=", " ", 
         RowBox[{"Show", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"V2", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], 
            ",", " ", 
            RowBox[{"Graphics", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"PointSize", "[", "0.001", "]"}], ",", " ", 
               RowBox[{"RGBColor", "[", 
                RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", " ", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Point", "[", 
                   RowBox[{
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[RightDoubleBracket]"}],
                     " ", "-", " ", 
                    RowBox[{"{", 
                    RowBox[{"0.5", ",", " ", "0.5"}], "}"}]}], "]"}], " ", 
                  "&"}], ",", " ", 
                 RowBox[{"bins", "[", "g", "]"}]}], "]"}]}], "}"}], "]"}]}], 
           "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"modified", " ", "=", " ", "False"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"beach", " ", "=", " ", 
            RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Scan", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"isBoundaryPointImmersion", "[", 
                 RowBox[{"#", ",", " ", "V2"}], "]"}], ",", " ", 
                RowBox[{"beach", " ", "=", " ", 
                 RowBox[{"Join", "[", 
                  RowBox[{"beach", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{"Length", "[", 
                    RowBox[{"getN4Immersion", "[", 
                    RowBox[{"#", ",", " ", "V2"}], "]"}], "]"}]}], "}"}], 
                    "}"}]}], "]"}]}]}], "]"}], " ", "&"}], ",", " ", 
             RowBox[{"bins", "[", "g", "]"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"s1", " ", "=", " ", 
            RowBox[{"Show", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"ListDensityPlot", "[", 
                RowBox[{"V2", ",", 
                 RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
                 RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], 
               ",", " ", 
               RowBox[{"Graphics", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"PointSize", "[", "0.001", "]"}], ",", 
                  RowBox[{"RGBColor", "[", 
                   RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", " ", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Point", "[", 
                    RowBox[{
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[RightDoubleBracket]"}],
                     " ", "-", " ", 
                    RowBox[{"{", 
                    RowBox[{"0.5", ",", " ", "0.5"}], "}"}]}], "]"}], "  ", 
                    "&"}], ",", " ", "beach"}], "]"}]}], "}"}], "]"}]}], 
              "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"s4", " ", "=", " ", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{
              RowBox[{"Take", "[", 
               RowBox[{"V2", ",", " ", 
                RowBox[{"{", 
                 RowBox[{"40", ",", "55"}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"25", ",", "40"}], "}"}]}], "]"}], ",", " ", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "beach", "]"}], " ", "\[Equal]", " ", 
              "0"}], ",", " ", 
             RowBox[{"Break", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]",
            
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"beach", " ", "=", " ", 
              RowBox[{"Sort", "[", 
               RowBox[{"beach", ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                  "#1", "\[LeftDoubleBracket]", "3", 
                   "\[RightDoubleBracket]"}], " ", "<", " ", 
                  RowBox[{
                  "#2", "\[LeftDoubleBracket]", "3", 
                   "\[RightDoubleBracket]"}]}], " ", "&"}]}], "]"}]}], ";"}], 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{"Scan", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"V2", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                   " ", "=", " ", 
                   RowBox[{"findSkeletalValue", "[", 
                    RowBox[{"#", ",", " ", "V2"}], "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"V2", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    " ", "\[NotEqual]", " ", "g"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"bins", "[", "g", "]"}], " ", "=", " ", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"bins", "[", "g", "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[RightDoubleBracket]"}],
                     "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"modified", "=", "True"}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                   "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], "&"}],
              ",", " ", "beach"}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"s2", " ", "=", " ", 
            RowBox[{"Show", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"ListDensityPlot", "[", 
                RowBox[{"V2", ",", 
                 RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
                 RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], 
               ",", "\[IndentingNewLine]", " ", 
               RowBox[{"Graphics", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"PointSize", "[", "0.001", "]"}], ",", 
                  RowBox[{"RGBColor", "[", 
                   RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", " ", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Point", "[", 
                    RowBox[{
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[RightDoubleBracket]"}],
                     " ", "-", " ", 
                    RowBox[{"{", 
                    RowBox[{"0.5", ",", " ", "0.5"}], "}"}]}], "]"}], "  ", 
                    "&"}], ",", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"beach", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V2", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    " ", "\[Equal]", " ", "g"}], " ", "&"}]}], "]"}]}], 
                   "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", " ", 
               RowBox[{"Graphics", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"PointSize", "[", "0.001", "]"}], ",", 
                  RowBox[{"RGBColor", "[", 
                   RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", " ", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Point", "[", 
                    RowBox[{
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[RightDoubleBracket]"}],
                     " ", "-", " ", 
                    RowBox[{"{", 
                    RowBox[{"0.5", ",", " ", "0.5"}], "}"}]}], "]"}], "  ", 
                    "&"}], ",", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"beach", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"V2", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", " ", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    "\[NotEqual]", " ", "g"}], " ", "&"}]}], "]"}]}], "]"}]}],
                  "}"}], "]"}]}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
           
           RowBox[{"s3", " ", "=", " ", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{
              RowBox[{"Take", "[", 
               RowBox[{"V2", ",", " ", 
                RowBox[{"{", 
                 RowBox[{"40", ",", "55"}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"25", ",", "40"}], "}"}]}], "]"}], ",", " ", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"g", " ", "\[GreaterEqual]", " ", "99"}], " ", "&&", 
                " ", 
                RowBox[{"g", " ", "\[LessEqual]", " ", "99"}]}], ",", " ", 
               RowBox[{"Show", "[", 
                RowBox[{
                 RowBox[{"GraphicsArray", "[", 
                  RowBox[{"{", " ", 
                   RowBox[{"s1", ",", " ", "s2"}], "}"}], "]"}], ",", " ", 
                 RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}], 
                 ",", " ", 
                 RowBox[{"ImageSize", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"1600", ",", "800"}], "}"}]}], ",", " ", 
                 RowBox[{"PlotLabel", "\[Rule]", 
                  RowBox[{
                   RowBox[{"ToString", "[", "g", "]"}], " ", "<>", " ", 
                   "\"\< : \>\"", " ", "<>", " ", 
                   RowBox[{"ToString", "[", "i", "]"}]}]}]}], "]"}]}], "]"}], 
             ";"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"\[Not]", "modified"}], ",", " ", 
             RowBox[{"Break", "[", "]"}]}], "]"}], ";"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "1", ",", " ", "n"}], "}"}]}], "]"}], ";"}],
        "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"g", ",", " ", "1", ",", " ", "255"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "V2"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{3.4070870373279257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["performErosion",
  FontWeight->"Bold"],
 "\nErodes the image by removing the curve end points"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870373279257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "performErosion", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"performErosion", "[", 
   RowBox[{"V_", ",", " ", "W_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dMap", ",", " ", "outImage"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"ListDensityPlot", "[", 
       RowBox[{"V", ",", " ", 
        RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"isBoundaryPoint", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "V", ",", " ",
                 "W"}], "]"}], "  ", "&&", " ", 
              RowBox[{"isCurveEnd", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "V", ",", " ",
                 "W"}], "]"}]}], ")"}], " ", ",", " ", 
            RowBox[{"{", 
             RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
            RowBox[{"{", "}"}]}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"dMap", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"outImage", " ", "=", " ", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"outImage", "\[LeftDoubleBracket]", " ", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           " ", "\[RightDoubleBracket]"}], "  ", "=", " ", "0"}], ";"}], 
        "&"}], ",", "dMap"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"ListDensityPlot", "[", 
        RowBox[{"outImage", ",", " ", 
         RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "outImage", "]"}], ";"}]}], "\[IndentingNewLine]",
    "]"}]}]}], "Input",
 CellChangeTimes->{3.4070870373279257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["isCurveNeighbor",
  FontWeight->"Bold"],
 "\nSpecifies whether a given point q is a curve neighbor of the point p in \
image V"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870373279257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "isCurveNeighbor", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"isCurveNeighbor", "[", 
   RowBox[{"q_", ",", " ", "p_", ",", " ", "V_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "currentN4", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"currentN4", " ", "=", " ", 
      RowBox[{"getN4", "[", 
       RowBox[{"p", ",", " ", "V"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "currentN4", "]"}], " ", "==", " ", "2"}], 
         ")"}], " ", "&&", " ", 
        RowBox[{"MemberQ", "[", 
         RowBox[{"currentN4", ",", " ", "q"}], "]"}]}], ")"}], "]"}], ";"}]}],
    "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{3.4070870373279257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["addPixelToImage",
  FontWeight->"Bold"],
 "\nAdds a pixel to a binary Image"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870373279257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "addPixelToImage", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"addPixelToImage", "[", 
   RowBox[{"p_", ",", " ", "V_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "outImage", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"outImage", " ", "=", " ", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"outImage", "\[LeftDoubleBracket]", 
       RowBox[{
        RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        ",", " ", 
        RowBox[{"p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
        "\[RightDoubleBracket]"}], " ", "=", "1"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "outImage", "]"}], ";"}]}], "\[IndentingNewLine]",
    "]"}]}]}], "Input",
 CellChangeTimes->{3.4070870373279257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getCurveNeighbors",
  FontWeight->"Bold"],
 "\nGets the curve neighbors of a given point p"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870373279257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getCurveNeighbors", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getCurveNeighbors", "[", 
   RowBox[{"p_", ",", " ", "V_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "currentN4", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"currentN4", " ", "=", " ", 
      RowBox[{"getN4", "[", 
       RowBox[{"p", ",", " ", "V"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"Select", "[", 
       RowBox[{"currentN4", ",", " ", 
        RowBox[{
         RowBox[{"isCurveNeighbor", "[", 
          RowBox[{"#", ",", " ", "p", ",", " ", "V"}], "]"}], "&"}]}], " ", 
       "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{3.4070870373279257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["performDilation",
  FontWeight->"Bold"],
 "\nDilates the image by adding curve end points"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870373279257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "performDilation", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"performDilation", "[", 
   RowBox[{"V_", ",", " ", "W_", ",", " ", "oldV_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dMap", ",", " ", "outImage", ",", " ", "neighbors"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"ListDensityPlot", "[", 
       RowBox[{"V", ",", " ", 
        RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"isBoundaryPoint", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "V", ",", " ", 
               "W"}], "]"}], "  ", "&&", " ", 
             RowBox[{"isCurveEnd", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "V", ",", " ", 
               "W"}], "]"}]}], " ", ",", " ", 
            RowBox[{"{", 
             RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
            RowBox[{"{", "}"}]}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"dMap", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"neighbors", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"neighbors", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"neighbors", ",", " ", 
            RowBox[{"getCurveNeighbors", "[", 
             RowBox[{"#", ",", " ", "oldV"}], "]"}]}], "]"}]}], ";"}], "&"}], 
       ",", " ", "dMap"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"outImage", " ", "=", " ", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"outImage", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            " ", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], " ", "=", "1"}], ";"}], "&"}], ",", 
       "neighbors"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"ListDensityPlot", "[", 
        RowBox[{"outImage", ",", " ", 
         RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "outImage", "]"}], ";"}]}], "\[IndentingNewLine]",
    "]"}]}]}], "Input",
 CellChangeTimes->{3.4070870373279257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["performPruning",
  FontWeight->"Bold"],
 "\nPrunes the image n times."
}], "Subsubtitle",
 CellChangeTimes->{3.4070870373279257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "performPruning", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"performPruning", "[", 
   RowBox[{"V_", ",", " ", "W_", ",", " ", "n_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", " ", 
   RowBox[{
    RowBox[{"n", " ", "\[Equal]", " ", "0"}], ",", " ", "V", ",", " ", 
    "\[IndentingNewLine]", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "erodedImage", ",", " ", "prunedImage", ",", " ", "dilatedImage"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"ListDensityPlot", "[", 
         RowBox[{"V", ",", " ", 
          RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], "*)"}],
       "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"erodedImage", " ", "=", " ", 
        RowBox[{"performErosion", "[", 
         RowBox[{"V", ",", " ", "W"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"prunedImage", " ", "=", " ", 
        RowBox[{"performPruning", "[", 
         RowBox[{"erodedImage", ",", " ", 
          RowBox[{"invertImage", "[", "erodedImage", "]"}], ",", " ", 
          RowBox[{"n", "-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"dilatedImage", " ", "=", " ", 
        RowBox[{"performDilation", "[", 
         RowBox[{"prunedImage", ",", " ", 
          RowBox[{"invertImage", "[", "prunedImage", "]"}], ",", " ", "V"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"dilatedImage", ",", " ", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
           RowBox[{"ImageSize", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"600", ",", " ", "600"}], "}"}]}]}], "]"}], ";"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "dilatedImage", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",\

 CellChangeTimes->{3.4070870373279257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getCurveLength:",
  FontWeight->"Bold"],
 "\nGets the length of a curve area given the starting point p, and the \
annotated skeleton A"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870373279257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getCurveLength", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getCurveLength", "[", 
   RowBox[{
   "p_", ",", " ", "A_", ",", " ", "curveTypes_", ",", " ", "hashKey_"}], 
   "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", " ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "n", ",", " ", "dMap", ",", " ", "dMap2", ",", " ", "n4Temp", ",", " ", 
      "A2", ",", " ", "toHash", ",", " ", "doHash", ",", " ", 
      "curveEndPoints", ",", " ", "allCurvePoints"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
        "hashKey", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
        " ", "\[NotEqual]", " ", 
        RowBox[{"curveLengthHashKey", "\[LeftDoubleBracket]", 
         RowBox[{
         "hashKey", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "\[RightDoubleBracket]"}]}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"curveLengthHashKey", "\[LeftDoubleBracket]", 
            RowBox[{
            "hashKey", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
             "\[RightDoubleBracket]"}], " ", "=", " ", 
           RowBox[{
           "hashKey", "\[LeftDoubleBracket]", "2", 
            "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"curveLengthHash", "\[LeftDoubleBracket]", 
            RowBox[{
            "hashKey", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
             "\[RightDoubleBracket]"}], " ", "=", " ", 
           RowBox[{"getBlankImage", "[", "]"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"curveLengthHash", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{
          "hashKey", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          ",", " ", 
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], ",", " ", 
       RowBox[{"Return", "[", 
        RowBox[{"curveLengthHash", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{
          "hashKey", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          ",", " ", 
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"A2", " ", "=", " ", "A"}], ";", "\[IndentingNewLine]", 
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"curveTypes", ",", " ", 
               RowBox[{"A", "\[LeftDoubleBracket]", 
                RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}]}], "]"}]}],
             ",", " ", 
            RowBox[{"{", 
             RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
            RowBox[{"{", "}"}]}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"dMap", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"A2", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            " ", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], " ", "=", " ", "0"}], ";"}], "&"}], ",",
        " ", "dMap"}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"A2", ",", " ", 
             RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], ",",
            
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
              RowBox[{"PointSize", "[", "0.02", "]"}], ",", 
              RowBox[{"Point", "[", 
               RowBox[{
                RowBox[{"Reverse", "[", "p", "]"}], "+", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.5"}], ",", 
                  RowBox[{"-", "0.5"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], "]"}], 
       ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"n", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"toHash", " ", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dMap", " ", "=", " ", 
      RowBox[{"{", "p", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"doHash", " ", "=", " ", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"getN4", "[", 
         RowBox[{"p", ",", " ", "A2"}], "]"}], "]"}], " ", "\[LessEqual]", 
       " ", "2"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"curveEndPoints", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"getN4", "[", 
          RowBox[{"p", ",", " ", "A2"}], "]"}], "]"}], " ", "\[NotEqual]", 
        " ", "2"}], ",", " ", 
       RowBox[{"curveEndPoints", " ", "=", " ", 
        RowBox[{"{", "p", "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"allCurvePoints", " ", "=", " ", 
      RowBox[{"{", "p", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", " ", 
      RowBox[{"True", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"toHash", " ", "=", " ", 
         RowBox[{"Join", "[", 
          RowBox[{"toHash", ",", " ", "dMap"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dMap2", " ", "=", " ", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"n", " ", "=", " ", 
         RowBox[{"n", " ", "+", " ", 
          RowBox[{"Length", "[", "dMap", "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Scan", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"A2", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", " ", 
                  RowBox[{
                  "#", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
               RowBox[{"n4Temp", "=", " ", 
                RowBox[{"getN4", "[", 
                 RowBox[{"#", ",", " ", "A2"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"dMap2", " ", "=", " ", 
                RowBox[{"Join", "[", 
                 RowBox[{"dMap2", ",", 
                  RowBox[{"Select", "[", 
                   RowBox[{"n4Temp", ",", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"getN4", "[", 
                    RowBox[{"#", ",", " ", "A2"}], "]"}], "]"}], " ", 
                    "\[LessEqual]", " ", "1"}], ")"}], "  ", "&"}]}], "]"}]}],
                  "]"}]}], ";", " ", "\[IndentingNewLine]", 
               RowBox[{"allCurvePoints", " ", "=", " ", 
                RowBox[{"Join", "[", 
                 RowBox[{"allCurvePoints", ",", 
                  RowBox[{"Select", "[", 
                   RowBox[{"n4Temp", ",", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"getN4", "[", 
                    RowBox[{"#", ",", " ", "A2"}], "]"}], "]"}], " ", 
                    "\[LessEqual]", " ", "1"}], ")"}], "  ", "&"}]}], "]"}]}],
                  "]"}]}], ";", " ", "\[IndentingNewLine]", 
               RowBox[{"curveEndPoints", " ", "=", " ", 
                RowBox[{"Join", "[", 
                 RowBox[{"curveEndPoints", ",", 
                  RowBox[{"Select", "[", 
                   RowBox[{"n4Temp", ",", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"getN4", "[", 
                    RowBox[{"#", ",", " ", "A2"}], "]"}], "]"}], " ", 
                    "\[NotEqual]", " ", "1"}], ")"}], "  ", "&"}]}], "]"}]}], 
                 "]"}]}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";"}], 
           "&"}], ",", " ", "\[IndentingNewLine]", "dMap"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dMap", " ", "=", " ", "dMap2"}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "dMap", "]"}], " ", "\[Equal]", " ", "0"}], 
          ",", " ", 
          RowBox[{"Break", "[", "]"}]}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"A", ",", " ", 
             RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], ",",
            "\[IndentingNewLine]", 
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
              RowBox[{"PointSize", "[", "0.02", "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Point", "[", 
                  RowBox[{
                   RowBox[{"Reverse", "[", "#", "]"}], "+", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "0.5"}], ",", 
                    RowBox[{"-", "0.5"}]}], "}"}]}], "]"}], "&"}], ",", " ", 
                "allCurvePoints"}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
         RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], "]"}], 
       ";"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"doHash", ",", " ", "\[IndentingNewLine]", 
       RowBox[{"Scan", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"curveLengthHash", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{
              "hashKey", "\[LeftDoubleBracket]", "1", 
               "\[RightDoubleBracket]"}], ",", " ", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              ",", " ", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             "\[RightDoubleBracket]"}], " ", "=", " ", 
            RowBox[{"{", 
             RowBox[{
             "n", ",", " ", "curveEndPoints", ",", " ", "allCurvePoints"}], 
             "}"}]}], ";"}], "&"}], ",", " ", "toHash"}], "]"}]}], "]"}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"n", ",", " ", "curveEndPoints", ",", " ", "allCurvePoints"}], 
       "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{3.407087037343551*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.407087037343551*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getClosestValue:",
  FontWeight->"Bold"],
 "\nGets the closest value to a given pixel in the image"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037343551*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getClosestValue", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getClosestValue", "[", 
   RowBox[{"p_", ",", " ", "image_", ",", " ", "level_"}], "]"}], " ", ":=", 
  " ", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n4List", ",", " ", "closestValues"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"image", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           ",", " ", 
          RowBox[{
          "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "\[RightDoubleBracket]"}], " ", "\[NotEqual]", " ", "0"}], ",", " ", 
       
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"image", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{
             "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "\[RightDoubleBracket]"}], ",", " ", "level"}], "}"}], "}"}], 
        "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"level", " ", "\[LessEqual]", " ", "0"}], ",", " ", 
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"0", ",", " ", "level"}], "}"}], "}"}], "]"}]}], "]"}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"n4List", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"n4", "[", "p", "]"}], ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
            "\[GreaterEqual]", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}]}], ")"}], "  ", "&&", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
            "\[LessEqual]", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], ")"}], " ", "&&", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], " ", 
            "\[GreaterEqual]", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}]}], ")"}], "  ", "&&", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], " ", 
            "\[LessEqual]", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], ")"}]}], "&"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"closestValues", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"closestValues", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"closestValues", ",", " ", 
            RowBox[{"getClosestValue", "[", 
             RowBox[{"#", ",", " ", "image", ",", " ", 
              RowBox[{"level", "-", "1"}]}], "]"}]}], "]"}]}], ";"}], "&"}], 
       ",", " ", "n4List"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"closestValues", " ", "=", " ", 
      RowBox[{"Sort", "[", 
       RowBox[{"closestValues", ",", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
           "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], " ", 
           ">", " ", 
           RowBox[{
           "#2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
          ")"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"closestValues", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"closestValues", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
           " ", "\[Equal]", " ", 
          RowBox[{"closestValues", "\[LeftDoubleBracket]", 
           RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}]}], "&"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"closestValues", " ", "=", " ", 
      RowBox[{"Sort", "[", 
       RowBox[{"closestValues", ",", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
           "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
           ">", " ", 
           RowBox[{
           "#2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          ")"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{
       "closestValues", "\[LeftDoubleBracket]", "1", 
        "\[RightDoubleBracket]"}], "}"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{3.407087037343551*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["canRemovePixel:",
  FontWeight->"Bold"],
 "\nLets you know whether the given pixel can be removed from the skeleton \
based in the filter criteria.\nCost Function has the following values\n\t1: \
Remove if the length of the added segment >= filter threshold\n\t2: Remove if \
the length of the added segment / length of the total curve >= filter \
threshold\n\t3: Remove if the thickness difference between grayscale levels \
<= filter threshold\n\t4: Remove if the curve has not been growing recently\n\
\t5: Remove if the curve does not fall close to the eigen vector value"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037343551*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "canRemovePixel", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"canRemovePixel", "[", 
    RowBox[{
    "p_", ",", " ", "annotatedTopologyCurves_", ",", " ", "annotatedCurves_", 
     ",", " ", "annotatedSkeleton_", ",", "thicknessMap_", ",", " ", 
     "curveEndHistory_", ",", " ", "costFunction5Val_", ",", " ", 
     "currentGrayLevel_", ",", " ", "filterThreshold_", ",", "  ", 
     "costFunction_", ",", " ", "hashGrayValue_"}], "]"}], " ", ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"canRemove", ",", " ", "type"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"type", " ", "=", " ", 
       RowBox[{"annotatedSkeleton", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", " ", 
         RowBox[{
         "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"canRemove", " ", "=", " ", "False"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"costFunction", ",", "\[IndentingNewLine]", "1", ",", 
        RowBox[{"Switch", "[", 
         RowBox[{"type", ",", "\[IndentingNewLine]", "1", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", "False"}], ",", 
          "\[IndentingNewLine]", "2", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"getCurveLength", "[", 
              RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
               RowBox[{"{", 
                RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
             "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", ">=",
             " ", "filterThreshold"}]}], ",", "\[IndentingNewLine]", "3", ",",
           " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"getCurveLength", "[", 
              RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
               RowBox[{"{", 
                RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
             "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", ">=",
             " ", "filterThreshold"}]}], ",", "\[IndentingNewLine]", "4", ",",
           " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"getCurveLength", "[", 
              RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
               RowBox[{"{", 
                RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
             "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", ">=",
             " ", "filterThreshold"}]}], ",", "\[IndentingNewLine]", "5", ",",
           " ", 
          RowBox[{"canRemove", " ", "=", " ", "True"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "2", ",", 
        RowBox[{"Switch", "[", 
         RowBox[{"type", ",", "\[IndentingNewLine]", "1", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", "False"}], ",", 
          "\[IndentingNewLine]", "2", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
              "/", " ", 
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedSkeleton", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
             ")"}], " ", ">=", " ", "filterThreshold"}]}], ",", 
          "\[IndentingNewLine]", "3", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "/", 
              " ", 
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedSkeleton", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
             ")"}], " ", ">=", " ", "filterThreshold"}]}], ",", 
          "\[IndentingNewLine]", "4", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedTopologyCurves", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
              "/", " ", 
              RowBox[{
               RowBox[{"getCurveLength", "[", 
                RowBox[{"p", ",", " ", "annotatedSkeleton", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"2", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
             ")"}], " ", ">=", " ", "filterThreshold"}]}], ",", 
          "\[IndentingNewLine]", "5", ",", " ", 
          RowBox[{"canRemove", " ", "=", " ", "True"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "3", ",", 
        " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "curveStats", ",", " ", "curveLength", ",", " ", "endPoints", ",", 
            " ", "thicknesses", ",", " ", "totalThickness"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"curveStats", " ", "=", "  ", 
            RowBox[{"getCurveLength", "[", 
             RowBox[{"p", ",", " ", "annotatedSkeleton", ",", " ", 
              RowBox[{"{", 
               RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"endPoints", " ", "=", " ", 
            RowBox[{
            "curveStats", "\[LeftDoubleBracket]", "2", 
             "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"curveLength", " ", "=", " ", 
            RowBox[{
            "curveStats", "\[LeftDoubleBracket]", "1", 
             "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"thicknesses", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"thicknessMap", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
               "&"}], ",", " ", "endPoints"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"totalThickness", " ", "=", " ", 
            RowBox[{"Sum", "[", 
             RowBox[{
              RowBox[{
              "thicknesses", "\[LeftDoubleBracket]", "i", 
               "\[RightDoubleBracket]"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "1", ",", " ", 
                RowBox[{"Length", "[", "thicknesses", "]"}]}], "}"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{"type", ",", "\[IndentingNewLine]", "1", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "False"}], ",", 
             "\[IndentingNewLine]", "2", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Length", "[", "thicknesses", "]"}], " ", "\[Equal]",
                  " ", "2"}], ")"}], "&&", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"curveLength", " ", "-", " ", "totalThickness"}], 
                 "  ", "\[LessEqual]", "  ", "filterThreshold"}], ")"}]}]}], 
             ",", "\[IndentingNewLine]", "3", ",", " ", 
             RowBox[{"canRemove", " ", "=", "  ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Length", "[", "thicknesses", "]"}], " ", "\[Equal]",
                  " ", "2"}], ")"}], "&&", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"curveLength", " ", "-", " ", "totalThickness"}], 
                 "  ", "\[LessEqual]", " ", "filterThreshold"}], ")"}]}]}], 
             ",", "\[IndentingNewLine]", "4", ",", " ", 
             RowBox[{"canRemove", " ", "=", "  ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Length", "[", "thicknesses", "]"}], " ", "\[Equal]",
                  " ", "2"}], ")"}], "&&", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"curveLength", " ", "-", " ", "totalThickness"}], 
                 "  ", "\[LessEqual]", "  ", "filterThreshold"}], ")"}]}]}], 
             ",", "\[IndentingNewLine]", "5", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "True"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ",", "\[IndentingNewLine]", "4", ",", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "endPoints", ",", " ", "endValues", ",", " ", "endFailed"}], "}"}],
           ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"endPoints", " ", "=", "  ", 
            RowBox[{
             RowBox[{"getCurveLength", "[", 
              RowBox[{"p", ",", " ", "annotatedCurves", ",", " ", 
               RowBox[{"{", 
                RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"1", ",", " ", "hashGrayValue"}], "}"}]}], "]"}], 
             "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"endValues", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"getClosestValue", "[", 
                 RowBox[{"#", ",", " ", "curveEndHistory", ",", " ", "5"}], 
                 "]"}], "\[LeftDoubleBracket]", 
                RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "&"}], 
              ",", "endPoints"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"endFailed", " ", "=", " ", "False"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Scan", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"endFailed", " ", "=", " ", 
                RowBox[{"(", 
                 RowBox[{"endFailed", " ", "||", " ", 
                  RowBox[{"(", 
                   RowBox[{"#", " ", "\[GreaterEqual]", " ", 
                    RowBox[{
                    "currentGrayLevel", " ", "+", " ", "filterThreshold"}]}], 
                   ")"}]}], ")"}]}], ";"}], "&"}], ",", "endValues"}], "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"Map", "\[IndentingNewLine]", 
            RowBox[{"Switch", "[", 
             RowBox[{"type", ",", "\[IndentingNewLine]", "1", ",", " ", 
              RowBox[{"canRemove", " ", "=", " ", "False"}], ",", " ", 
              "\[IndentingNewLine]", "2", ",", " ", 
              RowBox[{"canRemove", " ", "=", " ", "endFailed"}], ",", 
              "\[IndentingNewLine]", "3", ",", " ", 
              RowBox[{"canRemove", " ", "=", "  ", "endFailed"}], ",", 
              "\[IndentingNewLine]", "4", ",", " ", 
              RowBox[{"canRemove", " ", "=", "  ", "endFailed"}], ",", 
              "\[IndentingNewLine]", "5", ",", " ", 
              RowBox[{"canRemove", " ", "=", " ", "True"}]}], 
             "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ",", "\[IndentingNewLine]", "5", ",", " ", 
        RowBox[{"Module", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Switch", "[", 
            RowBox[{"type", ",", "\[IndentingNewLine]", "1", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "False"}], ",", 
             "\[IndentingNewLine]", "2", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "True"}], ",", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"costFunction5Val", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", " ", 
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                " ", "<", " ", "filterThreshold"}], ","}], "*)"}], 
             "\[IndentingNewLine]", "3", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "True"}], ",", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"costFunction5Val", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", " ", 
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                " ", "<", " ", "filterThreshold"}], ","}], "*)"}], 
             "\[IndentingNewLine]", "4", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "True"}], ",", " ", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{"costFunction5Val", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   ",", " ", 
                  RowBox[{
                  "p", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                " ", "<", " ", "filterThreshold"}], ","}], "*)"}], 
             "\[IndentingNewLine]", "5", ",", " ", 
             RowBox[{"canRemove", " ", "=", " ", "True"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "canRemove", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.4070870373591757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["annotateImageWithPixelType:",
  FontWeight->"Bold"],
 "\nAnnotates an image with the pixel type"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870373591757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "annotateImageWithPixelType", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annotateImageWithPixelType", "[", "image_", "]"}], " ", ":=", " ",
    "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "annotatedImage", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"annotatedImage", " ", "=", " ", 
       RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dMap", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"image", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", " ", "y"}], "\[RightDoubleBracket]"}], " ", 
              ">", " ", "0"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"x", ",", " ", "y", ",", " ", 
               RowBox[{"getSkeletalPixelType", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"x", ",", "y"}], "}"}], ",", " ", "image"}], 
                "]"}]}], "}"}], ",", " ", 
             RowBox[{"{", "}"}]}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"x", ",", 
             RowBox[{"sliceSize", "[", 
              RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
             RowBox[{"sliceSize", "[", 
              RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"y", ",", 
             RowBox[{"sliceSize", "[", 
              RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
             RowBox[{"sliceSize", "[", 
              RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", " ", 
         "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dMap", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"dMap", ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Scan", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"annotatedImage", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              
             RowBox[{
             "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "\[RightDoubleBracket]"}], " ", "=", " ", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
          ";"}], "&"}], ",", " ", "dMap"}], "]"}], ";", "\[IndentingNewLine]",
       "annotatedImage"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",\

 CellChangeTimes->{3.4070870373591757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["makeGraySkeleton:",
  FontWeight->"Bold"],
 "\nCreates a Gray scale skeleton of the grayImage, starting at the grayscale \
level startLevel, ending at endLevel at a grayscale step of step, while \
perfoming pruneAmount pruning steps."
}], "Subsubtitle",
 CellChangeTimes->{3.4070870373591757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "makeGraySkeleton", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"makeGraySkeleton", "[", 
   RowBox[{
   "grayImage_", ",", "startLevel_", ",", "endLevel_", ",", "step_", ",", 
    "pruneAmount_", ",", "filterThreshold_", ",", "costFunction_", ",", 
    "eigenValues_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "maxThinningIterations", ",", "olderSkeleton", ",", "graySkeleton", ",", 
      "grayLevels", ",", "binaryImage", ",", "thinningResults", ",", 
      "curveSkeleton", ",", "prunedCurveSkeleton", ",", 
      "prunedCurveSkeletonWithOlder", ",", "topologySkeleton", ",", 
      "topologyBranches", ",", "annotatedTopologyBranches", ",", 
      "annotatedSkeleton", ",", "removedPixels", ",", "allRemovedPixels", ",",
       "dMap", ",", "thicknessMap", ",", "lastThicknessMap", ",", 
      "actualGraySkeleton", ",", "allBranches", ",", "annotatedAllBranches", 
      ",", "curveEndHistory", ",", "s1", ",", "s2", ",", "s3", ",", "s4", ",",
       "s5", ",", "s6", ",", "s7", ",", "s8", ",", "s9", ",", "s10", ",", 
      "s11", ",", "s12"}], "}"}], ",", 
    RowBox[{
     RowBox[{"maxThinningIterations", "=", "100"}], ";", 
     RowBox[{"olderSkeleton", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"graySkeleton", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"grayLevels", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"allRemovedPixels", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"curveEndHistory", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"lastThicknessMap", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"binaryImage", "=", 
         RowBox[{"thresholdImage", "[", 
          RowBox[{"grayImage", ",", "i"}], "]"}]}], ";", 
        RowBox[{"thinningResults", "=", 
         RowBox[{"performThinning", "[", 
          RowBox[{"binaryImage", ",", 
           RowBox[{"invertImage", "[", "binaryImage", "]"}], ",", 
           "maxThinningIterations", ",", "olderSkeleton", ",", "1"}], "]"}]}],
         ";", 
        RowBox[{"curveSkeleton", "=", 
         RowBox[{
         "thinningResults", "\[LeftDoubleBracket]", "1", 
          "\[RightDoubleBracket]"}]}], ";", 
        RowBox[{"prunedCurveSkeleton", "=", 
         RowBox[{"performPruning", "[", 
          RowBox[{"curveSkeleton", ",", 
           RowBox[{"invertImage", "[", "curveSkeleton", "]"}], ",", 
           "pruneAmount"}], "]"}]}], ";", 
        RowBox[{"prunedCurveSkeletonWithOlder", "=", 
         RowBox[{"BitOr", "[", 
          RowBox[{"prunedCurveSkeleton", ",", "olderSkeleton"}], "]"}]}], ";",
         
        RowBox[{"thinningResults", "=", 
         RowBox[{"performThinning", "[", 
          RowBox[{"binaryImage", ",", 
           RowBox[{"invertImage", "[", "binaryImage", "]"}], ",", 
           "maxThinningIterations", ",", "prunedCurveSkeletonWithOlder", ",", 
           "0"}], "]"}]}], ";", 
        RowBox[{"topologySkeleton", "=", 
         RowBox[{
         "thinningResults", "\[LeftDoubleBracket]", "1", 
          "\[RightDoubleBracket]"}]}], ";", 
        RowBox[{"thicknessMap", "=", 
         RowBox[{
         "thinningResults", "\[LeftDoubleBracket]", "2", 
          "\[RightDoubleBracket]"}]}], ";", 
        RowBox[{"topologyBranches", "=", 
         RowBox[{
          RowBox[{"performThinning", "[", 
           RowBox[{"topologySkeleton", ",", 
            RowBox[{"invertImage", "[", "topologySkeleton", "]"}], ",", 
            "maxThinningIterations", ",", "olderSkeleton", ",", "0"}], "]"}], 
          "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ";", 
        RowBox[{"topologyBranches", "=", 
         RowBox[{"BitXor", "[", 
          RowBox[{"olderSkeleton", ",", "topologyBranches"}], "]"}]}], ";", 
        RowBox[{"allBranches", "=", 
         RowBox[{"BitXor", "[", 
          RowBox[{"olderSkeleton", ",", "topologySkeleton"}], "]"}]}], ";", 
        RowBox[{"annotatedTopologyBranches", "=", 
         RowBox[{
         "annotateImageWithPixelType", "[", "topologyBranches", "]"}]}], ";", 
        
        RowBox[{"annotatedSkeleton", "=", 
         RowBox[{
         "annotateImageWithPixelType", "[", "topologySkeleton", "]"}]}], ";", 
        
        RowBox[{"annotatedAllBranches", "=", 
         RowBox[{"annotateImageWithPixelType", "[", "allBranches", "]"}]}], 
        ";", 
        RowBox[{"removedPixels", "=", 
         RowBox[{"getBlankImage", "[", "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "2"}], "}"}], ",", 
                  RowBox[{"annotatedSkeleton", "\[LeftDoubleBracket]", 
                   RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}]}], 
                 "]"}], "&&", 
                RowBox[{
                 RowBox[{"curveEndHistory", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                 "\[Equal]", "0"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}],
         ";", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"curveEndHistory", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", 
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "=", 
              "i"}], ";"}], ")"}], "&"}], ",", "dMap"}], "]"}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"topologyBranches", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                 "\[Equal]", "1"}], "&&", 
                RowBox[{"canRemovePixel", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"x", ",", "y"}], "}"}], ",", 
                  "annotatedTopologyBranches", ",", "annotatedAllBranches", 
                  ",", "annotatedSkeleton", ",", "lastThicknessMap", ",", 
                  "curveEndHistory", ",", "eigenValues", ",", "i", ",", 
                  "filterThreshold", ",", "costFunction", ",", "i"}], "]"}]}],
                ",", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}],
         ";", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"removedPixels", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", 
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "=", 
              "1"}], ";"}], ")"}], "&"}], ",", "dMap"}], "]"}], ";", 
        RowBox[{"allRemovedPixels", "=", 
         RowBox[{"BitOr", "[", 
          RowBox[{"removedPixels", ",", "allRemovedPixels"}], "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"topologySkeleton", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                 "\[Equal]", "1"}], "&&", 
                RowBox[{
                 RowBox[{"graySkeleton", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                 "\[Equal]", "0"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}],
         ";", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"graySkeleton", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", 
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "=", 
              "i"}], ";"}], ")"}], "&"}], ",", "dMap"}], "]"}], ";", 
        RowBox[{"olderSkeleton", "=", "topologySkeleton"}], ";", 
        RowBox[{"lastThicknessMap", "=", "thicknessMap"}], ";", 
        RowBox[{"actualGraySkeleton", "=", "graySkeleton"}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"allRemovedPixels", "\[LeftDoubleBracket]", 
                 RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                "\[Equal]", "1"}], ",", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}],
         ";", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"actualGraySkeleton", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", 
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "=", 
              "0"}], ";"}], ")"}], "&"}], ",", "dMap"}], "]"}], ";", 
        RowBox[{"s1", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"binaryImage", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Binary Image\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s2", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"curveSkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Curve Skeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s3", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"prunedCurveSkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{
           "PlotLabel", "\[Rule]", "\"\<Pruned Curve Skeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s4", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"prunedCurveSkeletonWithOlder", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{
           "PlotLabel", "\[Rule]", 
            "\"\<Pruned Curve Skeleton with Older\>\""}]}], "]"}]}], ";", 
        RowBox[{"s5", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"topologySkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Topology Skeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s6", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"graySkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Grayscale Skeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s7", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"topologyBranches", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Topology Branches\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s8", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"removedPixels", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Removed Pixels\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s9", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"allRemovedPixels", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<All Removed Pixels\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s10", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"actualGraySkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Actual Grayskeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s11", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"curveEndHistory", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Curve End History\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s12", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"allBranches", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<All Branches\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"s13", "=", 
         RowBox[{"ListDensityPlot", "[", 
          RowBox[{"annotatedSkeleton", ",", 
           RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", "\"\<Annotated Skeleton\>\""}]}], 
          "]"}]}], ";", 
        RowBox[{"Show", "[", 
         RowBox[{
          RowBox[{"GraphicsRow", "[", 
           RowBox[{"{", 
            RowBox[{
            "s1", ",", "s4", ",", "s5", ",", "s6", ",", "s12", ",", "s9", ",",
              "s10"}], "}"}], "]"}], ",", 
          RowBox[{"PlotLabel", "\[Rule]", 
           RowBox[{"\"\<Grayscale value: \>\"", "<>", 
            RowBox[{"ToString", "[", "i", "]"}]}]}], ",", 
          RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"1200", ",", 
             FractionBox["1200", "5"]}], "}"}]}]}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "endLevel", ",", "startLevel", ",", 
         RowBox[{"-", "step"}]}], "}"}]}], "]"}], ";", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"graySkeleton", ",", "actualGraySkeleton"}], "}"}], "]"}], 
     ";"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{3.4070870373591757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["cleanImmersionSkeleton",
  FontWeight->"Bold"],
 "\nPerforms a post-processing step on the grayscale skeleton to prune it \
using the pruning parameter, and to remove surfaces."
}], "Subsubtitle",
 CellChangeTimes->{3.4070870373591757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "cleanImmersionSkeleton", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cleanImmersionSkeleton", "[", 
   RowBox[{"skel_", ",", " ", "pruneAmount_"}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bins", ",", " ", "binarySkel", ",", " ", "newSkel"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newSkel", " ", "=", " ", "skel"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"bins", "[", "i", "]"}], " ", "=", " ", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "0", ",", " ", "255"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"bins", "[", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], "]"}],
           "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"bins", "[", 
             RowBox[{
             "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
             "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
              "}"}], "}"}]}], "]"}]}], ";"}], " ", "&"}], ",", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"x", ",", " ", "y", ",", " ", 
             RowBox[{"skel", "\[LeftDoubleBracket]", 
              RowBox[{"x", ",", " ", "y"}], "\[RightDoubleBracket]"}]}], 
            "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"x", ",", "1", ",", " ", 
             RowBox[{
              RowBox[{"Dimensions", "[", "skel", "]"}], 
              "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "}"}],
            ",", " ", 
           RowBox[{"{", 
            RowBox[{"y", ",", "1", ",", " ", 
             RowBox[{
              RowBox[{"Dimensions", "[", "skel", "]"}], 
              "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "}"}]}], "]"}], ",", " ", "1"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"binarySkel", " ", "=", " ", 
         RowBox[{"thresholdImage", "[", 
          RowBox[{"skel", ",", " ", "g"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"isSkeletalSurfaceInteriorPoint", "[", 
               RowBox[{
                RowBox[{"#", "\[LeftDoubleBracket]", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "2"}], "}"}], "\[RightDoubleBracket]"}], 
                ",", " ", "binarySkel"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"newSkel", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], " ",
                "=", " ", "0"}]}], "]"}], ";"}], " ", "&"}], ",", 
          RowBox[{"bins", "[", "g", "]"}]}], "]"}], ";"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"g", ",", " ", "255", ",", " ", "1", ",", " ", 
         RowBox[{"-", "1"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "newSkel"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{3.4070870373591757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Structure Tensor Methods", "Subtitle",
 CellChangeTimes->{3.4070870373591757`*^9}],

Cell[TextData[{
 StyleBox["getGradientField",
  FontWeight->"Bold"],
 ":\nGets the gradient field of the image"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870373591757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getGradientField", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getGradientField", "[", "arr_", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grad", ",", "len", ",", "wid"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"grad", " ", "=", " ", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"x", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "arr", "]"}], "\[LeftDoubleBracket]", 
            "1", "\[RightDoubleBracket]"}]}], "}"}], ",", "  ", 
         RowBox[{"{", 
          RowBox[{"y", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "arr", "]"}], "\[LeftDoubleBracket]", 
            "2", "\[RightDoubleBracket]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"len", ",", "wid"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "arr", "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"grad", "\[LeftDoubleBracket]", 
           RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"arr", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{"x", "+", "1"}], ",", "y"}], 
                "\[RightDoubleBracket]"}], "-", 
               RowBox[{"arr", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{"x", "-", "1"}], ",", "y"}], 
                "\[RightDoubleBracket]"}]}], ")"}], "/", "2"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"arr", "\[LeftDoubleBracket]", 
                RowBox[{"x", ",", 
                 RowBox[{"y", "+", "1"}]}], "\[RightDoubleBracket]"}], "-", 
               RowBox[{"arr", "\[LeftDoubleBracket]", 
                RowBox[{"x", ",", 
                 RowBox[{"y", "-", "1"}]}], "\[RightDoubleBracket]"}]}], 
              ")"}], "/", "2"}]}], "}"}]}], ";"}], ",", "\[IndentingNewLine]",
         
        RowBox[{"{", 
         RowBox[{"x", ",", "2", ",", 
          RowBox[{"len", "-", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", "2", ",", 
          RowBox[{"wid", "-", "1"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "grad"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.406898704843686*^9, 3.406898802499936*^9}, {
   3.406898931359311*^9, 3.406898976234311*^9}, {3.406899147124936*^9, 
   3.406899164453061*^9}, {3.406899551562436*^9, 3.406899706124936*^9}, {
   3.406900334734311*^9, 3.406900346468686*^9}, {3.406900973156186*^9, 
   3.406900984078061*^9}, {3.406901317468686*^9, 3.406901360703061*^9}, 
   3.407087037374801*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getGradientField2", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getGradientField2", "[", "arr_", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grad", ",", "len", ",", "wid"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"grad", " ", "=", " ", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "1", ",", " ", "4"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "arr", "]"}], "\[LeftDoubleBracket]", 
            "1", "\[RightDoubleBracket]"}]}], "}"}], ",", "  ", 
         RowBox[{"{", 
          RowBox[{"y", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "arr", "]"}], "\[LeftDoubleBracket]", 
            "2", "\[RightDoubleBracket]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"len", ",", "wid"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "arr", "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"grad", "\[LeftDoubleBracket]", 
           RowBox[{"1", ",", "x", ",", "y"}], "\[RightDoubleBracket]"}], "=", 
          
          RowBox[{"{", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{"x", "+", "1"}], ",", "y"}], 
               "\[RightDoubleBracket]"}], "-", 
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}]}], ")"}], 
            ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", 
                RowBox[{"y", "+", "1"}]}], "\[RightDoubleBracket]"}], "-", 
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}]}], ")"}]}], 
           "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"grad", "\[LeftDoubleBracket]", 
           RowBox[{"2", ",", "x", ",", "y"}], "\[RightDoubleBracket]"}], "=", 
          
          RowBox[{"{", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{"x", "+", "1"}], ",", "y"}], 
               "\[RightDoubleBracket]"}], "-", 
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}]}], ")"}], 
            ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], "-", 
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", 
                RowBox[{"y", "-", "1"}]}], "\[RightDoubleBracket]"}]}], 
             ")"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"grad", "\[LeftDoubleBracket]", 
           RowBox[{"3", ",", "x", ",", "y"}], "\[RightDoubleBracket]"}], "=", 
          
          RowBox[{"{", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], "-", 
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{"x", "-", "1"}], ",", "y"}], 
               "\[RightDoubleBracket]"}]}], ")"}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", 
                RowBox[{"y", "+", "1"}]}], "\[RightDoubleBracket]"}], "-", 
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}]}], ")"}]}], 
           "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"grad", "\[LeftDoubleBracket]", 
           RowBox[{"4", ",", "x", ",", "y"}], "\[RightDoubleBracket]"}], "=", 
          
          RowBox[{"{", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], "-", 
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{"x", "-", "1"}], ",", "y"}], 
               "\[RightDoubleBracket]"}]}], ")"}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], "-", 
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", 
                RowBox[{"y", "-", "1"}]}], "\[RightDoubleBracket]"}]}], 
             ")"}]}], "}"}]}], ";"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"x", ",", "2", ",", 
          RowBox[{"len", "-", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", "2", ",", 
          RowBox[{"wid", "-", "1"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "grad"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.406898704843686*^9, 3.406898802499936*^9}, {
   3.406898931359311*^9, 3.406898976234311*^9}, {3.406899147124936*^9, 
   3.406899164453061*^9}, {3.406899551562436*^9, 3.406899706124936*^9}, {
   3.406900334734311*^9, 3.406900346468686*^9}, {3.406900973156186*^9, 
   3.406900984078061*^9}, {3.406901317468686*^9, 3.406901360703061*^9}, {
   3.406921961796811*^9, 3.406922030687436*^9}, {3.406922402203061*^9, 
   3.406922403343686*^9}, 3.407087037374801*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getGradientField3D",
  FontWeight->"Bold"],
 ":\nGets the gradient field of the image"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037374801*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getGradientField3D", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getGradientField3D", "[", "arr_", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grad", ",", "len", ",", "wid", ",", " ", "hei"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"grad", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "0", ",", "0"}], "}"}], "&"}], ",", "#"}], 
              "]"}], "&"}], ",", "#"}], "]"}], "&"}], ",", "arr"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"len", ",", "wid", ",", " ", "hei"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "arr", "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"grad", "\[LeftDoubleBracket]", 
          RowBox[{"x", ",", "y", ",", " ", "z"}], "\[RightDoubleBracket]"}], 
         "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"x", "+", "1"}], ",", "y", ",", " ", "z"}], 
             "\[RightDoubleBracket]"}], "-", 
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"x", "-", "1"}], ",", "y", ",", " ", "z"}], 
             "\[RightDoubleBracket]"}]}], ",", 
           RowBox[{
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", 
              RowBox[{"y", "+", "1"}], ",", " ", "z"}], 
             "\[RightDoubleBracket]"}], "-", 
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", 
              RowBox[{"y", "-", "1"}], ",", " ", "z"}], 
             "\[RightDoubleBracket]"}]}], ",", 
           RowBox[{
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", "y", ",", " ", 
              RowBox[{"z", "+", "1"}]}], "\[RightDoubleBracket]"}], "-", 
            RowBox[{"arr", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", "y", ",", " ", 
              RowBox[{"z", "-", "1"}]}], "\[RightDoubleBracket]"}]}]}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"x", ",", "2", ",", 
          RowBox[{"len", "-", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", "2", ",", 
          RowBox[{"wid", "-", "1"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"z", ",", " ", "2", ",", " ", 
          RowBox[{"hei", "-", "1"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "grad"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.398388731663*^9, 3.398388731823*^9}, {3.398393561936*^9,
    3.398393629307*^9}, {3.406900423843686*^9, 3.406900424031186*^9}, 
   3.407087037374801*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getGaussianMask",
  FontWeight->"Bold"],
 ":\nGets a Gaussian Mask"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037374801*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getGaussianMask", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getGaussianMask", "[", "a_", "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"res", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Binomial", "[", 
           RowBox[{
            RowBox[{"2", "*", "a"}], ",", 
            RowBox[{
             RowBox[{"Floor", "[", 
              SqrtBox[
               RowBox[{
                SuperscriptBox["x", "2"], "+", 
                SuperscriptBox["y", "2"]}]], "]"}], "+", "a"}]}], "]"}], ",", 
          
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"-", "a"}], ",", "a"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"-", "a"}], ",", "a"}], "}"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"N", "[", 
       RowBox[{"res", "/", 
        RowBox[{"Tr", "[", "res", "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.407087037374801*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getGaussianMask3D",
  FontWeight->"Bold"],
 ":\nGets a Gaussian Mask"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037374801*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getGaussianMask3D", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getGaussianMask3D", "[", "a_", "]"}], ":=", "\[IndentingNewLine]",
    
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "res", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"res", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Binomial", "[", 
           RowBox[{
            RowBox[{"2", "*", "a"}], ",", 
            RowBox[{
             RowBox[{"Floor", "[", 
              SqrtBox[
               RowBox[{
                SuperscriptBox["x", "2"], "+", 
                SuperscriptBox["y", "2"], "+", 
                SuperscriptBox["z", "2"]}]], "]"}], "+", "a"}]}], "]"}], ",", 
          
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"-", "a"}], ",", "a"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"-", "a"}], ",", "a"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"z", ",", " ", 
            RowBox[{"-", "a"}], ",", " ", "a"}], "}"}]}], "]"}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"N", "[", 
       RowBox[{"res", "/", 
        RowBox[{"Tr", "[", "res", "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.407087037374801*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getLocalStructureTensor",
  FontWeight->"Bold"],
 ":\nGets the local structure tensor given the gradient field grad_ and the \
mask width a_"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037374801*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getLocalStructureTensor", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getLocalStructureTensor", "[", 
    RowBox[{"grad_", ",", "a_"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "tensors", ",", "lst", ",", " ", "len", ",", "wid", ",", "t", ",", 
       "mask"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tensors", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Transpose", "[", 
                RowBox[{"{", "#", "}"}], "]"}], ".", 
               RowBox[{"{", "#", "}"}]}], ")"}], "&"}], ",", "#"}], "]"}], 
          "&"}], ",", "grad"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"lst", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}], "&"}], ",", "#"}], 
           "]"}], "&"}], ",", "grad"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"len", "=", 
       RowBox[{"Length", "[", "grad", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"wid", "=", 
       RowBox[{"Length", "[", 
        RowBox[{
        "grad", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"mask", "=", 
       RowBox[{"getGaussianMask", "[", "a", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"lst", "\[LeftDoubleBracket]", 
           RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], "=", 
          RowBox[{"mask", ".", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"tensors", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"x", "-", "a"}], ",", 
                 RowBox[{"x", "+", "a"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"y", "-", "a"}], ",", 
                 RowBox[{"y", "+", "a"}]}], "}"}]}], "]"}], ",", "1"}], 
            "]"}]}]}], ";"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"len", "-", "a"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"wid", "-", "a"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "lst"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.398393636766*^9, 3.398393656992*^9}, 
   3.406899341437436*^9, 3.406899375906186*^9, {3.406899759359311*^9, 
   3.406899775124936*^9}, {3.406900318031186*^9, 3.406900321468686*^9}, {
   3.406900454078061*^9, 3.406900454562436*^9}, 3.407087037374801*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getLocalStructureTensor2", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getLocalStructureTensor2", "[", 
    RowBox[{"grad_", ",", "a_"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "tensors", ",", "lst", ",", " ", "len", ",", "wid", ",", "t", ",", 
       "mask", ",", " ", "lst2"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tensors", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Transpose", "[", 
                  RowBox[{"{", "#", "}"}], "]"}], ".", 
                 RowBox[{"{", "#", "}"}]}], ")"}], "&"}], ",", "#"}], "]"}], 
            "&"}], ",", 
           RowBox[{
           "grad", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], 
          "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "1", ",", " ", "4"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"lst", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0"}], "}"}]}], "}"}], "&"}], ",", "#"}], 
             "]"}], "&"}], ",", 
           RowBox[{
           "grad", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], 
          "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "1", ",", " ", "4"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"lst2", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}], "&"}], ",", "#"}], 
           "]"}], "&"}], ",", 
         RowBox[{
         "grad", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"len", "=", 
       RowBox[{
        RowBox[{"Dimensions", "[", "grad", "]"}], "\[LeftDoubleBracket]", "2",
         "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"wid", "=", 
       RowBox[{
        RowBox[{"Dimensions", "[", "grad", "]"}], "\[LeftDoubleBracket]", "3",
         "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"mask", "=", 
       RowBox[{"getGaussianMask", "[", "a", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"lst", "\[LeftDoubleBracket]", 
           RowBox[{"i", ",", "x", ",", "y"}], "\[RightDoubleBracket]"}], "=", 
          
          RowBox[{"mask", ".", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{
               RowBox[{
               "tensors", "\[LeftDoubleBracket]", "i", 
                "\[RightDoubleBracket]"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"x", "-", "a"}], ",", 
                 RowBox[{"x", "+", "a"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"y", "-", "a"}], ",", 
                 RowBox[{"y", "+", "a"}]}], "}"}]}], "]"}], ",", "1"}], 
            "]"}]}]}], ";"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", "1", ",", " ", "4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"len", "-", "a"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"wid", "-", "a"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"lst2", "\[LeftDoubleBracket]", 
           RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], "=", 
          RowBox[{"Sum", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"lst", "\[LeftDoubleBracket]", 
              RowBox[{"i", ",", " ", "x", ",", " ", "y"}], 
              "\[RightDoubleBracket]"}], "*", "0.25"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", " ", "4"}], "}"}]}], "]"}]}], ";"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"len", "-", "a"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"wid", "-", "a"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "lst2"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.398393636766*^9, 3.398393656992*^9}, 
   3.406899341437436*^9, 3.406899375906186*^9, {3.406899759359311*^9, 
   3.406899775124936*^9}, {3.406900318031186*^9, 3.406900321468686*^9}, {
   3.406900454078061*^9, 3.406900454562436*^9}, {3.406922021656186*^9, 
   3.406922195656186*^9}, {3.406922492312436*^9, 3.406922492765561*^9}, {
   3.406922570937436*^9, 3.406922572374936*^9}, {3.406923131843686*^9, 
   3.406923133109311*^9}, 3.407087037374801*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getLocalStructureTensor",
  FontWeight->"Bold"],
 ":\nGets the local structure tensor given the gradient field grad_ and the \
mask width a_"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037374801*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getLocalStructureTensor3D", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getLocalStructureTensor3D", "[", 
    RowBox[{"grad_", ",", "a_", ",", " ", "mask_", ",", " ", "skel_"}], "]"}],
    ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "tensors", ",", "lst", ",", " ", "len", ",", "wid", ",", "t", ",", " ", 
       "temp"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tensors", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Transpose", "[", 
                   RowBox[{"{", "#", "}"}], "]"}], ".", 
                  RowBox[{"{", "#", "}"}]}], ")"}], "&"}], ",", "#"}], "]"}], 
             "&"}], ",", " ", "#"}], "]"}], "&"}], ",", "grad"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"lst", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", " ", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], "&"}], 
               ",", "#"}], "]"}], "&"}], ",", " ", "#"}], "]"}], "&"}], ",", 
         "grad"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"len", ",", " ", "wid", ",", " ", "hei", ",", " ", "temp"}], 
        "}"}], "=", 
       RowBox[{"Dimensions", "[", "grad", "]"}]}], ";", "\[IndentingNewLine]",
       
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"skel", "\[LeftDoubleBracket]", 
            RowBox[{"x", ",", " ", "y", ",", " ", "z"}], 
            "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"lst", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", "y", ",", " ", "z"}], 
             "\[RightDoubleBracket]"}], "=", 
            RowBox[{"mask", ".", 
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"tensors", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"x", "-", "a"}], ",", 
                   RowBox[{"x", "+", "a"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"y", "-", "a"}], ",", 
                   RowBox[{"y", "+", "a"}]}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"z", "-", "a"}], ",", " ", 
                   RowBox[{"z", "+", "a"}]}], "}"}]}], "]"}], ",", "2"}], 
              "]"}]}]}], ";"}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"len", "-", "a"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"wid", "-", "a"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"z", ",", 
          RowBox[{"a", "+", "1"}], ",", 
          RowBox[{"hei", "-", "a"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "lst"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.3983898113310003`*^9, 3.398389812087*^9}, {
   3.398389847582*^9, 3.3983898831400003`*^9}, {3.398389932729*^9, 
   3.398389973351*^9}, {3.398390206807*^9, 3.398390222801*^9}, {
   3.398390303325*^9, 3.398390324663*^9}, {3.398391560307*^9, 
   3.398391576377*^9}, {3.398393546394*^9, 3.398393547792*^9}, {
   3.398393661101*^9, 3.398393682625*^9}, 3.3983941263*^9, 
   3.4070870373904257`*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.4070870373904257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["normalizeVector",
  FontWeight->"Bold"],
 ":\nNormalizes a vector"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870373904257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "normalizeVector", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizeVector", "[", "v_", "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"v", ".", "v"}], " ", "\[NotEqual]", " ", "0"}], ",", " ", 
     RowBox[{"v", "/", 
      SqrtBox[
       RowBox[{"v", ".", "v"}]]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.4070870373904257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["normalizeVector3D",
  FontWeight->"Bold"],
 ":\nNormalizes a vector"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870373904257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "normalizeVector3D", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizeVector3D", "[", "v_", "]"}], ":=", "\[IndentingNewLine]",
    
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"v", ".", "v"}], " ", "\[NotEqual]", " ", "0"}], ",", " ", 
     RowBox[{"v", "/", 
      SqrtBox[
       RowBox[{"v", ".", "v"}]]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.4070870373904257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getEigen",
  FontWeight->"Bold"],
 ":\nGets the eigen values of a list of structure tensors"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870373904257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getEigen", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getEigen", "[", "lst_", "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{"Eigensystem", ",", "#"}], "]"}], "&"}], ",", "lst"}], "]"}]}],
   ";"}]}], "Input",
 CellChangeTimes->{{3.3983904461540003`*^9, 3.3983904700220003`*^9}, 
   3.4070870373904257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getEigen3D",
  FontWeight->"Bold"],
 ":\nGets the eigen values of a list of structure tensors"
}], "Subsubtitle",
 CellChangeTimes->{{3.398390482612*^9, 3.398390483212*^9}, 
   3.4070870373904257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getEigen3D", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"getEigen3D", "[", 
   RowBox[{"lst_", ",", " ", "skel_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "eigs", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"eigs", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
                "}"}], "&"}], ",", "#"}], "]"}], "&"}], ",", " ", "#"}], 
          "]"}], "&"}], ",", "grad"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"skel", "\[LeftDoubleBracket]", 
           RowBox[{"x", ",", " ", "y", ",", " ", "z"}], 
           "\[RightDoubleBracket]"}], " ", ">", " ", "0"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"eigs", "\[LeftDoubleBracket]", 
            RowBox[{"x", ",", "y", ",", "z"}], "\[RightDoubleBracket]"}], "=",
            
           RowBox[{"Eigensystem", "[", 
            RowBox[{"lst", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", "y", ",", "z"}], "\[RightDoubleBracket]"}], 
            "]"}]}], ";"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"x", ",", "1", ",", "len"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "1", ",", "wid"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"z", ",", "1", ",", "hei"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "eigs"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.3983904461540003`*^9, 3.39839050854*^9}, {
   3.398393704361*^9, 3.398393704817*^9}, {3.3983937414189997`*^9, 
   3.3983938627390003`*^9}, {3.3983938943780003`*^9, 3.398393949026*^9}, {
   3.3983941085550003`*^9, 3.398394111042*^9}, 3.3983947090030003`*^9, {
   3.398395200943*^9, 3.3983952010550003`*^9}, 3.4070870373904257`*^9}],

Cell["\<\
lst=getLocalStructureTensor[getGradientField[slice],gaussianRadius];
eigens=getEigen[lst];
Show[{ListDensityPlot[slice/255.0,Mesh\[Rule]False,ColorFunctionScaling\[Rule]\
False,DisplayFunction\[Rule]Identity],Graphics[{RGBColor[0,0,1],Table[If[\
eigens\[LeftDoubleBracket]x,y,1,1\[RightDoubleBracket]>0,Line[{{y,x},{y,x}+\
Reverse[normalizeVector[eigens\[LeftDoubleBracket]x,y,2,2\[RightDoubleBracket]\
]]*(1-eigens\[LeftDoubleBracket]x,y,1,2\[RightDoubleBracket]/eigens\
\[LeftDoubleBracket]x,y,1,1\[RightDoubleBracket])}],Circle[{y,x},0.01]],{x,\
Length[eigens]},{y,Length[eigens\[LeftDoubleBracket]1\[RightDoubleBracket]]}]}\
,AspectRatio\[Rule]Automatic,PlotRange\[Rule]{{0,65},{0,65}},Frame\[Rule]True,\
DisplayFunction\[Rule]Identity]},DisplayFunction\[Rule]$DisplayFunction];\
\>", "SmallText",
 CellChangeTimes->{3.4070870374216757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getCostFunction5",
  FontWeight->"Bold"],
 ":\nReturns the cost of adding in a new pixel based on the structure tensor \
eigen analysis."
}], "Subsubtitle",
 CellChangeTimes->{3.4070870374216757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getCostFunction5", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getCostFunction5", "[", 
    RowBox[{
    "p_", ",", "  ", "eigenValues_", ",", "  ", "skeletonDirections_", ",", 
     " ", "annotatedSkeleton_"}], "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "cost", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"cost", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{
            "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            " ", 
            RowBox[{
            "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
            " ", "1", ",", " ", "1"}], "\[RightDoubleBracket]"}], " ", 
          "\[NotEqual]", " ", "0"}], ")"}], ",", "\[IndentingNewLine]", 
        RowBox[{"cost", " ", "=", " ", 
         RowBox[{"1", " ", "-", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Abs", "[", 
             RowBox[{
              RowBox[{"skeletonDirections", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", " ", 
                RowBox[{
                "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
                "\[RightDoubleBracket]"}], " ", ".", " ", 
              RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
               RowBox[{
                RowBox[{
                "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                ",", " ", 
                RowBox[{
                "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                ",", " ", "2", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], 
             "]"}], ")"}], " ", "*", " ", 
           RowBox[{"(", 
            RowBox[{"1", "-", " ", 
             RowBox[{"Abs", "[", 
              RowBox[{
               RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                 ",", " ", "1", ",", " ", "2"}], "\[RightDoubleBracket]"}], 
               " ", "/", "  ", 
               RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", " ", 
                 RowBox[{
                 "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                 ",", " ", "1", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], 
              "]"}]}], " ", ")"}]}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"annotatedSkeleton", "\[LeftDoubleBracket]", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
           " ", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
          "\[RightDoubleBracket]"}], " ", "\[Equal]", " ", "1"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"cost", " ", "=", " ", 
         RowBox[{"Abs", "[", 
          RowBox[{
           RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{
             "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",",
              " ", "1", ",", " ", "2"}], "\[RightDoubleBracket]"}], " ", "/", 
           "  ", 
           RowBox[{"eigenValues", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{
             "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",",
              " ", "1", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], 
          "]"}]}]}], " ", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "cost", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.4070870374216757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getCostFunction5Image",
  FontWeight->"Bold"],
 ":\nGets an image annotated using the 5th cost function (Eigen Analysis)"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870374216757`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getCostFunction5Image", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getCostFunction5Image", "[", 
    RowBox[{
    "skeleton_", ",", " ", "eigenValues_", ",", " ", "skeletonDirections_", 
     ",", " ", "annotatedSkeleton_"}], "]"}], " ", ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"retVal", ",", " ", "s2"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"s2", " ", "=", " ", "skeleton"}], ";", "\[IndentingNewLine]", 
      RowBox[{"retVal", " ", "=", " ", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"s2", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", " ", "y"}], "\[RightDoubleBracket]"}], " ", 
            ">", " ", "0"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{"getCostFunction5", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"x", ",", "y"}], "}"}], ",", "  ", "eigenValues", ",", 
             "  ", "skeletonDirections", ",", " ", "annotatedSkeleton"}], 
            "]"}], ",", "\[IndentingNewLine]", "0"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"x", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "skeleton", "]"}], 
            "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "}"}], 
         ",", " ", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"y", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "skeleton", "]"}], 
            "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], "}"}]}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "retVal", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.4070870374216757`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getEllipse",
  FontWeight->"Bold"],
 ":\nGets the ellipse generated by the eigen analysis"
}], "Subsubtitle",
 CellChangeTimes->{{3.407083261749801*^9, 3.4070832780466757`*^9}, 
   3.4070870374216757`*^9}],

Cell[BoxData[{
 RowBox[{"Clear", "[", "getEllipse", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getEllipse", "[", 
    RowBox[{
    "center_", ",", " ", "v1_", ",", " ", "v2_", ",", " ", "u1_", ",", " ", 
     "u2_", ",", " ", "scale_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"u1", "\[Equal]", "0"}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{"Graphics", "[", "]"}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{"ParametricPlot", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x1", ",", "y1", ","}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"x1", " ", "=", " ", 
           RowBox[{
            FractionBox["u1", "u1"], " ", 
            RowBox[{"Sin", "[", "t", "]"}], 
            RowBox[{"Normalize", "[", "v1", "]"}], "*", "scale"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"y1", " ", "=", " ", 
           RowBox[{
            FractionBox[
             RowBox[{"u2", " "}], "u1"], 
            RowBox[{"Cos", "[", "t", "]"}], " ", 
            RowBox[{"Normalize", "[", "v2", "]"}], "*", "scale"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
             "center", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
              "+", 
             RowBox[{
             "x1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
             " ", "+", " ", 
             RowBox[{
             "y1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            ",", " ", 
            RowBox[{
             RowBox[{
             "center", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
              " ", "+", " ", 
             RowBox[{
             "x1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
             " ", "+", " ", 
             RowBox[{
             "y1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}],
            "}"}]}]}], "\[IndentingNewLine]", "]"}], ",", "  ", 
       RowBox[{"{", 
        RowBox[{"t", ",", " ", 
         RowBox[{"-", "\[Pi]"}], ",", " ", "\[Pi]"}], "}"}]}], "]"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.4065619991631894`*^9, 3.4065620588819394`*^9}, {
   3.4065622719756894`*^9, 3.4065623349756894`*^9}, {3.4065624128194394`*^9, 
   3.4065624436006894`*^9}, {3.4065625403663144`*^9, 
   3.4065627023506894`*^9}, {3.4065629121319394`*^9, 
   3.4065629241163144`*^9}, {3.4065633167413144`*^9, 
   3.4065633611006894`*^9}, {3.4065633939600644`*^9, 3.4065634961631894`*^9}, 
   3.4065638909444394`*^9, {3.4065645444913144`*^9, 3.4065645599288144`*^9}, {
   3.4065650259913144`*^9, 3.4065650280381894`*^9}, {3.406897026953061*^9, 
   3.406897029656186*^9}, {3.406897125249936*^9, 3.406897130390561*^9}, {
   3.407083254406051*^9, 3.407083259093551*^9}, 3.407087037437301*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Structure Tensor based Skeletonization", "Subtitle",
 CellChangeTimes->{{3.407083326281051*^9, 3.4070833375779257`*^9}, 
   3.407087037437301*^9}],

Cell[TextData[{
 StyleBox["getSkeletonDirection",
  FontWeight->"Bold"],
 ":\nGets the Vector field of the skeleton"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037437301*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getSkeletonDirection", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getSkeletonDirection", "[", "skeleton_", "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"direction", ",", " ", "defaultDirections"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"defaultDirections", " ", "=", " ", 
       RowBox[{"getEigen", "[", 
        RowBox[{"getLocalStructureTensor", "[", 
         RowBox[{
          RowBox[{"getGradientField", "[", "skeleton", "]"}], ",", "1"}], 
         "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"direction", " ", "=", " ", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"skeleton", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], " ", ">", 
            " ", "0"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"n4", ",", " ", "dir"}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"n4", " ", "=", " ", 
               RowBox[{"getN4", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"x", ",", "y"}], "}"}], ",", " ", "skeleton"}], 
                "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"dir", " ", "=", " ", 
               RowBox[{"defaultDirections", "\[LeftDoubleBracket]", 
                RowBox[{"x", ",", "y", ",", "2", ",", "2"}], 
                "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"Switch", "[", 
               RowBox[{
                RowBox[{"Length", "[", "n4", "]"}], ",", 
                "\[IndentingNewLine]", "1", ",", " ", 
                RowBox[{
                 RowBox[{"dir", " ", "=", " ", 
                  RowBox[{
                   RowBox[{
                   "n4", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], " ", "-", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", "y"}], "}"}]}]}], ";"}], ",", 
                "\[IndentingNewLine]", "2", ",", " ", 
                RowBox[{"dir", " ", "=", " ", 
                 RowBox[{
                  RowBox[{
                  "n4", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}], " ", "-", " ", 
                  RowBox[{
                  "n4", "\[LeftDoubleBracket]", "1", 
                   "\[RightDoubleBracket]"}]}]}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"normalizeVector", "[", "dir", "]"}]}]}], 
            "\[IndentingNewLine]", "]"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", " ", 
         RowBox[{"{", 
          RowBox[{"x", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "skeleton", "]"}], 
            "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "}"}], 
         ",", " ", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"y", ",", " ", "1", ",", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", "skeleton", "]"}], 
            "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], "}"}]}],
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "direction", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.407087037437301*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["doSkeletonCleanup:",
  FontWeight->"Bold"],
 "\nCleans up the skeleton using cost function 5"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037437301*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "doSkeletonCleanup", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"doSkeletonCleanup", "[", 
   RowBox[{
   "sourceImage_", ",", "skeleton_", ",", "threshold_", ",", "stepSize_", ",",
     "showGeneralPlots_", ",", "showIterationPlots_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "sourceEigens", ",", "binarySkeleton", ",", "skeletonDirections", ",", 
      "pixelCosts", ",", "prunedSkeleton", ",", "newPixels", ",", 
      "annotatedNewPixels", ",", "grayValueSkeleton", ",", "p1", ",", "p2", 
      ",", "p3", ",", "p4", ",", "p5", ",", "p6", ",", "p7", ",", "p01", ",", 
      "p02", ",", "p03"}], "}"}], ",", 
    RowBox[{
     RowBox[{"sourceEigens", "=", 
      RowBox[{"getEigen", "[", 
       RowBox[{"getLocalStructureTensor", "[", 
        RowBox[{
         RowBox[{"getGradientField", "[", "sourceImage", "]"}], ",", 
         "gaussianRadius"}], "]"}], "]"}]}], ";", 
     RowBox[{"binarySkeleton", "=", 
      RowBox[{"thresholdImage", "[", 
       RowBox[{"skeleton", ",", "1"}], "]"}]}], ";", 
     RowBox[{"skeletonDirections", "=", 
      RowBox[{"getSkeletonDirection", "[", "binarySkeleton", "]"}]}], ";", 
     RowBox[{"pixelCosts", "=", 
      RowBox[{"getCostFunction5Image", "[", 
       RowBox[{
       "binarySkeleton", ",", "sourceEigens", ",", "skeletonDirections", ",", 
        
        RowBox[{"annotateImageWithPixelType", "[", "binarySkeleton", "]"}]}], 
       "]"}]}], ";", 
     RowBox[{"prunedSkeleton", "=", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{"showGeneralPlots", ",", 
       RowBox[{
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{
           RowBox[{"p1", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"sourceImage", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<Source Image\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p2", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"skeleton", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{
              "PlotLabel", "\[Rule]", "\"\<Grayscale Skeleton\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p3", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"binarySkeleton", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<Binary Skeleton\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p4", "=", 
            RowBox[{"Show", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ListDensityPlot", "[", 
                 RowBox[{
                  FractionBox["sourceImage", "255.`"], ",", 
                  RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
                  RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}], ">", "0"}], ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{
                    RowBox[{"Reverse", "[", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "2", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    FractionBox[
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "2"}], 
                    "\[RightDoubleBracket]"}], 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}]]}], ")"}]}]}]}], "}"}], "]"}], 
                    ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}]}], "}"}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "sourceEigens", "]"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "sourceEigens", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], 
                 "]"}]}], "}"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{
              "PlotLabel", "\[Rule]", "\"\<Source Vector Field\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p5", "=", 
            RowBox[{"Show", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ListDensityPlot", "[", 
                 RowBox[{
                  FractionBox[
                   RowBox[{"thresholdImage", "[", 
                    RowBox[{"skeleton", ",", "1"}], "]"}], "255.`"], ",", 
                  RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
                  RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"skeletonDirections", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                    "]"}]}], "]"}]}]}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "skeletonDirections", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "skeletonDirections", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], 
                 "]"}]}], "}"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{
              "PlotLabel", "\[Rule]", "\"\<Skeleton Vector Field\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p6", "=", 
            RowBox[{"Show", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ListDensityPlot", "[", 
                 RowBox[{
                  FractionBox["slice", "255.`"], ",", 
                  RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
                  RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}], ">", "0"}], ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{
                    RowBox[{"Reverse", "[", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "2", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    FractionBox[
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "2"}], 
                    "\[RightDoubleBracket]"}], 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}]]}], ")"}]}]}]}], "}"}], "]"}], 
                    ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}]}], "}"}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "sourceEigens", "]"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "sourceEigens", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"skeletonDirections", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                    "]"}]}], "]"}]}]}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "skeletonDirections", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "skeletonDirections", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], 
                 "]"}]}], "}"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{
              "PlotLabel", "\[Rule]", 
               "\"\<Source  Field on Skeleton Field\>\""}]}], "]"}]}], ";", 
           RowBox[{"p7", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"pixelCosts", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<Cost Function\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"Show", "[", 
            RowBox[{
             RowBox[{"GraphicsGrid", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"p1", ",", "p2", ",", "p3"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"p4", ",", "p5", ",", "p6"}], "}"}], ",", 
                RowBox[{"{", "p7", "}"}]}], "}"}], "]"}], ",", 
             RowBox[{"ImageSize", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"1200", ",", "1200"}], "}"}]}]}], "]"}]}]}], "]"}], 
        ";"}]}], "]"}], ";", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"grayValueSkeleton", "=", 
         RowBox[{"thresholdImage", "[", 
          RowBox[{"skeleton", ",", "grayValue"}], "]"}]}], ";", 
        RowBox[{"newPixels", "=", 
         RowBox[{"grayValueSkeleton", "-", "prunedSkeleton"}]}], ";", 
        RowBox[{"annotatedNewPixels", "=", 
         RowBox[{"annotateImageWithPixelType", "[", "newPixels", "]"}]}], ";",
         
        RowBox[{"skeletonDirections", "=", 
         RowBox[{"getSkeletonDirection", "[", "grayValueSkeleton", "]"}]}], 
        ";", 
        RowBox[{"pixelCosts", "=", 
         RowBox[{"getCostFunction5Image", "[", 
          RowBox[{
          "grayValueSkeleton", ",", "sourceEigens", ",", "skeletonDirections",
            ",", "annotatedNewPixels"}], "]"}]}], ";", 
        RowBox[{"If", "[", 
         RowBox[{"showIterationPlots", ",", 
          RowBox[{
           RowBox[{"p01", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"newPixels", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<New Pixels\>\""}]}], 
             "]"}]}], ";"}]}], "]"}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"newPixels", "\[LeftDoubleBracket]", 
                 RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], ">", 
                "0"}], ",", 
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "1"}], "]"}], ",", 
               RowBox[{"sliceSize", "[", 
                RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ";", 
        RowBox[{"dMap", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"dMap", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}],
         ";", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"newPixels", "\[LeftDoubleBracket]", 
                 RowBox[{
                  RowBox[{
                  "#1", "\[LeftDoubleBracket]", "1", 
                   "\[RightDoubleBracket]"}], ",", 
                  RowBox[{
                  "#1", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                ">", "0"}], ",", 
               RowBox[{
                RowBox[{"Module", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"curvePoints", ",", "curveCost"}], "}"}], ",", 
                  RowBox[{
                   RowBox[{"curvePoints", "=", 
                    RowBox[{
                    RowBox[{"getCurveLength", "[", 
                    RowBox[{"#1", ",", "annotatedNewPixels", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "grayValue"}], "}"}]}], "]"}], 
                    "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
                   ";", 
                   RowBox[{"curveCost", "=", 
                    FractionBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"i", "=", "1"}], 
                    RowBox[{"Length", "[", "curvePoints", "]"}]], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"pixelCosts", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    "&"}], ")"}], "/@", "curvePoints"}], ")"}], 
                    "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], 
                    
                    RowBox[{"Length", "[", "curvePoints", "]"}]]}], ";", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"curveCost", "\[GreaterEqual]", "threshold"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Scan", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"prunedSkeleton", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    "=", "1"}], ";"}], ")"}], "&"}], ",", "curvePoints"}], 
                    "]"}], ";"}]}], "]"}], ";", 
                   RowBox[{"Scan", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"newPixels", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], 
                    "=", "0"}], ";"}], ")"}], "&"}], ",", "curvePoints"}], 
                    "]"}], ";"}]}], "]"}], ";"}]}], "]"}], ";"}], ")"}], 
           "&"}], ",", "dMap"}], "]"}], ";", 
        RowBox[{"If", "[", 
         RowBox[{"showIterationPlots", ",", 
          RowBox[{
           RowBox[{"p02", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"prunedSkeleton", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<Pruned Skeleton\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"p03", "=", 
            RowBox[{"Show", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ListDensityPlot", "[", 
                 RowBox[{
                  FractionBox["slice", "255.`"], ",", 
                  RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
                  RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}], ">", "0"}], ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{
                    RowBox[{"Reverse", "[", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "2", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    FractionBox[
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "2"}], 
                    "\[RightDoubleBracket]"}], 
                    RowBox[{"sourceEigens", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}]]}], ")"}]}]}]}], "}"}], "]"}], 
                    ",", 
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}]}], "}"}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "sourceEigens", "]"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "sourceEigens", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}],
                 ",", 
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "-", "0.5`"}], ",", 
                    RowBox[{"x", "-", "0.5`"}]}], "}"}], "+", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"normalizeVector", "[", 
                    RowBox[{"skeletonDirections", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], 
                    "]"}]}], "]"}]}]}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{"Length", "[", "skeletonDirections", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "skeletonDirections", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "]"}]}], "}"}]}], "]"}]}], 
                   "}"}], ",", 
                  RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "65"}], "}"}]}], "}"}]}], ",", 
                  RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                  RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], 
                 "]"}]}], "}"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{
              "PlotLabel", "\[Rule]", 
               "\"\<Source  Field on Skeleton Field\>\""}]}], "]"}]}], ";", 
           RowBox[{"p04", "=", 
            RowBox[{"ListDensityPlot", "[", 
             RowBox[{"pixelCosts", ",", 
              RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
              RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "\"\<Cost Function\>\""}]}], 
             "]"}]}], ";", 
           RowBox[{"Show", "[", 
            RowBox[{
             RowBox[{"GraphicsRow", "[", 
              RowBox[{"{", 
               RowBox[{"p01", ",", "p02", ",", "p03", ",", "p04"}], "}"}], 
              "]"}], ",", 
             RowBox[{"ImageSize", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"1200", ",", "300"}], "}"}]}], ",", 
             RowBox[{"PlotLabel", "\[Rule]", 
              RowBox[{"\"\<Gray Value : \>\"", "<>", 
               RowBox[{"ToString", "[", "grayValue", "]"}]}]}]}], "]"}]}]}], 
         "]"}], ";"}], ",", 
       RowBox[{"{", 
        RowBox[{"grayValue", ",", "255", ",", "1", ",", "stepSize"}], "}"}]}],
       "]"}], ";", 
     RowBox[{"newSkeleton", "=", "skeleton"}], ";", 
     RowBox[{"dMap", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"prunedSkeleton", "\[LeftDoubleBracket]", 
              RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], "\[Equal]", 
             "0"}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", "y"}], "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "1"}], "]"}], ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], 
       "]"}]}], ";", 
     RowBox[{"dMap", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"dMap", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#1", "]"}], ">", "0"}], "&"}]}], "]"}]}], 
     ";", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"newSkeleton", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
             ",", 
             RowBox[{
             "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "\[RightDoubleBracket]"}], "=", "0"}], ";"}], ")"}], "&"}], ",", 
       "dMap"}], "]"}], ";", 
     RowBox[{"{", 
      RowBox[{"newSkeleton", ",", "prunedSkeleton"}], "}"}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{3.4070870374529257`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Structure Tensor based smoothing ", "Subtitle",
 CellChangeTimes->{{3.4070833766091757`*^9, 3.407083383937301*^9}, 
   3.4070870374529257`*^9}],

Cell[TextData[{
 StyleBox["getDistanceNormal:",
  FontWeight->"Bold"],
 "\ngets the distance to the edge of the structure tensor defined by ",
 StyleBox["v1, v2, u1",
  FontSlant->"Italic"],
 " and ",
 StyleBox["u2",
  FontSlant->"Italic"],
 " in the direction ",
 StyleBox["dir",
  FontSlant->"Italic"]
}], "Subsubtitle",
 CellChangeTimes->{{3.4070837214216757`*^9, 3.4070837806716757`*^9}, 
   3.4070870374529257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getDistanceNormal", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getDistanceNormal", "[", 
    RowBox[{
    "v1_", ",", "v2_", ",", "u1_", ",", "u2_", ",", " ", "dir_", ",", " ", 
     "ix_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dirUV", ",", " ", "p", ",", " ", "base"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dirUV", " ", "=", " ", 
       RowBox[{"Normalize", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"dir", ".", "v1"}], ",", " ", 
          RowBox[{"dir", ".", "v2"}]}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"base", " ", "=", " ", 
       SqrtBox[
        RowBox[{
         RowBox[{
          SuperscriptBox[
           RowBox[{
           "dirUV", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
           "2"], " ", 
          RowBox[{"Abs", "[", "u1", "]"}]}], " ", "+", " ", 
         RowBox[{
          SuperscriptBox[
           RowBox[{
           "dirUV", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
           "2"], " ", 
          RowBox[{"Abs", "[", "u2", "]"}]}]}]]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"p", " ", "=", " ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"base", " ", "\[Equal]", " ", "0"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
         FractionBox[
          RowBox[{
           SqrtBox["u1"], " ", 
           SqrtBox["u2"], " ", "dirUV"}], "base"]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"u2", " ", "\[Equal]", " ", "0"}], ")"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"v2", " ", ".", " ", "dirUV"}], " ", "\[Equal]", " ", 
             "0"}], ",", " ", "\[IndentingNewLine]", "0", ",", 
            "\[IndentingNewLine]", 
            SqrtBox["u1"]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Norm", "[", "p", "]"}]}], "]"}], ",", " ", "ix"}], 
       "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.4070870374529257`*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getDistance:",
  FontWeight->"Bold"],
 "\ngets the distance to the edge of the structure tensor defined by ",
 StyleBox["v1, v2, u2/u1",
  FontSlant->"Italic"],
 " and ",
 StyleBox["u2/u2",
  FontSlant->"Italic"],
 " in the direction ",
 StyleBox["dir.\n",
  FontSlant->"Italic"],
 "Basically uses the inverse structure tensor."
}], "Subsubtitle",
 CellChangeTimes->{{3.4070837214216757`*^9, 3.4070837806716757`*^9}, {
   3.4070838173591757`*^9, 3.4070838422966757`*^9}, 3.4070870374529257`*^9}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", "getDistance", "]"}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{
     RowBox[{"getDistance", "[", 
      RowBox[{
      "v1_", ",", "v2_", ",", "u1_", ",", "u2_", ",", " ", "dir_", ",", " ", 
       "ix_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "dirUV", ",", " ", "p", ",", " ", "base", ",", " ", "u11", ",", " ", 
         "u22"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"dirUV", " ", "=", " ", 
         RowBox[{"Normalize", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"dir", ".", "v1"}], ",", " ", 
            RowBox[{"dir", ".", "v2"}]}], "}"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"u2", " ", "\[Equal]", " ", "0"}], ")"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"v2", " ", ".", " ", "dirUV"}], " ", "\[Equal]", " ", 
             "0"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"0", ",", " ", "ix"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              SqrtBox["u1"], ",", " ", "ix"}], "}"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Module", "[", " ", 
           RowBox[{
            RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"u11", " ", "=", " ", 
              RowBox[{"u2", "/", "u1"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"u22", " ", "=", " ", 
              RowBox[{"u2", "/", "u2"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"base", " ", "=", " ", 
              SqrtBox[
               RowBox[{
                RowBox[{
                 SuperscriptBox[
                  RowBox[{
                  "dirUV", "\[LeftDoubleBracket]", "2", 
                   "\[RightDoubleBracket]"}], "2"], " ", 
                 RowBox[{"Abs", "[", "u11", "]"}]}], " ", "+", " ", 
                RowBox[{
                 SuperscriptBox[
                  RowBox[{
                  "dirUV", "\[LeftDoubleBracket]", "1", 
                   "\[RightDoubleBracket]"}], "2"], 
                 RowBox[{"Abs", "[", "u22", "]"}], " "}]}]]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"p", " ", "=", " ", 
              RowBox[{"Norm", "[", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"base", " ", "\[Equal]", " ", "0"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                 FractionBox[
                  RowBox[{
                   SqrtBox["u11"], 
                   SqrtBox["u22"], " ", "dirUV"}], "base"]}], "]"}], "]"}]}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"p", " ", "=", " ", 
              RowBox[{"If", "[", " ", 
               RowBox[{
                RowBox[{"p", "\[Equal]", " ", "0"}], ",", " ", "0", ",", " ", 
                
                RowBox[{
                 SqrtBox["u2"], "/", "p"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"p", ",", " ", "ix"}], "}"}]}]}], "\[IndentingNewLine]",
            "]"}]}], "]"}]}]}], "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.4065658026944394`*^9, 3.4065658027881894`*^9}, {
   3.4065661652256894`*^9, 3.4065662104288144`*^9}, {3.4065690391294894`*^9, 
   3.4065691112388644`*^9}, 3.4065693323951144`*^9, {3.4065700470201144`*^9, 
   3.4065700794732394`*^9}, {3.4065701703013644`*^9, 
   3.4065702185669894`*^9}, {3.4065703258794894`*^9, 
   3.4065705298013644`*^9}, {3.4065707268951144`*^9, 
   3.4065707292232394`*^9}, {3.4065709691451144`*^9, 
   3.4065709693482394`*^9}, {3.4065710529576144`*^9, 
   3.4065710531138644`*^9}, {3.4065716116138644`*^9, 
   3.4065717672857394`*^9}, {3.4065719242857394`*^9, 
   3.4065719385826144`*^9}, {3.406898351343686*^9, 3.406898369703061*^9}, {
   3.406904824296811*^9, 3.406904837015561*^9}, {3.406909378374936*^9, 
   3.406909389453061*^9}, {3.406909616484311*^9, 3.406909631593686*^9}, {
   3.406910663671811*^9, 3.406910749687436*^9}, 3.406910780953061*^9, {
   3.406910841984311*^9, 3.406910890171811*^9}, {3.406911502359311*^9, 
   3.406911503296811*^9}, {3.406916017203061*^9, 3.406916033468686*^9}, {
   3.406916075890561*^9, 3.406916091312436*^9}, {3.406916137515561*^9, 
   3.406916141453061*^9}, {3.406916423656186*^9, 3.406916650249936*^9}, {
   3.406916953640561*^9, 3.406916980359311*^9}, {3.406917377828061*^9, 
   3.406917398874936*^9}, {3.406917444687436*^9, 3.406917457968686*^9}, {
   3.406917556031186*^9, 3.406917561062436*^9}, {3.406920077640561*^9, 
   3.406920106453061*^9}, {3.406920149296811*^9, 3.406920272234311*^9}, {
   3.406920303734311*^9, 3.406920317203061*^9}, {3.406920351515561*^9, 
   3.406920391593686*^9}, {3.406920474859311*^9, 3.406920479390561*^9}, {
   3.406920510703061*^9, 3.406920591328061*^9}, {3.406920686406186*^9, 
   3.406920688468686*^9}, {3.406920948062436*^9, 3.406920968421811*^9}, {
   3.406921058499936*^9, 3.406921072796811*^9}, 3.406921377703061*^9, {
   3.406921468578061*^9, 3.406921655281186*^9}, {3.406921694453061*^9, 
   3.406921696984311*^9}, 3.407083397999801*^9, 3.4070870374529257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["points:",
  FontWeight->"Bold"],
 "\nthe 8 neighbors of a given point"
}], "Subsubtitle",
 CellChangeTimes->{{3.4070837214216757`*^9, 3.4070837806716757`*^9}, {
   3.4070838173591757`*^9, 3.4070838750154257`*^9}, 3.4070870374529257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "points", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"points", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", " ", 
       RowBox[{"-", "1"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"1", ",", " ", 
       RowBox[{"-", "1"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"1", ",", " ", "0"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"1", ",", " ", "1"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", " ", "0"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", " ", 
       RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.407083527999801*^9, 3.407083547906051*^9}, 
   3.4070870374529257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getDistancesNormal:",
  FontWeight->"Bold"],
 "\ngets the distances to all 8 surrounding neighbors"
}], "Subsubtitle",
 CellChangeTimes->{{3.4070837214216757`*^9, 3.4070837806716757`*^9}, {
   3.4070838173591757`*^9, 3.4070839090154257`*^9}, 3.4070870374529257`*^9, {
   3.407089370906051*^9, 3.4070893715154257`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getDistancesNormal", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getDistancesNormal", "[", 
    RowBox[{"v1_", ",", "v2_", ",", "u1_", ",", "u2_"}], "]"}], " ", ":=", 
   " ", "\[IndentingNewLine]", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"getDistanceNormal", "[", 
      RowBox[{
      "v1", ",", " ", "v2", ",", " ", "u1", ",", " ", "u2", ",", " ", 
       RowBox[{
       "points", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], ",", 
       " ", "i"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", "1", ",", " ", "8"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{
  3.4070870374529257`*^9, {3.407089353781051*^9, 3.407089366687301*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getDistances:",
  FontWeight->"Bold"],
 "\ngets the distances to all 8 surrounding neighbors"
}], "Subsubtitle",
 CellChangeTimes->{{3.4070837214216757`*^9, 3.4070837806716757`*^9}, {
   3.4070838173591757`*^9, 3.4070839090154257`*^9}, 3.4070870374529257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getDistances", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getDistances", "[", 
    RowBox[{"v1_", ",", "v2_", ",", "u1_", ",", "u2_"}], "]"}], " ", ":=", 
   " ", "\[IndentingNewLine]", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"getDistance", "[", 
      RowBox[{
      "v1", ",", " ", "v2", ",", " ", "u1", ",", " ", "u2", ",", " ", 
       RowBox[{
       "points", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], ",", 
       " ", "i"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", "1", ",", " ", "8"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{3.4070870374529257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getGrayscales:",
  FontWeight->"Bold"],
 "\nThe grayscale values in the surrounding 8 neighbors"
}], "Subsubtitle",
 CellChangeTimes->{{3.4070837214216757`*^9, 3.4070837806716757`*^9}, {
   3.4070838173591757`*^9, 3.4070838750154257`*^9}, {3.407083928031051*^9, 
   3.4070839371404257`*^9}, 3.4070870374529257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getGrayscales", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getGrayscales", "[", 
    RowBox[{"img_", ",", "p_"}], "]"}], " ", ":=", " ", "\[IndentingNewLine]",
    
   RowBox[{"Sort", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"img", "\[LeftDoubleBracket]", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"p", "+", 
              RowBox[{
              "points", "\[LeftDoubleBracket]", "i", 
               "\[RightDoubleBracket]"}]}], ")"}], "\[LeftDoubleBracket]", 
            "1", "\[RightDoubleBracket]"}], ",", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"p", "+", 
              RowBox[{
              "points", "\[LeftDoubleBracket]", "i", 
               "\[RightDoubleBracket]"}]}], ")"}], "\[LeftDoubleBracket]", 
            "2", "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], ",", 
         " ", "i"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "1", ",", " ", "8"}], "}"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
       " ", "\[LessEqual]", " ", 
       RowBox[{"#2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
       " ", "&"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.4065719805044894`*^9, 3.4065720237232394`*^9}, {
   3.4065739222388644`*^9, 3.4065739720513644`*^9}, {3.4065740504419894`*^9, 
   3.4065740951294894`*^9}, 3.4070870374529257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["solveForIdealDensity:",
  FontWeight->"Bold"],
 "\nFind the ideal density of a given point given the grayscales and eigen \
distances to its neighbors"
}], "Subsubtitle",
 CellChangeTimes->{{3.4070837214216757`*^9, 3.4070837806716757`*^9}, {
   3.4070838173591757`*^9, 3.4070838750154257`*^9}, {3.4070839620154257`*^9, 
   3.4070839833279257`*^9}, 3.4070870374529257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "V", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "solveForIdealDensity", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"solveForIdealDensity", "[", 
   RowBox[{"grayscales_", ",", " ", "distances_", ",", " ", "i_"}], "]"}], 
  " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "eqn", ",", " ", "solution", ",", " ", "minV", ",", " ", "maxV"}], "}"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Clear", "[", "V", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"minV", " ", "=", " ", 
      RowBox[{"If", "[", " ", 
       RowBox[{
        RowBox[{"i", " ", "<", " ", "1"}], ",", " ", 
        RowBox[{"-", "\[Infinity]"}], ",", " ", 
        RowBox[{"grayscales", "\[LeftDoubleBracket]", 
         RowBox[{"i", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"maxV", " ", "=", " ", 
      RowBox[{"If", "[", " ", 
       RowBox[{
        RowBox[{"i", " ", "\[Equal]", "8"}], " ", ",", " ", "\[Infinity]", 
        ",", " ", 
        RowBox[{"grayscales", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"i", "+", "1"}], ",", " ", "1"}], 
         "\[RightDoubleBracket]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"eqn", " ", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"eqn", " ", "=", " ", 
         RowBox[{"eqn", " ", "+", " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"V", "-", " ", 
             RowBox[{"grayscales", "\[LeftDoubleBracket]", 
              RowBox[{"j", ",", " ", "1"}], "\[RightDoubleBracket]"}], " ", 
             "-", " ", 
             RowBox[{"distances", "\[LeftDoubleBracket]", 
              RowBox[{
               RowBox[{"grayscales", "\[LeftDoubleBracket]", 
                RowBox[{"j", ",", " ", "2"}], "\[RightDoubleBracket]"}], ",", 
               " ", "1"}], "\[RightDoubleBracket]"}]}], ")"}], "2"]}]}], 
        ";"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", " ", "1", ",", " ", "i"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"eqn", " ", "=", " ", 
         RowBox[{"eqn", " ", "+", " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"grayscales", "\[LeftDoubleBracket]", 
              RowBox[{"j", ",", " ", "1"}], "\[RightDoubleBracket]"}], " ", 
             "-", " ", "V", "-", " ", 
             RowBox[{"distances", "\[LeftDoubleBracket]", 
              RowBox[{
               RowBox[{"grayscales", "\[LeftDoubleBracket]", 
                RowBox[{"j", ",", " ", "2"}], "\[RightDoubleBracket]"}], ",", 
               " ", "1"}], "\[RightDoubleBracket]"}]}], ")"}], "2"]}]}], 
        ";"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", " ", 
         RowBox[{"i", "+", "1"}], ",", " ", "8"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"solution", " ", "=", " ", 
      RowBox[{"Solve", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"D", "[", 
           RowBox[{"eqn", ",", " ", "V"}], "]"}], " ", "\[Equal]", " ", "0"}],
          "}"}], ",", " ", 
        RowBox[{"{", "V", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"V", " ", "=", " ", 
      RowBox[{"Min", "[", 
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"V", " ", "/.", " ", "solution"}], ",", " ", "minV"}], 
         "]"}], ",", " ", "maxV"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"V", ",", " ", "eqn"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.406901429156186*^9, 3.406901466859311*^9}, {
   3.406901537687436*^9, 3.406901605281186*^9}, {3.406901665906186*^9, 
   3.406901859609311*^9}, {3.406901939093686*^9, 3.406901979468686*^9}, {
   3.406902017437436*^9, 3.406902035468686*^9}, {3.406902091328061*^9, 
   3.406902092796811*^9}, {3.406902123312436*^9, 3.406902141749936*^9}, {
   3.406902174374936*^9, 3.406902252999936*^9}, {3.406902329562436*^9, 
   3.406902335093686*^9}, {3.406902556921811*^9, 3.406902578578061*^9}, {
   3.406902656109311*^9, 3.406902674812436*^9}, {3.406902929531186*^9, 
   3.406902964687436*^9}, {3.406903044765561*^9, 3.406903286781186*^9}, {
   3.406903321859311*^9, 3.406903499781186*^9}, {3.406903695046811*^9, 
   3.406903713781186*^9}, 3.4070870374529257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getIdealDensity:",
  FontWeight->"Bold"],
 "\ngets the ideal density of a given point given the image, and the eigen \
values"
}], "Subsubtitle",
 CellChangeTimes->{{3.4070837214216757`*^9, 3.4070837806716757`*^9}, {
   3.4070838173591757`*^9, 3.4070838750154257`*^9}, {3.4070839620154257`*^9, 
   3.4070839833279257`*^9}, {3.4070841972029257`*^9, 3.4070842220779257`*^9}, 
   3.4070870374529257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getIdealDensity", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getIdealDensity", "[", 
    RowBox[{"slice_", ",", " ", "p_", ",", " ", "eigs_"}], "]"}], " ", ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"distances", ",", " ", "grayscales", ",", " ", "solutions"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"grayscales", " ", "=", " ", 
       RowBox[{"getGrayscales", "[", 
        RowBox[{"slice", ",", " ", "p"}], "]"}]}], ";", "\[IndentingNewLine]",
       
      RowBox[{"distances", " ", "=", " ", 
       RowBox[{"getDistances", "[", 
        RowBox[{
         RowBox[{"eigs", "\[LeftDoubleBracket]", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
           " ", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
           " ", "2", ",", " ", "1"}], "\[RightDoubleBracket]"}], ",", " ", 
         RowBox[{"eigs", "\[LeftDoubleBracket]", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
           " ", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
           " ", "2", ",", " ", "2"}], "\[RightDoubleBracket]"}], ",", " ", 
         RowBox[{"eigs", "\[LeftDoubleBracket]", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
           " ", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
           " ", "1", ",", " ", "1"}], "\[RightDoubleBracket]"}], ",", " ", 
         RowBox[{"eigs", "\[LeftDoubleBracket]", 
          RowBox[{
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
           " ", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
           " ", "1", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"solutions", " ", "=", " ", 
       RowBox[{"Sort", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"solveForIdealDensity", "[", 
            RowBox[{"grayscales", ",", " ", "distances", ",", " ", "i"}], 
            "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "0", ",", " ", "8"}], "}"}]}], "]"}], ",", 
         " ", 
         RowBox[{
          RowBox[{
           RowBox[{
           "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], " ", 
           "<", " ", 
           RowBox[{
           "#2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
          " ", "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"solutions", "\[LeftDoubleBracket]", 
       RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.406897321859311*^9, 3.406897398734311*^9}, {
   3.406897435656186*^9, 3.406897439562436*^9}, {3.406897474999936*^9, 
   3.406897531281186*^9}, {3.406897956421811*^9, 3.406898030671811*^9}, {
   3.406898085390561*^9, 3.406898109781186*^9}, {3.406901771531186*^9, 
   3.406901805171811*^9}, {3.406902042249936*^9, 3.406902077734311*^9}, {
   3.406902154203061*^9, 3.406902160687436*^9}, {3.406902968484311*^9, 
   3.406902971265561*^9}, {3.406903508999936*^9, 3.406903661218686*^9}, {
   3.406904933124936*^9, 3.406904948734311*^9}, {3.406905045124936*^9, 
   3.406905045437436*^9}, {3.406909714453061*^9, 3.406909716109311*^9}, {
   3.406910025218686*^9, 3.406910043859311*^9}, {3.406910084374936*^9, 
   3.406910118640561*^9}, {3.406910246749936*^9, 3.406910246984311*^9}, {
   3.406915695671811*^9, 3.406915712781186*^9}, {3.406915800765561*^9, 
   3.406915814015561*^9}, {3.406916674578061*^9, 3.406916702015561*^9}, {
   3.406918014890561*^9, 3.406918064124936*^9}, {3.406918134109311*^9, 
   3.406918163578061*^9}, {3.406918492749936*^9, 3.406918494046811*^9}, {
   3.406922382093686*^9, 3.406922384234311*^9}, {3.4070836177029257`*^9, 
   3.4070836245779257`*^9}, 3.4070870374529257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["smoothenImage:",
  FontWeight->"Bold"],
 "\nsmoothen the image."
}], "Subsubtitle",
 CellChangeTimes->{{3.4070837214216757`*^9, 3.4070837806716757`*^9}, {
   3.4070838173591757`*^9, 3.4070838750154257`*^9}, {3.4070839620154257`*^9, 
   3.4070839833279257`*^9}, {3.4070841972029257`*^9, 3.407084245468551*^9}, 
   3.4070870374529257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "smoothenImage", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"smoothenImage", "[", 
   RowBox[{"slice_", ",", " ", "sliceSize_", ",", " ", "ratio_"}], "]"}], " ",
   ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"eigs", ",", " ", "smooth"}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{
     RowBox[{"eigs", " ", "=", " ", 
      RowBox[{"getEigen", "[", 
       RowBox[{"getLocalStructureTensor2", "[", 
        RowBox[{
         RowBox[{"getGradientField2", "[", "slice", "]"}], ",", " ", "2"}], 
        "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"smooth", " ", "=", " ", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"x", " ", "<", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"1", ",", "1"}], "]"}]}], " ", ")"}], " ", "||", " ", 
            RowBox[{"(", 
             RowBox[{"x", " ", ">", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"1", ",", "2"}], "]"}]}], ")"}], " ", "||", " ", 
            RowBox[{"(", 
             RowBox[{"y", " ", "<", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"2", ",", "1"}], "]"}]}], " ", ")"}], " ", "||", " ", 
            RowBox[{"(", 
             RowBox[{"y", " ", ">", " ", 
              RowBox[{"sliceSize", "[", 
               RowBox[{"2", ",", "2"}], "]"}]}], ")"}]}], ")"}], ",", 
          "\[IndentingNewLine]", "0", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "-", " ", "ratio"}], ")"}], " ", "*", " ", 
            RowBox[{"slice", "\[LeftDoubleBracket]", 
             RowBox[{"x", ",", " ", "y"}], "\[RightDoubleBracket]"}]}], " ", 
           "+", " ", 
           RowBox[{"ratio", " ", "*", " ", 
            RowBox[{"getIdealDensity", "[", 
             RowBox[{"slice", ",", " ", 
              RowBox[{"{", 
               RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", "eigs"}], 
             "]"}]}]}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"x", ",", " ", "1", ",", " ", 
          RowBox[{
           RowBox[{"Dimensions", "[", "slice", "]"}], "\[LeftDoubleBracket]", 
           "1", "\[RightDoubleBracket]"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"y", ",", " ", "1", ",", " ", 
          RowBox[{
           RowBox[{"Dimensions", "[", "slice", "]"}], "\[LeftDoubleBracket]", 
           "2", "\[RightDoubleBracket]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "smooth"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.406909725156186*^9, 3.406909862468686*^9}, 
   3.406909944359311*^9, {3.406910253984311*^9, 3.406910397703061*^9}, {
   3.406910461531186*^9, 3.406910474781186*^9}, {3.406910616781186*^9, 
   3.406910644078061*^9}, {3.406910995593686*^9, 3.406910997156186*^9}, {
   3.406911218140561*^9, 3.406911221921811*^9}, {3.406911311515561*^9, 
   3.406911314921811*^9}, 3.406913911687436*^9, {3.406914510187436*^9, 
   3.406914537515561*^9}, {3.406917689265561*^9, 3.406917690546811*^9}, {
   3.406922888453061*^9, 3.406922898406186*^9}, {3.406923170624936*^9, 
   3.406923171906186*^9}, 3.406923960265561*^9, {3.406924004062436*^9, 
   3.406924011562436*^9}, 3.4070870374529257`*^9, {3.4070871346716757`*^9, 
   3.407087143437301*^9}, {3.407088651343551*^9, 3.4070886521091757`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["smoothenImageGradientDescent:",
  FontWeight->"Bold"],
 "\nsmoothen the image using a gradient descent"
}], "Subsubtitle",
 CellChangeTimes->{{3.4070837214216757`*^9, 3.4070837806716757`*^9}, {
   3.4070838173591757`*^9, 3.4070838750154257`*^9}, {3.4070839620154257`*^9, 
   3.4070839833279257`*^9}, {3.4070841972029257`*^9, 3.407084245468551*^9}, 
   3.4070870374529257`*^9, {3.407087103343551*^9, 3.4070871132966757`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "smoothenImageGradientDescent", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"smoothenImageGradientDescent", "[", 
   RowBox[{"slice_", ",", " ", "sliceSize_", ",", " ", "changePercent_"}], 
   "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"smooth", ",", " ", "diff", ",", " ", "newslice"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"smooth", " ", "=", " ", 
      RowBox[{"smoothenImage", "[", 
       RowBox[{"slice", ",", " ", "sliceSize", ",", " ", "1.0"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"diff", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"diff", " ", "=", " ", 
         RowBox[{"Append", "[", 
          RowBox[{"diff", ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Abs", "[", 
              RowBox[{
               RowBox[{"slice", "\[LeftDoubleBracket]", 
                RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], " ", "-", 
               " ", 
               RowBox[{"smooth", "\[LeftDoubleBracket]", 
                RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}]}], "]"}], 
             ",", " ", 
             RowBox[{"{", 
              RowBox[{"x", ",", " ", "y"}], "}"}]}], "}"}]}], "]"}]}], ";"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", " ", 
         RowBox[{"sliceSize", "[", 
          RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
         RowBox[{"sliceSize", "[", 
          RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"y", ",", " ", 
         RowBox[{"sliceSize", "[", 
          RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
         RowBox[{"sliceSize", "[", 
          RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"diff", " ", "=", " ", 
      RowBox[{"Take", "[", 
       RowBox[{
        RowBox[{"Sort", "[", 
         RowBox[{"diff", ",", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ",
             ">", " ", 
            RowBox[{
            "#2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
           " ", "&"}]}], "]"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"1", ",", " ", 
          RowBox[{"Round", "[", 
           RowBox[{
            RowBox[{"Length", "[", "diff", "]"}], "*", " ", 
            RowBox[{"changePercent", " ", "/", " ", "100"}]}], "]"}]}], 
         "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newslice", " ", "=", " ", "slice"}], ";", "\[IndentingNewLine]",
      
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"newslice", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{"#", "\[LeftDoubleBracket]", 
             RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", " ", 
            RowBox[{"#", "\[LeftDoubleBracket]", 
             RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], " ", "=", " ", 
          RowBox[{"smooth", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{"#", "\[LeftDoubleBracket]", 
             RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", " ", 
            RowBox[{"#", "\[LeftDoubleBracket]", 
             RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}]}], " ", ";"}], "&"}], ",", " ", "diff"}],
       "]"}], ";", "\[IndentingNewLine]", "newslice"}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.406909725156186*^9, 3.406909862468686*^9}, 
   3.406909944359311*^9, {3.406910253984311*^9, 3.406910397703061*^9}, {
   3.406910461531186*^9, 3.406910474781186*^9}, {3.406910616781186*^9, 
   3.406910644078061*^9}, {3.406910995593686*^9, 3.406910997156186*^9}, {
   3.406911218140561*^9, 3.406911221921811*^9}, {3.406911311515561*^9, 
   3.406911314921811*^9}, 3.406913911687436*^9, {3.406914510187436*^9, 
   3.406914537515561*^9}, {3.406917689265561*^9, 3.406917690546811*^9}, {
   3.406922888453061*^9, 3.406922898406186*^9}, {3.406923170624936*^9, 
   3.406923171906186*^9}, 3.406923960265561*^9, {3.406924004062436*^9, 
   3.406924011562436*^9}, 3.4070870374529257`*^9, {3.407087117656051*^9, 
   3.4070872757029257`*^9}, {3.4070873129216757`*^9, 3.407087405218551*^9}, {
   3.4070874732966757`*^9, 3.4070875080466757`*^9}, {3.407087755374801*^9, 
   3.4070877777966757`*^9}, {3.4070878266091757`*^9, 3.407087832062301*^9}, {
   3.407087873937301*^9, 3.4070878861404257`*^9}, {3.4070879331091757`*^9, 
   3.4070880019529257`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Statistical Profiles", "Subtitle",
 CellChangeTimes->{3.4070870374529257`*^9}],

Cell[TextData[{
 StyleBox["getPriorVal",
  FontWeight->"Bold"],
 "\nGets the earlier value in the histogram table"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870374529257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getPriorVal", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getPriorVal", "[", 
   RowBox[{"hist_", ",", " ", "currentIndex_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"priorVal", ",", " ", "cVal", ",", " ", "pVal", ",", " ", "i"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"priorVal", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"cVal", " ", "=", " ", 
      RowBox[{"hist", "\[LeftDoubleBracket]", 
       RowBox[{"currentIndex", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"i", " ", "=", " ", 
      RowBox[{"currentIndex", " ", "-", " ", "1"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"i", " ", ">=", " ", "1"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"priorVal", " ", "=", " ", 
         RowBox[{"hist", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Break", "[", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"i", "--"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "priorVal"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{3.4070870374529257`*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getNextVal",
  FontWeight->"Bold"],
 "\nGets the next value in the histogram table"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870374529257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getNextVal", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getNextVal", "[", 
   RowBox[{"hist_", ",", " ", "currentIndex_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"nextVal", ",", " ", "cVal", ",", " ", "nVal", ",", " ", "i"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"nextVal", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"cVal", " ", "=", " ", 
      RowBox[{"hist", "\[LeftDoubleBracket]", 
       RowBox[{"currentIndex", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"i", " ", "=", " ", 
      RowBox[{"currentIndex", " ", "+", " ", "1"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"i", " ", "<=", " ", 
        RowBox[{"Length", "[", "hist", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"nVal", " ", "=", " ", 
         RowBox[{"hist", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"nVal", " ", "\[NotEqual]", " ", "cVal"}], ",", " ", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", " ", 
            RowBox[{
             RowBox[{"nextVal", " ", "=", " ", "nVal"}], ";", " ", 
             RowBox[{"Break", "[", "]"}]}]}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"i", "++"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "nextVal"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{3.4070870374529257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["smudgeHistogram",
  FontWeight->"Bold"],
 "\nSmudges a histogram by averaging the neighbors"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870374529257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "smudgeHistogram", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"smudgeHistogram", "[", "hist_", "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "newHist", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newHist", " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{"0", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Length", "[", "hist", "]"}], "-", "1"}], "}"}], ",", " ", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"newHist", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", "1"}], "\[RightDoubleBracket]"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"(", " ", 
           RowBox[{
            RowBox[{"hist", "\[LeftDoubleBracket]", 
             RowBox[{"i", ",", "1"}], "\[RightDoubleBracket]"}], " ", "+", 
            " ", 
            RowBox[{"hist", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"i", "+", "1"}], ",", "1"}], 
             "\[RightDoubleBracket]"}]}], ")"}], " ", "/", " ", "3.0"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"newHist", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", "2"}], "\[RightDoubleBracket]"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"hist", "\[LeftDoubleBracket]", 
             RowBox[{"i", ",", "2"}], "\[RightDoubleBracket]"}], " ", "+", 
            " ", 
            RowBox[{"hist", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{"i", "+", "1"}], ",", "2"}], 
             "\[RightDoubleBracket]"}]}], ")"}], " ", "/", " ", "3.0"}]}], 
        ";"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "1", ",", " ", 
         RowBox[{
          RowBox[{"Length", "[", "hist", "]"}], "-", "1"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "newHist"}]}],
    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{3.4070870374529257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getPeakCount",
  FontWeight->"Bold"],
 "\nCounts the number of peaks"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870374529257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getPeakCount", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"getPeakCount", "[", 
   RowBox[{"hist_", ",", "s_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "priorVal", ",", "currVal", ",", "nextVal", ",", "n", ",", " ", 
      "newHist"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newHist", " ", "=", " ", "hist"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"newHist", " ", "=", " ", 
        RowBox[{"smudgeHistogram", "[", "newHist", "]"}]}], ",", " ", 
       RowBox[{"{", "s", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"n", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"priorVal", "=", 
         RowBox[{"getPriorVal", "[", 
          RowBox[{"newHist", ",", " ", "i"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"currVal", "=", 
         RowBox[{"newHist", "\[LeftDoubleBracket]", 
          RowBox[{"i", ",", "2"}], "\[RightDoubleBracket]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nextVal", "=", 
         RowBox[{"getNextVal", "[", 
          RowBox[{"newHist", ",", " ", "i"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"currVal", " ", ">", " ", "priorVal"}], " ", ")"}], "&&", 
           " ", 
           RowBox[{"(", " ", 
            RowBox[{"currVal", " ", ">", " ", "nextVal"}], ")"}]}], ",", " ", 
          
          RowBox[{"n", "++"}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "[", "newHist", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "n"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",\

 CellChangeTimes->{3.4070870374529257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getTypeDurationGraph",
  FontWeight->"Bold"],
 "\nDisplays a graph of how long a skeletal point stays as a skeletal type"
}], "Subsubtitle",
 CellChangeTimes->{3.4070870374529257`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getTypeDurationGraph", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getTypeDurationGraph", "[", 
   RowBox[{"stats_", ",", " ", "types_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"image", ",", " ", "newStats"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"image", " ", "=", " ", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newStats", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"stats", ",", " ", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"types", ",", " ", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"image", "\[LeftDoubleBracket]", " ", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
            " ", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], "++"}], ";"}], "&"}], ",", "newStats"}],
       "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"ListDensityPlot", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"#", "&"}], ",", " ", "image", ",", " ", "1"}], "]"}], ",", 
       " ", 
       RowBox[{"Mesh", "\[Rule]", "True"}], ",", " ", 
       RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}], ",", 
       RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], " ", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{3.407087037468551*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getTypeLengthSummationGraph",
  FontWeight->"Bold"],
 "\nDisplays a graph of the cumulative length / area of a curve or surface"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037468551*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getTypeLengthSummationGraph", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getTypeLengthSummationGraph", "[", 
   RowBox[{"stats_", ",", " ", "types_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"image", ",", " ", "newStats"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"image", " ", "=", " ", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newStats", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"stats", ",", " ", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"types", ",", " ", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"image", "\[LeftDoubleBracket]", " ", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
            " ", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], " ", "+=", "  ", 
          RowBox[{
          "#", "\[LeftDoubleBracket]", "6", "\[RightDoubleBracket]"}]}], 
         ";"}], "&"}], ",", "newStats"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"ListDensityPlot", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"#", "&"}], ",", " ", "image", ",", " ", "1"}], "]"}], ",", 
       " ", 
       RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
       RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}], ",", " ", 
       RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{3.407087037468551*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getThicknessHistogram",
  FontWeight->"Bold"],
 "\nGets the list of thicknesses and their frequencies"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037468551*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getThicknessHistogram", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"getThicknessHistogram", "[", "list_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tList", ",", "plot"}], "}"}], ",", 
    RowBox[{
     RowBox[{"tList", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", 
          RowBox[{
           RowBox[{"sliceSize", "[", 
            RowBox[{"1", ",", "2"}], "]"}], " ", 
           RowBox[{"sliceSize", "[", 
            RowBox[{"2", ",", "2"}], "]"}]}]}], "}"}]}], "]"}]}], ";", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"tList", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
             "+", "1"}], "\[RightDoubleBracket]"}], "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
             "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
             ",", 
             RowBox[{
              RowBox[{
               RowBox[{"tList", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
                  "+", "1"}], "\[RightDoubleBracket]"}], 
               "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "+", 
              "1"}]}], "}"}]}], ";"}], ")"}], "&"}], ",", "list"}], "]"}], 
     ";", 
     RowBox[{"tList", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"tList", ",", 
        RowBox[{
         RowBox[{
          RowBox[{
          "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          "\[NotEqual]", 
          RowBox[{"-", "1"}]}], "&"}]}], "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "tList", "]"}], ">", "0"}], ",", 
       RowBox[{"plot", "=", 
        RowBox[{"ListPlot", "[", 
         RowBox[{"tList", ",", 
          RowBox[{"Joined", "\[Rule]", "True"}], ",", 
          RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
          RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}]}], 
      "]"}], ";", 
     RowBox[{"{", 
      RowBox[{"tList", ",", "plot"}], "}"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{3.407087037468551*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getPeakCountForImage",
  FontWeight->"Bold"],
 "\nGets a plot of the number of histogram peaks there are at each point"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037468551*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getPeakCountForImage", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getPeakCountForImage", "[", 
   RowBox[{
   "stats_", ",", " ", "types_", ",", " ", "skel_", ",", " ", "noiseValue_"}],
    "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"newStats", ",", " ", "img"}], "}"}], ",", "\[IndentingNewLine]",
     
    RowBox[{
     RowBox[{"newStats", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"stats", ",", " ", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"types", ",", " ", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"img", " ", "=", " ", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"skel", "\[LeftDoubleBracket]", 
               RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], " ", ">", 
              " ", "0"}], ",", " ", "\[IndentingNewLine]", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", "thicknessData", "}"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"thicknessData", " ", "=", " ", 
                 RowBox[{"getThicknessListAndGraph", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"x", ",", "y"}], "}"}], ",", " ", "stats", ",", 
                   " ", "types"}], "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"img", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], " ", 
                 "=", " ", 
                 RowBox[{"getPeakCount", "[", 
                  RowBox[{
                   RowBox[{"thicknessData", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], " ", 
                   ",", "noiseValue"}], "]"}]}], ";"}]}], 
              "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], 
           ";"}], "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
            RowBox[{"sliceSize", "[", 
             RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ";"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", " ", 
         RowBox[{"sliceSize", "[", 
          RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
         RowBox[{"sliceSize", "[", 
          RowBox[{"1", ",", "2"}], "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "img"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{3.407087037468551*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getThicknessListAndGraph",
  FontWeight->"Bold"],
 "\nGets the list of thickness information and the graph of how the thickness \
changes along the grayscale value"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037468551*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getThicknessListAndGraph", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getThicknessListAndGraph", "[", 
    RowBox[{"p_", ",", "stats_", ",", "types_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"d", ",", "newStats", ",", "plot"}], "}"}], ",", 
     RowBox[{
      RowBox[{"newStats", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"stats", ",", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"types", ",", 
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
           "]"}], "&"}]}], "]"}]}], ";", 
      RowBox[{"d", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"newStats", ",", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
            "\[Equal]", 
            RowBox[{
            "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "&&",
            
           RowBox[{
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
            "\[Equal]", 
            RowBox[{
            "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
          "&"}]}], "]"}]}], ";", 
      RowBox[{"d", "=", 
       RowBox[{"Sort", "[", 
        RowBox[{"d", ",", 
         RowBox[{
          RowBox[{
           RowBox[{
           "#1", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}], "<", 
           
           RowBox[{
           "#2", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}]}], 
          "&"}]}], "]"}]}], ";", 
      RowBox[{"d", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"#1", "\[LeftDoubleBracket]", 
           RowBox[{"{", 
            RowBox[{"4", ",", "5"}], "}"}], "\[RightDoubleBracket]"}], "&"}], 
         ")"}], "/@", "d"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "d", "]"}], ">", "0"}], ",", 
        RowBox[{"plot", "=", 
         RowBox[{"ListPlot", "[", 
          RowBox[{"d", ",", 
           RowBox[{"Joined", "\[Rule]", "True"}], ",", 
           RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
           RowBox[{"AxesLabel", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<Grayscale\>\"", ",", "\"\<Thickness\>\""}], 
             "}"}]}]}], "]"}]}]}], "]"}], ";", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"d", ",", 
          RowBox[{"{", "plot", "}"}]}], "}"}], ",", 
        RowBox[{"getThicknessHistogram", "[", "d", "]"}]}], "}"}]}]}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.407087037468551*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["displayThicknessStatisticsPerPoint",
  FontWeight->"Bold"],
 "\nDisplays the thickness statistics graph per point"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037468551*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "displayThicknessStatisticsPerPoint", "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"displayThicknessStatisticsPerPoint", "[", 
    RowBox[{"p_", ",", "stats_", ",", "types_", ",", "skel_", ",", "img_"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "d", ",", "arr", ",", "s0", ",", "s1", ",", "s2", ",", "s3", ",", "s4", 
       ",", "thicknessInfo"}], "}"}], ",", 
     RowBox[{
      RowBox[{"newStats", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"stats", ",", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"types", ",", 
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
           "]"}], "&"}]}], "]"}]}], ";", 
      RowBox[{"d", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"#1", "\[LeftDoubleBracket]", 
           RowBox[{"{", 
            RowBox[{"2", ",", "3"}], "}"}], "\[RightDoubleBracket]"}], "&"}], 
         ")"}], "/@", "newStats"}]}], ";", 
      RowBox[{"arr", "=", 
       RowBox[{"getBlankImage", "[", "]"}]}], ";", 
      RowBox[{"Scan", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"arr", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
             
            RowBox[{
            "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           "\[RightDoubleBracket]"}], "++"}], "&"}], ",", "d"}], "]"}], ";", 
      RowBox[{"thicknessInfo", "=", 
       RowBox[{"getThicknessListAndGraph", "[", 
        RowBox[{"p", ",", "stats", ",", "types"}], "]"}]}], ";", 
      RowBox[{"s0", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", 
          RowBox[{
          "\"\<Thickness Histogram (Peak Count {0, 1, 2, 3}= {\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"getPeakCount", "[", 
             RowBox[{
              RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
               RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", "0"}],
              "]"}], "]"}], "<>", "\"\<,\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"getPeakCount", "[", 
             RowBox[{
              RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
               RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", "1"}],
              "]"}], "]"}], "<>", "\"\<,\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"getPeakCount", "[", 
             RowBox[{
              RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
               RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", "2"}],
              "]"}], "]"}], "<>", "\"\<,\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"getPeakCount", "[", 
             RowBox[{
              RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
               RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", "3"}],
              "]"}], "]"}], "<>", "\"\<}\>\""}]}]}], "]"}]}], ";", 
      RowBox[{"s1", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"thicknessInfo", "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", "\"\<Thickness Variation\>\""}]}], 
        "]"}]}], ";", 
      RowBox[{"s2", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"img", ",", 
             RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
             RowBox[{"Mesh", "\[Rule]", "False"}]}], "]"}], ",", 
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
              RowBox[{"PointSize", "[", "0.02`", "]"}], ",", 
              RowBox[{"Point", "[", 
               RowBox[{
                RowBox[{"Reverse", "[", "p", "]"}], "+", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.5`"}], ",", 
                  RowBox[{"-", "0.5`"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", "\"\<Source Image\>\""}]}], "]"}]}], 
      ";", 
      RowBox[{"s3", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"arr", ",", 
             RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], ",",
            
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
              RowBox[{"PointSize", "[", "0.02`", "]"}], ",", 
              RowBox[{"Point", "[", 
               RowBox[{
                RowBox[{"Reverse", "[", "p", "]"}], "+", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.5`"}], ",", 
                  RowBox[{"-", "0.5`"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", "\"\<Curve Duration\>\""}]}], 
        "]"}]}], ";", 
      RowBox[{"s4", "=", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ListDensityPlot", "[", 
            RowBox[{"skel", ",", 
             RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}], ",",
            
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RGBColor", "[", 
               RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
              RowBox[{"PointSize", "[", "0.02`", "]"}], ",", 
              RowBox[{"Point", "[", 
               RowBox[{
                RowBox[{"Reverse", "[", "p", "]"}], "+", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "0.5`"}], ",", 
                  RowBox[{"-", "0.5`"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", "\"\<Grayscale Skeleton\>\""}]}], 
        "]"}]}], ";", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"GraphicsRow", "[", 
         RowBox[{"{", 
          RowBox[{"s0", ",", "s1"}], "}"}], "]"}], ",", 
        RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"\"\<Point :{\>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "]"}],
           "<>", "\"\<,\>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{
           "p", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "]"}],
           "<>", "\"\<}\>\""}]}]}], "]"}], ";", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"GraphicsRow", "[", 
         RowBox[{"{", 
          RowBox[{"s2", ",", "s3", ",", "s4"}], "}"}], "]"}], ",", 
        RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
       "]"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.407087037468551*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["displayThicknessStatisticsPerPointSet",
  FontWeight->"Bold"],
 "\nDisplays the thickness statistics graph for a set of points"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037468551*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "displayThicknessStatisticsPerPointSet", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"displayThicknessStatisticsPerPointSet", "[", 
    RowBox[{
    "points_", ",", " ", "stats_", ",", " ", "types_", ",", "skel_", ",", " ",
      "img_"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Scan", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"displayThicknessStatisticsPerPoint", "[", 
        RowBox[{
        "#", ",", " ", "stats", ",", " ", "types", ",", " ", "skel", ",", " ",
          "img"}], "]"}], ";"}], "&"}], ",", "points"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{3.407087037468551*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["displayThicknessStatistics",
  FontWeight->"Bold"],
 "\nDisplays the thickness statistics for all the points"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037468551*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "displayThicknessStatistics", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"displayThicknessStatistics", "[", 
   RowBox[{
   "stats_", ",", " ", "types_", ",", " ", "pointsOfInterest_", ",", " ", 
    "skel_", ",", " ", "img_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "image", ",", " ", "points", ",", " ", "lists", ",", " ", "n", ",", " ", 
      "trueList", ",", " ", "newStats"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"image", " ", "=", " ", 
      RowBox[{"getBlankImage", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newStats", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"stats", ",", " ", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"types", ",", " ", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"points", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"lists", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"points", " ", "=", " ", 
          RowBox[{"Union", "[", 
           RowBox[{"points", ",", " ", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
              "}"}], "}"}]}], "]"}]}], ";"}], "&"}], ",", " ", "newStats"}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"p", ",", " ", "pointData", ",", " ", "list"}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"p", " ", "=", " ", "#"}], ";", "\[IndentingNewLine]", 
            RowBox[{"list", " ", "=", " ", 
             RowBox[{
              RowBox[{"getThicknessListAndGraph", "[", 
               RowBox[{"p", ",", " ", "stats", ",", " ", "types"}], "]"}], 
              "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"lists", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"lists", ",", " ", "list"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"displayThicknessStatisticsPerPoint", "[", 
             RowBox[{
             "p", ",", " ", "stats", ",", " ", "types", ",", " ", "skel", ",",
               "img"}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", " ", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{"pointsOfInterest", ",", " ", "p"}], "]"}], " ", ",", 
              " ", 
              RowBox[{"displayThicknessStatisticsPerPoint", "[", 
               RowBox[{
               "p", ",", " ", "stats", ",", " ", "types", ",", " ", "skel", 
                ",", "img"}], "]"}]}], "]"}]}]}], "]"}], ";"}], "&"}], ",", 
       " ", "\[IndentingNewLine]", "points"}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"lists", " ", "=", " ", 
      RowBox[{"Append", "[", 
       RowBox[{"lists", ",", " ", 
        RowBox[{"{", 
         RowBox[{"PlotJoined", "\[Rule]", "True"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"lists", " ", "=", " ", 
      RowBox[{"Append", "[", 
       RowBox[{"lists", ",", " ", 
        RowBox[{"{", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"350", ",", " ", "350"}], "}"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Apply", "[", 
      RowBox[{"MultipleListPlot", ",", "lists"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{3.407087037468551*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["displayStatistics",
  FontWeight->"Bold"],
 "\nDisplays an analysis of the statistics"
}], "Subsubtitle",
 CellChangeTimes->{3.407087037468551*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "displayStatistics", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"displayStatistics", "[", "stats_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"s1", ",", "s2", ",", "s3", ",", "s4"}], "}"}], ",", 
    RowBox[{
     RowBox[{"s1", "=", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"getTypeDurationGraph", "[", 
         RowBox[{"stats", ",", 
          RowBox[{"{", "1", "}"}]}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", "\"\<Point Duration\>\""}]}], "]"}]}],
      ";", 
     RowBox[{"s2", "=", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"getTypeDurationGraph", "[", 
         RowBox[{"stats", ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3"}], "}"}]}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", "\"\<Curve Duration\>\""}]}], "]"}]}],
      ";", 
     RowBox[{"s3", "=", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"getTypeLengthSummationGraph", "[", 
         RowBox[{"stats", ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3"}], "}"}]}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", "\"\<Curve Length Summation\>\""}]}], 
       "]"}]}], ";", 
     RowBox[{"s4", "=", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"getTypeDurationGraph", "[", 
         RowBox[{"stats", ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "5"}], "}"}]}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", "\"\<Surface Duration\>\""}]}], 
       "]"}]}], ";", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"GraphicsGrid", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"s3", ",", "s4"}], "}"}]}], "}"}], "]"}], ",", 
       RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
      "]"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{3.407087037468551*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Gets the statistics of all the images and stores them in a file\
\>", "Subsubtitle",
 CellChangeTimes->{3.407087037468551*^9}],

Cell["\<\
Do[Print[i];
  Clear[slice];
  Clear[sliceSize];
  inputs=getInput[i];
  slice=inputs\[LeftDoubleBracket]1\[RightDoubleBracket];
  sliceSize=inputs\[LeftDoubleBracket]2\[RightDoubleBracket];
  Clear[inputs];
  finalResult=makeGraySkeleton[slice,1,255,1,3];
  finalImage=finalResult\[LeftDoubleBracket]1\[RightDoubleBracket];
  finalStats=finalResult\[LeftDoubleBracket]2\[RightDoubleBracket];
  Put[finalImage,rootPath<>\"/results/FinalImage\"<>ToString[i]<>\".nb\"];
  Put[finalStats,rootPath<>\"/results/FinalStats\"<>ToString[i]<>\".nb\"];
  ,{i,1,9}
  ]\
\>", "SmallText",
 CellChangeTimes->{3.407087037468551*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Loads the statistics from a file", "Subsubtitle",
 CellChangeTimes->{3.407087037468551*^9}],

Cell["\<\
finalImage = Get[ rootPath<> \"/results/FinalImage3.nb\"];
ListDensityPlot[Map[#/255.0&, finalImage, 1], Mesh\[Rule]False, \
ColorFunctionScaling\[Rule]False, ImageSize\[Rule]{350, 350}];
finalStats = Get[ rootPath<> \"/results/FinalStats3.nb\"];
displayStatistics[finalStats];\
\>", "SmallText",
 CellChangeTimes->{3.407087037468551*^9}],

Cell["\<\
finalResult=makeGraySkeleton[slice,1,255,50,3];
finalImage=finalResult\[LeftDoubleBracket]1\[RightDoubleBracket];
finalStats=finalResult\[LeftDoubleBracket]2\[RightDoubleBracket];
ListDensityPlot[Map[#/255.0&,finalImage,1],Mesh\[Rule]False,\
ColorFunctionScaling\[Rule]False,ImageSize\[Rule]{350,350}];\
\>", "SmallText",
 CellChangeTimes->{3.407087037468551*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Misc Tests", "Subsubtitle",
 CellChangeTimes->{3.407087037468551*^9}],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{28,40},{29,40},{30,40},{31,40}},\
finalStats,{2,3,4},finalImage,slice];\
\>", "SmallText",
 CellChangeTimes->{3.407087037468551*^9}],

Cell["\<\
displayThicknessStatistics[finalStats, {2,3,4}, {},finalImage,slice];\
\>", "SmallText",
 CellChangeTimes->{3.4070870374841757`*^9}],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{36,18},{35,18},{30,54},{48,35},{42,20}\
,{38,8}},finalStats,{2,3,4},finalImage,slice];\
\>", "SmallText",
 CellChangeTimes->{3.4070870374841757`*^9}],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{30,52},{30,51},{31,51},{31,50},{31,49}\
},finalStats,{2,3,4},finalImage,slice];\
\>", "SmallText",
 CellChangeTimes->{3.4070870374841757`*^9}],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{45,40}, {34,49},{31,32}}, finalStats, \
{2,3,4}, finalImage,slice];\
\>", "SmallText",
 CellChangeTimes->{3.4070870374841757`*^9}],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{32,34}, {33,34}, {34,34},{35,34}, \
{36,34}, {37,34}},finalStats,{2,3,4},finalImage,slice];\
\>", "SmallText",
 CellChangeTimes->{3.4070870374841757`*^9}],

Cell["\<\
displayThicknessStatisticsPerPointSet[{{10,28},{32,26},{32,27}, {32,28}, \
{32,29},{32,30} },finalStats,{2,3,4},finalImage,slice];\
\>", "SmallText",
 CellChangeTimes->{3.4070870374841757`*^9}],

Cell["\<\
displayThicknessStatistics[finalStats, {2,3,4}, {}, finalImage, slice];\
\>", "SmallText",
 CellChangeTimes->{3.4070870374841757`*^9}],

Cell["\<\
displayThicknessStatisticsPerPoint[{26,37},finalStats,{2,3,4},finalImage,\
slice];\
\>", "SmallText",
 CellChangeTimes->{3.4070870374841757`*^9}],

Cell["DEBUG : Input 1, (28,40) , (29,40), (30,40), (31,40)", "SmallText",
 CellChangeTimes->{3.4070870374841757`*^9}],

Cell["\<\
peakCount=getPeakCountForImage[finalStats,{2,3,4},finalImage,1];\
\>", "SmallText",
 CellChangeTimes->{3.4070870374841757`*^9}],

Cell["peakCount = Get[rootPath<>\"/results/PeakCount1-0.nb\"];", "SmallText",
 CellChangeTimes->{3.4070870374841757`*^9}],

Cell["\<\
mpc=Max[peakCount];ListDensityPlot[Map[Map[If[#>0,(mpc-#),0]&,#]&,peakCount], \
Mesh\[Rule]False];\
\>", "SmallText",
 CellChangeTimes->{3.4070870374841757`*^9}],

Cell["\<\
filteredImage=Table[0,{x,sliceSize[1,1]-1,sliceSize[1,2]+1},{y,sliceSize[2,1]-\
1,sliceSize[2,2]+1}];
dMap=Flatten[Table[If[(finalImage\[LeftDoubleBracket]x,y\[RightDoubleBracket]>\
0)&&(peakCount\[LeftDoubleBracket]x,y\[RightDoubleBracket]\[Equal]1),{x,y},{}]\
,{x,sliceSize[1,1],sliceSize[1,2]},{y,sliceSize[2,1],sliceSize[2,2]}],1];
dMap=Select[dMap,Length[#]>0&];
Scan[filteredImage\[LeftDoubleBracket]#\[LeftDoubleBracket]1\
\[RightDoubleBracket],#\[LeftDoubleBracket]2\[RightDoubleBracket]\
\[RightDoubleBracket]=finalImage\[LeftDoubleBracket]#\[LeftDoubleBracket]1\
\[RightDoubleBracket],#\[LeftDoubleBracket]2\[RightDoubleBracket]\
\[RightDoubleBracket];&,dMap];
Show[GraphicsArray[{ListDensityPlot[filteredImage/255.0,DisplayFunction\[Rule]\
Identity,Mesh\[Rule]False],ListDensityPlot[slice,DisplayFunction\[Rule]\
Identity,Mesh\[Rule]False],ListDensityPlot[finalImage,DisplayFunction\[Rule]\
Identity,Mesh\[Rule]False]}],DisplayFunction\[Rule]$DisplayFunction];
\
\>", "SmallText",
 CellChangeTimes->{3.4070870374841757`*^9}],

Cell["Put[peakCount,rootPath<>\"/results/PeakCount1-1.nb\"];", "SmallText",
 CellChangeTimes->{3.4070870374841757`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ListContourPlot", "::", "\<\"arrayerr\"\>"}], ":", 
  " ", "\<\"\\!\\(slice\\) must be a valid array.\"\>"}]], "Message", "MSG",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{3.39838762915*^9, 3.4070870374841757`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ListDensityPlot", "::", "\<\"arrayerr\"\>"}], ":", 
  " ", "\<\"\\!\\(slice\\) must be a valid array.\"\>"}]], "Message", "MSG",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{3.3983876293310003`*^9, 3.4070870374841757`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"255", "*", 
   RowBox[{"8098", "/", "50369"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4066387032586594`*^9, 3.4066387307117844`*^9}, {
   3.4066394558211594`*^9, 3.4066394777430344`*^9}, {3.4066397353992844`*^9, 
   3.4066397500086594`*^9}, 3.4070870374841757`*^9}],

Cell[BoxData["40.9972403660982`"], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.4066387311805344`*^9, 3.4066394784617844`*^9, 3.4066397504930344`*^9, 
   3.406900399953061*^9, 3.406921895812436*^9, 3.406922236249936*^9, 
   3.406922510406186*^9, 3.4070836487966757`*^9, {3.4070870374841757`*^9, 
   3.407087043937301*^9}}],

Cell[BoxData["40.9972403660982`"], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{3.4066387311805344`*^9, 3.4066394784617844`*^9, 
  3.4066397504930344`*^9, 3.406900399953061*^9, 3.406921895812436*^9, 
  3.406922236249936*^9, 3.406922510406186*^9, 3.4070836487966757`*^9, 
  3.4070870374841757`*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["GraphCut", "Subtitle",
 CellChangeTimes->{{3.407088596218551*^9, 3.4070885973279257`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getColor", "[", "s_", "]"}], " ", ":=", " ", 
   RowBox[{"RGBColor", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SuperscriptBox["s", "1.5"]}], ")"}], ",", " ", "0", ",", " ", 
     SuperscriptBox["s", "1.5"], ",", "0.5"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getColor", "[", "s_", "]"}], " ", ":=", " ", 
   RowBox[{"RGBColor", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SuperscriptBox["s", "3"]}], ")"}], ",", " ", 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SuperscriptBox["s", "3"]}], ")"}], ",", " ", 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SuperscriptBox["s", "3"]}], ")"}], ",", "0.5"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.407093164622351*^9, 3.407093190903601*^9}, {
  3.4070932969817257`*^9, 3.407093307466101*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["getGraph:",
  FontWeight->"Bold"],
 "\nGets a graph based on how well a points neighbors align with the \
structure tensors."
}], "Subsubtitle",
 CellChangeTimes->{{3.4070837214216757`*^9, 3.4070837806716757`*^9}, {
   3.4070838173591757`*^9, 3.4070838750154257`*^9}, {3.4070839620154257`*^9, 
   3.4070839833279257`*^9}, {3.4070841972029257`*^9, 3.407084245468551*^9}, 
   3.4070870374529257`*^9, {3.407087103343551*^9, 3.4070871132966757`*^9}, {
   3.407088987343551*^9, 3.4070890018904257`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getGraph", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getGraph", "[", 
   RowBox[{"slice_", ",", " ", "radius_"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "eigs", ",", " ", "distances", ",", " ", "node", ",", " ", "graph"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"eigs", " ", "=", " ", 
      RowBox[{"getEigen", "[", 
       RowBox[{"getLocalStructureTensor2", "[", 
        RowBox[{
         RowBox[{"getGradientField2", "[", "slice", "]"}], ",", " ", 
         "radius"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"graph", " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "1", ",", " ", 
          RowBox[{
           RowBox[{"Dimensions", "[", "slice", "]"}], "\[LeftDoubleBracket]", 
           "1", "\[RightDoubleBracket]"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"y", ",", " ", "1", ",", " ", 
          RowBox[{
           RowBox[{"Dimensions", "[", "slice", "]"}], "\[LeftDoubleBracket]", 
           "2", "\[RightDoubleBracket]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"distances", " ", "=", " ", 
         RowBox[{"getDistancesNormal", "[", 
          RowBox[{
           RowBox[{"eigs", "\[LeftDoubleBracket]", 
            RowBox[{"x", ",", "y", ",", "2", ",", "1"}], 
            "\[RightDoubleBracket]"}], ",", " ", 
           RowBox[{"eigs", "\[LeftDoubleBracket]", 
            RowBox[{"x", ",", "y", ",", "2", ",", "2"}], 
            "\[RightDoubleBracket]"}], ",", " ", 
           RowBox[{"eigs", "\[LeftDoubleBracket]", 
            RowBox[{"x", ",", "y", ",", "1", ",", "1"}], 
            "\[RightDoubleBracket]"}], ",", " ", 
           RowBox[{"eigs", "\[LeftDoubleBracket]", 
            RowBox[{"x", ",", "y", ",", "1", ",", "2"}], 
            "\[RightDoubleBracket]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"node", " ", "=", " ", 
         RowBox[{"Map", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 " ", "\[Equal]", " ", "0"}], ",", " ", "0", ",", 
                FractionBox[
                 RowBox[{"eigs", "\[LeftDoubleBracket]", 
                  RowBox[{"x", ",", " ", "y", ",", " ", "1", ",", " ", "2"}], 
                  "\[RightDoubleBracket]"}], 
                 SuperscriptBox[
                  RowBox[{
                  "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                   "2"]]}], "]"}], ",", " ", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
             "}"}], " ", "&"}], ",", "distances"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"graph", "\[LeftDoubleBracket]", 
          RowBox[{"x", ",", " ", "y"}], "\[RightDoubleBracket]"}], " ", "=", 
         " ", "node"}], ";"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", " ", 
         RowBox[{"sliceSize", "[", 
          RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
         RowBox[{"sliceSize", "[", 
          RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"y", ",", " ", 
         RowBox[{"sliceSize", "[", 
          RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
         RowBox[{"sliceSize", "[", 
          RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "graph"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.4070886056404257`*^9, 3.407088669718551*^9}, {
   3.407088728656051*^9, 3.4070887343279257`*^9}, {3.407088953281051*^9, 
   3.407088976218551*^9}, 3.4070892346091757`*^9, {3.407089378437301*^9, 
   3.407089476093551*^9}, {3.4070895333591757`*^9, 3.407089572124801*^9}, {
   3.4070897395466757`*^9, 3.4070899625466757`*^9}, {3.407090262468551*^9, 
   3.4070902837341757`*^9}, {3.407090325874801*^9, 3.4070903270154257`*^9}, 
   3.407090379937301*^9, {3.4070904443591757`*^9, 3.407090453281051*^9}, {
   3.4070905030779257`*^9, 3.4070905048591757`*^9}, {3.407090598531051*^9, 
   3.4070906141716757`*^9}, {3.407090673187301*^9, 3.407090684249801*^9}, {
   3.4070907296404257`*^9, 3.4070907322654257`*^9}, {3.407093458966101*^9, 
   3.4070934734192257`*^9}, {3.4071037350754757`*^9, 3.407103841091101*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "showGraph", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"showGraph", "[", 
    RowBox[{"graph_", ",", " ", "sliceSize_"}], "]"}], "  ", ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pointPics", ",", " ", "linePics"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"linePics", " ", "=", " ", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Graphics", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"getColor", "[", 
             RowBox[{"graph", "\[LeftDoubleBracket]", 
              RowBox[{"x", ",", "y", ",", " ", "i", ",", " ", "1"}], 
              "\[RightDoubleBracket]"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Line", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Reverse", "[", 
                RowBox[{"{", 
                 RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", " ", 
               RowBox[{"Reverse", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"x", ",", "y"}], "}"}], " ", "+", " ", 
                 RowBox[{"0.5", "*", " ", 
                  RowBox[{"points", "\[LeftDoubleBracket]", 
                   RowBox[{"graph", "\[LeftDoubleBracket]", 
                    RowBox[{"x", ",", "y", ",", " ", "i", ",", " ", "2"}], 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}]}]}], 
                "]"}]}], "}"}], "]"}]}], "}"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "1", ",", " ", "8", ",", " ", "2"}], "}"}], 
         ",", " ", 
         RowBox[{"{", 
          RowBox[{"x", ",", " ", 
           RowBox[{"sliceSize", "[", 
            RowBox[{"1", ",", "1"}], "]"}], ",", " ", 
           RowBox[{"sliceSize", "[", 
            RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"y", ",", " ", 
           RowBox[{"sliceSize", "[", 
            RowBox[{"2", ",", "1"}], "]"}], ",", " ", 
           RowBox[{"sliceSize", "[", 
            RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"Show", "[", "linePics", "]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.4070907882206078`*^9, 3.407090966810162*^9}, {
   3.407091000796712*^9, 3.407091002312434*^9}, {3.4070910644566617`*^9, 
   3.4070910952697535`*^9}, {3.407091720323967*^9, 3.4070918121370544`*^9}, {
   3.4070920412942257`*^9, 3.4070920911067257`*^9}, {3.407092140309851*^9, 
   3.4070922375129757`*^9}, {3.4070923512317257`*^9, 3.407092354653601*^9}, 
   3.4070923962317257`*^9, {3.407092577684851*^9, 3.4070925795129757`*^9}, {
   3.407092672216101*^9, 3.407092707028601*^9}, {3.4070927487942257`*^9, 
   3.407092755716101*^9}, {3.407092811528601*^9, 3.407092860653601*^9}, {
   3.4070928958254757`*^9, 3.4070929020129757`*^9}, 3.4070929329192257`*^9, {
   3.407093136997351*^9, 3.407093157622351*^9}, 3.4070932057317257`*^9, 
   3.4070932526067257`*^9, {3.4071035292004757`*^9, 3.407103543466101*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Scratch",
WindowSize->{839, 745},
WindowMargins->{{1, Automatic}, {0, Automatic}},
CellLabelAutoDelete->True,
Magnification->1,
FrontEndVersion->"6.0 for Microsoft Windows (32-bit) (April 20, 2007)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[590, 23, 84, 1, 83, "Title"],
Cell[677, 26, 105, 1, 49, "Subtitle"],
Cell[785, 29, 121, 2, 29, "Subsubtitle"],
Cell[909, 33, 422, 10, 52, "Input"],
Cell[1334, 45, 227, 6, 52, "Input"],
Cell[CellGroupData[{
Cell[1586, 55, 172, 5, 48, "Subsubtitle"],
Cell[1761, 62, 1672, 45, 199, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3470, 112, 166, 5, 48, "Subsubtitle"],
Cell[3639, 119, 1653, 43, 199, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5329, 167, 162, 5, 48, "Subsubtitle"],
Cell[5494, 174, 772, 19, 112, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6303, 198, 490, 9, 257, "Subsubtitle"],
Cell[6796, 209, 9006, 193, 1012, "Input"],
Cell[CellGroupData[{
Cell[15827, 406, 1993, 46, 212, "Input"],
Cell[17823, 454, 360525, 6133, 203, "Output"],
Cell[378351, 6589, 360873, 6139, 203, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[739273, 12734, 239, 6, 48, "Subsubtitle"],
Cell[739515, 12742, 540, 16, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[740092, 12763, 223, 6, 48, "Subsubtitle"],
Cell[740318, 12771, 2782, 69, 294, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[743137, 12845, 147, 5, 48, "Subsubtitle"],
Cell[743287, 12852, 501, 14, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[743825, 12871, 193, 5, 48, "Subsubtitle"],
Cell[744021, 12878, 2373, 67, 112, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[746431, 12950, 234, 6, 48, "Subsubtitle"],
Cell[746668, 12958, 715, 20, 52, "Input"],
Cell[747386, 12980, 691, 20, 52, "Input"],
Cell[748080, 13002, 1522, 43, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[749639, 13050, 196, 5, 48, "Subsubtitle"],
Cell[749838, 13057, 3574, 79, 552, "Input"],
Cell[753415, 13138, 263, 7, 31, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[753715, 13150, 196, 5, 48, "Subsubtitle"],
Cell[753914, 13157, 3576, 79, 552, "Input"],
Cell[757493, 13238, 265, 7, 31, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[757795, 13250, 195, 5, 48, "Subsubtitle"],
Cell[757993, 13257, 1304, 34, 192, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[759334, 13296, 198, 6, 67, "Subsubtitle"],
Cell[759535, 13304, 3071, 74, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[762643, 13383, 208, 6, 48, "Subsubtitle"],
Cell[762854, 13391, 960, 27, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[763851, 13423, 254, 6, 67, "Subsubtitle"],
Cell[764108, 13431, 1730, 47, 172, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[765875, 13483, 237, 7, 67, "Subsubtitle"],
Cell[766115, 13492, 896, 25, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[767048, 13522, 272, 7, 86, "Subsubtitle"],
Cell[767323, 13531, 1791, 48, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[769151, 13584, 203, 5, 48, "Subsubtitle"],
Cell[769357, 13591, 908, 25, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[770302, 13621, 410, 8, 105, "Subsubtitle"],
Cell[770715, 13631, 1932, 48, 132, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[772684, 13684, 242, 6, 67, "Subsubtitle"],
Cell[772929, 13692, 6546, 167, 332, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[779512, 13864, 215, 5, 48, "Subsubtitle"],
Cell[779730, 13871, 518, 14, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[780285, 13890, 367, 8, 162, "Subsubtitle"],
Cell[780655, 13900, 2378, 56, 332, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[783070, 13961, 193, 5, 48, "Subsubtitle"],
Cell[783266, 13968, 942, 27, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[784245, 14000, 225, 6, 48, "Subsubtitle"],
Cell[784473, 14008, 6389, 153, 452, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[790899, 14166, 321, 7, 67, "Subsubtitle"],
Cell[791223, 14175, 13418, 315, 892, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[804678, 14495, 199, 5, 48, "Subsubtitle"],
Cell[804880, 14502, 16165, 368, 932, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[821082, 14875, 184, 5, 48, "Subsubtitle"],
Cell[821269, 14882, 3486, 91, 292, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[824792, 14978, 217, 6, 48, "Subsubtitle"],
Cell[825012, 14986, 958, 25, 152, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[826007, 15016, 166, 5, 48, "Subsubtitle"],
Cell[826176, 15023, 944, 23, 172, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[827157, 15051, 181, 5, 48, "Subsubtitle"],
Cell[827341, 15058, 906, 23, 172, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[828284, 15086, 180, 5, 48, "Subsubtitle"],
Cell[828467, 15093, 3958, 102, 312, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[832462, 15200, 160, 5, 48, "Subsubtitle"],
Cell[832625, 15207, 2226, 53, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[834888, 15265, 226, 6, 48, "Subsubtitle"],
Cell[835117, 15273, 13334, 319, 1112, "Input"],
Cell[848454, 15594, 68, 1, 31, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[848559, 15600, 187, 5, 48, "Subsubtitle"],
Cell[848749, 15607, 5208, 134, 332, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[853994, 15746, 664, 11, 162, "Subsubtitle"],
Cell[854661, 15759, 16635, 349, 1512, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[871333, 16113, 186, 5, 48, "Subsubtitle"],
Cell[871522, 16120, 2825, 71, 212, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[874384, 16196, 324, 7, 67, "Subsubtitle"],
Cell[874711, 16205, 19158, 443, 1533, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[893906, 16653, 267, 6, 67, "Subsubtitle"],
Cell[894176, 16661, 4061, 104, 292, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[898274, 16770, 88, 1, 49, "Subtitle"],
Cell[898365, 16773, 174, 5, 48, "Subsubtitle"],
Cell[898542, 16780, 3165, 78, 232, "Input"],
Cell[901710, 16860, 6102, 144, 292, "Input"],
Cell[CellGroupData[{
Cell[907837, 17008, 174, 5, 48, "Subsubtitle"],
Cell[908014, 17015, 3189, 80, 252, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[911240, 17100, 155, 5, 48, "Subsubtitle"],
Cell[911398, 17107, 1278, 36, 179, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[912713, 17148, 157, 5, 48, "Subsubtitle"],
Cell[912873, 17155, 1460, 41, 179, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[914370, 17201, 229, 6, 48, "Subsubtitle"],
Cell[914602, 17209, 3254, 84, 272, "Input"],
Cell[917859, 17295, 5848, 151, 352, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[923744, 17451, 229, 6, 48, "Subsubtitle"],
Cell[923976, 17459, 4363, 111, 272, "Input"],
Cell[928342, 17572, 70, 1, 31, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[928449, 17578, 156, 5, 48, "Subsubtitle"],
Cell[928608, 17585, 546, 16, 79, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[929191, 17606, 158, 5, 48, "Subsubtitle"],
Cell[929352, 17613, 564, 17, 79, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[929953, 17635, 182, 5, 48, "Subsubtitle"],
Cell[930138, 17642, 428, 13, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[930603, 17660, 228, 6, 48, "Subsubtitle"],
Cell[930834, 17668, 2663, 64, 212, "Input"],
Cell[933500, 17734, 855, 13, 84, "SmallText"]
}, Open  ]],
Cell[CellGroupData[{
Cell[934392, 17752, 227, 6, 48, "Subsubtitle"],
Cell[934622, 17760, 4654, 110, 252, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[939313, 17875, 211, 5, 48, "Subsubtitle"],
Cell[939527, 17882, 1998, 47, 252, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[941562, 17934, 232, 6, 48, "Subsubtitle"],
Cell[941797, 17942, 2992, 67, 267, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[944838, 18015, 152, 2, 49, "Subtitle"],
Cell[944993, 18019, 177, 5, 48, "Subsubtitle"],
Cell[945173, 18026, 3747, 86, 412, "Input"],
Cell[CellGroupData[{
Cell[948945, 18116, 181, 5, 48, "Subsubtitle"],
Cell[949129, 18123, 34209, 772, 2488, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[983387, 18901, 149, 2, 49, "Subtitle"],
Cell[983539, 18905, 420, 14, 49, "Subsubtitle"],
Cell[983962, 18921, 2380, 66, 323, "Input"],
Cell[CellGroupData[{
Cell[986367, 18991, 522, 15, 68, "Subsubtitle"],
Cell[986892, 19008, 5479, 117, 384, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[992408, 19130, 264, 6, 48, "Subsubtitle"],
Cell[992675, 19138, 1006, 30, 52, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[993718, 19173, 345, 7, 48, "Subsubtitle"],
Cell[994066, 19182, 778, 21, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[994881, 19208, 287, 6, 48, "Subsubtitle"],
Cell[995171, 19216, 708, 19, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[995916, 19240, 342, 7, 48, "Subsubtitle"],
Cell[996261, 19249, 1685, 43, 112, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[997983, 19297, 399, 8, 48, "Subsubtitle"],
Cell[998385, 19307, 4717, 107, 408, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1003139, 19419, 428, 9, 48, "Subsubtitle"],
Cell[1003570, 19430, 4334, 93, 212, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1007941, 19528, 364, 8, 48, "Subsubtitle"],
Cell[1008308, 19538, 3639, 79, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1011984, 19622, 451, 8, 48, "Subsubtitle"],
Cell[1012438, 19632, 4902, 109, 292, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1017389, 19747, 84, 1, 49, "Subtitle"],
Cell[1017476, 19750, 177, 5, 48, "Subsubtitle"],
Cell[1017656, 19757, 1427, 33, 272, "Input"],
Cell[CellGroupData[{
Cell[1019108, 19794, 173, 5, 48, "Subsubtitle"],
Cell[1019284, 19801, 1798, 43, 272, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1021119, 19849, 182, 5, 48, "Subsubtitle"],
Cell[1021304, 19856, 2248, 55, 252, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1023589, 19916, 159, 5, 48, "Subsubtitle"],
Cell[1023751, 19923, 2000, 50, 292, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1025788, 19978, 211, 5, 48, "Subsubtitle"],
Cell[1026002, 19985, 1902, 49, 232, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1027941, 20039, 216, 5, 48, "Subsubtitle"],
Cell[1028160, 20046, 2022, 51, 232, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1030219, 20102, 190, 5, 48, "Subsubtitle"],
Cell[1030412, 20109, 2545, 71, 132, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1032994, 20185, 207, 5, 48, "Subsubtitle"],
Cell[1033204, 20192, 3111, 75, 352, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1036352, 20272, 252, 6, 48, "Subsubtitle"],
Cell[1036607, 20280, 2843, 80, 152, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1039487, 20365, 202, 5, 48, "Subsubtitle"],
Cell[1039692, 20372, 7709, 190, 492, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1047438, 20567, 215, 5, 48, "Subsubtitle"],
Cell[1047656, 20574, 705, 19, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1048398, 20598, 197, 5, 48, "Subsubtitle"],
Cell[1048598, 20605, 4245, 101, 472, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1052880, 20711, 174, 5, 48, "Subsubtitle"],
Cell[1053057, 20718, 1999, 56, 152, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1055093, 20779, 136, 3, 28, "Subsubtitle"],
Cell[1055232, 20784, 628, 16, 219, "SmallText"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1055897, 20805, 97, 1, 28, "Subsubtitle"],
Cell[1055997, 20808, 348, 7, 69, "SmallText"],
Cell[1056348, 20817, 373, 7, 69, "SmallText"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1056758, 20829, 75, 1, 28, "Subsubtitle"],
Cell[1056836, 20832, 182, 4, 24, "SmallText"],
Cell[1057021, 20838, 142, 3, 24, "SmallText"],
Cell[1057166, 20843, 199, 4, 24, "SmallText"],
Cell[1057368, 20849, 192, 4, 24, "SmallText"],
Cell[1057563, 20855, 180, 4, 24, "SmallText"],
Cell[1057746, 20861, 204, 4, 24, "SmallText"],
Cell[1057953, 20867, 203, 4, 24, "SmallText"],
Cell[1058159, 20873, 144, 3, 24, "SmallText"],
Cell[1058306, 20878, 155, 4, 24, "SmallText"],
Cell[1058464, 20884, 117, 1, 24, "SmallText"],
Cell[1058584, 20887, 137, 3, 24, "SmallText"],
Cell[1058724, 20892, 121, 1, 24, "SmallText"],
Cell[1058848, 20895, 171, 4, 24, "SmallText"],
Cell[1059022, 20901, 1045, 18, 114, "SmallText"],
Cell[1060070, 20921, 119, 1, 24, "SmallText"],
Cell[1060192, 20924, 275, 6, 21, "Message"],
Cell[1060470, 20932, 281, 6, 21, "Message"],
Cell[CellGroupData[{
Cell[1060776, 20942, 312, 6, 31, "Input"],
Cell[1061091, 20950, 361, 7, 30, "Output"],
Cell[1061455, 20959, 331, 6, 30, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1061847, 20972, 96, 1, 49, "Subtitle"],
Cell[1061946, 20975, 901, 27, 55, "Input"],
Cell[CellGroupData[{
Cell[1062872, 21006, 525, 10, 48, "Subsubtitle"],
Cell[1063400, 21018, 4789, 106, 318, "Input"],
Cell[1068192, 21126, 3363, 71, 272, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
