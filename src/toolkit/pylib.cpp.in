#include <boost/python.hpp>

#include "Core/volume.h"
#include "Visualization/MeshRenderer.h"
#include "ProteinMorph/SSEHunter.h"
#include <MathTools/Vector3.h>
#include "ProteinMorph/CAlpha.h"
#include <boost/python/suite/indexing/vector_indexing_suite.hpp>
#include "ProteinMorph/SSEEngine.h"
#include "GraphMatch/PDBBond.h"
#include "Readers/SEQReader.h"
#include "Visualization/Display.h"
#include "Visualization/Octree.h"
#include "Visualization/Shapes.h"

using namespace SkeletonMaker;
using namespace Protein_Morph;
using namespace Visualization;

using namespace boost::python;

BOOST_PYTHON_MODULE(@current_pylib@)
{
//    vector_from_python<float>();
    class_<std::vector<float> >("std::vector<float>")
            .def(vector_indexing_suite<std::vector<float> >() );
    class_<std::vector<std::vector<float> > >("std::vector<std::vector<float> >")
            .def(vector_indexing_suite<std::vector<std::vector<float> > >() );

//    class_<std::vector<int> >("std::vector<int>")
//            .def(vector_indexing_suite<std::vector<int> >() );
//    class_<std::vector<std::vector<int> > >("std::vector<std::vector<int> >")
//            .def(vector_indexing_suite<std::vector<std::vector<int> > >() );

//    vector_from_python< std::vector<float> >();

//    vector_from_python<int>();
//    vector_from_python< std::vector<int> >();
//
//    vector_from_python<bool>();
//    vector_from_python< std::vector<bool> >();
//
//    vector_from_python<unsigned long long>();

//    vector_from_python<Vec3F>();
//    vector_from_python< std::vector<Vec3F> >();
//
//
////  tuple3_to_python<Vec3I>();
////  tuple3_to_python<Vec3F>();
//    tuple3_from_python<Vec3I, int>();
//    tuple3_from_python<Vec3F, float>();
//

    void (Volume::*setSpacing)(float, float, float) = &Volume::setSpacing;
    void (Volume::*setOrigin)(float, float, float) = &Volume::setOrigin;
  class_<Volume>("Volume", init<>())
      .def("getOriginX", &Volume::getOriginX)
      .def("getOriginY", &Volume::getOriginY)
      .def("getOriginZ", &Volume::getOriginZ)
      .def("getSizeX", &Volume::getSizeX)
      .def("getSizeY", &Volume::getSizeY)
      .def("getSizeZ", &Volume::getSizeZ)
      .def("getSize", &Volume::getSize)
      .def("getSize", &Volume::cmp)
      .def("setSpacing", setSpacing)
      .def("setOrigin", setOrigin)
      .def("getSpacingX", &Volume::getSpacingX)
      .def("getSpacingY", &Volume::getSpacingY)
      .def("getSpacingZ", &Volume::getSpacingZ)
//      .def("getMin", &Volume::getMin)
//      .def("getMax", &Volume::getMax)
//      .def("getDataAt", getDataAt1)
      .def("buildHistogram", &Volume::buildHistogram)
      .def("getHistogramBinValue", &Volume::getHistogramBinValue)
//
      .def("normalizeVolume", &Volume::Normalize)
//        .def("downsampleVolume", &Volume::DownsampleVolume)
//        .def("cropVolume", &Volume::CropVolume)
      .def("performBinarySkeletonizationJu2007", &Volume::PerformBinarySkeletonizationJu2007, return_value_policy<reference_existing_object>())
      .def("performGrayscaleSkeletonizationAbeysinghe2008", &Volume::PerformGrayscaleSkeletonizationAbeysinghe2008, return_value_policy<reference_existing_object>())     
//        .def("performPreservingGrayscaleSkeletonizationAbeysinghe2008", &Volume::PerformPreservingGrayscaleSkeletonizationAbeysinghe2008, return_value_policy<reference_existing_object>())     
      .def("getMinDensity", &Volume::getMin)
      .def("getMaxDensity", &Volume::getMax)
      .def("setVolume", &Volume::setVolume)
      .def("getVolume", &Volume::getVolume, return_value_policy<reference_existing_object>())      
//      .def("saveFile", &Volume::SaveFile)
      .def("loadFile", &Volume::load)
      .def("saveFile", &Volume::save)

  ;
  
//  class_<RendererBase>("RendererBase", init<>())
////        .def("draw", &RendererBase::draw)
////        .def("drawBoundingBox", &RendererBase::DrawBoundingBox)
////        .def("loadFile", &RendererBase::LoadFile)
////        .def("saveFile", &RendererBase::SaveFile)
////        .def("unload", &RendererBase::unload)
//        .def("selectionRotate", &RendererBase::selectionRotate)
////        .def("selectionObjectCount", &RendererBase::selectionObjectCount)
//        .def("selectionCenterOfMass", &RendererBase::selectionCenterOfMass)
//        .def("selectionMove", &RendererBase::selectionMove)
////        .def("selectionClear", &RendererBase::selectionClear)       
////        .def("selectionToggle", &RendererBase::selectionToggle) 
////        .def("getSupportedLoadFileFormats", &RendererBase::getSupportedLoadFileFormats)
////        .def("getSupportedSaveFileFormats", &RendererBase::getSupportedSaveFileFormats)
////        .def("getMin", &RendererBase::GetMin)
////        .def("getMax", &RendererBase::GetMax)
////        .def("get3DCoordinates", &RendererBase::Get3DCoordinates)
////        .def("setCuttingPlane", &RendererBase::setCuttingPlane) 
////        .def("setSpacing", &RendererBase::setSpacing)
////        .def("getSpacingX", &RendererBase::GetSpacingX)
////        .def("getSpacingY", &RendererBase::GetSpacingY)
////        .def("getSpacingZ", &RendererBase::GetSpacingZ)
////        .def("setOrigin", &RendererBase::setOrigin)
////        .def("getOriginX", &RendererBase::GetOriginX)
////        .def("getOriginY", &RendererBase::GetOriginY)
////        .def("getOriginZ", &RendererBase::GetOriginZ)
////        .def("setDisplayStyle", &RendererBase::setDisplayStyle)
////        .def("setObjectSpecificColoring", &RendererBase::setObjectSpecificColoring)
////        .def("updateBoundingBox", &RendererBase::UpdateBoundingBox)
////        .def("clearOtherHighlights", &RendererBase::clearOtherHighlights)
//    ;
  
    def("drawSphere",   drawSphere);
    def("drawCylinder", drawCylinder);
    def("drawLine",     drawLine);
  
  class_<Display, bases<Volume> >("Display", init<>())
        .def("draw", &Display::draw)
//        .def("drawBoundingBox", &Display::drawBoundingBox)
        .def("enableDraw", &Display::enableDraw)
        .def("loadFile", &Display::load)
//        .def("loadFileRAW", &Display::LoadFileRAW)
        .def("saveFile", &Display::save)
//        .def("unload", &Display::unload)
        .def("selectionRotate", &Display::selectionRotate)
//        .def("selectionObjectCount", &Display::selectionObjectCount)
        .def("selectionCenterOfMass", &Display::selectionCenterOfMass)
        .def("selectionMove", &Display::selectionMove)
//        .def("selectionClear", &Display::selectionClear)     
//        .def("selectionToggle", &Display::selectionToggle)   
//        .def("getSupportedLoadFileFormats", &Display::getSupportedLoadFileFormats)
//        .def("getSupportedSaveFileFormats", &Display::getSupportedSaveFileFormats)
//        .def("getMin", &RendererBase::getMin)
//        .def("getMax", &RendererBase::getMax)
//        .def("getVolume", &Display::GetVolume, return_value_policy<reference_existing_object>())     
//        .def("getSurfaceValue", &Display::getSurfaceValue)
//        .def("get3DCoordinates", &Display::get3DCoordinates)
        .def("setSurfaceValue", &Display::setSurfaceValue)       
        .def("setMaxSurfaceValue", &Display::setMaxSurfaceValue)     
        .def("setSampleInterval", &Display::setSampleInterval)
        .def("setDisplayRadius", &Display::setDisplayRadius)
        .def("setDisplayRadiusOrigin", &Display::setDisplayRadiusOrigin)     
//        .def("setCuttingPlane", &Display::setCuttingPlane)
        .def("setViewingType", &Display::setViewingType)
//        .def("cropVolume", &Display::CropVolume)
        .def("performBinarySkeletonizationJu2007", &Display::PerformBinarySkeletonizationJu2007, return_value_policy<reference_existing_object>())       
        .def("performGrayscaleSkeletonizationAbeysinghe2008", &Display::PerformGrayscaleSkeletonizationAbeysinghe2008, return_value_policy<reference_existing_object>())     
//        .def("performPreservingGrayscaleSkeletonizationAbeysinghe2008", &Display::PerformPreservingGrayscaleSkeletonizationAbeysinghe2008, return_value_policy<reference_existing_object>())     
        .def("useDisplayRadius", &Display::useDisplayRadius)
//        .def("performSmoothLaplacian", &Display::performSmoothLaplacian)     
//        .def("setObjectSpecificColoring", &Display::setObjectSpecificColoring)
//        .def("updateBoundingBox", &Display::updateBoundingBox)
//        .def("clearOtherHighlights", &Display::clearOtherHighlights)
    ;

  class_<NonManifoldMesh, bases<Volume> >("NonManifoldMesh", init<>())
  ;
  
  void (MeshRenderer::*load)(string fileName) = &MeshRenderer::load;
  
  class_< MeshRenderer, bases<Volume> >("MeshRenderer", init<>())
      .def("draw", &MeshRenderer::draw)
//      .def("drawBoundingBox", &MeshRenderer::DrawBoundingBox)
      .def("loadFile", load)
//      .def("loadVolume", &MeshRenderer::LoadVolume)
//      .def("saveFile", &MeshRenderer::SaveFile)
//      .def("unload", &MeshRenderer::Unload)
      .def("selectionRotate", &MeshRenderer::selectionRotate)
//      .def("selectionObjectCount", &MeshRenderer::selectionObjectCount)
      .def("selectionCenterOfMass", &MeshRenderer::selectionCenterOfMass)
      .def("selectionMove", &MeshRenderer::selectionMove)
//      .def("selectionClear", &MeshRenderer::selectionClear)       
//      .def("selectionToggle", &MeshRenderer::selectionToggle) 
//      .def("performSmoothLaplacian", &MeshRenderer::performSmoothLaplacian)
//      .def("getSupportedLoadFileFormats", &MeshRenderer::getSupportedLoadFileFormats)
//      .def("getSupportedSaveFileFormats", &MeshRenderer::getSupportedSaveFileFormats)
//      .def("getMin", &MeshRenderer::getMin)
//      .def("getMax", &MeshRenderer::getMax)
//      .def("getMin", &RendererBase::getMin)
//      .def("getMax", &RendererBase::getMax)
      .def("getMesh", &MeshRenderer::getMesh)
//      .def("get3DCoordinates", &MeshRenderer::get3DCoordinates)
//      .def("intersectMeshAndSphere", &MeshRenderer::intersectMeshAndSphere)
//      .def("getIntersectionPoint", &MeshRenderer::getIntersectionPoint)
      .def("setLineThickness", &MeshRenderer::setLineThickness)
//      .def("setSpacing", &MeshRenderer::setSpacing)
//      .def("getSpacingX", &MeshRenderer::getSpacingX)
//      .def("getSpacingY", &MeshRenderer::getSpacingY)
//      .def("getSpacingZ", &MeshRenderer::getSpacingZ)
//      .def("setOrigin", &MeshRenderer::setOrigin)
//      .def("getOriginX", &MeshRenderer::getOriginX)
//      .def("getOriginY", &MeshRenderer::getOriginY)
//      .def("getOriginZ", &MeshRenderer::getOriginZ)
//      .def("setDisplayStyle", &MeshRenderer::setDisplayStyle)
//      .def("setObjectSpecificColoring", &MeshRenderer::setObjectSpecificColoring)
//      .def("updateBoundingBox", &MeshRenderer::UpdateBoundingBox)
//      .def("setCuttingPlane", &RendererBase::setCuttingPlane)
  ;
  
//  class_< SSERenderer, bases<RendererBase> >("SSERenderer", init<>())
//      .def("draw", &SSERenderer::Draw)
//      .def("drawBoundingBox", &SSERenderer::DrawBoundingBox)
//      .def("loadHelixFile", &SSERenderer::LoadHelixFile)
//      .def("loadSheetFile", &SSERenderer::LoadSheetFile)
//      .def("saveHelixFile", &SSERenderer::SaveHelixFile)
//      .def("saveSheetFile", &SSERenderer::SaveSheetFile)
//      .def("loadGraphSSE", &SSERenderer::LoadGraphSSE)
//      .def("unloadGraphSSEs", &SSERenderer::UnloadGraphSSEs)
//      .def("unload", &SSERenderer::Unload)
//      .def("selectionRotate", &SSERenderer::SelectionRotate)
//      .def("selectionObjectCount", &SSERenderer::SelectionObjectCount)
//      .def("selectionCenterOfMass", &SSERenderer::SelectionCenterOfMass)
//      .def("selectionMove", &SSERenderer::SelectionMove)
//      .def("selectionClear", &SSERenderer::SelectionClear)        
//      .def("selectionToggle", &SSERenderer::SelectionToggle)  
//      .def("getSupportedHelixLoadFileFormats", &SSERenderer::GetSupportedHelixLoadFileFormats)
//      .def("getSupportedHelixSaveFileFormats", &SSERenderer::GetSupportedHelixSaveFileFormats)
//      .def("getSupportedSheetLoadFileFormats", &SSERenderer::GetSupportedSheetLoadFileFormats)
//      .def("getSupportedSheetSaveFileFormats", &SSERenderer::GetSupportedSheetSaveFileFormats)
//      .def("getMin", &SSERenderer::GetMin)
//      .def("getMax", &SSERenderer::GetMax)
//      .def("get3DCoordinates", &SSERenderer::Get3DCoordinates)
//      .def("setHelixColor", &SSERenderer::SetHelixColor)      
//      .def("setSheetColor", &SSERenderer::SetSheetColor)      
//      .def("setSSEColor", &SSERenderer::SetSSEColor)      
//      .def("setSpacing", &SSERenderer::SetSpacing)
//      .def("getSpacingX", &SSERenderer::GetSpacingX)
//      .def("getSpacingY", &SSERenderer::GetSpacingY)
//      .def("getSpacingZ", &SSERenderer::GetSpacingZ)
//      .def("setOrigin", &SSERenderer::SetOrigin)
//      .def("getOriginX", &SSERenderer::GetOriginX)
//      .def("getOriginY", &SSERenderer::GetOriginY)
//      .def("getOriginZ", &SSERenderer::GetOriginZ)
//      .def("fitSelectedSSEs", &SSERenderer::FitSelectedSSEs)      
//      .def("startNewSSE", &SSERenderer::StartNewSSE)
//      .def("addSSEPoint", &SSERenderer::AddSSEPoint)
//      .def("finalizeSheet", &SSERenderer::FinalizeSheet)
//      .def("finalizeHelix", &SSERenderer::FinalizeHelix)
//      .def("addHelix", &SSERenderer::AddHelix)
//      .def("setObjectSpecificColoring", &SSERenderer::SetObjectSpecificColoring)
//      .def("removeSelectedSSEs", &SSERenderer::RemoveSelectedSSEs)
//      .def("removeHelices", &SSERenderer::RemoveHelices)
//      .def("getHelixCount", &SSERenderer::GetHelixCount)
//      .def("getHelixCorner", &SSERenderer::GetHelixCorner)
//      .def("setDisplayStyle", &SSERenderer::SetDisplayStyle)
//      .def("updateBoundingBox", &SSERenderer::UpdateBoundingBox)
//      .def("getSelectedHelixIndices", &SSERenderer::GetSelectedHelixIndices)
//      .def("setSSEOrientationFlips", &SSERenderer::SetSSEOrientationFlips)
//      .def("setHelixCorrs", &SSERenderer::SetHelixCorrs)
//      .def("setSelectedPDBHelices", &SSERenderer::SetSelectedPDBHelices)
//      .def("clearOtherHighlights", &SSERenderer::ClearOtherHighlights)
//  ;
//
//
  class_< CAlpha>("CAlpha", init<>())
      .def("saveSSEHunterFile", &CAlpha::saveSSEHunterFile)
      .def("addAtom", &CAlpha::addAtom, return_value_policy<reference_existing_object>())
  ;
  
  enum_<RadialProfileType>("RadialProfileType")
      .value("gaussian", GAUSSIAN)
      .value("gaussianDip", GAUSSIAN_DIP)
      .value("polynomial", POLYNOMIAL)
      .export_values()
  ;
  
  class_<SSEHunter>("SSEHunter")
      .def("createPseudoAtoms", &SSEHunter::CreatePseudoAtoms)
      .def("getNumberOfPseudoAtoms", &SSEHunter::GetNumberOfPseudoAtoms)
      .def("getPseudoAtom", &SSEHunter::GetPseudoAtom, return_value_policy<reference_existing_object>())
      .def("setCorrelationScores", &SSEHunter::SetCorrelationScores)
      .def("setSkeletonScores", &SSEHunter::SetSkeletonScores)
//      .def("setGeometryScores", &SSEHunter::SetGeometryScores)
      .def("getAtomDistances", &SSEHunter::GetAtomDistances)
//      .def("getNeighborhoodVoxels", &SSEHunter::GetNeighborhoodVoxels)
      .def("getLocalDirectionalityScores", &SSEHunter::GetLocalDirectionalityScores)
  ;

  class_<PDBAtom>("PDBAtom", init<string, char, unsigned int, string>())
//        .def("getPDBId", &PDBAtom::GetPDBId)
        .def("getSerial", &PDBAtom::GetSerial)
//        .def("getName", &PDBAtom::GetName)
//        .def("getAltLoc", &PDBAtom::GetAltLoc)
//        .def("getResName", &PDBAtom::GetResName)
//        .def("getChainId", &PDBAtom::GetChainId)
//        .def("getResSeq", &PDBAtom::GetResSeq)
//        .def("getICode", &PDBAtom::GetICode)
        .def("getPosition", &PDBAtom::GetPosition)
//        .def("getOccupancy", &PDBAtom::GetOccupancy)
//        .def("getTempFactor", &PDBAtom::GetTempFactor)
//        .def("getElement", &PDBAtom::GetElement)
//        .def("getCharge", &PDBAtom::GetCharge)
//        .def("getAtomRadius", &PDBAtom::GetAtomRadius)
//        .def("getColorA", &PDBAtom::GetColorA)
//        .def("getColorR", &PDBAtom::GetColorR)
//        .def("getColorG", &PDBAtom::GetColorG)
//        .def("getColorB", &PDBAtom::GetColorB)
//        .def("getSelected", &PDBAtom::GetSelected)
        .def("getCorrelationScore", &PDBAtom::GetCorrelationScore)
        .def("getSkeletonScore", &PDBAtom::GetSkeletonScore)
        .def("getGeometryScore", &PDBAtom::GetGeometryScore)
//        .def("getHashKey", &PDBAtom::GetHashKey)
//        .def("getVisible", &PDBAtom::GetVisible)
//        .def("constructHashKey", &PDBAtom::ConstructHashKey)
//        .def("setSerial", &PDBAtom::SetSerial)
//        .def("setName", &PDBAtom::SetName)
//        .def("setAltLoc", &PDBAtom::SetAltLoc)
//        .def("setResName", &PDBAtom::SetResName)
//        .def("setChainId", &PDBAtom::SetChainId)
//        .def("setResSeq", &PDBAtom::SetResSeq)
//        .def("setICode", &PDBAtom::SetICode)
//        .def("setPosition", &PDBAtom::SetPosition)
//        .def("setOccupancy", &PDBAtom::SetOccupancy)
        .def("setTempFactor", &PDBAtom::SetTempFactor)
//        .def("setElement", &PDBAtom::SetElement)
//        .def("setCharge", &PDBAtom::SetCharge)
//        .def("setAtomRadius", &PDBAtom::SetAtomRadius)
//        .def("setColor", &PDBAtom::SetColor)
//        .def("setSelected", &PDBAtom::SetSelected)
//        .def("setVisible", &PDBAtom::SetVisible)
//        .def("setCorrelationScore", &PDBAtom::SetCorrelationScore)
//        .def("setSkeletonScore", &PDBAtom::SetSkeletonScore)
        .def("setGeometryScore", &PDBAtom::SetGeometryScore)
//        .def("transform", &PDBAtom::Transform)
//        .def("interpolateTransform", &PDBAtom::InterpolateTransform)
//        .def("getInterpolateTransformLocation", &PDBAtom::GetInterpolateTransformLocation)
//        .def("setPrevCAHash", &PDBAtom::SetPrevCAHash)
//        .def("setNextCAHash", &PDBAtom::SetNextCAHash)
    ;

//  bool (Vec3F::*X)() = &Vec3F::X;
//  float& (Vec3F::*X)() = &Vec3F::X;
//  const double & (Volume::*get)(int, int, int) const = &Volume::operator();
//  const float & (Vector3<float>::*X)() const = &Vector3<float>::X;
  const float & (Vector3<float>::*X)() const = &Vector3<float>::X;
  const float & (Vector3<float>::*Y)() const = &Vector3<float>::Y;
  const float & (Vector3<float>::*Z)() const = &Vector3<float>::Z;
//  void (Vector3<float>::*normalize)() = &Vector3<float>::normalize;
  Vector3<float> (Vector3<float>::*normalize)() = &Vector3<float>::normalize;
  
  const float & (Vector3<float>::*vecgetitem)(int) const = &Vector3<float>::operator[];
//        float & (Vector3<float>::*vecsetitem)(int)       = &Vector3<float>::operator[];

  class_<Vector3<float> >("Vec3F", init<float, float, float>())
        .def("x", X, return_value_policy<copy_const_reference>())
        .def("y", Y, return_value_policy<copy_const_reference>())
        .def("z", Z, return_value_policy<copy_const_reference>())
        .def("length", &Vector3<float>::length)
        .def("Transform", &Vector3<float>::transform)
        .def("rotate", &Vector3<float>::rotate)
        .def("normalize", normalize, return_value_policy<return_by_value>())
        .def("Print", &Vector3<float>::print)
        .def("__getitem__", vecgetitem, return_value_policy<copy_const_reference>())
        .def("__setitem__", &Vector3<float>::set)
//        .def("__getitem__", &Vector3<float>::operator[], boost::python::arg( "index" ),
//        boost::python::return_internal_reference<>() )
        .def(self * float())
        .def(self / float())
        .def(self + self)
        .def(self - self)
        .def(self ^ self)
        .def(self += self)
        .def(self -= self)
        //Vector3DTemplate<T> operator-();
        //Vector3DTemplate<T>& operator=(const Vector3DTemplate<T>& d);

    ;
  
  class_<SSEResult>("SSEResult", init<>())
//        .def("getNodeString", &SSEResult::GetNodeString)
        .def("getCost", &SSEResult::GetCost)
        .def("getNodeCount", &SSEResult::GetNodeCount)
        .def("getHelixCount", &SSEResult::GetHelixCount)
//        .def("getSheetCount", &SSEResult::GetSheetCount)
        .def("getSkeletonNode", &SSEResult::GetSkeletonNode)
        .def("nodeToHelix", &SSEResult::NodeToHelix)      
    ;

    class_<SecStruct>("SecStruct", init<>())
        .def("isHelix", &SecStruct::IsHelix)
        .def("isSheet", &SecStruct::IsSheet)
        .def("getSerialNumber", &SecStruct::GetSerialNumber)
        .def("getStartPosition", &SecStruct::GetStartPosition)
        .def("getEndPosition", &SecStruct::GetEndPosition)
        .def("getSecondaryStructureID", &SecStruct::getID)
    ;

    class_<Shape>("Shape", init<>())
        .def("isHelix", &Shape::IsHelix)
        .def("isSheet", &Shape::IsSheet)
        .def("getCornerCell2", &Shape::GetCornerCell2)
        .def("getCornerCell3", &Shape::GetCornerCell3)
    ;

    bool (SSEEngine::*SetConstant1)(string, string)   = &SSEEngine::SetConstant;
    bool (SSEEngine::*SetConstant2)(string, double)   = &SSEEngine::SetConstant;
    bool (SSEEngine::*SetConstant3)(string, int)      = &SSEEngine::SetConstant;
    bool (SSEEngine::*SetConstant4)(string, bool)     = &SSEEngine::SetConstant;

    class_<SSEEngine>("SSEEngine", init<>())
        .def("setConstant", SetConstant1)
        .def("setConstant", SetConstant2)
        .def("setConstantInt", SetConstant3)
        .def("setConstantBool", SetConstant4)
        .def("getConstantString", &SSEEngine::GetConstantString)
        .def("getConstantDouble", &SSEEngine::GetConstantDouble)
        .def("getConstantInt", &SSEEngine::GetConstantInt)
        .def("getConstantBool", &SSEEngine::GetConstantBool)
        .def("clearAllConstraints", &SSEEngine::ClearAllConstraints)          
//        .def("setHelixConstraint", &SSEEngine::SetHelixConstraint)            
//        .def("getHelixConstraintFwd", &SSEEngine::GetHelixConstraintFwd)          
//        .def("getHelixConstraintRev", &SSEEngine::GetHelixConstraintRev)          
//        .def("getHelixConstraintUnk", &SSEEngine::GetHelixConstraintUnk)
//        .def("getStrandConstraint", &SSEEngine::GetStrandConstraint)          
//        .def("setNodeConstraint", &SSEEngine::SetNodeConstraint)          
//        .def("setSSEColor", &SSEEngine::SetSSEColor)          
//        .def("setConstantsFromFile", &SSEEngine::SetConstantsFromFile)        
        .def("saveCorrespondenceToFile", &SSEEngine::save)
        .def("loadSkeletonGraph", &SSEEngine::loadSkeleton)
        .def("loadSequenceGraph", &SSEEngine::loadSequence)
//        .def("loadCorrespondenceFromFile", &SSEEngine::load)
        .def("executeQuery", &SSEEngine::ExecuteQuery)
        .def("cleanupMemory", &SSEEngine::CleanupMemory)
        .def("getResult", &SSEEngine::GetResult)
//        .def("getResultCount", &SSEEngine::GetResultCount)
//        .def("getSupportedLoadFileFormats", &SSEEngine::getSupportedLoadFileFormats)
//        .def("getSupportedSaveFileFormats", &SSEEngine::getSupportedSaveFileFormats)
        .def("getSkeletonSSE", &SSEEngine::GetSkeletonSSE, return_value_policy<reference_existing_object>())
//        .def("getSequenceSSE", &SSEEngine::GetSequenceSSE, return_value_policy<reference_existing_object>())
        .def("getSkeletonSSECount", &SSEEngine::GetSkeletonSSECount)
//        .def("getSequenceSSECount", &SSEEngine::GetSequenceSSECount)
//        .def("setVisibleCorrespondence", &SSEEngine::SetVisibleCorrespondence)
//        .def("draw", &SSEEngine::Draw)
//        .def("drawAllPaths", &SSEEngine::DrawAllPaths)
//        .def("initializePathFinder", &SSEEngine::InitializePathFinder)
//        .def("initializePathHelix", &SSEEngine::InitializePathHelix)
//        .def("getPathSpace", &SSEEngine::GetPathSpace)
//        .def("clearPathSpace", &SSEEngine::ClearPathSpace)
//        .def("getPathVertexCount", &SSEEngine::GetPathVertexCount)
//        .def("getPathVertex", &SSEEngine::GetPathVertex)
//        .def("getPathEdgeCount", &SSEEngine::GetPathEdgeCount)
//        .def("getEdgeVertexIndex", &SSEEngine::GetEdgeVertexIndex)
//        .def("clearPathFinder", &SSEEngine::ClearPathFinder)
    ;

    class_<SEQFileData>("SeqFileData", init<>())
        .def("getStartResNo", &SEQFileData::GetStartResNo)
        .def("getSequenceString", &SEQFileData::GetSequenceString)
        .def("getStructureString", &SEQFileData::GetStructureString)
        .def("getNumberOfStructures", &SEQFileData::GetNumberOfStructures)
        .def("getStructure", &SEQFileData::GetStructure, return_value_policy<reference_existing_object>())
    ;
    
    class_<SEQReader>("SeqReader", init<>())
        .def("loadFile", &SEQReader::ReadSeqFileData)
        .staticmethod("loadFile")
    ;

//    class_<FlexibleFittingEngine>("FlexibleFittingEngine")
//        .def("startPDBHelix", &FlexibleFittingEngine::StartPDBHelix)
//        .def("addPDBAtomLocation", &FlexibleFittingEngine::AddPDBAtomLocation)
//        .def("endPDBHelix", &FlexibleFittingEngine::EndPDBHelix)
//        .def("addSSEHelix", &FlexibleFittingEngine::AddSSEHelix)        
//        .def("startSearch", &FlexibleFittingEngine::StartSearch)        
//        .def("getRigidTransform", &FlexibleFittingEngine::GetRigidTransform)        
//        .def("getHelixFlexibleTransform", &FlexibleFittingEngine::GetHelixFlexibleTransform)        
//        .def("getCorrespondenceCount", &FlexibleFittingEngine::GetCorrespondenceCount)      
//        .def("getClusterCount", &FlexibleFittingEngine::GetClusterCount)        
//        .def("getHelixCount", &FlexibleFittingEngine::GetHelixCount)        
//        .def("getCorrespondenceNode", &FlexibleFittingEngine::GetCorrespondenceNode)
//        .def("resetEngine", &FlexibleFittingEngine::ResetEngine)
//        .def("Deform", &FlexibleFittingEngine::Deform)
//        .def("addAtomLocation", &FlexibleFittingEngine::addAtomLocation)
//        .def("addHardHandleLocation", &FlexibleFittingEngine::addHardHandleLocation)
//        .def("addSoftHandleLocation", &FlexibleFittingEngine::addSoftHandleLocation)
//        .def("returnFlattenedLocations", &FlexibleFittingEngine::returnFlattenedLocations)
//        .def("prepareDeform", &FlexibleFittingEngine::prepareDeform)
//        .def("setLaplacainW", &FlexibleFittingEngine::setLaplacainW)
//        .def("setHardHandleW", &FlexibleFittingEngine::setHardHandleW)
//        .def("setSoftHandleW", &FlexibleFittingEngine::setSoftHandleW)
//        .def("addCorrespondence", &FlexibleFittingEngine::AddCorrespondence)
//        .def("getCorrespondenceFlips", &FlexibleFittingEngine::GetCorrespondenceFlips)
//        .def("getAllCorrespondencesFlat", &FlexibleFittingEngine::GetAllCorrespondencesFlat)
//        .def("flipCorrespondencePair", &FlexibleFittingEngine::FlipCorrespondencePair)
//        .def("saveCorrs", &FlexibleFittingEngine::SaveCorrs)
//        .def("loadSavedCorrs", &FlexibleFittingEngine::LoadSavedCorrs)
//        .def("getRigidTransform2", &FlexibleFittingEngine::GetRigidTransform2)
//        .def("mergeClusters", &FlexibleFittingEngine::MergeClusters)
//        .def("getAllCAlphaFeatureVecsFlat", &FlexibleFittingEngine::GetAllCAlphaFeatureVecsFlat)    
//        .def("getIsForward", &FlexibleFittingEngine::GetIsForward)  
//        .def("getPairRigidTransform", &FlexibleFittingEngine::GetPairRigidTransform)
//        .def("getSideChainTransform", &FlexibleFittingEngine::GetSideChainTransform)
//    ;
//
//
//
//
//    class_<SSECorrespondenceNode>("SSECorrespondenceNode")
//        .def("getPIndex", &SSECorrespondenceNode::GetPIndex)
//        .def("getQIndex", &SSECorrespondenceNode::GetQIndex)
//        .def("isForward", &SSECorrespondenceNode::IsForward)
//    ;

    class_<PDBBond>("PDBBond", init<>())
        .def("getAtom0Ix", &PDBBond::GetAtom0Ix)
        .def("getAtom1Ix", &PDBBond::GetAtom1Ix)
        .def("getSelected", &PDBBond::GetSelected)
        .def("setAtom0Ix", &PDBBond::SetAtom0Ix)
        .def("setAtom1Ix", &PDBBond::SetAtom1Ix)
        .def("setSelected", &PDBBond::SetSelected)
    ;

    class_<Range>("Range", init<>())
        .def("getMin", &Range::getMin)
        .def("getMax", &Range::getMax)
        .def("setMin", &Range::setMin)
        .def("setMax", &Range::setMax)
    ;

}
