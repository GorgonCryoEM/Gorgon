#include <boost/python.hpp>

#include "VolumeRenderer.h"

using namespace Visualization;

using namespace boost::python;

BOOST_PYTHON_MODULE(@current_pylib@)
{
  class_<Volume>("Volume", init<int,int,int>())
//      .def("getOriginX", &Volume::getOriginX)
//      .def("getOriginY", &Volume::getOriginY)
//      .def("getOriginZ", &Volume::getOriginZ)
      .def("getSizeX", &Volume::getSizeX)
      .def("getSizeY", &Volume::getSizeY)
      .def("getSizeZ", &Volume::getSizeZ)
      .def("getSize", &Volume::getSize)
      .def("getSize", &Volume::cmp)
//      .def("getSpacingX", &Volume::getSpacingX)
//      .def("getSpacingY", &Volume::getSpacingY)
//      .def("getSpacingZ", &Volume::getSpacingZ)
//      .def("getMin", &Volume::getMin)
//      .def("getMax", &Volume::getMax)
//      .def("getDataAt", getDataAt1)
//      .def("buildHistogram", &Volume::buildHistogram)
//      .def("getHistogramBinValue", &Volume::getHistogramBinValue)
//
  ;
  
  
  class_< VolumeRenderer, bases<Volume> >("VolumeRenderer", init<>())       
      .def("normalizeVolume", &VolumeRenderer::normalizeVolume)
//        .def("downsampleVolume", &VolumeRenderer::DownsampleVolume)
//        .def("cropVolume", &VolumeRenderer::CropVolume)
      .def("performBinarySkeletonizationJu2007", &VolumeRenderer::PerformBinarySkeletonizationJu2007, return_value_policy<reference_existing_object>())
      .def("performGrayscaleSkeletonizationAbeysinghe2008", &VolumeRenderer::PerformGrayscaleSkeletonizationAbeysinghe2008, return_value_policy<reference_existing_object>())     
//        .def("performPreservingGrayscaleSkeletonizationAbeysinghe2008", &VolumeRenderer::PerformPreservingGrayscaleSkeletonizationAbeysinghe2008, return_value_policy<reference_existing_object>())     
      .def("getMinDensity", &VolumeRenderer::getMinDensity)
      .def("getMaxDensity", &VolumeRenderer::getMaxDensity)
      .def("setVolume", &VolumeRenderer::setVolume)
//      .def("saveFile", &VolumeRenderer::SaveFile)
      .def("loadFile", &VolumeRenderer::loadFile)
      .def("saveFile", &VolumeRenderer::saveFile)

  ;

}
